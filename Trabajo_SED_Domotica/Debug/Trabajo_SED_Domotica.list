
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007064  08007064  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800706c  0800706c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000258  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137ad  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ef  00000000  00000000  0003385d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001138  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d14  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001420f  00000000  00000000  0005ab44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daa0b  00000000  00000000  0006ed53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014975e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fc4  00000000  00000000  001497b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ac4 	.word	0x08006ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006ac4 	.word	0x08006ac4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <setLuces>:
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;
int umbral_luces=50;
uint32_t media_ldr=0;

void setLuces(int n){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(n==0){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d110      	bne.n	80005c8 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <setLuces+0x8c>)
 80005ae:	f003 fa39 	bl	8003a24 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <setLuces+0x90>)
 80005b8:	f003 fa34 	bl	8003a24 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4819      	ldr	r0, [pc, #100]	; (8000628 <setLuces+0x90>)
 80005c2:	f003 fa2f 	bl	8003a24 <HAL_GPIO_WritePin>
 80005c6:	e023      	b.n	8000610 <setLuces+0x78>
	}else if(n==1){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d110      	bne.n	80005f0 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <setLuces+0x8c>)
 80005d6:	f003 fa25 	bl	8003a24 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <setLuces+0x90>)
 80005e0:	f003 fa20 	bl	8003a24 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <setLuces+0x90>)
 80005ea:	f003 fa1b 	bl	8003a24 <HAL_GPIO_WritePin>
 80005ee:	e00f      	b.n	8000610 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <setLuces+0x8c>)
 80005f8:	f003 fa14 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <setLuces+0x90>)
 8000602:	f003 fa0f 	bl	8003a24 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <setLuces+0x90>)
 800060c:	f003 fa0a 	bl	8003a24 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <setLuces+0x94>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
	actualizar_pantalla(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 faa4 	bl	8001b64 <actualizar_pantalla>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40020000 	.word	0x40020000
 800062c:	2000009c 	.word	0x2000009c

08000630 <getEstadoLuces>:

int getEstadoLuces(){
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	return estado_luces;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <getEstadoLuces+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c

08000648 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <cambiarEstadoLuces+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff9f 	bl	8000598 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 800065a:	e00e      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <cambiarEstadoLuces+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d103      	bne.n	800066c <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff97 	bl	8000598 <setLuces>
}
 800066a:	e006      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <cambiarEstadoLuces+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d102      	bne.n	800067a <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff8f 	bl	8000598 <setLuces>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c

08000684 <getMediaLDR>:

void setUmbralLuces(int u){
	umbral_luces=u;
}
int getMediaLDR(){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	return media_ldr;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <getMediaLDR+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000a8 	.word	0x200000a8

0800069c <medirLDR>:
void medirLDR(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>1000){
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <medirLDR+0xd4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d155      	bne.n	8000756 <medirLDR+0xba>
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <medirLDR+0xd8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b2:	d950      	bls.n	8000756 <medirLDR+0xba>
		counter_luces=0;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <medirLDR+0xd8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		media_ldr=0;
 80006ba:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <medirLDR+0xdc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
		tickstart_luces=HAL_GetTick();
 80006c0:	f002 fa4c 	bl	8002b5c <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <medirLDR+0xe0>)
 80006c8:	6013      	str	r3, [r2, #0]
		int i=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
		for(i=0;i<5;i++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e021      	b.n	8000718 <medirLDR+0x7c>
			HAL_ADC_Start(&hadc1);
 80006d4:	482a      	ldr	r0, [pc, #168]	; (8000780 <medirLDR+0xe4>)
 80006d6:	f002 fa91 	bl	8002bfc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80006da:	2164      	movs	r1, #100	; 0x64
 80006dc:	4828      	ldr	r0, [pc, #160]	; (8000780 <medirLDR+0xe4>)
 80006de:	f002 fb92 	bl	8002e06 <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 80006e2:	4827      	ldr	r0, [pc, #156]	; (8000780 <medirLDR+0xe4>)
 80006e4:	f002 fc1a 	bl	8002f1c <HAL_ADC_GetValue>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b259      	sxtb	r1, r3
 80006ec:	4a25      	ldr	r2, [pc, #148]	; (8000784 <medirLDR+0xe8>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	460a      	mov	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80006f6:	4822      	ldr	r0, [pc, #136]	; (8000780 <medirLDR+0xe4>)
 80006f8:	f002 fb52 	bl	8002da0 <HAL_ADC_Stop>
			media_ldr+=adcval[i];
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <medirLDR+0xe8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	f993 3000 	ldrsb.w	r3, [r3]
 8000706:	461a      	mov	r2, r3
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <medirLDR+0xdc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4413      	add	r3, r2
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <medirLDR+0xdc>)
 8000710:	6013      	str	r3, [r2, #0]
		for(i=0;i<5;i++){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b04      	cmp	r3, #4
 800071c:	ddda      	ble.n	80006d4 <medirLDR+0x38>
		}
		media_ldr=media_ldr/5;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <medirLDR+0xdc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <medirLDR+0xec>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <medirLDR+0xdc>)
 800072c:	6013      	str	r3, [r2, #0]
			if(media_ldr>umbral_luces){
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <medirLDR+0xdc>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <medirLDR+0xf0>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	4293      	cmp	r3, r2
 8000738:	d906      	bls.n	8000748 <medirLDR+0xac>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <medirLDR+0xf4>)
 8000742:	f003 f96f 	bl	8003a24 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>1000){
 8000746:	e00f      	b.n	8000768 <medirLDR+0xcc>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074e:	4810      	ldr	r0, [pc, #64]	; (8000790 <medirLDR+0xf4>)
 8000750:	f003 f968 	bl	8003a24 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>1000){
 8000754:	e008      	b.n	8000768 <medirLDR+0xcc>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 8000756:	f002 fa01 	bl	8002b5c <HAL_GetTick>
 800075a:	4602      	mov	r2, r0
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <medirLDR+0xe0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <medirLDR+0xd8>)
 8000764:	6013      	str	r3, [r2, #0]
	}
}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000009c 	.word	0x2000009c
 8000774:	200000a0 	.word	0x200000a0
 8000778:	200000a8 	.word	0x200000a8
 800077c:	200000a4 	.word	0x200000a4
 8000780:	20000190 	.word	0x20000190
 8000784:	200002b4 	.word	0x200002b4
 8000788:	cccccccd 	.word	0xcccccccd
 800078c:	20000000 	.word	0x20000000
 8000790:	40020c00 	.word	0x40020c00

08000794 <luces>:

void luces(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	medirLDR();
 8000798:	f7ff ff80 	bl	800069c <medirLDR>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <setEstadoPersianas+0x88>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <setEstadoPersianas+0x8c>)
 80007ae:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <setEstadoPersianas+0x88>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <setEstadoPersianas+0x88>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10c      	bne.n	80007d8 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <setEstadoPersianas+0x90>)
 80007c6:	f003 f92d 	bl	8003a24 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	4817      	ldr	r0, [pc, #92]	; (8000830 <setEstadoPersianas+0x90>)
 80007d2:	f003 f927 	bl	8003a24 <HAL_GPIO_WritePin>
 80007d6:	e020      	b.n	800081a <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <setEstadoPersianas+0x88>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10c      	bne.n	80007fa <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <setEstadoPersianas+0x90>)
 80007e8:	f003 f91c 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <setEstadoPersianas+0x90>)
 80007f4:	f003 f916 	bl	8003a24 <HAL_GPIO_WritePin>
 80007f8:	e00f      	b.n	800081a <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <setEstadoPersianas+0x88>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d10b      	bne.n	800081a <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <setEstadoPersianas+0x90>)
 800080a:	f003 f90b 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <setEstadoPersianas+0x90>)
 8000816:	f003 f905 	bl	8003a24 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(4);
 800081a:	2004      	movs	r0, #4
 800081c:	f001 f9a2 	bl	8001b64 <actualizar_pantalla>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000ac 	.word	0x200000ac
 800082c:	200000b0 	.word	0x200000b0
 8000830:	40020c00 	.word	0x40020c00

08000834 <getEstadoPersianas>:

int getEstadoPersianas(){
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	return estado_persianas;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <getEstadoPersianas+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200000ac 	.word	0x200000ac

0800084c <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <getEstadoAnteriorPersianas+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200000b0 	.word	0x200000b0

08000864 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 8000868:	f7ff ffe4 	bl	8000834 <getEstadoPersianas>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d108      	bne.n	8000884 <cambiarEstadoPersianas+0x20>
 8000872:	f7ff ffeb 	bl	800084c <getEstadoAnteriorPersianas>
 8000876:	4603      	mov	r3, r0
 8000878:	2b02      	cmp	r3, #2
 800087a:	d103      	bne.n	8000884 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff8f 	bl	80007a0 <setEstadoPersianas>
 8000882:	e02d      	b.n	80008e0 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8000884:	f7ff ffd6 	bl	8000834 <getEstadoPersianas>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <cambiarEstadoPersianas+0x3c>
 800088e:	f7ff ffdd 	bl	800084c <getEstadoAnteriorPersianas>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d103      	bne.n	80008a0 <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff ff81 	bl	80007a0 <setEstadoPersianas>
 800089e:	e01f      	b.n	80008e0 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 80008a0:	f7ff ffc8 	bl	8000834 <getEstadoPersianas>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d108      	bne.n	80008bc <cambiarEstadoPersianas+0x58>
 80008aa:	f7ff ffcf 	bl	800084c <getEstadoAnteriorPersianas>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff ff73 	bl	80007a0 <setEstadoPersianas>
 80008ba:	e011      	b.n	80008e0 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 80008bc:	f7ff ffba 	bl	8000834 <getEstadoPersianas>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d103      	bne.n	80008ce <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ff6a 	bl	80007a0 <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 80008cc:	e008      	b.n	80008e0 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 80008ce:	f7ff ffb1 	bl	8000834 <getEstadoPersianas>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d103      	bne.n	80008e0 <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff61 	bl	80007a0 <setEstadoPersianas>
}
 80008de:	e7ff      	b.n	80008e0 <cambiarEstadoPersianas+0x7c>
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <setEstadoRiego+0x94>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <setEstadoRiego+0x98>)
 80008f2:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <setEstadoRiego+0x94>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 80008fa:	f002 f92f 	bl	8002b5c <HAL_GetTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <setEstadoRiego+0x9c>)
 8000902:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <setEstadoRiego+0x94>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10c      	bne.n	8000926 <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	481c      	ldr	r0, [pc, #112]	; (8000984 <setEstadoRiego+0xa0>)
 8000914:	f003 f886 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <setEstadoRiego+0xa0>)
 8000920:	f003 f880 	bl	8003a24 <HAL_GPIO_WritePin>
 8000924:	e020      	b.n	8000968 <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <setEstadoRiego+0x94>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d10c      	bne.n	8000948 <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <setEstadoRiego+0xa0>)
 8000936:	f003 f875 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <setEstadoRiego+0xa0>)
 8000942:	f003 f86f 	bl	8003a24 <HAL_GPIO_WritePin>
 8000946:	e00f      	b.n	8000968 <setEstadoRiego+0x84>
	}
	else if(estado_riego==2){
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <setEstadoRiego+0x94>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d10b      	bne.n	8000968 <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <setEstadoRiego+0xa0>)
 8000958:	f003 f864 	bl	8003a24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <setEstadoRiego+0xa0>)
 8000964:	f003 f85e 	bl	8003a24 <HAL_GPIO_WritePin>
		}
	actualizar_pantalla(2);
 8000968:	2002      	movs	r0, #2
 800096a:	f001 f8fb 	bl	8001b64 <actualizar_pantalla>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000004 	.word	0x20000004
 800097c:	20000008 	.word	0x20000008
 8000980:	200000fc 	.word	0x200000fc
 8000984:	40020c00 	.word	0x40020c00

08000988 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <cambiarEstadoRiego+0x30>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff ffa5 	bl	80008e4 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 800099a:	e00a      	b.n	80009b2 <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <cambiarEstadoRiego+0x30>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d103      	bne.n	80009ac <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ff9d 	bl	80008e4 <setEstadoRiego>
}
 80009aa:	e002      	b.n	80009b2 <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff99 	bl	80008e4 <setEstadoRiego>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <getEstadoAnteriorRiego>:
int getEstadoAnteriorRiego(){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	return estado_anterior_riego;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <getEstadoAnteriorRiego+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <temporizador_riego>:
void temporizador_riego(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <temporizador_riego+0x30>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <temporizador_riego+0x14>
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <temporizador_riego+0x30>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 80009e8:	f002 f8b8 	bl	8002b5c <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <temporizador_riego+0x34>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f8:	d902      	bls.n	8000a00 <temporizador_riego+0x2c>
			setEstadoRiego(2);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff ff72 	bl	80008e4 <setEstadoRiego>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000004 	.word	0x20000004
 8000a08:	200000fc 	.word	0x200000fc

08000a0c <riego>:
void riego(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	temporizador_riego();
 8000a10:	f7ff ffe0 	bl	80009d4 <temporizador_riego>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <setEstadoSeguridad>:
int estado_seguridad = 0; //0 sistema apagado, 1 sistema encendiendose, 2 sistema_ activo
int alarma_seguridad = 0; //0 alarma apagada, 1 alarma encendida

uint32_t tickstart_seguridad = 0, counter_seguridad = 0;

void setEstadoSeguridad(int n) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	estado_seguridad = n;
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <setEstadoSeguridad+0x70>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
	if (estado_seguridad == 0) {
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <setEstadoSeguridad+0x70>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10e      	bne.n	8000a4c <setEstadoSeguridad+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <setEstadoSeguridad+0x74>)
 8000a34:	f002 fff6 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <setEstadoSeguridad+0x74>)
 8000a40:	f002 fff0 	bl	8003a24 <HAL_GPIO_WritePin>
		alarma_seguridad = 0;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <setEstadoSeguridad+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e015      	b.n	8000a78 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 1) {
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <setEstadoSeguridad+0x70>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <setEstadoSeguridad+0x4e>
		alarma_seguridad = 0;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <setEstadoSeguridad+0x78>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		tickstart_seguridad = HAL_GetTick();
 8000a5a:	f002 f87f 	bl	8002b5c <HAL_GetTick>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <setEstadoSeguridad+0x7c>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e008      	b.n	8000a78 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 2) {
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <setEstadoSeguridad+0x70>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d104      	bne.n	8000a78 <setEstadoSeguridad+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <setEstadoSeguridad+0x74>)
 8000a74:	f002 ffd6 	bl	8003a24 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(3);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f001 f873 	bl	8001b64 <actualizar_pantalla>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	200000b8 	.word	0x200000b8
 8000a94:	200000bc 	.word	0x200000bc

08000a98 <activar_sensor>:

void activar_sensor() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

	if (estado_seguridad == 1) {
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <activar_sensor+0x78>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d133      	bne.n	8000b0c <activar_sensor+0x74>
		counter_seguridad = HAL_GetTick() - tickstart_seguridad;
 8000aa4:	f002 f85a 	bl	8002b5c <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <activar_sensor+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <activar_sensor+0x80>)
 8000ab2:	6013      	str	r3, [r2, #0]
		if ((counter_seguridad > 0) && (counter_seguridad < 500)) {
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <activar_sensor+0x80>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00a      	beq.n	8000ad2 <activar_sensor+0x3a>
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <activar_sensor+0x80>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ac4:	d205      	bcs.n	8000ad2 <activar_sensor+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <activar_sensor+0x84>)
 8000acc:	f002 ffaa 	bl	8003a24 <HAL_GPIO_WritePin>
 8000ad0:	e01c      	b.n	8000b0c <activar_sensor+0x74>
		}else if ((counter_seguridad > 500) && (counter_seguridad < 1000)) {
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <activar_sensor+0x80>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ada:	d90a      	bls.n	8000af2 <activar_sensor+0x5a>
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <activar_sensor+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ae4:	d205      	bcs.n	8000af2 <activar_sensor+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <activar_sensor+0x84>)
 8000aec:	f002 ff9a 	bl	8003a24 <HAL_GPIO_WritePin>
 8000af0:	e00c      	b.n	8000b0c <activar_sensor+0x74>
		} else if (counter_seguridad > 5000) {
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <activar_sensor+0x80>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d906      	bls.n	8000b0c <activar_sensor+0x74>
			counter_seguridad = 0;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <activar_sensor+0x80>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff ff87 	bl	8000a18 <setEstadoSeguridad>
		}

	}
}
 8000b0a:	e7ff      	b.n	8000b0c <activar_sensor+0x74>
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000b4 	.word	0x200000b4
 8000b14:	200000bc 	.word	0x200000bc
 8000b18:	200000c0 	.word	0x200000c0
 8000b1c:	40020000 	.word	0x40020000

08000b20 <getEstadoSeguridad>:

int getEstadoSeguridad() {
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <getEstadoSeguridad+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000b4 	.word	0x200000b4

08000b38 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	if (getEstadoSeguridad() == 0) {
 8000b3c:	f7ff fff0 	bl	8000b20 <getEstadoSeguridad>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff ff66 	bl	8000a18 <setEstadoSeguridad>
	} else {
		setEstadoSeguridad(0);
	}
}
 8000b4c:	e002      	b.n	8000b54 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff ff62 	bl	8000a18 <setEstadoSeguridad>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <intruso_detectado>:

void intruso_detectado() {
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	if (estado_seguridad == 2) {
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <intruso_detectado+0x1c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d102      	bne.n	8000b6a <intruso_detectado+0x12>
		alarma_seguridad = 1;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <intruso_detectado+0x20>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	200000b4 	.word	0x200000b4
 8000b78:	200000b8 	.word	0x200000b8

08000b7c <sonar_alarma>:

void sonar_alarma() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

	if(estado_seguridad == 2 && alarma_seguridad == 1){
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <sonar_alarma+0x24>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d109      	bne.n	8000b9c <sonar_alarma+0x20>
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <sonar_alarma+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <sonar_alarma+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <sonar_alarma+0x2c>)
 8000b98:	f002 ff44 	bl	8003a24 <HAL_GPIO_WritePin>
		}
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	200000b8 	.word	0x200000b8
 8000ba8:	40020000 	.word	0x40020000

08000bac <seguridad>:

void seguridad() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	activar_sensor();
 8000bb0:	f7ff ff72 	bl	8000a98 <activar_sensor>
	sonar_alarma();
 8000bb4:	f7ff ffe2 	bl	8000b7c <sonar_alarma>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <setEstadoClima>:
int temperatura_objetivo=20;
int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0, counter_clima=0;

void setEstadoClima(int n){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <setEstadoClima+0x80>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <setEstadoClima+0x80>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	4819      	ldr	r0, [pc, #100]	; (8000c40 <setEstadoClima+0x84>)
 8000bda:	f002 ff23 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	4816      	ldr	r0, [pc, #88]	; (8000c40 <setEstadoClima+0x84>)
 8000be6:	f002 ff1d 	bl	8003a24 <HAL_GPIO_WritePin>
 8000bea:	e020      	b.n	8000c2e <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <setEstadoClima+0x80>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10c      	bne.n	8000c0e <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <setEstadoClima+0x84>)
 8000bfc:	f002 ff12 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <setEstadoClima+0x84>)
 8000c08:	f002 ff0c 	bl	8003a24 <HAL_GPIO_WritePin>
 8000c0c:	e00f      	b.n	8000c2e <setEstadoClima+0x72>
	}else if(estado_clima==2){
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <setEstadoClima+0x80>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d10b      	bne.n	8000c2e <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <setEstadoClima+0x84>)
 8000c1e:	f002 ff01 	bl	8003a24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <setEstadoClima+0x84>)
 8000c2a:	f002 fefb 	bl	8003a24 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(5);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 ff98 	bl	8001b64 <actualizar_pantalla>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000f8 	.word	0x200000f8
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <getEstadoClima>:

int getEstadoClima(){
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return estado_clima;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <getEstadoClima+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200000f8 	.word	0x200000f8

08000c5c <cambiarEstadoClima>:

void cambiarEstadoClima(){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	controldelclima=0;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <cambiarEstadoClima+0x3c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <cambiarEstadoClima+0x40>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff ffa4 	bl	8000bbc <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 8000c74:	e00e      	b.n	8000c94 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <cambiarEstadoClima+0x40>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d103      	bne.n	8000c86 <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff ff9c 	bl	8000bbc <setEstadoClima>
}
 8000c84:	e006      	b.n	8000c94 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <cambiarEstadoClima+0x40>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d102      	bne.n	8000c94 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ff94 	bl	8000bbc <setEstadoClima>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000d0 	.word	0x200000d0
 8000c9c:	200000f8 	.word	0x200000f8

08000ca0 <setControlClima>:

void setControlClima(int c){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	controldelclima=c;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <setControlClima+0x24>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
	if(c==0){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <setControlClima+0x1a>
		setEstadoClima(0);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff81 	bl	8000bbc <setEstadoClima>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000d0 	.word	0x200000d0

08000cc8 <getControlClima>:

int getControlClima(){
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	return controldelclima;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <getControlClima+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000d0 	.word	0x200000d0

08000ce0 <cambiarControlClima>:

void cambiarControlClima(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <cambiarControlClima+0x2c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d103      	bne.n	8000cf4 <cambiarControlClima+0x14>
		controldelclima=1;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <cambiarControlClima+0x2c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e005      	b.n	8000d00 <cambiarControlClima+0x20>
	}else{
		controldelclima=0;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <cambiarControlClima+0x2c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		setEstadoClima(0);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff5e 	bl	8000bbc <setEstadoClima>
	}
	actualizar_pantalla(5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f000 ff2f 	bl	8001b64 <actualizar_pantalla>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000d0 	.word	0x200000d0

08000d10 <delay>:

int getTemperaturaObjetivo(){
	return temperatura_objetivo;
}

void delay(uint16_t time) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <delay+0x30>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 8000d22:	bf00      	nop
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <delay+0x30>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3f9      	bcc.n	8000d24 <delay+0x14>
		;
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200001dc 	.word	0x200001dc

08000d44 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f002 fca2 	bl	80036bc <HAL_GPIO_Init>
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f002 fc84 	bl	80036bc <HAL_GPIO_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <DHT11_Start+0x3c>)
 8000dc4:	f7ff ffbe 	bl	8000d44 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <DHT11_Start+0x3c>)
 8000dce:	f002 fe29 	bl	8003a24 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000dd2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000dd6:	f7ff ff9b 	bl	8000d10 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <DHT11_Start+0x3c>)
 8000de0:	f002 fe20 	bl	8003a24 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000de4:	2014      	movs	r0, #20
 8000de6:	f7ff ff93 	bl	8000d10 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000dea:	2104      	movs	r1, #4
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <DHT11_Start+0x3c>)
 8000dee:	f7ff ffc7 	bl	8000d80 <Set_Pin_Input>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020000 	.word	0x40020000

08000dfc <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000e06:	2028      	movs	r0, #40	; 0x28
 8000e08:	f7ff ff82 	bl	8000d10 <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <DHT11_Check_Response+0x58>)
 8000e10:	f002 fdf0 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10e      	bne.n	8000e38 <DHT11_Check_Response+0x3c>
		delay(80);
 8000e1a:	2050      	movs	r0, #80	; 0x50
 8000e1c:	f7ff ff78 	bl	8000d10 <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e20:	2104      	movs	r1, #4
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <DHT11_Check_Response+0x58>)
 8000e24:	f002 fde6 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <DHT11_Check_Response+0x38>
			Response = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e001      	b.n	8000e38 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8000e34:	23ff      	movs	r3, #255	; 0xff
 8000e36:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e38:	bf00      	nop
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <DHT11_Check_Response+0x58>)
 8000e3e:	f002 fdd9 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f8      	bne.n	8000e3a <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020000 	.word	0x40020000

08000e58 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	e037      	b.n	8000ed4 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e64:	bf00      	nop
 8000e66:	2104      	movs	r1, #4
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <DHT11_Read+0x8c>)
 8000e6a:	f002 fdc3 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f8      	beq.n	8000e66 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f7ff ff4b 	bl	8000d10 <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <DHT11_Read+0x8c>)
 8000e7e:	f002 fdb9 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10e      	bne.n	8000ea6 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	e00b      	b.n	8000ebe <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	f1c3 0307 	rsb	r3, r3, #7
 8000eac:	2201      	movs	r2, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	b25a      	sxtb	r2, r3
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000ebe:	bf00      	nop
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <DHT11_Read+0x8c>)
 8000ec4:	f002 fd96 	bl	80039f4 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f8      	bne.n	8000ec0 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	71bb      	strb	r3, [r7, #6]
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	d9c4      	bls.n	8000e64 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <lectura_dht11>:

void lectura_dht11() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000eec:	f7ff ff66 	bl	8000dbc <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000ef0:	f7ff ff84 	bl	8000dfc <DHT11_Check_Response>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <lectura_dht11+0x8c>)
 8000efa:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 8000efc:	f7ff ffac 	bl	8000e58 <DHT11_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <lectura_dht11+0x90>)
 8000f06:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8000f08:	f7ff ffa6 	bl	8000e58 <DHT11_Read>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <lectura_dht11+0x94>)
 8000f12:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8000f14:	f7ff ffa0 	bl	8000e58 <DHT11_Read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <lectura_dht11+0x98>)
 8000f1e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8000f20:	f7ff ff9a 	bl	8000e58 <DHT11_Read>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <lectura_dht11+0x9c>)
 8000f2a:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000f2c:	f7ff ff94 	bl	8000e58 <DHT11_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <lectura_dht11+0xa0>)
 8000f36:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <lectura_dht11+0x98>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <lectura_dht11+0xa4>)
 8000f40:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <lectura_dht11+0x90>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <lectura_dht11+0xa8>)
 8000f4a:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <lectura_dht11+0xa4>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <lectura_dht11+0xac>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <lectura_dht11+0xa8>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <lectura_dht11+0xb0>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000cc 	.word	0x200000cc
 8000f78:	20000154 	.word	0x20000154
 8000f7c:	200001d9 	.word	0x200001d9
 8000f80:	200001d8 	.word	0x200001d8
 8000f84:	200002b2 	.word	0x200002b2
 8000f88:	200002b0 	.word	0x200002b0
 8000f8c:	20000158 	.word	0x20000158
 8000f90:	20000156 	.word	0x20000156
 8000f94:	200000c4 	.word	0x200000c4
 8000f98:	200000c8 	.word	0x200000c8

08000f9c <clima>:

void clima(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	if(counter_clima>2000){
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <clima+0x94>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fa8:	d938      	bls.n	800101c <clima+0x80>
		counter_clima=0;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <clima+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 8000fb0:	f001 fdd4 	bl	8002b5c <HAL_GetTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <clima+0x98>)
 8000fb8:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 8000fba:	f7ff ff95 	bl	8000ee8 <lectura_dht11>
		actualizar_pantalla(6);
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f000 fdd0 	bl	8001b64 <actualizar_pantalla>
		if(controldelclima==1){
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <clima+0x9c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d12f      	bne.n	800102c <clima+0x90>
			if(Temperature>temperatura_objetivo){
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <clima+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <clima+0xa4>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d50c      	bpl.n	8001002 <clima+0x66>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <clima+0xa8>)
 8000ff0:	f002 fd18 	bl	8003a24 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <clima+0xa8>)
 8000ffc:	f002 fd12 	bl	8003a24 <HAL_GPIO_WritePin>

	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
	}

}
 8001000:	e014      	b.n	800102c <clima+0x90>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <clima+0xa8>)
 800100a:	f002 fd0b 	bl	8003a24 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <clima+0xa8>)
 8001016:	f002 fd05 	bl	8003a24 <HAL_GPIO_WritePin>
}
 800101a:	e007      	b.n	800102c <clima+0x90>
		counter_clima=HAL_GetTick()-tickstart_clima;
 800101c:	f001 fd9e 	bl	8002b5c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <clima+0x98>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4a01      	ldr	r2, [pc, #4]	; (8001030 <clima+0x94>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000d8 	.word	0x200000d8
 8001034:	200000d4 	.word	0x200000d4
 8001038:	200000d0 	.word	0x200000d0
 800103c:	2000000c 	.word	0x2000000c
 8001040:	200000c4 	.word	0x200000c4
 8001044:	40020c00 	.word	0x40020c00

08001048 <bluetooth>:
 for (int i = 0; i < 50; i++) {
 rx_buffer[0] = '\0';
 }
 }
 */
void bluetooth(char recibido[]) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (strcmp(recibido, "a") == 0) {
 8001050:	49b0      	ldr	r1, [pc, #704]	; (8001314 <bluetooth+0x2cc>)
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff f8bc 	bl	80001d0 <strcmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d121      	bne.n	80010a2 <bluetooth+0x5a>
		if (getEstadoLuces() == 1)
 800105e:	f7ff fae7 	bl	8000630 <getEstadoLuces>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10c      	bne.n	8001082 <bluetooth+0x3a>
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
					sprintf(tx_buffer, "Las luces ya estaban activadas\n"),
 8001068:	49ab      	ldr	r1, [pc, #684]	; (8001318 <bluetooth+0x2d0>)
 800106a:	48ac      	ldr	r0, [pc, #688]	; (800131c <bluetooth+0x2d4>)
 800106c:	f005 f8fc 	bl	8006268 <siprintf>
 8001070:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001072:	b29a      	uxth	r2, r3
 8001074:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001078:	49a8      	ldr	r1, [pc, #672]	; (800131c <bluetooth+0x2d4>)
 800107a:	48a9      	ldr	r0, [pc, #676]	; (8001320 <bluetooth+0x2d8>)
 800107c:	f004 f947 	bl	800530e <HAL_UART_Transmit>
	}else if (strcmp(recibido, "z") == 0) {
		HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "ldr %i\n", (int) getMediaLDR()), 500);
		}


}
 8001080:	e2e5      	b.n	800164e <bluetooth+0x606>
			setLuces(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fa88 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces activadas\n"), 500);
 8001088:	49a6      	ldr	r1, [pc, #664]	; (8001324 <bluetooth+0x2dc>)
 800108a:	48a4      	ldr	r0, [pc, #656]	; (800131c <bluetooth+0x2d4>)
 800108c:	f005 f8ec 	bl	8006268 <siprintf>
 8001090:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001092:	b29a      	uxth	r2, r3
 8001094:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001098:	49a0      	ldr	r1, [pc, #640]	; (800131c <bluetooth+0x2d4>)
 800109a:	48a1      	ldr	r0, [pc, #644]	; (8001320 <bluetooth+0x2d8>)
 800109c:	f004 f937 	bl	800530e <HAL_UART_Transmit>
}
 80010a0:	e2d5      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "b") == 0) {
 80010a2:	49a1      	ldr	r1, [pc, #644]	; (8001328 <bluetooth+0x2e0>)
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f893 	bl	80001d0 <strcmp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d121      	bne.n	80010f4 <bluetooth+0xac>
		if (getEstadoLuces() == 0)
 80010b0:	f7ff fabe 	bl	8000630 <getEstadoLuces>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <bluetooth+0x8c>
					sprintf(tx_buffer, "Luces ya estaban desactivadas\n"), 500);
 80010ba:	499c      	ldr	r1, [pc, #624]	; (800132c <bluetooth+0x2e4>)
 80010bc:	4897      	ldr	r0, [pc, #604]	; (800131c <bluetooth+0x2d4>)
 80010be:	f005 f8d3 	bl	8006268 <siprintf>
 80010c2:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ca:	4994      	ldr	r1, [pc, #592]	; (800131c <bluetooth+0x2d4>)
 80010cc:	4894      	ldr	r0, [pc, #592]	; (8001320 <bluetooth+0x2d8>)
 80010ce:	f004 f91e 	bl	800530e <HAL_UART_Transmit>
}
 80010d2:	e2bc      	b.n	800164e <bluetooth+0x606>
			setLuces(0);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fa5f 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces desactivadas\n"), 500);
 80010da:	4995      	ldr	r1, [pc, #596]	; (8001330 <bluetooth+0x2e8>)
 80010dc:	488f      	ldr	r0, [pc, #572]	; (800131c <bluetooth+0x2d4>)
 80010de:	f005 f8c3 	bl	8006268 <siprintf>
 80010e2:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ea:	498c      	ldr	r1, [pc, #560]	; (800131c <bluetooth+0x2d4>)
 80010ec:	488c      	ldr	r0, [pc, #560]	; (8001320 <bluetooth+0x2d8>)
 80010ee:	f004 f90e 	bl	800530e <HAL_UART_Transmit>
}
 80010f2:	e2ac      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "c") == 0) {
 80010f4:	498f      	ldr	r1, [pc, #572]	; (8001334 <bluetooth+0x2ec>)
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff f86a 	bl	80001d0 <strcmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d121      	bne.n	8001146 <bluetooth+0xfe>
		if (getEstadoLuces() == 2)
 8001102:	f7ff fa95 	bl	8000630 <getEstadoLuces>
 8001106:	4603      	mov	r3, r0
 8001108:	2b02      	cmp	r3, #2
 800110a:	d10c      	bne.n	8001126 <bluetooth+0xde>
					sprintf(tx_buffer, "Luces ya estaban en modo automatico\n"),
 800110c:	498a      	ldr	r1, [pc, #552]	; (8001338 <bluetooth+0x2f0>)
 800110e:	4883      	ldr	r0, [pc, #524]	; (800131c <bluetooth+0x2d4>)
 8001110:	f005 f8aa 	bl	8006268 <siprintf>
 8001114:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001116:	b29a      	uxth	r2, r3
 8001118:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800111c:	497f      	ldr	r1, [pc, #508]	; (800131c <bluetooth+0x2d4>)
 800111e:	4880      	ldr	r0, [pc, #512]	; (8001320 <bluetooth+0x2d8>)
 8001120:	f004 f8f5 	bl	800530e <HAL_UART_Transmit>
}
 8001124:	e293      	b.n	800164e <bluetooth+0x606>
			setLuces(2);
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff fa36 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces en modo automatico\n"), 500);
 800112c:	4983      	ldr	r1, [pc, #524]	; (800133c <bluetooth+0x2f4>)
 800112e:	487b      	ldr	r0, [pc, #492]	; (800131c <bluetooth+0x2d4>)
 8001130:	f005 f89a 	bl	8006268 <siprintf>
 8001134:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001136:	b29a      	uxth	r2, r3
 8001138:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113c:	4977      	ldr	r1, [pc, #476]	; (800131c <bluetooth+0x2d4>)
 800113e:	4878      	ldr	r0, [pc, #480]	; (8001320 <bluetooth+0x2d8>)
 8001140:	f004 f8e5 	bl	800530e <HAL_UART_Transmit>
}
 8001144:	e283      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "d") == 0) {
 8001146:	497e      	ldr	r1, [pc, #504]	; (8001340 <bluetooth+0x2f8>)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff f841 	bl	80001d0 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d121      	bne.n	8001198 <bluetooth+0x150>
		if (getEstadoAnteriorRiego() == 0)
 8001154:	f7ff fc32 	bl	80009bc <getEstadoAnteriorRiego>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <bluetooth+0x130>
					sprintf(tx_buffer, "Ya estabas regando\n"), 500);
 800115e:	4979      	ldr	r1, [pc, #484]	; (8001344 <bluetooth+0x2fc>)
 8001160:	486e      	ldr	r0, [pc, #440]	; (800131c <bluetooth+0x2d4>)
 8001162:	f005 f881 	bl	8006268 <siprintf>
 8001166:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001168:	b29a      	uxth	r2, r3
 800116a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800116e:	496b      	ldr	r1, [pc, #428]	; (800131c <bluetooth+0x2d4>)
 8001170:	486b      	ldr	r0, [pc, #428]	; (8001320 <bluetooth+0x2d8>)
 8001172:	f004 f8cc 	bl	800530e <HAL_UART_Transmit>
}
 8001176:	e26a      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Abriendo electrovalvula...\n"), 500);
 8001178:	4973      	ldr	r1, [pc, #460]	; (8001348 <bluetooth+0x300>)
 800117a:	4868      	ldr	r0, [pc, #416]	; (800131c <bluetooth+0x2d4>)
 800117c:	f005 f874 	bl	8006268 <siprintf>
 8001180:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001182:	b29a      	uxth	r2, r3
 8001184:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001188:	4964      	ldr	r1, [pc, #400]	; (800131c <bluetooth+0x2d4>)
 800118a:	4865      	ldr	r0, [pc, #404]	; (8001320 <bluetooth+0x2d8>)
 800118c:	f004 f8bf 	bl	800530e <HAL_UART_Transmit>
			setEstadoRiego(0);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fba7 	bl	80008e4 <setEstadoRiego>
}
 8001196:	e25a      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "e") == 0) {
 8001198:	496c      	ldr	r1, [pc, #432]	; (800134c <bluetooth+0x304>)
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff f818 	bl	80001d0 <strcmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d121      	bne.n	80011ea <bluetooth+0x1a2>
		if (getEstadoAnteriorRiego() == 1)
 80011a6:	f7ff fc09 	bl	80009bc <getEstadoAnteriorRiego>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10c      	bne.n	80011ca <bluetooth+0x182>
					sprintf(tx_buffer, "La electrovalvula ya estaba cerrada\n"),
 80011b0:	4967      	ldr	r1, [pc, #412]	; (8001350 <bluetooth+0x308>)
 80011b2:	485a      	ldr	r0, [pc, #360]	; (800131c <bluetooth+0x2d4>)
 80011b4:	f005 f858 	bl	8006268 <siprintf>
 80011b8:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011c0:	4956      	ldr	r1, [pc, #344]	; (800131c <bluetooth+0x2d4>)
 80011c2:	4857      	ldr	r0, [pc, #348]	; (8001320 <bluetooth+0x2d8>)
 80011c4:	f004 f8a3 	bl	800530e <HAL_UART_Transmit>
}
 80011c8:	e241      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Cerrando electrovalvula...\n"), 500);
 80011ca:	4962      	ldr	r1, [pc, #392]	; (8001354 <bluetooth+0x30c>)
 80011cc:	4853      	ldr	r0, [pc, #332]	; (800131c <bluetooth+0x2d4>)
 80011ce:	f005 f84b 	bl	8006268 <siprintf>
 80011d2:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011da:	4950      	ldr	r1, [pc, #320]	; (800131c <bluetooth+0x2d4>)
 80011dc:	4850      	ldr	r0, [pc, #320]	; (8001320 <bluetooth+0x2d8>)
 80011de:	f004 f896 	bl	800530e <HAL_UART_Transmit>
			setEstadoRiego(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fb7e 	bl	80008e4 <setEstadoRiego>
}
 80011e8:	e231      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "f") == 0) {
 80011ea:	495b      	ldr	r1, [pc, #364]	; (8001358 <bluetooth+0x310>)
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7fe ffef 	bl	80001d0 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d121      	bne.n	800123c <bluetooth+0x1f4>
		if (getEstadoPersianas() == 1)
 80011f8:	f7ff fb1c 	bl	8000834 <getEstadoPersianas>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10c      	bne.n	800121c <bluetooth+0x1d4>
					sprintf(tx_buffer, "Ya se esta subiendo la persiana\n"),
 8001202:	4956      	ldr	r1, [pc, #344]	; (800135c <bluetooth+0x314>)
 8001204:	4845      	ldr	r0, [pc, #276]	; (800131c <bluetooth+0x2d4>)
 8001206:	f005 f82f 	bl	8006268 <siprintf>
 800120a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800120c:	b29a      	uxth	r2, r3
 800120e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001212:	4942      	ldr	r1, [pc, #264]	; (800131c <bluetooth+0x2d4>)
 8001214:	4842      	ldr	r0, [pc, #264]	; (8001320 <bluetooth+0x2d8>)
 8001216:	f004 f87a 	bl	800530e <HAL_UART_Transmit>
}
 800121a:	e218      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Subiendo persiana...\n"), 500);
 800121c:	4950      	ldr	r1, [pc, #320]	; (8001360 <bluetooth+0x318>)
 800121e:	483f      	ldr	r0, [pc, #252]	; (800131c <bluetooth+0x2d4>)
 8001220:	f005 f822 	bl	8006268 <siprintf>
 8001224:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001226:	b29a      	uxth	r2, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	493b      	ldr	r1, [pc, #236]	; (800131c <bluetooth+0x2d4>)
 800122e:	483c      	ldr	r0, [pc, #240]	; (8001320 <bluetooth+0x2d8>)
 8001230:	f004 f86d 	bl	800530e <HAL_UART_Transmit>
			setEstadoPersianas(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fab3 	bl	80007a0 <setEstadoPersianas>
}
 800123a:	e208      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "g") == 0) {
 800123c:	4949      	ldr	r1, [pc, #292]	; (8001364 <bluetooth+0x31c>)
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7fe ffc6 	bl	80001d0 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d121      	bne.n	800128e <bluetooth+0x246>
		if (getEstadoPersianas() == 2)
 800124a:	f7ff faf3 	bl	8000834 <getEstadoPersianas>
 800124e:	4603      	mov	r3, r0
 8001250:	2b02      	cmp	r3, #2
 8001252:	d10c      	bne.n	800126e <bluetooth+0x226>
					sprintf(tx_buffer, "Ya se esta bajando la persiana\n"),
 8001254:	4944      	ldr	r1, [pc, #272]	; (8001368 <bluetooth+0x320>)
 8001256:	4831      	ldr	r0, [pc, #196]	; (800131c <bluetooth+0x2d4>)
 8001258:	f005 f806 	bl	8006268 <siprintf>
 800125c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800125e:	b29a      	uxth	r2, r3
 8001260:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001264:	492d      	ldr	r1, [pc, #180]	; (800131c <bluetooth+0x2d4>)
 8001266:	482e      	ldr	r0, [pc, #184]	; (8001320 <bluetooth+0x2d8>)
 8001268:	f004 f851 	bl	800530e <HAL_UART_Transmit>
}
 800126c:	e1ef      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Bajando persiana...\n"), 500);
 800126e:	493f      	ldr	r1, [pc, #252]	; (800136c <bluetooth+0x324>)
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <bluetooth+0x2d4>)
 8001272:	f004 fff9 	bl	8006268 <siprintf>
 8001276:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001278:	b29a      	uxth	r2, r3
 800127a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <bluetooth+0x2d4>)
 8001280:	4827      	ldr	r0, [pc, #156]	; (8001320 <bluetooth+0x2d8>)
 8001282:	f004 f844 	bl	800530e <HAL_UART_Transmit>
			setEstadoPersianas(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff fa8a 	bl	80007a0 <setEstadoPersianas>
}
 800128c:	e1df      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "h") == 0) {
 800128e:	4938      	ldr	r1, [pc, #224]	; (8001370 <bluetooth+0x328>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7fe ff9d 	bl	80001d0 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d121      	bne.n	80012e0 <bluetooth+0x298>
		if (getEstadoPersianas() == 0)
 800129c:	f7ff faca 	bl	8000834 <getEstadoPersianas>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <bluetooth+0x278>
					sprintf(tx_buffer, "La persiana ya estaba parada\n"), 500);
 80012a6:	4933      	ldr	r1, [pc, #204]	; (8001374 <bluetooth+0x32c>)
 80012a8:	481c      	ldr	r0, [pc, #112]	; (800131c <bluetooth+0x2d4>)
 80012aa:	f004 ffdd 	bl	8006268 <siprintf>
 80012ae:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b6:	4919      	ldr	r1, [pc, #100]	; (800131c <bluetooth+0x2d4>)
 80012b8:	4819      	ldr	r0, [pc, #100]	; (8001320 <bluetooth+0x2d8>)
 80012ba:	f004 f828 	bl	800530e <HAL_UART_Transmit>
}
 80012be:	e1c6      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Parando persiana...\n"), 500);
 80012c0:	492d      	ldr	r1, [pc, #180]	; (8001378 <bluetooth+0x330>)
 80012c2:	4816      	ldr	r0, [pc, #88]	; (800131c <bluetooth+0x2d4>)
 80012c4:	f004 ffd0 	bl	8006268 <siprintf>
 80012c8:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d0:	4912      	ldr	r1, [pc, #72]	; (800131c <bluetooth+0x2d4>)
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <bluetooth+0x2d8>)
 80012d4:	f004 f81b 	bl	800530e <HAL_UART_Transmit>
			setEstadoPersianas(0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fa61 	bl	80007a0 <setEstadoPersianas>
}
 80012de:	e1b6      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "i") == 0) {
 80012e0:	4926      	ldr	r1, [pc, #152]	; (800137c <bluetooth+0x334>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7fe ff74 	bl	80001d0 <strcmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d15a      	bne.n	80013a4 <bluetooth+0x35c>
		if(getEstadoClima()==1){
 80012ee:	f7ff fca9 	bl	8000c44 <getEstadoClima>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d145      	bne.n	8001384 <bluetooth+0x33c>
							sprintf(tx_buffer, "La calefaccion ya estaba encendida\n"), 500);
 80012f8:	4921      	ldr	r1, [pc, #132]	; (8001380 <bluetooth+0x338>)
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <bluetooth+0x2d4>)
 80012fc:	f004 ffb4 	bl	8006268 <siprintf>
 8001300:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001302:	b29a      	uxth	r2, r3
 8001304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <bluetooth+0x2d4>)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <bluetooth+0x2d8>)
 800130c:	f003 ffff 	bl	800530e <HAL_UART_Transmit>
}
 8001310:	e19d      	b.n	800164e <bluetooth+0x606>
 8001312:	bf00      	nop
 8001314:	08006b40 	.word	0x08006b40
 8001318:	08006b44 	.word	0x08006b44
 800131c:	2000015c 	.word	0x2000015c
 8001320:	2000026c 	.word	0x2000026c
 8001324:	08006b64 	.word	0x08006b64
 8001328:	08006b78 	.word	0x08006b78
 800132c:	08006b7c 	.word	0x08006b7c
 8001330:	08006b9c 	.word	0x08006b9c
 8001334:	08006bb0 	.word	0x08006bb0
 8001338:	08006bb4 	.word	0x08006bb4
 800133c:	08006bdc 	.word	0x08006bdc
 8001340:	08006bf8 	.word	0x08006bf8
 8001344:	08006bfc 	.word	0x08006bfc
 8001348:	08006c10 	.word	0x08006c10
 800134c:	08006c2c 	.word	0x08006c2c
 8001350:	08006c30 	.word	0x08006c30
 8001354:	08006c58 	.word	0x08006c58
 8001358:	08006c74 	.word	0x08006c74
 800135c:	08006c78 	.word	0x08006c78
 8001360:	08006c9c 	.word	0x08006c9c
 8001364:	08006cb4 	.word	0x08006cb4
 8001368:	08006cb8 	.word	0x08006cb8
 800136c:	08006cd8 	.word	0x08006cd8
 8001370:	08006cf0 	.word	0x08006cf0
 8001374:	08006cf4 	.word	0x08006cf4
 8001378:	08006d14 	.word	0x08006d14
 800137c:	08006d2c 	.word	0x08006d2c
 8001380:	08006d30 	.word	0x08006d30
			setEstadoClima(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fc19 	bl	8000bbc <setEstadoClima>
					sprintf(tx_buffer, "Encendiendo calefaccion...\n"), 500);
 800138a:	49b3      	ldr	r1, [pc, #716]	; (8001658 <bluetooth+0x610>)
 800138c:	48b3      	ldr	r0, [pc, #716]	; (800165c <bluetooth+0x614>)
 800138e:	f004 ff6b 	bl	8006268 <siprintf>
 8001392:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001394:	b29a      	uxth	r2, r3
 8001396:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800139a:	49b0      	ldr	r1, [pc, #704]	; (800165c <bluetooth+0x614>)
 800139c:	48b0      	ldr	r0, [pc, #704]	; (8001660 <bluetooth+0x618>)
 800139e:	f003 ffb6 	bl	800530e <HAL_UART_Transmit>
}
 80013a2:	e154      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "j") == 0) {
 80013a4:	49af      	ldr	r1, [pc, #700]	; (8001664 <bluetooth+0x61c>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7fe ff12 	bl	80001d0 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d121      	bne.n	80013f6 <bluetooth+0x3ae>
		if(getEstadoClima()==2){
 80013b2:	f7ff fc47 	bl	8000c44 <getEstadoClima>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d10c      	bne.n	80013d6 <bluetooth+0x38e>
									sprintf(tx_buffer, "El ventilador ya estaba encendido\n"), 500);
 80013bc:	49aa      	ldr	r1, [pc, #680]	; (8001668 <bluetooth+0x620>)
 80013be:	48a7      	ldr	r0, [pc, #668]	; (800165c <bluetooth+0x614>)
 80013c0:	f004 ff52 	bl	8006268 <siprintf>
 80013c4:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013cc:	49a3      	ldr	r1, [pc, #652]	; (800165c <bluetooth+0x614>)
 80013ce:	48a4      	ldr	r0, [pc, #656]	; (8001660 <bluetooth+0x618>)
 80013d0:	f003 ff9d 	bl	800530e <HAL_UART_Transmit>
}
 80013d4:	e13b      	b.n	800164e <bluetooth+0x606>
					setEstadoClima(2);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff fbf0 	bl	8000bbc <setEstadoClima>
							sprintf(tx_buffer, "Encendiendo ventilador...\n"), 500);
 80013dc:	49a3      	ldr	r1, [pc, #652]	; (800166c <bluetooth+0x624>)
 80013de:	489f      	ldr	r0, [pc, #636]	; (800165c <bluetooth+0x614>)
 80013e0:	f004 ff42 	bl	8006268 <siprintf>
 80013e4:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ec:	499b      	ldr	r1, [pc, #620]	; (800165c <bluetooth+0x614>)
 80013ee:	489c      	ldr	r0, [pc, #624]	; (8001660 <bluetooth+0x618>)
 80013f0:	f003 ff8d 	bl	800530e <HAL_UART_Transmit>
}
 80013f4:	e12b      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "k") == 0) {
 80013f6:	499e      	ldr	r1, [pc, #632]	; (8001670 <bluetooth+0x628>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7fe fee9 	bl	80001d0 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d133      	bne.n	800146c <bluetooth+0x424>
		if (getEstadoClima() == 1)
 8001404:	f7ff fc1e 	bl	8000c44 <getEstadoClima>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10c      	bne.n	8001428 <bluetooth+0x3e0>
					sprintf(tx_buffer, "Apagando calefaccion\n"), 500);
 800140e:	4999      	ldr	r1, [pc, #612]	; (8001674 <bluetooth+0x62c>)
 8001410:	4892      	ldr	r0, [pc, #584]	; (800165c <bluetooth+0x614>)
 8001412:	f004 ff29 	bl	8006268 <siprintf>
 8001416:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001418:	b29a      	uxth	r2, r3
 800141a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800141e:	498f      	ldr	r1, [pc, #572]	; (800165c <bluetooth+0x614>)
 8001420:	488f      	ldr	r0, [pc, #572]	; (8001660 <bluetooth+0x618>)
 8001422:	f003 ff74 	bl	800530e <HAL_UART_Transmit>
 8001426:	e01d      	b.n	8001464 <bluetooth+0x41c>
		else if (getEstadoClima() == 2)
 8001428:	f7ff fc0c 	bl	8000c44 <getEstadoClima>
 800142c:	4603      	mov	r3, r0
 800142e:	2b02      	cmp	r3, #2
 8001430:	d10c      	bne.n	800144c <bluetooth+0x404>
					sprintf(tx_buffer, "Apagando ventilador\n"), 500);
 8001432:	4991      	ldr	r1, [pc, #580]	; (8001678 <bluetooth+0x630>)
 8001434:	4889      	ldr	r0, [pc, #548]	; (800165c <bluetooth+0x614>)
 8001436:	f004 ff17 	bl	8006268 <siprintf>
 800143a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800143c:	b29a      	uxth	r2, r3
 800143e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001442:	4986      	ldr	r1, [pc, #536]	; (800165c <bluetooth+0x614>)
 8001444:	4886      	ldr	r0, [pc, #536]	; (8001660 <bluetooth+0x618>)
 8001446:	f003 ff62 	bl	800530e <HAL_UART_Transmit>
 800144a:	e00b      	b.n	8001464 <bluetooth+0x41c>
					sprintf(tx_buffer,
 800144c:	498b      	ldr	r1, [pc, #556]	; (800167c <bluetooth+0x634>)
 800144e:	4883      	ldr	r0, [pc, #524]	; (800165c <bluetooth+0x614>)
 8001450:	f004 ff0a 	bl	8006268 <siprintf>
 8001454:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001456:	b29a      	uxth	r2, r3
 8001458:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800145c:	497f      	ldr	r1, [pc, #508]	; (800165c <bluetooth+0x614>)
 800145e:	4880      	ldr	r0, [pc, #512]	; (8001660 <bluetooth+0x618>)
 8001460:	f003 ff55 	bl	800530e <HAL_UART_Transmit>
		setEstadoClima(0);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff fba9 	bl	8000bbc <setEstadoClima>
}
 800146a:	e0f0      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "l") == 0) {
 800146c:	4984      	ldr	r1, [pc, #528]	; (8001680 <bluetooth+0x638>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7fe feae 	bl	80001d0 <strcmp>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d121      	bne.n	80014be <bluetooth+0x476>
		if (getControlClima() == 1)
 800147a:	f7ff fc25 	bl	8000cc8 <getControlClima>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10c      	bne.n	800149e <bluetooth+0x456>
					sprintf(tx_buffer, "Termostato ya estaba activado\n"), 500);
 8001484:	497f      	ldr	r1, [pc, #508]	; (8001684 <bluetooth+0x63c>)
 8001486:	4875      	ldr	r0, [pc, #468]	; (800165c <bluetooth+0x614>)
 8001488:	f004 feee 	bl	8006268 <siprintf>
 800148c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800148e:	b29a      	uxth	r2, r3
 8001490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001494:	4971      	ldr	r1, [pc, #452]	; (800165c <bluetooth+0x614>)
 8001496:	4872      	ldr	r0, [pc, #456]	; (8001660 <bluetooth+0x618>)
 8001498:	f003 ff39 	bl	800530e <HAL_UART_Transmit>
}
 800149c:	e0d7      	b.n	800164e <bluetooth+0x606>
			setControlClima(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fbfe 	bl	8000ca0 <setControlClima>
					sprintf(tx_buffer, "Termostato activado\n"), 500);
 80014a4:	4978      	ldr	r1, [pc, #480]	; (8001688 <bluetooth+0x640>)
 80014a6:	486d      	ldr	r0, [pc, #436]	; (800165c <bluetooth+0x614>)
 80014a8:	f004 fede 	bl	8006268 <siprintf>
 80014ac:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b4:	4969      	ldr	r1, [pc, #420]	; (800165c <bluetooth+0x614>)
 80014b6:	486a      	ldr	r0, [pc, #424]	; (8001660 <bluetooth+0x618>)
 80014b8:	f003 ff29 	bl	800530e <HAL_UART_Transmit>
}
 80014bc:	e0c7      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "m") == 0) {
 80014be:	4973      	ldr	r1, [pc, #460]	; (800168c <bluetooth+0x644>)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7fe fe85 	bl	80001d0 <strcmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d121      	bne.n	8001510 <bluetooth+0x4c8>
		if (getControlClima() == 0)
 80014cc:	f7ff fbfc 	bl	8000cc8 <getControlClima>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <bluetooth+0x4a8>
					sprintf(tx_buffer, "Termostato ya estaba desactivado\n"),
 80014d6:	496e      	ldr	r1, [pc, #440]	; (8001690 <bluetooth+0x648>)
 80014d8:	4860      	ldr	r0, [pc, #384]	; (800165c <bluetooth+0x614>)
 80014da:	f004 fec5 	bl	8006268 <siprintf>
 80014de:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014e6:	495d      	ldr	r1, [pc, #372]	; (800165c <bluetooth+0x614>)
 80014e8:	485d      	ldr	r0, [pc, #372]	; (8001660 <bluetooth+0x618>)
 80014ea:	f003 ff10 	bl	800530e <HAL_UART_Transmit>
}
 80014ee:	e0ae      	b.n	800164e <bluetooth+0x606>
			setControlClima(0);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fbd5 	bl	8000ca0 <setControlClima>
					sprintf(tx_buffer, "Termostato desactivado\n"), 500);
 80014f6:	4967      	ldr	r1, [pc, #412]	; (8001694 <bluetooth+0x64c>)
 80014f8:	4858      	ldr	r0, [pc, #352]	; (800165c <bluetooth+0x614>)
 80014fa:	f004 feb5 	bl	8006268 <siprintf>
 80014fe:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001500:	b29a      	uxth	r2, r3
 8001502:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001506:	4955      	ldr	r1, [pc, #340]	; (800165c <bluetooth+0x614>)
 8001508:	4855      	ldr	r0, [pc, #340]	; (8001660 <bluetooth+0x618>)
 800150a:	f003 ff00 	bl	800530e <HAL_UART_Transmit>
}
 800150e:	e09e      	b.n	800164e <bluetooth+0x606>
	}else if(strcmp(recibido,"n")==0){
 8001510:	4961      	ldr	r1, [pc, #388]	; (8001698 <bluetooth+0x650>)
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe fe5c 	bl	80001d0 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d113      	bne.n	8001546 <bluetooth+0x4fe>
	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La temperatura es de %i ºC\n", (int) Temperature), 500);
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <bluetooth+0x654>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001528:	ee17 2a90 	vmov	r2, s15
 800152c:	495c      	ldr	r1, [pc, #368]	; (80016a0 <bluetooth+0x658>)
 800152e:	484b      	ldr	r0, [pc, #300]	; (800165c <bluetooth+0x614>)
 8001530:	f004 fe9a 	bl	8006268 <siprintf>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800153c:	4947      	ldr	r1, [pc, #284]	; (800165c <bluetooth+0x614>)
 800153e:	4848      	ldr	r0, [pc, #288]	; (8001660 <bluetooth+0x618>)
 8001540:	f003 fee5 	bl	800530e <HAL_UART_Transmit>
}
 8001544:	e083      	b.n	800164e <bluetooth+0x606>
	 }else if(strcmp(recibido,"o")==0){
 8001546:	4957      	ldr	r1, [pc, #348]	; (80016a4 <bluetooth+0x65c>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7fe fe41 	bl	80001d0 <strcmp>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d113      	bne.n	800157c <bluetooth+0x534>
		 	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La humedad relativa es del %i %%\n",(int) Humidity), 500);
 8001554:	4b54      	ldr	r3, [pc, #336]	; (80016a8 <bluetooth+0x660>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	4952      	ldr	r1, [pc, #328]	; (80016ac <bluetooth+0x664>)
 8001564:	483d      	ldr	r0, [pc, #244]	; (800165c <bluetooth+0x614>)
 8001566:	f004 fe7f 	bl	8006268 <siprintf>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001572:	493a      	ldr	r1, [pc, #232]	; (800165c <bluetooth+0x614>)
 8001574:	483a      	ldr	r0, [pc, #232]	; (8001660 <bluetooth+0x618>)
 8001576:	f003 feca 	bl	800530e <HAL_UART_Transmit>
}
 800157a:	e068      	b.n	800164e <bluetooth+0x606>
		 }else if (strcmp(recibido, "p") == 0) {
 800157c:	494c      	ldr	r1, [pc, #304]	; (80016b0 <bluetooth+0x668>)
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7fe fe26 	bl	80001d0 <strcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d121      	bne.n	80015ce <bluetooth+0x586>
		if (getEstadoSeguridad() == 2)
 800158a:	f7ff fac9 	bl	8000b20 <getEstadoSeguridad>
 800158e:	4603      	mov	r3, r0
 8001590:	2b02      	cmp	r3, #2
 8001592:	d10c      	bne.n	80015ae <bluetooth+0x566>
					sprintf(tx_buffer,
 8001594:	4947      	ldr	r1, [pc, #284]	; (80016b4 <bluetooth+0x66c>)
 8001596:	4831      	ldr	r0, [pc, #196]	; (800165c <bluetooth+0x614>)
 8001598:	f004 fe66 	bl	8006268 <siprintf>
 800159c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015a4:	492d      	ldr	r1, [pc, #180]	; (800165c <bluetooth+0x614>)
 80015a6:	482e      	ldr	r0, [pc, #184]	; (8001660 <bluetooth+0x618>)
 80015a8:	f003 feb1 	bl	800530e <HAL_UART_Transmit>
 80015ac:	e00b      	b.n	80015c6 <bluetooth+0x57e>
					sprintf(tx_buffer, "Encendiendo alarma...\n"), 500);
 80015ae:	4942      	ldr	r1, [pc, #264]	; (80016b8 <bluetooth+0x670>)
 80015b0:	482a      	ldr	r0, [pc, #168]	; (800165c <bluetooth+0x614>)
 80015b2:	f004 fe59 	bl	8006268 <siprintf>
 80015b6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015be:	4927      	ldr	r1, [pc, #156]	; (800165c <bluetooth+0x614>)
 80015c0:	4827      	ldr	r0, [pc, #156]	; (8001660 <bluetooth+0x618>)
 80015c2:	f003 fea4 	bl	800530e <HAL_UART_Transmit>
		setEstadoSeguridad(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fa26 	bl	8000a18 <setEstadoSeguridad>
}
 80015cc:	e03f      	b.n	800164e <bluetooth+0x606>
	} else if (strcmp(recibido, "q") == 0) {
 80015ce:	493b      	ldr	r1, [pc, #236]	; (80016bc <bluetooth+0x674>)
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe fdfd 	bl	80001d0 <strcmp>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d121      	bne.n	8001620 <bluetooth+0x5d8>
		if (getEstadoSeguridad() == 0)
 80015dc:	f7ff faa0 	bl	8000b20 <getEstadoSeguridad>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <bluetooth+0x5b8>
					sprintf(tx_buffer, "La alarma ya estaba apagada\n"), 500);
 80015e6:	4936      	ldr	r1, [pc, #216]	; (80016c0 <bluetooth+0x678>)
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <bluetooth+0x614>)
 80015ea:	f004 fe3d 	bl	8006268 <siprintf>
 80015ee:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f6:	4919      	ldr	r1, [pc, #100]	; (800165c <bluetooth+0x614>)
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <bluetooth+0x618>)
 80015fa:	f003 fe88 	bl	800530e <HAL_UART_Transmit>
}
 80015fe:	e026      	b.n	800164e <bluetooth+0x606>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
 8001600:	4930      	ldr	r1, [pc, #192]	; (80016c4 <bluetooth+0x67c>)
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <bluetooth+0x614>)
 8001604:	f004 fe30 	bl	8006268 <siprintf>
 8001608:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800160a:	b29a      	uxth	r2, r3
 800160c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001610:	4912      	ldr	r1, [pc, #72]	; (800165c <bluetooth+0x614>)
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <bluetooth+0x618>)
 8001614:	f003 fe7b 	bl	800530e <HAL_UART_Transmit>
			setEstadoSeguridad(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff f9fd 	bl	8000a18 <setEstadoSeguridad>
}
 800161e:	e016      	b.n	800164e <bluetooth+0x606>
	}else if (strcmp(recibido, "z") == 0) {
 8001620:	4929      	ldr	r1, [pc, #164]	; (80016c8 <bluetooth+0x680>)
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe fdd4 	bl	80001d0 <strcmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <bluetooth+0x606>
		HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "ldr %i\n", (int) getMediaLDR()), 500);
 800162e:	f7ff f829 	bl	8000684 <getMediaLDR>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4925      	ldr	r1, [pc, #148]	; (80016cc <bluetooth+0x684>)
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <bluetooth+0x614>)
 800163a:	f004 fe15 	bl	8006268 <siprintf>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001646:	4905      	ldr	r1, [pc, #20]	; (800165c <bluetooth+0x614>)
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <bluetooth+0x618>)
 800164a:	f003 fe60 	bl	800530e <HAL_UART_Transmit>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08006d54 	.word	0x08006d54
 800165c:	2000015c 	.word	0x2000015c
 8001660:	2000026c 	.word	0x2000026c
 8001664:	08006d70 	.word	0x08006d70
 8001668:	08006d74 	.word	0x08006d74
 800166c:	08006d98 	.word	0x08006d98
 8001670:	08006db4 	.word	0x08006db4
 8001674:	08006db8 	.word	0x08006db8
 8001678:	08006dd0 	.word	0x08006dd0
 800167c:	08006de8 	.word	0x08006de8
 8001680:	08006e18 	.word	0x08006e18
 8001684:	08006e1c 	.word	0x08006e1c
 8001688:	08006e3c 	.word	0x08006e3c
 800168c:	08006e54 	.word	0x08006e54
 8001690:	08006e58 	.word	0x08006e58
 8001694:	08006e7c 	.word	0x08006e7c
 8001698:	08006e94 	.word	0x08006e94
 800169c:	200000c4 	.word	0x200000c4
 80016a0:	08006e98 	.word	0x08006e98
 80016a4:	08006eb8 	.word	0x08006eb8
 80016a8:	200000c8 	.word	0x200000c8
 80016ac:	08006ebc 	.word	0x08006ebc
 80016b0:	08006ee0 	.word	0x08006ee0
 80016b4:	08006ee4 	.word	0x08006ee4
 80016b8:	08006f18 	.word	0x08006f18
 80016bc:	08006f30 	.word	0x08006f30
 80016c0:	08006f34 	.word	0x08006f34
 80016c4:	08006f54 	.word	0x08006f54
 80016c8:	08006f68 	.word	0x08006f68
 80016cc:	08006f6c 	.word	0x08006f6c

080016d0 <clrScr>:
#include "control_clima.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 80016da:	1dfa      	adds	r2, r7, #7
 80016dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2110      	movs	r1, #16
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <clrScr+0x24>)
 80016e8:	f002 fb12 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000100 	.word	0x20000100

080016f8 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 8001704:	2302      	movs	r3, #2
 8001706:	753b      	strb	r3, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	757b      	strb	r3, [r7, #21]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	75bb      	strb	r3, [r7, #22]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 800171a:	f107 0214 	add.w	r2, r7, #20
 800171e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2304      	movs	r3, #4
 8001726:	2110      	movs	r1, #16
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <setColor+0x40>)
 800172a:	f002 faf1 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000100 	.word	0x20000100

0800173c <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 8001748:	2303      	movs	r3, #3
 800174a:	753b      	strb	r3, [r7, #20]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	757b      	strb	r3, [r7, #21]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	75bb      	strb	r3, [r7, #22]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 800175e:	f107 0214 	add.w	r2, r7, #20
 8001762:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2304      	movs	r3, #4
 800176a:	2110      	movs	r1, #16
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <setBackColor+0x40>)
 800176e:	f002 facf 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000100 	.word	0x20000100

08001780 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	dd01      	ble.n	80017a6 <drawRect+0x26>
		desb[0] = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2bff      	cmp	r3, #255	; 0xff
 80017aa:	dd01      	ble.n	80017b0 <drawRect+0x30>
		desb[1] = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	dd01      	ble.n	80017ba <drawRect+0x3a>
		desb[2] = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	dd01      	ble.n	80017c4 <drawRect+0x44>
		desb[3] = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80017c4:	2304      	movs	r3, #4
 80017c6:	753b      	strb	r3, [r7, #20]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	757b      	strb	r3, [r7, #21]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	75bb      	strb	r3, [r7, #22]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	763b      	strb	r3, [r7, #24]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	767b      	strb	r3, [r7, #25]
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	76bb      	strb	r3, [r7, #26]
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	76fb      	strb	r3, [r7, #27]
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 80017f8:	f107 0214 	add.w	r2, r7, #20
 80017fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2309      	movs	r3, #9
 8001804:	2110      	movs	r1, #16
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <drawRect+0x94>)
 8001808:	f002 fa82 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 800180c:	bf00      	nop
 800180e:	3730      	adds	r7, #48	; 0x30
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000100 	.word	0x20000100

08001818 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	dd01      	ble.n	800183e <fillRect+0x26>
		desb[0] = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	dd01      	ble.n	8001848 <fillRect+0x30>
		desb[1] = 1;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	dd01      	ble.n	8001852 <fillRect+0x3a>
		desb[2] = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2bff      	cmp	r3, #255	; 0xff
 8001856:	dd01      	ble.n	800185c <fillRect+0x44>
		desb[3] = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 800185c:	2305      	movs	r3, #5
 800185e:	753b      	strb	r3, [r7, #20]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	757b      	strb	r3, [r7, #21]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	75bb      	strb	r3, [r7, #22]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	75fb      	strb	r3, [r7, #23]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	763b      	strb	r3, [r7, #24]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	767b      	strb	r3, [r7, #25]
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	b2db      	uxtb	r3, r3
 8001882:	76bb      	strb	r3, [r7, #26]
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	b2db      	uxtb	r3, r3
 8001888:	76fb      	strb	r3, [r7, #27]
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	b2db      	uxtb	r3, r3
 800188e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 8001890:	f107 0214 	add.w	r2, r7, #20
 8001894:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2309      	movs	r3, #9
 800189c:	2110      	movs	r1, #16
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <fillRect+0x94>)
 80018a0:	f002 fa36 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 80018a4:	bf00      	nop
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000100 	.word	0x20000100

080018b0 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b098      	sub	sp, #96	; 0x60
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 80018bc:	2300      	movs	r3, #0
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
 80018c0:	2300      	movs	r3, #0
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2bff      	cmp	r3, #255	; 0xff
 80018c8:	dd01      	ble.n	80018ce <print+0x1e>
		desb[0] = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2bff      	cmp	r3, #255	; 0xff
 80018d2:	dd01      	ble.n	80018d8 <print+0x28>
		desb[1] = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 80018d8:	2306      	movs	r3, #6
 80018da:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7fe fc81 	bl	80001e4 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 80018e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 80018ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 80018f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 80018f8:	2304      	movs	r3, #4
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
 80018fc:	e00d      	b.n	800191a <print+0x6a>
		cadena[i] = t[i - 4];
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	3b04      	subs	r3, #4
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	7819      	ldrb	r1, [r3, #0]
 8001908:	f107 0214 	add.w	r2, r7, #20
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	3301      	adds	r3, #1
 8001918:	657b      	str	r3, [r7, #84]	; 0x54
 800191a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800191c:	3303      	adds	r3, #3
 800191e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001920:	429a      	cmp	r2, r3
 8001922:	ddec      	ble.n	80018fe <print+0x4e>
	}
	cadena[longitud + 4] = x;
 8001924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001926:	3304      	adds	r3, #4
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001930:	440b      	add	r3, r1
 8001932:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 8001936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001938:	3305      	adds	r3, #5
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001942:	440b      	add	r3, r1
 8001944:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) cadena, longitud + 6, 3000);
 8001948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800194a:	b29b      	uxth	r3, r3
 800194c:	3306      	adds	r3, #6
 800194e:	b29b      	uxth	r3, r3
 8001950:	f107 0214 	add.w	r2, r7, #20
 8001954:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001958:	9100      	str	r1, [sp, #0]
 800195a:	2110      	movs	r1, #16
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <print+0xbc>)
 800195e:	f002 f9d7 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 8001962:	bf00      	nop
 8001964:	3758      	adds	r7, #88	; 0x58
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000100 	.word	0x20000100

08001970 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e01b      	b.n	80019c0 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff ff88 	bl	80018b0 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc1a 	bl	80001e4 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	00da      	lsls	r2, r3, #3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3301      	adds	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbdf      	blt.n	8001988 <printfrase+0x18>
	}
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 80019dc:	2307      	movs	r3, #7
 80019de:	733b      	strb	r3, [r7, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) font, 2, 3000);
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	2110      	movs	r1, #16
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <setFont+0x30>)
 80019f6:	f002 f98b 	bl	8003d10 <HAL_I2C_Master_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000100 	.word	0x20000100

08001a08 <pantalla_principal>:
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 7, 3000);
}


void pantalla_principal() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
	clrScr();
 8001a0e:	f7ff fe5f 	bl	80016d0 <clrScr>
	setColor(255, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	20ff      	movs	r0, #255	; 0xff
 8001a18:	f7ff fe6e 	bl	80016f8 <setColor>
	fillRect(1, 1, 478, 40);
 8001a1c:	2328      	movs	r3, #40	; 0x28
 8001a1e:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001a22:	2101      	movs	r1, #1
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fef7 	bl	8001818 <fillRect>
	setColor(64, 64, 64);
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	2040      	movs	r0, #64	; 0x40
 8001a30:	f7ff fe62 	bl	80016f8 <setColor>
	fillRect(1, 318, 478, 280);
 8001a34:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001a38:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001a3c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fee9 	bl	8001818 <fillRect>
	setColor(255, 255, 255);
 8001a46:	22ff      	movs	r2, #255	; 0xff
 8001a48:	21ff      	movs	r1, #255	; 0xff
 8001a4a:	20ff      	movs	r0, #255	; 0xff
 8001a4c:	f7ff fe54 	bl	80016f8 <setColor>
	setBackColor(255, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	20ff      	movs	r0, #255	; 0xff
 8001a56:	f7ff fe71 	bl	800173c <setBackColor>
	setFont(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff ffba 	bl	80019d4 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001a60:	220c      	movs	r2, #12
 8001a62:	2132      	movs	r1, #50	; 0x32
 8001a64:	4835      	ldr	r0, [pc, #212]	; (8001b3c <pantalla_principal+0x134>)
 8001a66:	f7ff ff23 	bl	80018b0 <print>
	setBackColor(64, 64, 64);
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	2040      	movs	r0, #64	; 0x40
 8001a70:	f7ff fe64 	bl	800173c <setBackColor>
	setColor(255, 255, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	21ff      	movs	r1, #255	; 0xff
 8001a78:	20ff      	movs	r0, #255	; 0xff
 8001a7a:	f7ff fe3d 	bl	80016f8 <setColor>
	setFont(0);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff ffa8 	bl	80019d4 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001a84:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <pantalla_principal+0x138>)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001a90:	f107 000c 	add.w	r0, r7, #12
 8001a94:	2303      	movs	r3, #3
 8001a96:	f240 1219 	movw	r2, #281	; 0x119
 8001a9a:	2114      	movs	r1, #20
 8001a9c:	f7ff ff68 	bl	8001970 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <pantalla_principal+0x13c>)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001aaa:	4638      	mov	r0, r7
 8001aac:	2303      	movs	r3, #3
 8001aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ab2:	2114      	movs	r1, #20
 8001ab4:	f7ff ff5c 	bl	8001970 <printfrase>
	setColor(0, 0, 255);
 8001ab8:	22ff      	movs	r2, #255	; 0xff
 8001aba:	2100      	movs	r1, #0
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fe1b 	bl	80016f8 <setColor>
	drawRect(0, 0, 479, 319);
 8001ac2:	f240 133f 	movw	r3, #319	; 0x13f
 8001ac6:	f240 12df 	movw	r2, #479	; 0x1df
 8001aca:	2100      	movs	r1, #0
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fe57 	bl	8001780 <drawRect>
	setFont(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff ff7e 	bl	80019d4 <setFont>
	setColor(255, 255, 255);
 8001ad8:	22ff      	movs	r2, #255	; 0xff
 8001ada:	21ff      	movs	r1, #255	; 0xff
 8001adc:	20ff      	movs	r0, #255	; 0xff
 8001ade:	f7ff fe0b 	bl	80016f8 <setColor>
	setBackColor(0, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fe28 	bl	800173c <setBackColor>
	print("LUCES:", 50, 94);
 8001aec:	225e      	movs	r2, #94	; 0x5e
 8001aee:	2132      	movs	r1, #50	; 0x32
 8001af0:	4815      	ldr	r0, [pc, #84]	; (8001b48 <pantalla_principal+0x140>)
 8001af2:	f7ff fedd 	bl	80018b0 <print>
	print("RIEGO:", 50, 138);
 8001af6:	228a      	movs	r2, #138	; 0x8a
 8001af8:	2132      	movs	r1, #50	; 0x32
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <pantalla_principal+0x144>)
 8001afc:	f7ff fed8 	bl	80018b0 <print>
	print("ALARMA:", 50, 182);
 8001b00:	22b6      	movs	r2, #182	; 0xb6
 8001b02:	2132      	movs	r1, #50	; 0x32
 8001b04:	4812      	ldr	r0, [pc, #72]	; (8001b50 <pantalla_principal+0x148>)
 8001b06:	f7ff fed3 	bl	80018b0 <print>
	print("PERSIANA:", 50, 226);
 8001b0a:	22e2      	movs	r2, #226	; 0xe2
 8001b0c:	2132      	movs	r1, #50	; 0x32
 8001b0e:	4811      	ldr	r0, [pc, #68]	; (8001b54 <pantalla_principal+0x14c>)
 8001b10:	f7ff fece 	bl	80018b0 <print>
	print("CLIMA:", 240, 94);
 8001b14:	225e      	movs	r2, #94	; 0x5e
 8001b16:	21f0      	movs	r1, #240	; 0xf0
 8001b18:	480f      	ldr	r0, [pc, #60]	; (8001b58 <pantalla_principal+0x150>)
 8001b1a:	f7ff fec9 	bl	80018b0 <print>
	print("TEMP:", 240, 138);
 8001b1e:	228a      	movs	r2, #138	; 0x8a
 8001b20:	21f0      	movs	r1, #240	; 0xf0
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <pantalla_principal+0x154>)
 8001b24:	f7ff fec4 	bl	80018b0 <print>
	print("HUMEDAD:", 240, 182);
 8001b28:	22b6      	movs	r2, #182	; 0xb6
 8001b2a:	21f0      	movs	r1, #240	; 0xf0
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <pantalla_principal+0x158>)
 8001b2e:	f7ff febf 	bl	80018b0 <print>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08006f74 	.word	0x08006f74
 8001b40:	08006fc8 	.word	0x08006fc8
 8001b44:	08006fd4 	.word	0x08006fd4
 8001b48:	08006f88 	.word	0x08006f88
 8001b4c:	08006f90 	.word	0x08006f90
 8001b50:	08006f98 	.word	0x08006f98
 8001b54:	08006fa0 	.word	0x08006fa0
 8001b58:	08006fac 	.word	0x08006fac
 8001b5c:	08006fb4 	.word	0x08006fb4
 8001b60:	08006fbc 	.word	0x08006fbc

08001b64 <actualizar_pantalla>:

void actualizar_pantalla(int act){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	setColor(0, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fdc1 	bl	80016f8 <setColor>
	if(act==1){
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d12b      	bne.n	8001bd4 <actualizar_pantalla+0x70>
		fillRect(146, 94, 210,110);
 8001b7c:	236e      	movs	r3, #110	; 0x6e
 8001b7e:	22d2      	movs	r2, #210	; 0xd2
 8001b80:	215e      	movs	r1, #94	; 0x5e
 8001b82:	2092      	movs	r0, #146	; 0x92
 8001b84:	f7ff fe48 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001b88:	22ff      	movs	r2, #255	; 0xff
 8001b8a:	21ff      	movs	r1, #255	; 0xff
 8001b8c:	20ff      	movs	r0, #255	; 0xff
 8001b8e:	f7ff fdb3 	bl	80016f8 <setColor>
		setBackColor(0, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fdd0 	bl	800173c <setBackColor>
			if(getEstadoLuces()==0){
 8001b9c:	f7fe fd48 	bl	8000630 <getEstadoLuces>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <actualizar_pantalla+0x4e>
				print("OFF", 146, 94);
 8001ba6:	225e      	movs	r2, #94	; 0x5e
 8001ba8:	2192      	movs	r1, #146	; 0x92
 8001baa:	4891      	ldr	r0, [pc, #580]	; (8001df0 <actualizar_pantalla+0x28c>)
 8001bac:	f7ff fe80 	bl	80018b0 <print>
	}




}
 8001bb0:	e11a      	b.n	8001de8 <actualizar_pantalla+0x284>
			}else if(getEstadoLuces()==1){
 8001bb2:	f7fe fd3d 	bl	8000630 <getEstadoLuces>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <actualizar_pantalla+0x64>
				print("ON", 146, 94);
 8001bbc:	225e      	movs	r2, #94	; 0x5e
 8001bbe:	2192      	movs	r1, #146	; 0x92
 8001bc0:	488c      	ldr	r0, [pc, #560]	; (8001df4 <actualizar_pantalla+0x290>)
 8001bc2:	f7ff fe75 	bl	80018b0 <print>
}
 8001bc6:	e10f      	b.n	8001de8 <actualizar_pantalla+0x284>
				print("AUTO", 146, 94);
 8001bc8:	225e      	movs	r2, #94	; 0x5e
 8001bca:	2192      	movs	r1, #146	; 0x92
 8001bcc:	488a      	ldr	r0, [pc, #552]	; (8001df8 <actualizar_pantalla+0x294>)
 8001bce:	f7ff fe6f 	bl	80018b0 <print>
}
 8001bd2:	e109      	b.n	8001de8 <actualizar_pantalla+0x284>
	}else if(act==2){
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d11b      	bne.n	8001c12 <actualizar_pantalla+0xae>
		fillRect(146, 138, 210,154);
 8001bda:	239a      	movs	r3, #154	; 0x9a
 8001bdc:	22d2      	movs	r2, #210	; 0xd2
 8001bde:	218a      	movs	r1, #138	; 0x8a
 8001be0:	2092      	movs	r0, #146	; 0x92
 8001be2:	f7ff fe19 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001be6:	22ff      	movs	r2, #255	; 0xff
 8001be8:	21ff      	movs	r1, #255	; 0xff
 8001bea:	20ff      	movs	r0, #255	; 0xff
 8001bec:	f7ff fd84 	bl	80016f8 <setColor>
			if(getEstadoAnteriorRiego()==0){
 8001bf0:	f7fe fee4 	bl	80009bc <getEstadoAnteriorRiego>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <actualizar_pantalla+0xa2>
				print("ON", 146, 138);
 8001bfa:	228a      	movs	r2, #138	; 0x8a
 8001bfc:	2192      	movs	r1, #146	; 0x92
 8001bfe:	487d      	ldr	r0, [pc, #500]	; (8001df4 <actualizar_pantalla+0x290>)
 8001c00:	f7ff fe56 	bl	80018b0 <print>
}
 8001c04:	e0f0      	b.n	8001de8 <actualizar_pantalla+0x284>
				print("OFF", 146, 138);
 8001c06:	228a      	movs	r2, #138	; 0x8a
 8001c08:	2192      	movs	r1, #146	; 0x92
 8001c0a:	4879      	ldr	r0, [pc, #484]	; (8001df0 <actualizar_pantalla+0x28c>)
 8001c0c:	f7ff fe50 	bl	80018b0 <print>
}
 8001c10:	e0ea      	b.n	8001de8 <actualizar_pantalla+0x284>
	}else if(act==3){
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d11b      	bne.n	8001c50 <actualizar_pantalla+0xec>
		fillRect(162, 182, 226,198);
 8001c18:	23c6      	movs	r3, #198	; 0xc6
 8001c1a:	22e2      	movs	r2, #226	; 0xe2
 8001c1c:	21b6      	movs	r1, #182	; 0xb6
 8001c1e:	20a2      	movs	r0, #162	; 0xa2
 8001c20:	f7ff fdfa 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	21ff      	movs	r1, #255	; 0xff
 8001c28:	20ff      	movs	r0, #255	; 0xff
 8001c2a:	f7ff fd65 	bl	80016f8 <setColor>
			if(getEstadoSeguridad()==0){
 8001c2e:	f7fe ff77 	bl	8000b20 <getEstadoSeguridad>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <actualizar_pantalla+0xe0>
				print("OFF", 162, 182);
 8001c38:	22b6      	movs	r2, #182	; 0xb6
 8001c3a:	21a2      	movs	r1, #162	; 0xa2
 8001c3c:	486c      	ldr	r0, [pc, #432]	; (8001df0 <actualizar_pantalla+0x28c>)
 8001c3e:	f7ff fe37 	bl	80018b0 <print>
}
 8001c42:	e0d1      	b.n	8001de8 <actualizar_pantalla+0x284>
				print("ON", 162, 182);
 8001c44:	22b6      	movs	r2, #182	; 0xb6
 8001c46:	21a2      	movs	r1, #162	; 0xa2
 8001c48:	486a      	ldr	r0, [pc, #424]	; (8001df4 <actualizar_pantalla+0x290>)
 8001c4a:	f7ff fe31 	bl	80018b0 <print>
}
 8001c4e:	e0cb      	b.n	8001de8 <actualizar_pantalla+0x284>
	}else if(act==4){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d12d      	bne.n	8001cb2 <actualizar_pantalla+0x14e>
		fillRect(194, 226, 258,242);
 8001c56:	23f2      	movs	r3, #242	; 0xf2
 8001c58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c5c:	21e2      	movs	r1, #226	; 0xe2
 8001c5e:	20c2      	movs	r0, #194	; 0xc2
 8001c60:	f7ff fdda 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	21ff      	movs	r1, #255	; 0xff
 8001c68:	20ff      	movs	r0, #255	; 0xff
 8001c6a:	f7ff fd45 	bl	80016f8 <setColor>
			if(getEstadoPersianas()==0){
 8001c6e:	f7fe fde1 	bl	8000834 <getEstadoPersianas>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <actualizar_pantalla+0x120>
				print("STOP", 194, 226);
 8001c78:	22e2      	movs	r2, #226	; 0xe2
 8001c7a:	21c2      	movs	r1, #194	; 0xc2
 8001c7c:	485f      	ldr	r0, [pc, #380]	; (8001dfc <actualizar_pantalla+0x298>)
 8001c7e:	f7ff fe17 	bl	80018b0 <print>
}
 8001c82:	e0b1      	b.n	8001de8 <actualizar_pantalla+0x284>
			else if(getEstadoPersianas()==1){
 8001c84:	f7fe fdd6 	bl	8000834 <getEstadoPersianas>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <actualizar_pantalla+0x136>
				print("DOWN", 194, 226);
 8001c8e:	22e2      	movs	r2, #226	; 0xe2
 8001c90:	21c2      	movs	r1, #194	; 0xc2
 8001c92:	485b      	ldr	r0, [pc, #364]	; (8001e00 <actualizar_pantalla+0x29c>)
 8001c94:	f7ff fe0c 	bl	80018b0 <print>
}
 8001c98:	e0a6      	b.n	8001de8 <actualizar_pantalla+0x284>
			}else if(getEstadoPersianas()==2){
 8001c9a:	f7fe fdcb 	bl	8000834 <getEstadoPersianas>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 80a1 	bne.w	8001de8 <actualizar_pantalla+0x284>
				print("UP", 194, 226);
 8001ca6:	22e2      	movs	r2, #226	; 0xe2
 8001ca8:	21c2      	movs	r1, #194	; 0xc2
 8001caa:	4856      	ldr	r0, [pc, #344]	; (8001e04 <actualizar_pantalla+0x2a0>)
 8001cac:	f7ff fe00 	bl	80018b0 <print>
}
 8001cb0:	e09a      	b.n	8001de8 <actualizar_pantalla+0x284>
	}else if(act==5){
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d141      	bne.n	8001d3c <actualizar_pantalla+0x1d8>
		fillRect(336, 94, 400,110);
 8001cb8:	236e      	movs	r3, #110	; 0x6e
 8001cba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001cbe:	215e      	movs	r1, #94	; 0x5e
 8001cc0:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001cc4:	f7ff fda8 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	21ff      	movs	r1, #255	; 0xff
 8001ccc:	20ff      	movs	r0, #255	; 0xff
 8001cce:	f7ff fd13 	bl	80016f8 <setColor>
		setBackColor(0, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff fd30 	bl	800173c <setBackColor>
		if(getControlClima()==1){
 8001cdc:	f7fe fff4 	bl	8000cc8 <getControlClima>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <actualizar_pantalla+0x190>
			print("AUTO", 336, 94);
 8001ce6:	225e      	movs	r2, #94	; 0x5e
 8001ce8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001cec:	4842      	ldr	r0, [pc, #264]	; (8001df8 <actualizar_pantalla+0x294>)
 8001cee:	f7ff fddf 	bl	80018b0 <print>
}
 8001cf2:	e079      	b.n	8001de8 <actualizar_pantalla+0x284>
		}else if(getEstadoClima()==0){
 8001cf4:	f7fe ffa6 	bl	8000c44 <getEstadoClima>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <actualizar_pantalla+0x1a8>
				print("OFF", 336, 94);
 8001cfe:	225e      	movs	r2, #94	; 0x5e
 8001d00:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001d04:	483a      	ldr	r0, [pc, #232]	; (8001df0 <actualizar_pantalla+0x28c>)
 8001d06:	f7ff fdd3 	bl	80018b0 <print>
}
 8001d0a:	e06d      	b.n	8001de8 <actualizar_pantalla+0x284>
			}else if(getEstadoClima()==1){
 8001d0c:	f7fe ff9a 	bl	8000c44 <getEstadoClima>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d106      	bne.n	8001d24 <actualizar_pantalla+0x1c0>
				print("CALD", 336, 94);
 8001d16:	225e      	movs	r2, #94	; 0x5e
 8001d18:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001d1c:	483a      	ldr	r0, [pc, #232]	; (8001e08 <actualizar_pantalla+0x2a4>)
 8001d1e:	f7ff fdc7 	bl	80018b0 <print>
}
 8001d22:	e061      	b.n	8001de8 <actualizar_pantalla+0x284>
			}else if(getEstadoClima()==2){
 8001d24:	f7fe ff8e 	bl	8000c44 <getEstadoClima>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d15c      	bne.n	8001de8 <actualizar_pantalla+0x284>
				print("AIRE", 336, 94);
 8001d2e:	225e      	movs	r2, #94	; 0x5e
 8001d30:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001d34:	4835      	ldr	r0, [pc, #212]	; (8001e0c <actualizar_pantalla+0x2a8>)
 8001d36:	f7ff fdbb 	bl	80018b0 <print>
}
 8001d3a:	e055      	b.n	8001de8 <actualizar_pantalla+0x284>
	}else if(act==6){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d152      	bne.n	8001de8 <actualizar_pantalla+0x284>
		fillRect(336, 138, 400,154);
 8001d42:	239a      	movs	r3, #154	; 0x9a
 8001d44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d48:	218a      	movs	r1, #138	; 0x8a
 8001d4a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001d4e:	f7ff fd63 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	21ff      	movs	r1, #255	; 0xff
 8001d56:	20ff      	movs	r0, #255	; 0xff
 8001d58:	f7ff fcce 	bl	80016f8 <setColor>
		setBackColor(0, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fceb 	bl	800173c <setBackColor>
		sprintf(bufff, "%i", (int) Temperature);
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <actualizar_pantalla+0x2ac>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	ee17 2a90 	vmov	r2, s15
 8001d78:	4926      	ldr	r1, [pc, #152]	; (8001e14 <actualizar_pantalla+0x2b0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fa74 	bl	8006268 <siprintf>
		print(bufff, 336, 138);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	228a      	movs	r2, #138	; 0x8a
 8001d86:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fd90 	bl	80018b0 <print>
		setColor(0, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fcaf 	bl	80016f8 <setColor>
		fillRect(384, 182, 470,198);
 8001d9a:	23c6      	movs	r3, #198	; 0xc6
 8001d9c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001da0:	21b6      	movs	r1, #182	; 0xb6
 8001da2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001da6:	f7ff fd37 	bl	8001818 <fillRect>
		setColor(255, 255, 255);
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	21ff      	movs	r1, #255	; 0xff
 8001dae:	20ff      	movs	r0, #255	; 0xff
 8001db0:	f7ff fca2 	bl	80016f8 <setColor>
		setBackColor(0, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fcbf 	bl	800173c <setBackColor>
		sprintf(bufff, "%i", (int) Humidity);
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <actualizar_pantalla+0x2b4>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	ee17 2a90 	vmov	r2, s15
 8001dd0:	4910      	ldr	r1, [pc, #64]	; (8001e14 <actualizar_pantalla+0x2b0>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 fa48 	bl	8006268 <siprintf>
		print(bufff, 384, 182);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	22b6      	movs	r2, #182	; 0xb6
 8001dde:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fd64 	bl	80018b0 <print>
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	08006fe0 	.word	0x08006fe0
 8001df4:	08006fe4 	.word	0x08006fe4
 8001df8:	08006fe8 	.word	0x08006fe8
 8001dfc:	08006ff0 	.word	0x08006ff0
 8001e00:	08006ff8 	.word	0x08006ff8
 8001e04:	08007000 	.word	0x08007000
 8001e08:	08007004 	.word	0x08007004
 8001e0c:	0800700c 	.word	0x0800700c
 8001e10:	200000c4 	.word	0x200000c4
 8001e14:	08007014 	.word	0x08007014
 8001e18:	200000c8 	.word	0x200000c8

08001e1c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char readBuf[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001e24:	2201      	movs	r2, #1
 8001e26:	4905      	ldr	r1, [pc, #20]	; (8001e3c <HAL_UART_RxCpltCallback+0x20>)
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_UART_RxCpltCallback+0x24>)
 8001e2a:	f003 fb02 	bl	8005432 <HAL_UART_Receive_IT>
 bluetooth(readBuf);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <HAL_UART_RxCpltCallback+0x20>)
 8001e30:	f7ff f90a 	bl	8001048 <bluetooth>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200002c0 	.word	0x200002c0
 8001e40:	2000026c 	.word	0x2000026c

08001e44 <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d13b      	bne.n	8001ed2 <debouncer+0x8e>
		if (button_count == 0) {
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <debouncer+0x98>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <debouncer+0x36>
			counter = HAL_GetTick();
 8001e62:	f000 fe7b 	bl	8002b5c <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <debouncer+0x9c>)
 8001e6c:	601a      	str	r2, [r3, #0]
			button_count++;
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <debouncer+0x98>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <debouncer+0x98>)
 8001e78:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8001e7a:	f000 fe6f 	bl	8002b5c <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <debouncer+0x9c>)
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	2b13      	cmp	r3, #19
 8001e88:	d923      	bls.n	8001ed2 <debouncer+0x8e>
			counter = HAL_GetTick();
 8001e8a:	f000 fe67 	bl	8002b5c <HAL_GetTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <debouncer+0x9c>)
 8001e94:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	68b8      	ldr	r0, [r7, #8]
 8001e9c:	f001 fdaa 	bl	80039f4 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d003      	beq.n	8001eae <debouncer+0x6a>
				button_count = 1;
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <debouncer+0x98>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	e005      	b.n	8001eba <debouncer+0x76>
			} else {
				button_count++;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <debouncer+0x98>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <debouncer+0x98>)
 8001eb8:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <debouncer+0x98>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d107      	bne.n	8001ed2 <debouncer+0x8e>
				button_count = 0;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <debouncer+0x98>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
				return 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200000e4 	.word	0x200000e4
 8001ee0:	200000e8 	.word	0x200000e8

08001ee4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d106      	bne.n	8001f02 <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001efc:	2203      	movs	r2, #3
 8001efe:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8001f00:	e04a      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f08:	d106      	bne.n	8001f18 <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
}
 8001f16:	e03f      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f1e:	d106      	bne.n	8001f2e <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f28:	220d      	movs	r2, #13
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	e034      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f34:	d106      	bne.n	8001f44 <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f3e:	220a      	movs	r2, #10
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	e029      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d106      	bne.n	8001f58 <HAL_GPIO_EXTI_Callback+0x74>
		button_int = 1;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f52:	2207      	movs	r2, #7
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	e01f      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5e:	d106      	bne.n	8001f6e <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f68:	2209      	movs	r2, #9
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	e014      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f74:	d106      	bne.n	8001f84 <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f7e:	220e      	movs	r2, #14
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	e009      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_EXTI_Callback+0xb4>
		button_int = 1;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f94:	220f      	movs	r2, #15
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	200000dc 	.word	0x200000dc
 8001fa8:	200000e0 	.word	0x200000e0

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb0:	f000 fd6e 	bl	8002a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb4:	f000 f8d2 	bl	800215c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb8:	f000 fa6a 	bl	8002490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fbc:	f000 f98a 	bl	80022d4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001fc0:	f000 fa3c 	bl	800243c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001fc4:	f000 f934 	bl	8002230 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001fc8:	f000 fa02 	bl	80023d0 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001fcc:	f000 f9b0 	bl	8002330 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001fd0:	485a      	ldr	r0, [pc, #360]	; (800213c <main+0x190>)
 8001fd2:	f002 fe69 	bl	8004ca8 <HAL_TIM_Base_Start>
	//int menu_actual = 0;
	//int retorno = 0;
	pantalla_principal();
 8001fd6:	f7ff fd17 	bl	8001a08 <pantalla_principal>
	setEstadoPersianas(0);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7fe fbe0 	bl	80007a0 <setEstadoPersianas>
	setLuces(0);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7fe fad9 	bl	8000598 <setLuces>
	setEstadoClima(0);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe fde8 	bl	8000bbc <setEstadoClima>
	setEstadoSeguridad(0);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7fe fd13 	bl	8000a18 <setEstadoSeguridad>
	setEstadoRiego(2);
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7fe fc76 	bl	80008e4 <setEstadoRiego>
	lectura_dht11();
 8001ff8:	f7fe ff76 	bl	8000ee8 <lectura_dht11>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4950      	ldr	r1, [pc, #320]	; (8002140 <main+0x194>)
 8002000:	4850      	ldr	r0, [pc, #320]	; (8002144 <main+0x198>)
 8002002:	f003 fa16 	bl	8005432 <HAL_UART_Receive_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (boton_presionado) {
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <main+0x19c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3b03      	subs	r3, #3
 800200c:	2b0c      	cmp	r3, #12
 800200e:	f200 808b 	bhi.w	8002128 <main+0x17c>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <main+0x6c>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002129 	.word	0x08002129
 8002020:	08002129 	.word	0x08002129
 8002024:	08002129 	.word	0x08002129
 8002028:	080020ad 	.word	0x080020ad
 800202c:	08002129 	.word	0x08002129
 8002030:	080020c3 	.word	0x080020c3
 8002034:	08002095 	.word	0x08002095
 8002038:	08002129 	.word	0x08002129
 800203c:	08002063 	.word	0x08002063
 8002040:	0800207d 	.word	0x0800207d
 8002044:	080020db 	.word	0x080020db
 8002048:	080020f3 	.word	0x080020f3
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 800204c:	2208      	movs	r2, #8
 800204e:	493f      	ldr	r1, [pc, #252]	; (800214c <main+0x1a0>)
 8002050:	483f      	ldr	r0, [pc, #252]	; (8002150 <main+0x1a4>)
 8002052:	f7ff fef7 	bl	8001e44 <debouncer>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d056      	beq.n	800210a <main+0x15e>
				cambiarEstadoLuces();
 800205c:	f7fe faf4 	bl	8000648 <cambiarEstadoLuces>
			}
			break;
 8002060:	e053      	b.n	800210a <main+0x15e>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 8002062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002066:	493b      	ldr	r1, [pc, #236]	; (8002154 <main+0x1a8>)
 8002068:	4839      	ldr	r0, [pc, #228]	; (8002150 <main+0x1a4>)
 800206a:	f7ff feeb 	bl	8001e44 <debouncer>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04c      	beq.n	800210e <main+0x162>
				setEstadoPersianas(0);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe fb93 	bl	80007a0 <setEstadoPersianas>
			}
			break;
 800207a:	e048      	b.n	800210e <main+0x162>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 800207c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002080:	4932      	ldr	r1, [pc, #200]	; (800214c <main+0x1a0>)
 8002082:	4833      	ldr	r0, [pc, #204]	; (8002150 <main+0x1a4>)
 8002084:	f7ff fede 	bl	8001e44 <debouncer>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d041      	beq.n	8002112 <main+0x166>
				cambiarEstadoPersianas();
 800208e:	f7fe fbe9 	bl	8000864 <cambiarEstadoPersianas>
			}
			break;
 8002092:	e03e      	b.n	8002112 <main+0x166>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	492c      	ldr	r1, [pc, #176]	; (800214c <main+0x1a0>)
 800209a:	482d      	ldr	r0, [pc, #180]	; (8002150 <main+0x1a4>)
 800209c:	f7ff fed2 	bl	8001e44 <debouncer>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d037      	beq.n	8002116 <main+0x16a>
				cambiarEstadoRiego();
 80020a6:	f7fe fc6f 	bl	8000988 <cambiarEstadoRiego>
			}
			break;
 80020aa:	e034      	b.n	8002116 <main+0x16a>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	4927      	ldr	r1, [pc, #156]	; (800214c <main+0x1a0>)
 80020b0:	4827      	ldr	r0, [pc, #156]	; (8002150 <main+0x1a4>)
 80020b2:	f7ff fec7 	bl	8001e44 <debouncer>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02e      	beq.n	800211a <main+0x16e>
				cambiarEstadoSeguridad();
 80020bc:	f7fe fd3c 	bl	8000b38 <cambiarEstadoSeguridad>
			}
			break;
 80020c0:	e02b      	b.n	800211a <main+0x16e>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	4921      	ldr	r1, [pc, #132]	; (800214c <main+0x1a0>)
 80020c8:	4821      	ldr	r0, [pc, #132]	; (8002150 <main+0x1a4>)
 80020ca:	f7ff febb 	bl	8001e44 <debouncer>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d024      	beq.n	800211e <main+0x172>
				intruso_detectado();
 80020d4:	f7fe fd40 	bl	8000b58 <intruso_detectado>
			}
			break;
 80020d8:	e021      	b.n	800211e <main+0x172>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 80020da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <main+0x1ac>)
 80020e0:	481b      	ldr	r0, [pc, #108]	; (8002150 <main+0x1a4>)
 80020e2:	f7ff feaf 	bl	8001e44 <debouncer>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01a      	beq.n	8002122 <main+0x176>
				cambiarControlClima();
 80020ec:	f7fe fdf8 	bl	8000ce0 <cambiarControlClima>
			}
			break;
 80020f0:	e017      	b.n	8002122 <main+0x176>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 80020f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020f6:	4918      	ldr	r1, [pc, #96]	; (8002158 <main+0x1ac>)
 80020f8:	4815      	ldr	r0, [pc, #84]	; (8002150 <main+0x1a4>)
 80020fa:	f7ff fea3 	bl	8001e44 <debouncer>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <main+0x17a>
				cambiarEstadoClima();
 8002104:	f7fe fdaa 	bl	8000c5c <cambiarEstadoClima>
			}
			break;
 8002108:	e00d      	b.n	8002126 <main+0x17a>
			break;
 800210a:	bf00      	nop
 800210c:	e00c      	b.n	8002128 <main+0x17c>
			break;
 800210e:	bf00      	nop
 8002110:	e00a      	b.n	8002128 <main+0x17c>
			break;
 8002112:	bf00      	nop
 8002114:	e008      	b.n	8002128 <main+0x17c>
			break;
 8002116:	bf00      	nop
 8002118:	e006      	b.n	8002128 <main+0x17c>
			break;
 800211a:	bf00      	nop
 800211c:	e004      	b.n	8002128 <main+0x17c>
			break;
 800211e:	bf00      	nop
 8002120:	e002      	b.n	8002128 <main+0x17c>
			break;
 8002122:	bf00      	nop
 8002124:	e000      	b.n	8002128 <main+0x17c>
			break;
 8002126:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 8002128:	f7fe fb34 	bl	8000794 <luces>
		riego();
 800212c:	f7fe fc6e 	bl	8000a0c <riego>
		seguridad();
 8002130:	f7fe fd3c 	bl	8000bac <seguridad>
		clima();
 8002134:	f7fe ff32 	bl	8000f9c <clima>
		switch (boton_presionado) {
 8002138:	e765      	b.n	8002006 <main+0x5a>
 800213a:	bf00      	nop
 800213c:	200001dc 	.word	0x200001dc
 8002140:	200002c0 	.word	0x200002c0
 8002144:	2000026c 	.word	0x2000026c
 8002148:	200000e0 	.word	0x200000e0
 800214c:	40020000 	.word	0x40020000
 8002150:	200000dc 	.word	0x200000dc
 8002154:	40021000 	.word	0x40021000
 8002158:	40020400 	.word	0x40020400

0800215c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	2230      	movs	r2, #48	; 0x30
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f004 f874 	bl	8006258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <SystemClock_Config+0xcc>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <SystemClock_Config+0xcc>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <SystemClock_Config+0xd0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <SystemClock_Config+0xd0>)
 80021a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <SystemClock_Config+0xd0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2310      	movs	r3, #16
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021cc:	2308      	movs	r3, #8
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80021d0:	2332      	movs	r3, #50	; 0x32
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021d8:	2307      	movs	r3, #7
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 f89d 	bl	8004320 <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021ec:	f000 fa32 	bl	8002654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f0:	230f      	movs	r3, #15
 80021f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fafe 	bl	8004810 <HAL_RCC_ClockConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800221a:	f000 fa1b 	bl	8002654 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	3750      	adds	r7, #80	; 0x50
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000

08002230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002236:	463b      	mov	r3, r7
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <MX_ADC1_Init+0x9c>)
 8002246:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <MX_ADC1_Init+0x98>)
 800224a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800224e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <MX_ADC1_Init+0x98>)
 800225e:	2200      	movs	r2, #0
 8002260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_ADC1_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <MX_ADC1_Init+0xa0>)
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_ADC1_Init+0x98>)
 800227e:	2201      	movs	r2, #1
 8002280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_ADC1_Init+0x98>)
 800228c:	2201      	movs	r2, #1
 800228e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_ADC1_Init+0x98>)
 8002292:	f000 fc6f 	bl	8002b74 <HAL_ADC_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800229c:	f000 f9da 	bl	8002654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022a4:	2301      	movs	r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_ADC1_Init+0x98>)
 80022b2:	f000 fe41 	bl	8002f38 <HAL_ADC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022bc:	f000 f9ca 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000190 	.word	0x20000190
 80022cc:	40012000 	.word	0x40012000
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_I2C1_Init+0x50>)
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <MX_I2C1_Init+0x54>)
 80022dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_I2C1_Init+0x50>)
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <MX_I2C1_Init+0x58>)
 80022e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_I2C1_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_I2C1_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_I2C1_Init+0x50>)
 80022f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <MX_I2C1_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_I2C1_Init+0x50>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <MX_I2C1_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_I2C1_Init+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <MX_I2C1_Init+0x50>)
 8002312:	f001 fbb9 	bl	8003a88 <HAL_I2C_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800231c:	f000 f99a 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000100 	.word	0x20000100
 8002328:	40005400 	.word	0x40005400
 800232c:	000186a0 	.word	0x000186a0

08002330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_TIM1_Init+0x98>)
 800234e:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <MX_TIM1_Init+0x9c>)
 8002350:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <MX_TIM1_Init+0x98>)
 8002354:	f240 22ff 	movw	r2, #767	; 0x2ff
 8002358:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_TIM1_Init+0x98>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <MX_TIM1_Init+0x98>)
 8002362:	22fe      	movs	r2, #254	; 0xfe
 8002364:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <MX_TIM1_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <MX_TIM1_Init+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <MX_TIM1_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002378:	4813      	ldr	r0, [pc, #76]	; (80023c8 <MX_TIM1_Init+0x98>)
 800237a:	f002 fc45 	bl	8004c08 <HAL_TIM_Base_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002384:	f000 f966 	bl	8002654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_TIM1_Init+0x98>)
 8002396:	f002 fcef 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023a0:	f000 f958 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_TIM1_Init+0x98>)
 80023b2:	f002 fee3 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023bc:	f000 f94a 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000224 	.word	0x20000224
 80023cc:	40010000 	.word	0x40010000

080023d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d6:	463b      	mov	r3, r7
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <MX_TIM6_Init+0x64>)
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <MX_TIM6_Init+0x68>)
 80023e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <MX_TIM6_Init+0x64>)
 80023e6:	2231      	movs	r2, #49	; 0x31
 80023e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <MX_TIM6_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <MX_TIM6_Init+0x64>)
 80023f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80023f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_TIM6_Init+0x64>)
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <MX_TIM6_Init+0x64>)
 8002400:	f002 fc02 	bl	8004c08 <HAL_TIM_Base_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800240a:	f000 f923 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <MX_TIM6_Init+0x64>)
 800241c:	f002 feae 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002426:	f000 f915 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200001dc 	.word	0x200001dc
 8002438:	40001000 	.word	0x40001000

0800243c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <MX_USART6_UART_Init+0x50>)
 8002444:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002448:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800244c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_USART6_UART_Init+0x4c>)
 8002474:	f002 fefe 	bl	8005274 <HAL_UART_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800247e:	f000 f8e9 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000026c 	.word	0x2000026c
 800248c:	40011400 	.word	0x40011400

08002490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a64      	ldr	r2, [pc, #400]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a5d      	ldr	r2, [pc, #372]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b57      	ldr	r3, [pc, #348]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a56      	ldr	r2, [pc, #344]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b54      	ldr	r3, [pc, #336]	; (8002640 <MX_GPIO_Init+0x1b0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <MX_GPIO_Init+0x1b0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <MX_GPIO_Init+0x1b0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a48      	ldr	r2, [pc, #288]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a41      	ldr	r2, [pc, #260]	; (8002640 <MX_GPIO_Init+0x1b0>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <MX_GPIO_Init+0x1b0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002554:	483b      	ldr	r0, [pc, #236]	; (8002644 <MX_GPIO_Init+0x1b4>)
 8002556:	f001 fa65 	bl	8003a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8002560:	4839      	ldr	r0, [pc, #228]	; (8002648 <MX_GPIO_Init+0x1b8>)
 8002562:	f001 fa5f 	bl	8003a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 8002566:	f242 6389 	movw	r3, #9865	; 0x2689
 800256a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800256c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4831      	ldr	r0, [pc, #196]	; (8002644 <MX_GPIO_Init+0x1b4>)
 800257e:	f001 f89d 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002582:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8002586:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	4619      	mov	r1, r3
 800259a:	482a      	ldr	r0, [pc, #168]	; (8002644 <MX_GPIO_Init+0x1b4>)
 800259c:	f001 f88e 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4825      	ldr	r0, [pc, #148]	; (800264c <MX_GPIO_Init+0x1bc>)
 80025b8:	f001 f880 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	481f      	ldr	r0, [pc, #124]	; (8002650 <MX_GPIO_Init+0x1c0>)
 80025d4:	f001 f872 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80025d8:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80025dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	4619      	mov	r1, r3
 80025f0:	4815      	ldr	r0, [pc, #84]	; (8002648 <MX_GPIO_Init+0x1b8>)
 80025f2:	f001 f863 	bl	80036bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2006      	movs	r0, #6
 80025fc:	f000 ff95 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002600:	2006      	movs	r0, #6
 8002602:	f000 ffae 	bl	8003562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2009      	movs	r0, #9
 800260c:	f000 ff8d 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002610:	2009      	movs	r0, #9
 8002612:	f000 ffa6 	bl	8003562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2017      	movs	r0, #23
 800261c:	f000 ff85 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002620:	2017      	movs	r0, #23
 8002622:	f000 ff9e 	bl	8003562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2028      	movs	r0, #40	; 0x28
 800262c:	f000 ff7d 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002630:	2028      	movs	r0, #40	; 0x28
 8002632:	f000 ff96 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	; 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020c00 	.word	0x40020c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40020400 	.word	0x40020400

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800265c:	e7fe      	b.n	800265c <Error_Handler+0x8>
	...

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_MspInit+0x4c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_MspInit+0x4c>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_MspInit+0x4c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_MspInit+0x4c>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_MspInit+0x4c>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_MspInit+0x4c>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800269e:	2007      	movs	r0, #7
 80026a0:	f000 ff38 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_ADC_MspInit+0x7c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d127      	bne.n	8002722 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_ADC_MspInit+0x80>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800270a:	2302      	movs	r3, #2
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270e:	2303      	movs	r3, #3
 8002710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_ADC_MspInit+0x84>)
 800271e:	f000 ffcd 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012000 	.word	0x40012000
 8002730:	40023800 	.word	0x40023800
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_I2C_MspInit+0x84>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12b      	bne.n	80027b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277a:	2312      	movs	r3, #18
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002786:	2304      	movs	r3, #4
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <HAL_I2C_MspInit+0x8c>)
 8002792:	f000 ff93 	bl	80036bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 80027a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_I2C_MspInit+0x88>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400

080027c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <HAL_TIM_Base_MspInit+0x64>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80027f6:	e012      	b.n	800281e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_TIM_Base_MspInit+0x6c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10d      	bne.n	800281e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_TIM_Base_MspInit+0x68>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40023800 	.word	0x40023800
 8002834:	40001000 	.word	0x40001000

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_UART_MspInit+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d133      	bne.n	80028c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002864:	f043 0320 	orr.w	r3, r3, #32
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028a2:	2308      	movs	r3, #8
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4809      	ldr	r0, [pc, #36]	; (80028d4 <HAL_UART_MspInit+0x9c>)
 80028ae:	f000 ff05 	bl	80036bc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2047      	movs	r0, #71	; 0x47
 80028b8:	f000 fe37 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028bc:	2047      	movs	r0, #71	; 0x47
 80028be:	f000 fe50 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020800 	.word	0x40020800

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <NMI_Handler+0x4>

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f000 f906 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002930:	2001      	movs	r0, #1
 8002932:	f001 f891 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}

0800293a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800293e:	2008      	movs	r0, #8
 8002940:	f001 f88a 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}

08002948 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800294c:	2080      	movs	r0, #128	; 0x80
 800294e:	f001 f883 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002956:	f001 f87f 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002962:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002966:	f001 f877 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800296a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800296e:	f001 f873 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002972:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002976:	f001 f86f 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800297a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800297e:	f001 f86b 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002982:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002986:	f001 f867 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800298a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800298e:	f001 f863 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <USART6_IRQHandler+0x10>)
 800299e:	f002 fd79 	bl	8005494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000026c 	.word	0x2000026c

080029ac <_sbrk>:
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <_sbrk+0x5c>)
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <_sbrk+0x60>)
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <_sbrk+0x22>
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_sbrk+0x64>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <_sbrk+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d207      	bcs.n	80029ec <_sbrk+0x40>
 80029dc:	f003 fc12 	bl	8006204 <__errno>
 80029e0:	4603      	mov	r3, r0
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e009      	b.n	8002a00 <_sbrk+0x54>
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <_sbrk+0x64>)
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20020000 	.word	0x20020000
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	200000ec 	.word	0x200000ec
 8002a14:	200002d8 	.word	0x200002d8

08002a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <SystemInit+0x20>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <SystemInit+0x20>)
 8002a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack     /* set stack pointer */
 8002a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a40:	480d      	ldr	r0, [pc, #52]	; (8002a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a42:	490e      	ldr	r1, [pc, #56]	; (8002a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a48:	e002      	b.n	8002a50 <LoopCopyDataInit>

08002a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4e:	3304      	adds	r3, #4

08002a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a54:	d3f9      	bcc.n	8002a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a58:	4c0b      	ldr	r4, [pc, #44]	; (8002a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a5c:	e001      	b.n	8002a62 <LoopFillZerobss>

08002a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a60:	3204      	adds	r2, #4

08002a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a64:	d3fb      	bcc.n	8002a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a66:	f7ff ffd7 	bl	8002a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6a:	f003 fbd1 	bl	8006210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6e:	f7ff fa9d 	bl	8001fac <main>
  bx  lr    
 8002a72:	4770      	bx	lr
;  ldr   sp, =_estack     /* set stack pointer */
 8002a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a80:	08007074 	.word	0x08007074
  ldr r2, =_sbss
 8002a84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a88:	200002d8 	.word	0x200002d8

08002a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <ADC_IRQHandler>
	...

08002a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <HAL_Init+0x40>)
 8002a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_Init+0x40>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_Init+0x40>)
 8002aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_Init+0x40>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <HAL_Init+0x40>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 fd2b 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f000 f808 	bl	8002ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac4:	f7ff fdcc 	bl	8002660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00

08002ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x54>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_InitTick+0x58>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fd43 	bl	800357e <HAL_SYSTICK_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00e      	b.n	8002b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d80a      	bhi.n	8002b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f000 fd0b 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <HAL_InitTick+0x5c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000010 	.word	0x20000010
 8002b2c:	20000018 	.word	0x20000018
 8002b30:	20000014 	.word	0x20000014

08002b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x20>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_IncTick+0x24>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_IncTick+0x24>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000018 	.word	0x20000018
 8002b58:	200002c4 	.word	0x200002c4

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_GetTick+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200002c4 	.word	0x200002c4

08002b74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e033      	b.n	8002bf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fd8c 	bl	80026b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bba:	f023 0302 	bic.w	r3, r3, #2
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fad8 	bl	800317c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
 8002be2:	e001      	b.n	8002be8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Start+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e0b2      	b.n	8002d7c <HAL_ADC_Start+0x180>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d018      	beq.n	8002c5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3c:	4b52      	ldr	r3, [pc, #328]	; (8002d88 <HAL_ADC_Start+0x18c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_ADC_Start+0x190>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0c9a      	lsrs	r2, r3, #18
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c50:	e002      	b.n	8002c58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f9      	bne.n	8002c52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d17a      	bne.n	8002d62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f023 0206 	bic.w	r2, r3, #6
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_ADC_Start+0x194>)
 8002cca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d12a      	bne.n	8002d38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_ADC_Start+0x198>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d015      	beq.n	8002d18 <HAL_ADC_Start+0x11c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_ADC_Start+0x19c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADC_Start+0x106>
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_ADC_Start+0x194>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_ADC_Start+0x1a0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d136      	bne.n	8002d7a <HAL_ADC_Start+0x17e>
 8002d0c:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_ADC_Start+0x194>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d130      	bne.n	8002d7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d129      	bne.n	8002d7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	e020      	b.n	8002d7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_ADC_Start+0x198>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d11b      	bne.n	8002d7a <HAL_ADC_Start+0x17e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d114      	bne.n	8002d7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e00b      	b.n	8002d7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	20000010 	.word	0x20000010
 8002d8c:	431bde83 	.word	0x431bde83
 8002d90:	40012300 	.word	0x40012300
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40012100 	.word	0x40012100
 8002d9c:	40012200 	.word	0x40012200

08002da0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_Stop+0x16>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e021      	b.n	8002dfa <HAL_ADC_Stop+0x5a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d113      	bne.n	8002e4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d10b      	bne.n	8002e4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e063      	b.n	8002f14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e4c:	f7ff fe86 	bl	8002b5c <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e52:	e021      	b.n	8002e98 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d01d      	beq.n	8002e98 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_ADC_PollForConversion+0x6c>
 8002e62:	f7ff fe7b 	bl	8002b5c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d212      	bcs.n	8002e98 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d00b      	beq.n	8002e98 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e03d      	b.n	8002f14 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d1d6      	bne.n	8002e54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0212 	mvn.w	r2, #18
 8002eae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d123      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11f      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d111      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1c>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e105      	b.n	8003160 <HAL_ADC_ConfigChannel+0x228>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d925      	bls.n	8002fb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43da      	mvns	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	400a      	ands	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68d9      	ldr	r1, [r3, #12]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3b1e      	subs	r3, #30
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	e022      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4403      	add	r3, r0
 8002fec:	409a      	lsls	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d824      	bhi.n	8003048 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	3b05      	subs	r3, #5
 8003010:	221f      	movs	r2, #31
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b05      	subs	r3, #5
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
 8003046:	e04c      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d824      	bhi.n	800309a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	3b23      	subs	r3, #35	; 0x23
 8003062:	221f      	movs	r2, #31
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43da      	mvns	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	400a      	ands	r2, r1
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b23      	subs	r3, #35	; 0x23
 800308c:	fa00 f203 	lsl.w	r2, r0, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
 8003098:	e023      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3b41      	subs	r3, #65	; 0x41
 80030ac:	221f      	movs	r2, #31
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	400a      	ands	r2, r1
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3b41      	subs	r3, #65	; 0x41
 80030d6:	fa00 f203 	lsl.w	r2, r0, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_ADC_ConfigChannel+0x234>)
 80030e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a21      	ldr	r2, [pc, #132]	; (8003170 <HAL_ADC_ConfigChannel+0x238>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x1cc>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d105      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_ADC_ConfigChannel+0x238>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d123      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x21e>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b10      	cmp	r3, #16
 8003114:	d003      	beq.n	800311e <HAL_ADC_ConfigChannel+0x1e6>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b11      	cmp	r3, #17
 800311c:	d11b      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d111      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_ADC_ConfigChannel+0x23c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <HAL_ADC_ConfigChannel+0x240>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0c9a      	lsrs	r2, r3, #18
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40012300 	.word	0x40012300
 8003170:	40012000 	.word	0x40012000
 8003174:	20000010 	.word	0x20000010
 8003178:	431bde83 	.word	0x431bde83

0800317c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003184:	4b79      	ldr	r3, [pc, #484]	; (800336c <ADC_Init+0x1f0>)
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	4a58      	ldr	r2, [pc, #352]	; (8003370 <ADC_Init+0x1f4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e00f      	b.n	800327a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0202 	bic.w	r2, r2, #2
 8003288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e1b      	ldrb	r3, [r3, #24]
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	3b01      	subs	r3, #1
 80032d4:	035a      	lsls	r2, r3, #13
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e007      	b.n	80032f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	3b01      	subs	r3, #1
 800330c:	051a      	lsls	r2, r3, #20
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003332:	025a      	lsls	r2, r3, #9
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	029a      	lsls	r2, r3, #10
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40012300 	.word	0x40012300
 8003370:	0f000001 	.word	0x0f000001

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff fada 	bl	8002b5c <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d008      	beq.n	80035c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e052      	b.n	800366e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0216 	bic.w	r2, r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <HAL_DMA_Abort+0x62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0208 	bic.w	r2, r2, #8
 8003606:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003618:	e013      	b.n	8003642 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800361a:	f7ff fa9f 	bl	8002b5c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b05      	cmp	r3, #5
 8003626:	d90c      	bls.n	8003642 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2203      	movs	r2, #3
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e015      	b.n	800366e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e4      	bne.n	800361a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e00c      	b.n	80036ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2205      	movs	r2, #5
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e16b      	b.n	80039b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 815a 	bne.w	80039aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	2b02      	cmp	r3, #2
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80b4 	beq.w	80039aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <HAL_GPIO_Init+0x30c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a5f      	ldr	r2, [pc, #380]	; (80039c8 <HAL_GPIO_Init+0x30c>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <HAL_GPIO_Init+0x30c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_GPIO_Init+0x310>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_GPIO_Init+0x314>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02b      	beq.n	80038e2 <HAL_GPIO_Init+0x226>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_GPIO_Init+0x318>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d025      	beq.n	80038de <HAL_GPIO_Init+0x222>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a50      	ldr	r2, [pc, #320]	; (80039d8 <HAL_GPIO_Init+0x31c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01f      	beq.n	80038da <HAL_GPIO_Init+0x21e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <HAL_GPIO_Init+0x320>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x21a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4e      	ldr	r2, [pc, #312]	; (80039e0 <HAL_GPIO_Init+0x324>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x216>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <HAL_GPIO_Init+0x328>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x212>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4c      	ldr	r2, [pc, #304]	; (80039e8 <HAL_GPIO_Init+0x32c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x20e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_GPIO_Init+0x330>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x20a>
 80038c2:	2307      	movs	r3, #7
 80038c4:	e00e      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038c6:	2308      	movs	r3, #8
 80038c8:	e00c      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038ca:	2306      	movs	r3, #6
 80038cc:	e00a      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038ce:	2305      	movs	r3, #5
 80038d0:	e008      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038d6:	2303      	movs	r3, #3
 80038d8:	e004      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038da:	2302      	movs	r3, #2
 80038dc:	e002      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_GPIO_Init+0x228>
 80038e2:	2300      	movs	r3, #0
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f002 0203 	and.w	r2, r2, #3
 80038ea:	0092      	lsls	r2, r2, #2
 80038ec:	4093      	lsls	r3, r2
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f4:	4935      	ldr	r1, [pc, #212]	; (80039cc <HAL_GPIO_Init+0x310>)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	3302      	adds	r3, #2
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_GPIO_Init+0x334>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_GPIO_Init+0x334>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_GPIO_Init+0x334>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <HAL_GPIO_Init+0x334>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <HAL_GPIO_Init+0x334>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_GPIO_Init+0x334>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_GPIO_Init+0x334>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <HAL_GPIO_Init+0x334>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	f67f ae90 	bls.w	80036d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40021400 	.word	0x40021400
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40021c00 	.word	0x40021c00
 80039f0:	40013c00 	.word	0x40013c00

080039f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e001      	b.n	8003a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a40:	e003      	b.n	8003a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	619a      	str	r2, [r3, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fa34 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40013c00 	.word	0x40013c00

08003a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e12b      	b.n	8003cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe fe42 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aec:	f001 f864 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8003af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a81      	ldr	r2, [pc, #516]	; (8003cfc <HAL_I2C_Init+0x274>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d807      	bhi.n	8003b0c <HAL_I2C_Init+0x84>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_I2C_Init+0x278>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bf94      	ite	ls
 8003b04:	2301      	movls	r3, #1
 8003b06:	2300      	movhi	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e006      	b.n	8003b1a <HAL_I2C_Init+0x92>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a7d      	ldr	r2, [pc, #500]	; (8003d04 <HAL_I2C_Init+0x27c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	bf94      	ite	ls
 8003b14:	2301      	movls	r3, #1
 8003b16:	2300      	movhi	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0e7      	b.n	8003cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a78      	ldr	r2, [pc, #480]	; (8003d08 <HAL_I2C_Init+0x280>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a6a      	ldr	r2, [pc, #424]	; (8003cfc <HAL_I2C_Init+0x274>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d802      	bhi.n	8003b5c <HAL_I2C_Init+0xd4>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	e009      	b.n	8003b70 <HAL_I2C_Init+0xe8>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	4a69      	ldr	r2, [pc, #420]	; (8003d0c <HAL_I2C_Init+0x284>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	3301      	adds	r3, #1
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	495c      	ldr	r1, [pc, #368]	; (8003cfc <HAL_I2C_Init+0x274>)
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	d819      	bhi.n	8003bc4 <HAL_I2C_Init+0x13c>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1e59      	subs	r1, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9e:	1c59      	adds	r1, r3, #1
 8003ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba4:	400b      	ands	r3, r1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_I2C_Init+0x138>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e59      	subs	r1, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbe:	e051      	b.n	8003c64 <HAL_I2C_Init+0x1dc>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e04f      	b.n	8003c64 <HAL_I2C_Init+0x1dc>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d111      	bne.n	8003bf0 <HAL_I2C_Init+0x168>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e012      	b.n	8003c16 <HAL_I2C_Init+0x18e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e58      	subs	r0, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	0099      	lsls	r1, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c06:	3301      	adds	r3, #1
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Init+0x196>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e022      	b.n	8003c64 <HAL_I2C_Init+0x1dc>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10e      	bne.n	8003c44 <HAL_I2C_Init+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e58      	subs	r0, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	440b      	add	r3, r1
 8003c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c42:	e00f      	b.n	8003c64 <HAL_I2C_Init+0x1dc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e58      	subs	r0, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	6809      	ldr	r1, [r1, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6911      	ldr	r1, [r2, #16]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	000186a0 	.word	0x000186a0
 8003d00:	001e847f 	.word	0x001e847f
 8003d04:	003d08ff 	.word	0x003d08ff
 8003d08:	431bde83 	.word	0x431bde83
 8003d0c:	10624dd3 	.word	0x10624dd3

08003d10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	817b      	strh	r3, [r7, #10]
 8003d20:	4613      	mov	r3, r2
 8003d22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7fe ff1a 	bl	8002b5c <HAL_GetTick>
 8003d28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	f040 80e0 	bne.w	8003ef8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2319      	movs	r3, #25
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4970      	ldr	r1, [pc, #448]	; (8003f04 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f964 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0d3      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2C_Master_Transmit+0x50>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0cc      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d007      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2210      	movs	r2, #16
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	893a      	ldrh	r2, [r7, #8]
 8003db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a50      	ldr	r2, [pc, #320]	; (8003f08 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f89c 	bl	8003f0c <I2C_MasterRequestWrite>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e08d      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003df4:	e066      	b.n	8003ec4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f9de 	bl	80041bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11b      	bne.n	8003e98 <HAL_I2C_Master_Transmit+0x188>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	6a39      	ldr	r1, [r7, #32]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9ce 	bl	800423e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d107      	bne.n	8003ec0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e01a      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d194      	bne.n	8003df6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	00100002 	.word	0x00100002
 8003f08:	ffff0000 	.word	0xffff0000

08003f0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d006      	beq.n	8003f36 <I2C_MasterRequestWrite+0x2a>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d003      	beq.n	8003f36 <I2C_MasterRequestWrite+0x2a>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f34:	d108      	bne.n	8003f48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e00b      	b.n	8003f60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	2b12      	cmp	r3, #18
 8003f4e:	d107      	bne.n	8003f60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f84f 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d103      	bne.n	8003f90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e035      	b.n	8004000 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f9c:	d108      	bne.n	8003fb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	e01b      	b.n	8003fe8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	11db      	asrs	r3, r3, #7
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0306 	and.w	r3, r3, #6
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f063 030f 	orn	r3, r3, #15
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <I2C_MasterRequestWrite+0xfc>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f875 	bl	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e010      	b.n	8004000 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4907      	ldr	r1, [pc, #28]	; (800400c <I2C_MasterRequestWrite+0x100>)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f865 	bl	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	00010008 	.word	0x00010008
 800400c:	00010002 	.word	0x00010002

08004010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004020:	e025      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d021      	beq.n	800406e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7fe fd97 	bl	8002b5c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d116      	bne.n	800406e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0220 	orr.w	r2, r3, #32
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e023      	b.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d10d      	bne.n	8004094 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	e00c      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0b6      	beq.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040cc:	e051      	b.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d123      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e046      	b.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d021      	beq.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe fd15 	bl	8002b5c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d116      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e020      	b.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10c      	bne.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e00b      	b.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d18d      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c8:	e02d      	b.n	8004226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f878 	bl	80042c0 <I2C_IsAcknowledgeFailed>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e02d      	b.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d021      	beq.n	8004226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe fcbb 	bl	8002b5c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d116      	bne.n	8004226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e007      	b.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d1ca      	bne.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800424a:	e02d      	b.n	80042a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f837 	bl	80042c0 <I2C_IsAcknowledgeFailed>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e02d      	b.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d021      	beq.n	80042a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004264:	f7fe fc7a 	bl	8002b5c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d116      	bne.n	80042a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e007      	b.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d1ca      	bne.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d11b      	bne.n	8004310 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f043 0204 	orr.w	r2, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e264      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433e:	4ba3      	ldr	r3, [pc, #652]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00c      	beq.n	8004364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4ba0      	ldr	r3, [pc, #640]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004352:	2b08      	cmp	r3, #8
 8004354:	d112      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004362:	d10b      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	4b99      	ldr	r3, [pc, #612]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d157      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e23f      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b91      	ldr	r3, [pc, #580]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a90      	ldr	r2, [pc, #576]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b8b      	ldr	r3, [pc, #556]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a8a      	ldr	r2, [pc, #552]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 80043b8:	4b84      	ldr	r3, [pc, #528]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a83      	ldr	r2, [pc, #524]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a80      	ldr	r2, [pc, #512]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fbc0 	bl	8002b5c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fe fbbc 	bl	8002b5c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e204      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b76      	ldr	r3, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe fbac 	bl	8002b5c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe fba8 	bl	8002b5c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1f0      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b6c      	ldr	r3, [pc, #432]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0xe8>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004436:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c4      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4952      	ldr	r1, [pc, #328]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b4f      	ldr	r3, [pc, #316]	; (80045d0 <HAL_RCC_OscConfig+0x2b0>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe fb61 	bl	8002b5c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe fb5d 	bl	8002b5c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a5      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b46      	ldr	r3, [pc, #280]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4940      	ldr	r1, [pc, #256]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_OscConfig+0x2b0>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fb40 	bl	8002b5c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe fb3c 	bl	8002b5c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e184      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d030      	beq.n	800456c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_RCC_OscConfig+0x2b4>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe fb20 	bl	8002b5c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe fb1c 	bl	8002b5c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e164      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x200>
 800453e:	e015      	b.n	800456c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_RCC_OscConfig+0x2b4>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fe fb09 	bl	8002b5c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe fb05 	bl	8002b5c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e14d      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a0 	beq.w	80046ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x2b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d121      	bne.n	80045fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_RCC_OscConfig+0x2b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <HAL_RCC_OscConfig+0x2b8>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c2:	f7fe facb 	bl	8002b5c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	e011      	b.n	80045ee <HAL_RCC_OscConfig+0x2ce>
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	42470000 	.word	0x42470000
 80045d4:	42470e80 	.word	0x42470e80
 80045d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045dc:	f7fe fabe 	bl	8002b5c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e106      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b85      	ldr	r3, [pc, #532]	; (8004804 <HAL_RCC_OscConfig+0x4e4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d106      	bne.n	8004610 <HAL_RCC_OscConfig+0x2f0>
 8004602:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
 800460e:	e01c      	b.n	800464a <HAL_RCC_OscConfig+0x32a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d10c      	bne.n	8004632 <HAL_RCC_OscConfig+0x312>
 8004618:	4b7b      	ldr	r3, [pc, #492]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a7a      	ldr	r2, [pc, #488]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	4b78      	ldr	r3, [pc, #480]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a77      	ldr	r2, [pc, #476]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	e00b      	b.n	800464a <HAL_RCC_OscConfig+0x32a>
 8004632:	4b75      	ldr	r3, [pc, #468]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a74      	ldr	r2, [pc, #464]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	4b72      	ldr	r3, [pc, #456]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a71      	ldr	r2, [pc, #452]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fe fa83 	bl	8002b5c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fe fa7f 	bl	8002b5c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0c5      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004670:	4b65      	ldr	r3, [pc, #404]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ee      	beq.n	800465a <HAL_RCC_OscConfig+0x33a>
 800467c:	e014      	b.n	80046a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fe fa6d 	bl	8002b5c <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fe fa69 	bl	8002b5c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0af      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469c:	4b5a      	ldr	r3, [pc, #360]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ee      	bne.n	8004686 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4b56      	ldr	r3, [pc, #344]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a55      	ldr	r2, [pc, #340]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 809b 	beq.w	80047fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d05c      	beq.n	800478a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d141      	bne.n	800475c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b4c      	ldr	r3, [pc, #304]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fe fa3d 	bl	8002b5c <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fe fa39 	bl	8002b5c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e081      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f8:	4b43      	ldr	r3, [pc, #268]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	019b      	lsls	r3, r3, #6
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	4937      	ldr	r1, [pc, #220]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472e:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fe fa12 	bl	8002b5c <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473c:	f7fe fa0e 	bl	8002b5c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e056      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x41c>
 800475a:	e04e      	b.n	80047fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fe f9fb 	bl	8002b5c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fe f9f7 	bl	8002b5c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e03f      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x44a>
 8004788:	e037      	b.n	80047fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e032      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004796:	4b1c      	ldr	r3, [pc, #112]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d028      	beq.n	80047f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d121      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d11a      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c6:	4013      	ands	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40007000 	.word	0x40007000
 8004808:	40023800 	.word	0x40023800
 800480c:	42470060 	.word	0x42470060

08004810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0cc      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b68      	ldr	r3, [pc, #416]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d90c      	bls.n	800484c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800486e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d044      	beq.n	8004930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d119      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e067      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b37      	ldr	r3, [pc, #220]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4934      	ldr	r1, [pc, #208]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004900:	f7fe f92c 	bl	8002b5c <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fe f928 	bl	8002b5c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d20c      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe f88c 	bl	8002ad4 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023c00 	.word	0x40023c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	08007018 	.word	0x08007018
 80049d4:	20000010 	.word	0x20000010
 80049d8:	20000014 	.word	0x20000014

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	2300      	movs	r3, #0
 80049ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f4:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	f200 80bd 	bhi.w	8004b80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0e:	e0b7      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b61      	ldr	r3, [pc, #388]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a12:	60bb      	str	r3, [r7, #8]
       break;
 8004a14:	e0b7      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a16:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a18:	60bb      	str	r3, [r7, #8]
      break;
 8004a1a:	e0b4      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1c:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a26:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04d      	beq.n	8004ace <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	ea02 0800 	and.w	r8, r2, r0
 8004a4a:	ea03 0901 	and.w	r9, r3, r1
 8004a4e:	4640      	mov	r0, r8
 8004a50:	4649      	mov	r1, r9
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	014b      	lsls	r3, r1, #5
 8004a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a60:	0142      	lsls	r2, r0, #5
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	ebb0 0008 	subs.w	r0, r0, r8
 8004a6a:	eb61 0109 	sbc.w	r1, r1, r9
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	018b      	lsls	r3, r1, #6
 8004a78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a7c:	0182      	lsls	r2, r0, #6
 8004a7e:	1a12      	subs	r2, r2, r0
 8004a80:	eb63 0301 	sbc.w	r3, r3, r1
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	00d9      	lsls	r1, r3, #3
 8004a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a92:	00d0      	lsls	r0, r2, #3
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	eb12 0208 	adds.w	r2, r2, r8
 8004a9c:	eb43 0309 	adc.w	r3, r3, r9
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0259      	lsls	r1, r3, #9
 8004aaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004aae:	0250      	lsls	r0, r2, #9
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f7fb fbee 	bl	80002a0 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e04a      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	099b      	lsrs	r3, r3, #6
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	ea02 0400 	and.w	r4, r2, r0
 8004ae6:	ea03 0501 	and.w	r5, r3, r1
 8004aea:	4620      	mov	r0, r4
 8004aec:	4629      	mov	r1, r5
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	014b      	lsls	r3, r1, #5
 8004af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004afc:	0142      	lsls	r2, r0, #5
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	1b00      	subs	r0, r0, r4
 8004b04:	eb61 0105 	sbc.w	r1, r1, r5
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	018b      	lsls	r3, r1, #6
 8004b12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b16:	0182      	lsls	r2, r0, #6
 8004b18:	1a12      	subs	r2, r2, r0
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	f04f 0000 	mov.w	r0, #0
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	00d9      	lsls	r1, r3, #3
 8004b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b2c:	00d0      	lsls	r0, r2, #3
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	1912      	adds	r2, r2, r4
 8004b34:	eb45 0303 	adc.w	r3, r5, r3
 8004b38:	f04f 0000 	mov.w	r0, #0
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	0299      	lsls	r1, r3, #10
 8004b42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b46:	0290      	lsls	r0, r2, #10
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	f7fb fba2 	bl	80002a0 <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4613      	mov	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	60bb      	str	r3, [r7, #8]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b82:	60bb      	str	r3, [r7, #8]
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	68bb      	ldr	r3, [r7, #8]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000010 	.word	0x20000010

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	08007028 	.word	0x08007028

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be4:	f7ff ffdc 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0b5b      	lsrs	r3, r3, #13
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	08007028 	.word	0x08007028

08004c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e041      	b.n	8004c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fdca 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 f95e 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e046      	b.n	8004d4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <HAL_TIM_Base_Start+0xb4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d01d      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_TIM_Base_Start+0xb8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <HAL_TIM_Base_Start+0xbc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <HAL_TIM_Base_Start+0xc0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <HAL_TIM_Base_Start+0xc4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_TIM_Base_Start+0xc8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start+0x70>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_TIM_Base_Start+0xcc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d111      	bne.n	8004d3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d010      	beq.n	8004d4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	e007      	b.n	8004d4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x1c>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0b4      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x186>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d03e      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xd4>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8087 	bhi.w	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	f000 8086 	beq.w	8004eea <HAL_TIM_ConfigClockSource+0x172>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d87f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d01a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xa6>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d87b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d050      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x11a>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d877      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d03c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xfa>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d873      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d058      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d86f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d86b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d060      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d867      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d05a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	e062      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f000 f985 	bl	800513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e04f      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f000 f96e 	bl	800513c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	609a      	str	r2, [r3, #8]
      break;
 8004e70:	e03c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f8e2 	bl	8005048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2150      	movs	r1, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f93b 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e02c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 f901 	bl	80050a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2160      	movs	r1, #96	; 0x60
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f92b 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e01c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 f8c2 	bl	8005048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f91b 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e00c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 f912 	bl	8005106 <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e003      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d027      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d023      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40001800 	.word	0x40001800
 8005040:	40001c00 	.word	0x40001c00
 8005044:	40002000 	.word	0x40002000

08005048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 030a 	bic.w	r3, r3, #10
 8005084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b087      	sub	sp, #28
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0210 	bic.w	r2, r3, #16
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	f043 0307 	orr.w	r3, r3, #7
 8005128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	431a      	orrs	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e05a      	b.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d01d      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d018      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a17      	ldr	r2, [pc, #92]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10c      	bne.n	8005238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	4313      	orrs	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800

08005274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e03f      	b.n	8005306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fd facc 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	; 0x24
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fddb 	bl	8005e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08a      	sub	sp, #40	; 0x28
 8005312:	af02      	add	r7, sp, #8
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b20      	cmp	r3, #32
 800532c:	d17c      	bne.n	8005428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_Transmit+0x2c>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e075      	b.n	800542a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UART_Transmit+0x3e>
 8005348:	2302      	movs	r3, #2
 800534a:	e06e      	b.n	800542a <HAL_UART_Transmit+0x11c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2221      	movs	r2, #33	; 0x21
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005362:	f7fd fbfb 	bl	8002b5c <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x82>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053a0:	e02a      	b.n	80053f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fb1f 	bl	80059f0 <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e036      	b.n	800542a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e007      	b.n	80053ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1cf      	bne.n	80053a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2140      	movs	r1, #64	; 0x40
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 faef 	bl	80059f0 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	4613      	mov	r3, r2
 800543e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b20      	cmp	r3, #32
 800544a:	d11d      	bne.n	8005488 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_UART_Receive_IT+0x26>
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e016      	b.n	800548a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_UART_Receive_IT+0x38>
 8005466:	2302      	movs	r3, #2
 8005468:	e00f      	b.n	800548a <HAL_UART_Receive_IT+0x58>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	461a      	mov	r2, r3
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fb24 	bl	8005acc <UART_Start_Receive_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	e000      	b.n	800548a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b0ba      	sub	sp, #232	; 0xe8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc03 	bl	8005cfe <UART_Receive_IT>
      return;
 80054f8:	e256      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80de 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005514:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80d1 	beq.w	80056c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
 800554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
 8005572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0204 	orr.w	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d011      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 81ed 	beq.w	800599e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb8e 	bl	8005cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <HAL_UART_IRQHandler+0x17a>
 8005606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa96 	bl	8005b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d141      	bne.n	80056a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	4a7d      	ldr	r2, [pc, #500]	; (8005870 <HAL_UART_IRQHandler+0x3dc>)
 800567c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fff7 	bl	8003676 <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00e      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f990 	bl	80059c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00a      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f98c 	bl	80059c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e006      	b.n	80056bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f988 	bl	80059c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056ba:	e170      	b.n	800599e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	bf00      	nop
    return;
 80056be:	e16e      	b.n	800599e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 814a 	bne.w	800595e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8143 	beq.w	800595e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 813c 	beq.w	800595e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	f040 80b4 	bne.w	8005874 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8140 	beq.w	80059a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 8139 	bcs.w	80059a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005736:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	f000 8088 	beq.w	8005856 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800575c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800577e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800578a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1d9      	bne.n	8005746 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e1      	bne.n	8005792 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e3      	bne.n	80057ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005826:	f023 0310 	bic.w	r3, r3, #16
 800582a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005838:	65ba      	str	r2, [r7, #88]	; 0x58
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800583e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e3      	bne.n	8005814 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	4618      	mov	r0, r3
 8005852:	f7fd fea0 	bl	8003596 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800585e:	b29b      	uxth	r3, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8b6 	bl	80059d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800586c:	e099      	b.n	80059a2 <HAL_UART_IRQHandler+0x50e>
 800586e:	bf00      	nop
 8005870:	08005c07 	.word	0x08005c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800587c:	b29b      	uxth	r3, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 808b 	beq.w	80059a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8086 	beq.w	80059a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058be:	647a      	str	r2, [r7, #68]	; 0x44
 80058c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	623b      	str	r3, [r7, #32]
   return(result);
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058f6:	633a      	str	r2, [r7, #48]	; 0x30
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e3      	bne.n	80058d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60fb      	str	r3, [r7, #12]
   return(result);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800593c:	61fa      	str	r2, [r7, #28]
 800593e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	69b9      	ldr	r1, [r7, #24]
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	617b      	str	r3, [r7, #20]
   return(result);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e3      	bne.n	8005918 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f83e 	bl	80059d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800595c:	e023      	b.n	80059a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_UART_IRQHandler+0x4ea>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f959 	bl	8005c2e <UART_Transmit_IT>
    return;
 800597c:	e014      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00e      	beq.n	80059a8 <HAL_UART_IRQHandler+0x514>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f999 	bl	8005cce <UART_EndTransmit_IT>
    return;
 800599c:	e004      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
    return;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
      return;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <HAL_UART_IRQHandler+0x514>
      return;
 80059a6:	bf00      	nop
  }
}
 80059a8:	37e8      	adds	r7, #232	; 0xe8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop

080059b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b090      	sub	sp, #64	; 0x40
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a00:	e050      	b.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d04c      	beq.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a10:	f7fd f8a4 	bl	8002b5c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d241      	bcs.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a40:	637a      	str	r2, [r7, #52]	; 0x34
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a74:	623a      	str	r2, [r7, #32]
 8005a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e00f      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d09f      	beq.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3740      	adds	r7, #64	; 0x40
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2222      	movs	r2, #34	; 0x22
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0220 	orr.w	r2, r2, #32
 8005b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b095      	sub	sp, #84	; 0x54
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b68:	643a      	str	r2, [r7, #64]	; 0x40
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d119      	bne.n	8005bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd8:	61ba      	str	r2, [r7, #24]
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	613b      	str	r3, [r7, #16]
   return(result);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e5      	bne.n	8005bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bfa:	bf00      	nop
 8005bfc:	3754      	adds	r7, #84	; 0x54
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fecf 	bl	80059c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b21      	cmp	r3, #33	; 0x21
 8005c40:	d13e      	bne.n	8005cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	d114      	bne.n	8005c76 <UART_Transmit_IT+0x48>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d110      	bne.n	8005c76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	1c9a      	adds	r2, r3, #2
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	621a      	str	r2, [r3, #32]
 8005c74:	e008      	b.n	8005c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6211      	str	r1, [r2, #32]
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10f      	bne.n	8005cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fe5e 	bl	80059b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b08c      	sub	sp, #48	; 0x30
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b22      	cmp	r3, #34	; 0x22
 8005d10:	f040 80ab 	bne.w	8005e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1c:	d117      	bne.n	8005d4e <UART_Receive_IT+0x50>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d113      	bne.n	8005d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	1c9a      	adds	r2, r3, #2
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d4c:	e026      	b.n	8005d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d007      	beq.n	8005d72 <UART_Receive_IT+0x74>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <UART_Receive_IT+0x82>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e008      	b.n	8005d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4619      	mov	r1, r3
 8005daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d15a      	bne.n	8005e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0220 	bic.w	r2, r2, #32
 8005dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d135      	bne.n	8005e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	613b      	str	r3, [r7, #16]
   return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f023 0310 	bic.w	r3, r3, #16
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e16:	623a      	str	r2, [r7, #32]
 8005e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d10a      	bne.n	8005e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff fdbf 	bl	80059d8 <HAL_UARTEx_RxEventCallback>
 8005e5a:	e002      	b.n	8005e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fb ffdd 	bl	8001e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e002      	b.n	8005e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e000      	b.n	8005e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
  }
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3730      	adds	r7, #48	; 0x30
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b09f      	sub	sp, #124	; 0x7c
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	68d9      	ldr	r1, [r3, #12]
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	ea40 0301 	orr.w	r3, r0, r1
 8005e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005eb8:	f021 010c 	bic.w	r1, r1, #12
 8005ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	ea40 0301 	orr.w	r3, r0, r1
 8005edc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4bc5      	ldr	r3, [pc, #788]	; (80061f8 <UART_SetConfig+0x384>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d004      	beq.n	8005ef2 <UART_SetConfig+0x7e>
 8005ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4bc3      	ldr	r3, [pc, #780]	; (80061fc <UART_SetConfig+0x388>)
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d103      	bne.n	8005efa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef2:	f7fe fe75 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8005ef6:	6778      	str	r0, [r7, #116]	; 0x74
 8005ef8:	e002      	b.n	8005f00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005efa:	f7fe fe5d 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8005efe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f08:	f040 80b6 	bne.w	8006078 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0e:	461c      	mov	r4, r3
 8005f10:	f04f 0500 	mov.w	r5, #0
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	6439      	str	r1, [r7, #64]	; 0x40
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f24:	1912      	adds	r2, r2, r4
 8005f26:	eb45 0303 	adc.w	r3, r5, r3
 8005f2a:	f04f 0000 	mov.w	r0, #0
 8005f2e:	f04f 0100 	mov.w	r1, #0
 8005f32:	00d9      	lsls	r1, r3, #3
 8005f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f38:	00d0      	lsls	r0, r2, #3
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	1911      	adds	r1, r2, r4
 8005f40:	6639      	str	r1, [r7, #96]	; 0x60
 8005f42:	416b      	adcs	r3, r5
 8005f44:	667b      	str	r3, [r7, #100]	; 0x64
 8005f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f54:	415b      	adcs	r3, r3
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f60:	f7fa f99e 	bl	80002a0 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4ba5      	ldr	r3, [pc, #660]	; (8006200 <UART_SetConfig+0x38c>)
 8005f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	011e      	lsls	r6, r3, #4
 8005f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f74:	461c      	mov	r4, r3
 8005f76:	f04f 0500 	mov.w	r5, #0
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	6339      	str	r1, [r7, #48]	; 0x30
 8005f82:	415b      	adcs	r3, r3
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
 8005f86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f8a:	1912      	adds	r2, r2, r4
 8005f8c:	eb45 0303 	adc.w	r3, r5, r3
 8005f90:	f04f 0000 	mov.w	r0, #0
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	00d9      	lsls	r1, r3, #3
 8005f9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f9e:	00d0      	lsls	r0, r2, #3
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	1911      	adds	r1, r2, r4
 8005fa6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fa8:	416b      	adcs	r3, r5
 8005faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	1891      	adds	r1, r2, r2
 8005fb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fba:	415b      	adcs	r3, r3
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005fc6:	f7fa f96b 	bl	80002a0 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b8c      	ldr	r3, [pc, #560]	; (8006200 <UART_SetConfig+0x38c>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a87      	ldr	r2, [pc, #540]	; (8006200 <UART_SetConfig+0x38c>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ff0:	441e      	add	r6, r3
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	1894      	adds	r4, r2, r2
 8006000:	623c      	str	r4, [r7, #32]
 8006002:	415b      	adcs	r3, r3
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600a:	1812      	adds	r2, r2, r0
 800600c:	eb41 0303 	adc.w	r3, r1, r3
 8006010:	f04f 0400 	mov.w	r4, #0
 8006014:	f04f 0500 	mov.w	r5, #0
 8006018:	00dd      	lsls	r5, r3, #3
 800601a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800601e:	00d4      	lsls	r4, r2, #3
 8006020:	4622      	mov	r2, r4
 8006022:	462b      	mov	r3, r5
 8006024:	1814      	adds	r4, r2, r0
 8006026:	653c      	str	r4, [r7, #80]	; 0x50
 8006028:	414b      	adcs	r3, r1
 800602a:	657b      	str	r3, [r7, #84]	; 0x54
 800602c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	461a      	mov	r2, r3
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	1891      	adds	r1, r2, r2
 8006038:	61b9      	str	r1, [r7, #24]
 800603a:	415b      	adcs	r3, r3
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006042:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006046:	f7fa f92b 	bl	80002a0 <__aeabi_uldivmod>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4b6c      	ldr	r3, [pc, #432]	; (8006200 <UART_SetConfig+0x38c>)
 8006050:	fba3 1302 	umull	r1, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	2164      	movs	r1, #100	; 0x64
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	3332      	adds	r3, #50	; 0x32
 8006062:	4a67      	ldr	r2, [pc, #412]	; (8006200 <UART_SetConfig+0x38c>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	f003 0207 	and.w	r2, r3, #7
 800606e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4432      	add	r2, r6
 8006074:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006076:	e0b9      	b.n	80061ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607a:	461c      	mov	r4, r3
 800607c:	f04f 0500 	mov.w	r5, #0
 8006080:	4622      	mov	r2, r4
 8006082:	462b      	mov	r3, r5
 8006084:	1891      	adds	r1, r2, r2
 8006086:	6139      	str	r1, [r7, #16]
 8006088:	415b      	adcs	r3, r3
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006090:	1912      	adds	r2, r2, r4
 8006092:	eb45 0303 	adc.w	r3, r5, r3
 8006096:	f04f 0000 	mov.w	r0, #0
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	00d9      	lsls	r1, r3, #3
 80060a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060a4:	00d0      	lsls	r0, r2, #3
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	eb12 0804 	adds.w	r8, r2, r4
 80060ae:	eb43 0905 	adc.w	r9, r3, r5
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f04f 0100 	mov.w	r1, #0
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	008b      	lsls	r3, r1, #2
 80060c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ca:	0082      	lsls	r2, r0, #2
 80060cc:	4640      	mov	r0, r8
 80060ce:	4649      	mov	r1, r9
 80060d0:	f7fa f8e6 	bl	80002a0 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b49      	ldr	r3, [pc, #292]	; (8006200 <UART_SetConfig+0x38c>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011e      	lsls	r6, r3, #4
 80060e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e4:	4618      	mov	r0, r3
 80060e6:	f04f 0100 	mov.w	r1, #0
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	1894      	adds	r4, r2, r2
 80060f0:	60bc      	str	r4, [r7, #8]
 80060f2:	415b      	adcs	r3, r3
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fa:	1812      	adds	r2, r2, r0
 80060fc:	eb41 0303 	adc.w	r3, r1, r3
 8006100:	f04f 0400 	mov.w	r4, #0
 8006104:	f04f 0500 	mov.w	r5, #0
 8006108:	00dd      	lsls	r5, r3, #3
 800610a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800610e:	00d4      	lsls	r4, r2, #3
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	1814      	adds	r4, r2, r0
 8006116:	64bc      	str	r4, [r7, #72]	; 0x48
 8006118:	414b      	adcs	r3, r1
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4618      	mov	r0, r3
 8006122:	f04f 0100 	mov.w	r1, #0
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	008b      	lsls	r3, r1, #2
 8006130:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006134:	0082      	lsls	r2, r0, #2
 8006136:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800613a:	f7fa f8b1 	bl	80002a0 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4b2f      	ldr	r3, [pc, #188]	; (8006200 <UART_SetConfig+0x38c>)
 8006144:	fba3 1302 	umull	r1, r3, r3, r2
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	2164      	movs	r1, #100	; 0x64
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	3332      	adds	r3, #50	; 0x32
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <UART_SetConfig+0x38c>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006162:	441e      	add	r6, r3
 8006164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006166:	4618      	mov	r0, r3
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	1894      	adds	r4, r2, r2
 8006172:	603c      	str	r4, [r7, #0]
 8006174:	415b      	adcs	r3, r3
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617c:	1812      	adds	r2, r2, r0
 800617e:	eb41 0303 	adc.w	r3, r1, r3
 8006182:	f04f 0400 	mov.w	r4, #0
 8006186:	f04f 0500 	mov.w	r5, #0
 800618a:	00dd      	lsls	r5, r3, #3
 800618c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006190:	00d4      	lsls	r4, r2, #3
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	eb12 0a00 	adds.w	sl, r2, r0
 800619a:	eb43 0b01 	adc.w	fp, r3, r1
 800619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f04f 0100 	mov.w	r1, #0
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	008b      	lsls	r3, r1, #2
 80061b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061b6:	0082      	lsls	r2, r0, #2
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	f7fa f870 	bl	80002a0 <__aeabi_uldivmod>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <UART_SetConfig+0x38c>)
 80061c6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	2164      	movs	r1, #100	; 0x64
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	3332      	adds	r3, #50	; 0x32
 80061d8:	4a09      	ldr	r2, [pc, #36]	; (8006200 <UART_SetConfig+0x38c>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4432      	add	r2, r6
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	377c      	adds	r7, #124	; 0x7c
 80061f0:	46bd      	mov	sp, r7
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	bf00      	nop
 80061f8:	40011000 	.word	0x40011000
 80061fc:	40011400 	.word	0x40011400
 8006200:	51eb851f 	.word	0x51eb851f

08006204 <__errno>:
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <__errno+0x8>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	2000001c 	.word	0x2000001c

08006210 <__libc_init_array>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4d0d      	ldr	r5, [pc, #52]	; (8006248 <__libc_init_array+0x38>)
 8006214:	4c0d      	ldr	r4, [pc, #52]	; (800624c <__libc_init_array+0x3c>)
 8006216:	1b64      	subs	r4, r4, r5
 8006218:	10a4      	asrs	r4, r4, #2
 800621a:	2600      	movs	r6, #0
 800621c:	42a6      	cmp	r6, r4
 800621e:	d109      	bne.n	8006234 <__libc_init_array+0x24>
 8006220:	4d0b      	ldr	r5, [pc, #44]	; (8006250 <__libc_init_array+0x40>)
 8006222:	4c0c      	ldr	r4, [pc, #48]	; (8006254 <__libc_init_array+0x44>)
 8006224:	f000 fc4e 	bl	8006ac4 <_init>
 8006228:	1b64      	subs	r4, r4, r5
 800622a:	10a4      	asrs	r4, r4, #2
 800622c:	2600      	movs	r6, #0
 800622e:	42a6      	cmp	r6, r4
 8006230:	d105      	bne.n	800623e <__libc_init_array+0x2e>
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	f855 3b04 	ldr.w	r3, [r5], #4
 8006238:	4798      	blx	r3
 800623a:	3601      	adds	r6, #1
 800623c:	e7ee      	b.n	800621c <__libc_init_array+0xc>
 800623e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006242:	4798      	blx	r3
 8006244:	3601      	adds	r6, #1
 8006246:	e7f2      	b.n	800622e <__libc_init_array+0x1e>
 8006248:	0800706c 	.word	0x0800706c
 800624c:	0800706c 	.word	0x0800706c
 8006250:	0800706c 	.word	0x0800706c
 8006254:	08007070 	.word	0x08007070

08006258 <memset>:
 8006258:	4402      	add	r2, r0
 800625a:	4603      	mov	r3, r0
 800625c:	4293      	cmp	r3, r2
 800625e:	d100      	bne.n	8006262 <memset+0xa>
 8006260:	4770      	bx	lr
 8006262:	f803 1b01 	strb.w	r1, [r3], #1
 8006266:	e7f9      	b.n	800625c <memset+0x4>

08006268 <siprintf>:
 8006268:	b40e      	push	{r1, r2, r3}
 800626a:	b500      	push	{lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	ab1d      	add	r3, sp, #116	; 0x74
 8006270:	9002      	str	r0, [sp, #8]
 8006272:	9006      	str	r0, [sp, #24]
 8006274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006278:	4809      	ldr	r0, [pc, #36]	; (80062a0 <siprintf+0x38>)
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	9104      	str	r1, [sp, #16]
 800627e:	4909      	ldr	r1, [pc, #36]	; (80062a4 <siprintf+0x3c>)
 8006280:	f853 2b04 	ldr.w	r2, [r3], #4
 8006284:	9105      	str	r1, [sp, #20]
 8006286:	6800      	ldr	r0, [r0, #0]
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	a902      	add	r1, sp, #8
 800628c:	f000 f868 	bl	8006360 <_svfiprintf_r>
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	b01c      	add	sp, #112	; 0x70
 8006298:	f85d eb04 	ldr.w	lr, [sp], #4
 800629c:	b003      	add	sp, #12
 800629e:	4770      	bx	lr
 80062a0:	2000001c 	.word	0x2000001c
 80062a4:	ffff0208 	.word	0xffff0208

080062a8 <__ssputs_r>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	688e      	ldr	r6, [r1, #8]
 80062ae:	429e      	cmp	r6, r3
 80062b0:	4682      	mov	sl, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4690      	mov	r8, r2
 80062b6:	461f      	mov	r7, r3
 80062b8:	d838      	bhi.n	800632c <__ssputs_r+0x84>
 80062ba:	898a      	ldrh	r2, [r1, #12]
 80062bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062c0:	d032      	beq.n	8006328 <__ssputs_r+0x80>
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	6909      	ldr	r1, [r1, #16]
 80062c6:	eba5 0901 	sub.w	r9, r5, r1
 80062ca:	6965      	ldr	r5, [r4, #20]
 80062cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062d4:	3301      	adds	r3, #1
 80062d6:	444b      	add	r3, r9
 80062d8:	106d      	asrs	r5, r5, #1
 80062da:	429d      	cmp	r5, r3
 80062dc:	bf38      	it	cc
 80062de:	461d      	movcc	r5, r3
 80062e0:	0553      	lsls	r3, r2, #21
 80062e2:	d531      	bpl.n	8006348 <__ssputs_r+0xa0>
 80062e4:	4629      	mov	r1, r5
 80062e6:	f000 fb47 	bl	8006978 <_malloc_r>
 80062ea:	4606      	mov	r6, r0
 80062ec:	b950      	cbnz	r0, 8006304 <__ssputs_r+0x5c>
 80062ee:	230c      	movs	r3, #12
 80062f0:	f8ca 3000 	str.w	r3, [sl]
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	6921      	ldr	r1, [r4, #16]
 8006306:	464a      	mov	r2, r9
 8006308:	f000 fabe 	bl	8006888 <memcpy>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	6126      	str	r6, [r4, #16]
 800631a:	6165      	str	r5, [r4, #20]
 800631c:	444e      	add	r6, r9
 800631e:	eba5 0509 	sub.w	r5, r5, r9
 8006322:	6026      	str	r6, [r4, #0]
 8006324:	60a5      	str	r5, [r4, #8]
 8006326:	463e      	mov	r6, r7
 8006328:	42be      	cmp	r6, r7
 800632a:	d900      	bls.n	800632e <__ssputs_r+0x86>
 800632c:	463e      	mov	r6, r7
 800632e:	4632      	mov	r2, r6
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	4641      	mov	r1, r8
 8006334:	f000 fab6 	bl	80068a4 <memmove>
 8006338:	68a3      	ldr	r3, [r4, #8]
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	4432      	add	r2, r6
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e7db      	b.n	8006300 <__ssputs_r+0x58>
 8006348:	462a      	mov	r2, r5
 800634a:	f000 fb6f 	bl	8006a2c <_realloc_r>
 800634e:	4606      	mov	r6, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	d1e1      	bne.n	8006318 <__ssputs_r+0x70>
 8006354:	6921      	ldr	r1, [r4, #16]
 8006356:	4650      	mov	r0, sl
 8006358:	f000 fabe 	bl	80068d8 <_free_r>
 800635c:	e7c7      	b.n	80062ee <__ssputs_r+0x46>
	...

08006360 <_svfiprintf_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	4698      	mov	r8, r3
 8006366:	898b      	ldrh	r3, [r1, #12]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	b09d      	sub	sp, #116	; 0x74
 800636c:	4607      	mov	r7, r0
 800636e:	460d      	mov	r5, r1
 8006370:	4614      	mov	r4, r2
 8006372:	d50e      	bpl.n	8006392 <_svfiprintf_r+0x32>
 8006374:	690b      	ldr	r3, [r1, #16]
 8006376:	b963      	cbnz	r3, 8006392 <_svfiprintf_r+0x32>
 8006378:	2140      	movs	r1, #64	; 0x40
 800637a:	f000 fafd 	bl	8006978 <_malloc_r>
 800637e:	6028      	str	r0, [r5, #0]
 8006380:	6128      	str	r0, [r5, #16]
 8006382:	b920      	cbnz	r0, 800638e <_svfiprintf_r+0x2e>
 8006384:	230c      	movs	r3, #12
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e0d1      	b.n	8006532 <_svfiprintf_r+0x1d2>
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	616b      	str	r3, [r5, #20]
 8006392:	2300      	movs	r3, #0
 8006394:	9309      	str	r3, [sp, #36]	; 0x24
 8006396:	2320      	movs	r3, #32
 8006398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639c:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a0:	2330      	movs	r3, #48	; 0x30
 80063a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800654c <_svfiprintf_r+0x1ec>
 80063a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063aa:	f04f 0901 	mov.w	r9, #1
 80063ae:	4623      	mov	r3, r4
 80063b0:	469a      	mov	sl, r3
 80063b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b6:	b10a      	cbz	r2, 80063bc <_svfiprintf_r+0x5c>
 80063b8:	2a25      	cmp	r2, #37	; 0x25
 80063ba:	d1f9      	bne.n	80063b0 <_svfiprintf_r+0x50>
 80063bc:	ebba 0b04 	subs.w	fp, sl, r4
 80063c0:	d00b      	beq.n	80063da <_svfiprintf_r+0x7a>
 80063c2:	465b      	mov	r3, fp
 80063c4:	4622      	mov	r2, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff ff6d 	bl	80062a8 <__ssputs_r>
 80063ce:	3001      	adds	r0, #1
 80063d0:	f000 80aa 	beq.w	8006528 <_svfiprintf_r+0x1c8>
 80063d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d6:	445a      	add	r2, fp
 80063d8:	9209      	str	r2, [sp, #36]	; 0x24
 80063da:	f89a 3000 	ldrb.w	r3, [sl]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80a2 	beq.w	8006528 <_svfiprintf_r+0x1c8>
 80063e4:	2300      	movs	r3, #0
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ee:	f10a 0a01 	add.w	sl, sl, #1
 80063f2:	9304      	str	r3, [sp, #16]
 80063f4:	9307      	str	r3, [sp, #28]
 80063f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063fa:	931a      	str	r3, [sp, #104]	; 0x68
 80063fc:	4654      	mov	r4, sl
 80063fe:	2205      	movs	r2, #5
 8006400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006404:	4851      	ldr	r0, [pc, #324]	; (800654c <_svfiprintf_r+0x1ec>)
 8006406:	f7f9 fefb 	bl	8000200 <memchr>
 800640a:	9a04      	ldr	r2, [sp, #16]
 800640c:	b9d8      	cbnz	r0, 8006446 <_svfiprintf_r+0xe6>
 800640e:	06d0      	lsls	r0, r2, #27
 8006410:	bf44      	itt	mi
 8006412:	2320      	movmi	r3, #32
 8006414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006418:	0711      	lsls	r1, r2, #28
 800641a:	bf44      	itt	mi
 800641c:	232b      	movmi	r3, #43	; 0x2b
 800641e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006422:	f89a 3000 	ldrb.w	r3, [sl]
 8006426:	2b2a      	cmp	r3, #42	; 0x2a
 8006428:	d015      	beq.n	8006456 <_svfiprintf_r+0xf6>
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	4654      	mov	r4, sl
 800642e:	2000      	movs	r0, #0
 8006430:	f04f 0c0a 	mov.w	ip, #10
 8006434:	4621      	mov	r1, r4
 8006436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800643a:	3b30      	subs	r3, #48	; 0x30
 800643c:	2b09      	cmp	r3, #9
 800643e:	d94e      	bls.n	80064de <_svfiprintf_r+0x17e>
 8006440:	b1b0      	cbz	r0, 8006470 <_svfiprintf_r+0x110>
 8006442:	9207      	str	r2, [sp, #28]
 8006444:	e014      	b.n	8006470 <_svfiprintf_r+0x110>
 8006446:	eba0 0308 	sub.w	r3, r0, r8
 800644a:	fa09 f303 	lsl.w	r3, r9, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	46a2      	mov	sl, r4
 8006454:	e7d2      	b.n	80063fc <_svfiprintf_r+0x9c>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	9103      	str	r1, [sp, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfbb      	ittet	lt
 8006462:	425b      	neglt	r3, r3
 8006464:	f042 0202 	orrlt.w	r2, r2, #2
 8006468:	9307      	strge	r3, [sp, #28]
 800646a:	9307      	strlt	r3, [sp, #28]
 800646c:	bfb8      	it	lt
 800646e:	9204      	strlt	r2, [sp, #16]
 8006470:	7823      	ldrb	r3, [r4, #0]
 8006472:	2b2e      	cmp	r3, #46	; 0x2e
 8006474:	d10c      	bne.n	8006490 <_svfiprintf_r+0x130>
 8006476:	7863      	ldrb	r3, [r4, #1]
 8006478:	2b2a      	cmp	r3, #42	; 0x2a
 800647a:	d135      	bne.n	80064e8 <_svfiprintf_r+0x188>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	9203      	str	r2, [sp, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	bfb8      	it	lt
 8006488:	f04f 33ff 	movlt.w	r3, #4294967295
 800648c:	3402      	adds	r4, #2
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800655c <_svfiprintf_r+0x1fc>
 8006494:	7821      	ldrb	r1, [r4, #0]
 8006496:	2203      	movs	r2, #3
 8006498:	4650      	mov	r0, sl
 800649a:	f7f9 feb1 	bl	8000200 <memchr>
 800649e:	b140      	cbz	r0, 80064b2 <_svfiprintf_r+0x152>
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	eba0 000a 	sub.w	r0, r0, sl
 80064a6:	fa03 f000 	lsl.w	r0, r3, r0
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	4303      	orrs	r3, r0
 80064ae:	3401      	adds	r4, #1
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b6:	4826      	ldr	r0, [pc, #152]	; (8006550 <_svfiprintf_r+0x1f0>)
 80064b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064bc:	2206      	movs	r2, #6
 80064be:	f7f9 fe9f 	bl	8000200 <memchr>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d038      	beq.n	8006538 <_svfiprintf_r+0x1d8>
 80064c6:	4b23      	ldr	r3, [pc, #140]	; (8006554 <_svfiprintf_r+0x1f4>)
 80064c8:	bb1b      	cbnz	r3, 8006512 <_svfiprintf_r+0x1b2>
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	3307      	adds	r3, #7
 80064ce:	f023 0307 	bic.w	r3, r3, #7
 80064d2:	3308      	adds	r3, #8
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d8:	4433      	add	r3, r6
 80064da:	9309      	str	r3, [sp, #36]	; 0x24
 80064dc:	e767      	b.n	80063ae <_svfiprintf_r+0x4e>
 80064de:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e2:	460c      	mov	r4, r1
 80064e4:	2001      	movs	r0, #1
 80064e6:	e7a5      	b.n	8006434 <_svfiprintf_r+0xd4>
 80064e8:	2300      	movs	r3, #0
 80064ea:	3401      	adds	r4, #1
 80064ec:	9305      	str	r3, [sp, #20]
 80064ee:	4619      	mov	r1, r3
 80064f0:	f04f 0c0a 	mov.w	ip, #10
 80064f4:	4620      	mov	r0, r4
 80064f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064fa:	3a30      	subs	r2, #48	; 0x30
 80064fc:	2a09      	cmp	r2, #9
 80064fe:	d903      	bls.n	8006508 <_svfiprintf_r+0x1a8>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0c5      	beq.n	8006490 <_svfiprintf_r+0x130>
 8006504:	9105      	str	r1, [sp, #20]
 8006506:	e7c3      	b.n	8006490 <_svfiprintf_r+0x130>
 8006508:	fb0c 2101 	mla	r1, ip, r1, r2
 800650c:	4604      	mov	r4, r0
 800650e:	2301      	movs	r3, #1
 8006510:	e7f0      	b.n	80064f4 <_svfiprintf_r+0x194>
 8006512:	ab03      	add	r3, sp, #12
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	462a      	mov	r2, r5
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <_svfiprintf_r+0x1f8>)
 800651a:	a904      	add	r1, sp, #16
 800651c:	4638      	mov	r0, r7
 800651e:	f3af 8000 	nop.w
 8006522:	1c42      	adds	r2, r0, #1
 8006524:	4606      	mov	r6, r0
 8006526:	d1d6      	bne.n	80064d6 <_svfiprintf_r+0x176>
 8006528:	89ab      	ldrh	r3, [r5, #12]
 800652a:	065b      	lsls	r3, r3, #25
 800652c:	f53f af2c 	bmi.w	8006388 <_svfiprintf_r+0x28>
 8006530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006532:	b01d      	add	sp, #116	; 0x74
 8006534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006538:	ab03      	add	r3, sp, #12
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	462a      	mov	r2, r5
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <_svfiprintf_r+0x1f8>)
 8006540:	a904      	add	r1, sp, #16
 8006542:	4638      	mov	r0, r7
 8006544:	f000 f87a 	bl	800663c <_printf_i>
 8006548:	e7eb      	b.n	8006522 <_svfiprintf_r+0x1c2>
 800654a:	bf00      	nop
 800654c:	08007030 	.word	0x08007030
 8006550:	0800703a 	.word	0x0800703a
 8006554:	00000000 	.word	0x00000000
 8006558:	080062a9 	.word	0x080062a9
 800655c:	08007036 	.word	0x08007036

08006560 <_printf_common>:
 8006560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	4616      	mov	r6, r2
 8006566:	4699      	mov	r9, r3
 8006568:	688a      	ldr	r2, [r1, #8]
 800656a:	690b      	ldr	r3, [r1, #16]
 800656c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006570:	4293      	cmp	r3, r2
 8006572:	bfb8      	it	lt
 8006574:	4613      	movlt	r3, r2
 8006576:	6033      	str	r3, [r6, #0]
 8006578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800657c:	4607      	mov	r7, r0
 800657e:	460c      	mov	r4, r1
 8006580:	b10a      	cbz	r2, 8006586 <_printf_common+0x26>
 8006582:	3301      	adds	r3, #1
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	0699      	lsls	r1, r3, #26
 800658a:	bf42      	ittt	mi
 800658c:	6833      	ldrmi	r3, [r6, #0]
 800658e:	3302      	addmi	r3, #2
 8006590:	6033      	strmi	r3, [r6, #0]
 8006592:	6825      	ldr	r5, [r4, #0]
 8006594:	f015 0506 	ands.w	r5, r5, #6
 8006598:	d106      	bne.n	80065a8 <_printf_common+0x48>
 800659a:	f104 0a19 	add.w	sl, r4, #25
 800659e:	68e3      	ldr	r3, [r4, #12]
 80065a0:	6832      	ldr	r2, [r6, #0]
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	42ab      	cmp	r3, r5
 80065a6:	dc26      	bgt.n	80065f6 <_printf_common+0x96>
 80065a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065ac:	1e13      	subs	r3, r2, #0
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	bf18      	it	ne
 80065b2:	2301      	movne	r3, #1
 80065b4:	0692      	lsls	r2, r2, #26
 80065b6:	d42b      	bmi.n	8006610 <_printf_common+0xb0>
 80065b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065bc:	4649      	mov	r1, r9
 80065be:	4638      	mov	r0, r7
 80065c0:	47c0      	blx	r8
 80065c2:	3001      	adds	r0, #1
 80065c4:	d01e      	beq.n	8006604 <_printf_common+0xa4>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	68e5      	ldr	r5, [r4, #12]
 80065ca:	6832      	ldr	r2, [r6, #0]
 80065cc:	f003 0306 	and.w	r3, r3, #6
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	bf08      	it	eq
 80065d4:	1aad      	subeq	r5, r5, r2
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	bf0c      	ite	eq
 80065dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e0:	2500      	movne	r5, #0
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bfc4      	itt	gt
 80065e6:	1a9b      	subgt	r3, r3, r2
 80065e8:	18ed      	addgt	r5, r5, r3
 80065ea:	2600      	movs	r6, #0
 80065ec:	341a      	adds	r4, #26
 80065ee:	42b5      	cmp	r5, r6
 80065f0:	d11a      	bne.n	8006628 <_printf_common+0xc8>
 80065f2:	2000      	movs	r0, #0
 80065f4:	e008      	b.n	8006608 <_printf_common+0xa8>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4652      	mov	r2, sl
 80065fa:	4649      	mov	r1, r9
 80065fc:	4638      	mov	r0, r7
 80065fe:	47c0      	blx	r8
 8006600:	3001      	adds	r0, #1
 8006602:	d103      	bne.n	800660c <_printf_common+0xac>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660c:	3501      	adds	r5, #1
 800660e:	e7c6      	b.n	800659e <_printf_common+0x3e>
 8006610:	18e1      	adds	r1, r4, r3
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	2030      	movs	r0, #48	; 0x30
 8006616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800661a:	4422      	add	r2, r4
 800661c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006624:	3302      	adds	r3, #2
 8006626:	e7c7      	b.n	80065b8 <_printf_common+0x58>
 8006628:	2301      	movs	r3, #1
 800662a:	4622      	mov	r2, r4
 800662c:	4649      	mov	r1, r9
 800662e:	4638      	mov	r0, r7
 8006630:	47c0      	blx	r8
 8006632:	3001      	adds	r0, #1
 8006634:	d0e6      	beq.n	8006604 <_printf_common+0xa4>
 8006636:	3601      	adds	r6, #1
 8006638:	e7d9      	b.n	80065ee <_printf_common+0x8e>
	...

0800663c <_printf_i>:
 800663c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006640:	460c      	mov	r4, r1
 8006642:	4691      	mov	r9, r2
 8006644:	7e27      	ldrb	r7, [r4, #24]
 8006646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006648:	2f78      	cmp	r7, #120	; 0x78
 800664a:	4680      	mov	r8, r0
 800664c:	469a      	mov	sl, r3
 800664e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006652:	d807      	bhi.n	8006664 <_printf_i+0x28>
 8006654:	2f62      	cmp	r7, #98	; 0x62
 8006656:	d80a      	bhi.n	800666e <_printf_i+0x32>
 8006658:	2f00      	cmp	r7, #0
 800665a:	f000 80d8 	beq.w	800680e <_printf_i+0x1d2>
 800665e:	2f58      	cmp	r7, #88	; 0x58
 8006660:	f000 80a3 	beq.w	80067aa <_printf_i+0x16e>
 8006664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800666c:	e03a      	b.n	80066e4 <_printf_i+0xa8>
 800666e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006672:	2b15      	cmp	r3, #21
 8006674:	d8f6      	bhi.n	8006664 <_printf_i+0x28>
 8006676:	a001      	add	r0, pc, #4	; (adr r0, 800667c <_printf_i+0x40>)
 8006678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800667c:	080066d5 	.word	0x080066d5
 8006680:	080066e9 	.word	0x080066e9
 8006684:	08006665 	.word	0x08006665
 8006688:	08006665 	.word	0x08006665
 800668c:	08006665 	.word	0x08006665
 8006690:	08006665 	.word	0x08006665
 8006694:	080066e9 	.word	0x080066e9
 8006698:	08006665 	.word	0x08006665
 800669c:	08006665 	.word	0x08006665
 80066a0:	08006665 	.word	0x08006665
 80066a4:	08006665 	.word	0x08006665
 80066a8:	080067f5 	.word	0x080067f5
 80066ac:	08006719 	.word	0x08006719
 80066b0:	080067d7 	.word	0x080067d7
 80066b4:	08006665 	.word	0x08006665
 80066b8:	08006665 	.word	0x08006665
 80066bc:	08006817 	.word	0x08006817
 80066c0:	08006665 	.word	0x08006665
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006665 	.word	0x08006665
 80066cc:	08006665 	.word	0x08006665
 80066d0:	080067df 	.word	0x080067df
 80066d4:	680b      	ldr	r3, [r1, #0]
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	600a      	str	r2, [r1, #0]
 80066dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0a3      	b.n	8006830 <_printf_i+0x1f4>
 80066e8:	6825      	ldr	r5, [r4, #0]
 80066ea:	6808      	ldr	r0, [r1, #0]
 80066ec:	062e      	lsls	r6, r5, #24
 80066ee:	f100 0304 	add.w	r3, r0, #4
 80066f2:	d50a      	bpl.n	800670a <_printf_i+0xce>
 80066f4:	6805      	ldr	r5, [r0, #0]
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	da03      	bge.n	8006704 <_printf_i+0xc8>
 80066fc:	232d      	movs	r3, #45	; 0x2d
 80066fe:	426d      	negs	r5, r5
 8006700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006704:	485e      	ldr	r0, [pc, #376]	; (8006880 <_printf_i+0x244>)
 8006706:	230a      	movs	r3, #10
 8006708:	e019      	b.n	800673e <_printf_i+0x102>
 800670a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800670e:	6805      	ldr	r5, [r0, #0]
 8006710:	600b      	str	r3, [r1, #0]
 8006712:	bf18      	it	ne
 8006714:	b22d      	sxthne	r5, r5
 8006716:	e7ef      	b.n	80066f8 <_printf_i+0xbc>
 8006718:	680b      	ldr	r3, [r1, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	1d18      	adds	r0, r3, #4
 800671e:	6008      	str	r0, [r1, #0]
 8006720:	0628      	lsls	r0, r5, #24
 8006722:	d501      	bpl.n	8006728 <_printf_i+0xec>
 8006724:	681d      	ldr	r5, [r3, #0]
 8006726:	e002      	b.n	800672e <_printf_i+0xf2>
 8006728:	0669      	lsls	r1, r5, #25
 800672a:	d5fb      	bpl.n	8006724 <_printf_i+0xe8>
 800672c:	881d      	ldrh	r5, [r3, #0]
 800672e:	4854      	ldr	r0, [pc, #336]	; (8006880 <_printf_i+0x244>)
 8006730:	2f6f      	cmp	r7, #111	; 0x6f
 8006732:	bf0c      	ite	eq
 8006734:	2308      	moveq	r3, #8
 8006736:	230a      	movne	r3, #10
 8006738:	2100      	movs	r1, #0
 800673a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800673e:	6866      	ldr	r6, [r4, #4]
 8006740:	60a6      	str	r6, [r4, #8]
 8006742:	2e00      	cmp	r6, #0
 8006744:	bfa2      	ittt	ge
 8006746:	6821      	ldrge	r1, [r4, #0]
 8006748:	f021 0104 	bicge.w	r1, r1, #4
 800674c:	6021      	strge	r1, [r4, #0]
 800674e:	b90d      	cbnz	r5, 8006754 <_printf_i+0x118>
 8006750:	2e00      	cmp	r6, #0
 8006752:	d04d      	beq.n	80067f0 <_printf_i+0x1b4>
 8006754:	4616      	mov	r6, r2
 8006756:	fbb5 f1f3 	udiv	r1, r5, r3
 800675a:	fb03 5711 	mls	r7, r3, r1, r5
 800675e:	5dc7      	ldrb	r7, [r0, r7]
 8006760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006764:	462f      	mov	r7, r5
 8006766:	42bb      	cmp	r3, r7
 8006768:	460d      	mov	r5, r1
 800676a:	d9f4      	bls.n	8006756 <_printf_i+0x11a>
 800676c:	2b08      	cmp	r3, #8
 800676e:	d10b      	bne.n	8006788 <_printf_i+0x14c>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	07df      	lsls	r7, r3, #31
 8006774:	d508      	bpl.n	8006788 <_printf_i+0x14c>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	6861      	ldr	r1, [r4, #4]
 800677a:	4299      	cmp	r1, r3
 800677c:	bfde      	ittt	le
 800677e:	2330      	movle	r3, #48	; 0x30
 8006780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006788:	1b92      	subs	r2, r2, r6
 800678a:	6122      	str	r2, [r4, #16]
 800678c:	f8cd a000 	str.w	sl, [sp]
 8006790:	464b      	mov	r3, r9
 8006792:	aa03      	add	r2, sp, #12
 8006794:	4621      	mov	r1, r4
 8006796:	4640      	mov	r0, r8
 8006798:	f7ff fee2 	bl	8006560 <_printf_common>
 800679c:	3001      	adds	r0, #1
 800679e:	d14c      	bne.n	800683a <_printf_i+0x1fe>
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	b004      	add	sp, #16
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067aa:	4835      	ldr	r0, [pc, #212]	; (8006880 <_printf_i+0x244>)
 80067ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	680e      	ldr	r6, [r1, #0]
 80067b4:	061f      	lsls	r7, r3, #24
 80067b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80067ba:	600e      	str	r6, [r1, #0]
 80067bc:	d514      	bpl.n	80067e8 <_printf_i+0x1ac>
 80067be:	07d9      	lsls	r1, r3, #31
 80067c0:	bf44      	itt	mi
 80067c2:	f043 0320 	orrmi.w	r3, r3, #32
 80067c6:	6023      	strmi	r3, [r4, #0]
 80067c8:	b91d      	cbnz	r5, 80067d2 <_printf_i+0x196>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f023 0320 	bic.w	r3, r3, #32
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	2310      	movs	r3, #16
 80067d4:	e7b0      	b.n	8006738 <_printf_i+0xfc>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	f043 0320 	orr.w	r3, r3, #32
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	2378      	movs	r3, #120	; 0x78
 80067e0:	4828      	ldr	r0, [pc, #160]	; (8006884 <_printf_i+0x248>)
 80067e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067e6:	e7e3      	b.n	80067b0 <_printf_i+0x174>
 80067e8:	065e      	lsls	r6, r3, #25
 80067ea:	bf48      	it	mi
 80067ec:	b2ad      	uxthmi	r5, r5
 80067ee:	e7e6      	b.n	80067be <_printf_i+0x182>
 80067f0:	4616      	mov	r6, r2
 80067f2:	e7bb      	b.n	800676c <_printf_i+0x130>
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	6826      	ldr	r6, [r4, #0]
 80067f8:	6960      	ldr	r0, [r4, #20]
 80067fa:	1d1d      	adds	r5, r3, #4
 80067fc:	600d      	str	r5, [r1, #0]
 80067fe:	0635      	lsls	r5, r6, #24
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	d501      	bpl.n	8006808 <_printf_i+0x1cc>
 8006804:	6018      	str	r0, [r3, #0]
 8006806:	e002      	b.n	800680e <_printf_i+0x1d2>
 8006808:	0671      	lsls	r1, r6, #25
 800680a:	d5fb      	bpl.n	8006804 <_printf_i+0x1c8>
 800680c:	8018      	strh	r0, [r3, #0]
 800680e:	2300      	movs	r3, #0
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	4616      	mov	r6, r2
 8006814:	e7ba      	b.n	800678c <_printf_i+0x150>
 8006816:	680b      	ldr	r3, [r1, #0]
 8006818:	1d1a      	adds	r2, r3, #4
 800681a:	600a      	str	r2, [r1, #0]
 800681c:	681e      	ldr	r6, [r3, #0]
 800681e:	6862      	ldr	r2, [r4, #4]
 8006820:	2100      	movs	r1, #0
 8006822:	4630      	mov	r0, r6
 8006824:	f7f9 fcec 	bl	8000200 <memchr>
 8006828:	b108      	cbz	r0, 800682e <_printf_i+0x1f2>
 800682a:	1b80      	subs	r0, r0, r6
 800682c:	6060      	str	r0, [r4, #4]
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	2300      	movs	r3, #0
 8006834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006838:	e7a8      	b.n	800678c <_printf_i+0x150>
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	4632      	mov	r2, r6
 800683e:	4649      	mov	r1, r9
 8006840:	4640      	mov	r0, r8
 8006842:	47d0      	blx	sl
 8006844:	3001      	adds	r0, #1
 8006846:	d0ab      	beq.n	80067a0 <_printf_i+0x164>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	079b      	lsls	r3, r3, #30
 800684c:	d413      	bmi.n	8006876 <_printf_i+0x23a>
 800684e:	68e0      	ldr	r0, [r4, #12]
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	4298      	cmp	r0, r3
 8006854:	bfb8      	it	lt
 8006856:	4618      	movlt	r0, r3
 8006858:	e7a4      	b.n	80067a4 <_printf_i+0x168>
 800685a:	2301      	movs	r3, #1
 800685c:	4632      	mov	r2, r6
 800685e:	4649      	mov	r1, r9
 8006860:	4640      	mov	r0, r8
 8006862:	47d0      	blx	sl
 8006864:	3001      	adds	r0, #1
 8006866:	d09b      	beq.n	80067a0 <_printf_i+0x164>
 8006868:	3501      	adds	r5, #1
 800686a:	68e3      	ldr	r3, [r4, #12]
 800686c:	9903      	ldr	r1, [sp, #12]
 800686e:	1a5b      	subs	r3, r3, r1
 8006870:	42ab      	cmp	r3, r5
 8006872:	dcf2      	bgt.n	800685a <_printf_i+0x21e>
 8006874:	e7eb      	b.n	800684e <_printf_i+0x212>
 8006876:	2500      	movs	r5, #0
 8006878:	f104 0619 	add.w	r6, r4, #25
 800687c:	e7f5      	b.n	800686a <_printf_i+0x22e>
 800687e:	bf00      	nop
 8006880:	08007041 	.word	0x08007041
 8006884:	08007052 	.word	0x08007052

08006888 <memcpy>:
 8006888:	440a      	add	r2, r1
 800688a:	4291      	cmp	r1, r2
 800688c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006890:	d100      	bne.n	8006894 <memcpy+0xc>
 8006892:	4770      	bx	lr
 8006894:	b510      	push	{r4, lr}
 8006896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800689a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800689e:	4291      	cmp	r1, r2
 80068a0:	d1f9      	bne.n	8006896 <memcpy+0xe>
 80068a2:	bd10      	pop	{r4, pc}

080068a4 <memmove>:
 80068a4:	4288      	cmp	r0, r1
 80068a6:	b510      	push	{r4, lr}
 80068a8:	eb01 0402 	add.w	r4, r1, r2
 80068ac:	d902      	bls.n	80068b4 <memmove+0x10>
 80068ae:	4284      	cmp	r4, r0
 80068b0:	4623      	mov	r3, r4
 80068b2:	d807      	bhi.n	80068c4 <memmove+0x20>
 80068b4:	1e43      	subs	r3, r0, #1
 80068b6:	42a1      	cmp	r1, r4
 80068b8:	d008      	beq.n	80068cc <memmove+0x28>
 80068ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068c2:	e7f8      	b.n	80068b6 <memmove+0x12>
 80068c4:	4402      	add	r2, r0
 80068c6:	4601      	mov	r1, r0
 80068c8:	428a      	cmp	r2, r1
 80068ca:	d100      	bne.n	80068ce <memmove+0x2a>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068d6:	e7f7      	b.n	80068c8 <memmove+0x24>

080068d8 <_free_r>:
 80068d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068da:	2900      	cmp	r1, #0
 80068dc:	d048      	beq.n	8006970 <_free_r+0x98>
 80068de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e2:	9001      	str	r0, [sp, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f1a1 0404 	sub.w	r4, r1, #4
 80068ea:	bfb8      	it	lt
 80068ec:	18e4      	addlt	r4, r4, r3
 80068ee:	f000 f8d3 	bl	8006a98 <__malloc_lock>
 80068f2:	4a20      	ldr	r2, [pc, #128]	; (8006974 <_free_r+0x9c>)
 80068f4:	9801      	ldr	r0, [sp, #4]
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	4615      	mov	r5, r2
 80068fa:	b933      	cbnz	r3, 800690a <_free_r+0x32>
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	6014      	str	r4, [r2, #0]
 8006900:	b003      	add	sp, #12
 8006902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006906:	f000 b8cd 	b.w	8006aa4 <__malloc_unlock>
 800690a:	42a3      	cmp	r3, r4
 800690c:	d90b      	bls.n	8006926 <_free_r+0x4e>
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	1862      	adds	r2, r4, r1
 8006912:	4293      	cmp	r3, r2
 8006914:	bf04      	itt	eq
 8006916:	681a      	ldreq	r2, [r3, #0]
 8006918:	685b      	ldreq	r3, [r3, #4]
 800691a:	6063      	str	r3, [r4, #4]
 800691c:	bf04      	itt	eq
 800691e:	1852      	addeq	r2, r2, r1
 8006920:	6022      	streq	r2, [r4, #0]
 8006922:	602c      	str	r4, [r5, #0]
 8006924:	e7ec      	b.n	8006900 <_free_r+0x28>
 8006926:	461a      	mov	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b10b      	cbz	r3, 8006930 <_free_r+0x58>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x4e>
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	1855      	adds	r5, r2, r1
 8006934:	42a5      	cmp	r5, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x78>
 8006938:	6824      	ldr	r4, [r4, #0]
 800693a:	4421      	add	r1, r4
 800693c:	1854      	adds	r4, r2, r1
 800693e:	42a3      	cmp	r3, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	d1dd      	bne.n	8006900 <_free_r+0x28>
 8006944:	681c      	ldr	r4, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	4421      	add	r1, r4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	e7d7      	b.n	8006900 <_free_r+0x28>
 8006950:	d902      	bls.n	8006958 <_free_r+0x80>
 8006952:	230c      	movs	r3, #12
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	e7d3      	b.n	8006900 <_free_r+0x28>
 8006958:	6825      	ldr	r5, [r4, #0]
 800695a:	1961      	adds	r1, r4, r5
 800695c:	428b      	cmp	r3, r1
 800695e:	bf04      	itt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1949      	addeq	r1, r1, r5
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	6054      	str	r4, [r2, #4]
 800696e:	e7c7      	b.n	8006900 <_free_r+0x28>
 8006970:	b003      	add	sp, #12
 8006972:	bd30      	pop	{r4, r5, pc}
 8006974:	200000f0 	.word	0x200000f0

08006978 <_malloc_r>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	1ccd      	adds	r5, r1, #3
 800697c:	f025 0503 	bic.w	r5, r5, #3
 8006980:	3508      	adds	r5, #8
 8006982:	2d0c      	cmp	r5, #12
 8006984:	bf38      	it	cc
 8006986:	250c      	movcc	r5, #12
 8006988:	2d00      	cmp	r5, #0
 800698a:	4606      	mov	r6, r0
 800698c:	db01      	blt.n	8006992 <_malloc_r+0x1a>
 800698e:	42a9      	cmp	r1, r5
 8006990:	d903      	bls.n	800699a <_malloc_r+0x22>
 8006992:	230c      	movs	r3, #12
 8006994:	6033      	str	r3, [r6, #0]
 8006996:	2000      	movs	r0, #0
 8006998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800699a:	f000 f87d 	bl	8006a98 <__malloc_lock>
 800699e:	4921      	ldr	r1, [pc, #132]	; (8006a24 <_malloc_r+0xac>)
 80069a0:	680a      	ldr	r2, [r1, #0]
 80069a2:	4614      	mov	r4, r2
 80069a4:	b99c      	cbnz	r4, 80069ce <_malloc_r+0x56>
 80069a6:	4f20      	ldr	r7, [pc, #128]	; (8006a28 <_malloc_r+0xb0>)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b923      	cbnz	r3, 80069b6 <_malloc_r+0x3e>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f862 	bl	8006a78 <_sbrk_r>
 80069b4:	6038      	str	r0, [r7, #0]
 80069b6:	4629      	mov	r1, r5
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 f85d 	bl	8006a78 <_sbrk_r>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	d123      	bne.n	8006a0a <_malloc_r+0x92>
 80069c2:	230c      	movs	r3, #12
 80069c4:	6033      	str	r3, [r6, #0]
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 f86c 	bl	8006aa4 <__malloc_unlock>
 80069cc:	e7e3      	b.n	8006996 <_malloc_r+0x1e>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	1b5b      	subs	r3, r3, r5
 80069d2:	d417      	bmi.n	8006a04 <_malloc_r+0x8c>
 80069d4:	2b0b      	cmp	r3, #11
 80069d6:	d903      	bls.n	80069e0 <_malloc_r+0x68>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	441c      	add	r4, r3
 80069dc:	6025      	str	r5, [r4, #0]
 80069de:	e004      	b.n	80069ea <_malloc_r+0x72>
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	42a2      	cmp	r2, r4
 80069e4:	bf0c      	ite	eq
 80069e6:	600b      	streq	r3, [r1, #0]
 80069e8:	6053      	strne	r3, [r2, #4]
 80069ea:	4630      	mov	r0, r6
 80069ec:	f000 f85a 	bl	8006aa4 <__malloc_unlock>
 80069f0:	f104 000b 	add.w	r0, r4, #11
 80069f4:	1d23      	adds	r3, r4, #4
 80069f6:	f020 0007 	bic.w	r0, r0, #7
 80069fa:	1ac2      	subs	r2, r0, r3
 80069fc:	d0cc      	beq.n	8006998 <_malloc_r+0x20>
 80069fe:	1a1b      	subs	r3, r3, r0
 8006a00:	50a3      	str	r3, [r4, r2]
 8006a02:	e7c9      	b.n	8006998 <_malloc_r+0x20>
 8006a04:	4622      	mov	r2, r4
 8006a06:	6864      	ldr	r4, [r4, #4]
 8006a08:	e7cc      	b.n	80069a4 <_malloc_r+0x2c>
 8006a0a:	1cc4      	adds	r4, r0, #3
 8006a0c:	f024 0403 	bic.w	r4, r4, #3
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d0e3      	beq.n	80069dc <_malloc_r+0x64>
 8006a14:	1a21      	subs	r1, r4, r0
 8006a16:	4630      	mov	r0, r6
 8006a18:	f000 f82e 	bl	8006a78 <_sbrk_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d1dd      	bne.n	80069dc <_malloc_r+0x64>
 8006a20:	e7cf      	b.n	80069c2 <_malloc_r+0x4a>
 8006a22:	bf00      	nop
 8006a24:	200000f0 	.word	0x200000f0
 8006a28:	200000f4 	.word	0x200000f4

08006a2c <_realloc_r>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	4607      	mov	r7, r0
 8006a30:	4614      	mov	r4, r2
 8006a32:	460e      	mov	r6, r1
 8006a34:	b921      	cbnz	r1, 8006a40 <_realloc_r+0x14>
 8006a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	f7ff bf9c 	b.w	8006978 <_malloc_r>
 8006a40:	b922      	cbnz	r2, 8006a4c <_realloc_r+0x20>
 8006a42:	f7ff ff49 	bl	80068d8 <_free_r>
 8006a46:	4625      	mov	r5, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a4c:	f000 f830 	bl	8006ab0 <_malloc_usable_size_r>
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d20f      	bcs.n	8006a74 <_realloc_r+0x48>
 8006a54:	4621      	mov	r1, r4
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ff8e 	bl	8006978 <_malloc_r>
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d0f2      	beq.n	8006a48 <_realloc_r+0x1c>
 8006a62:	4631      	mov	r1, r6
 8006a64:	4622      	mov	r2, r4
 8006a66:	f7ff ff0f 	bl	8006888 <memcpy>
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f7ff ff33 	bl	80068d8 <_free_r>
 8006a72:	e7e9      	b.n	8006a48 <_realloc_r+0x1c>
 8006a74:	4635      	mov	r5, r6
 8006a76:	e7e7      	b.n	8006a48 <_realloc_r+0x1c>

08006a78 <_sbrk_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d06      	ldr	r5, [pc, #24]	; (8006a94 <_sbrk_r+0x1c>)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	f7fb ff92 	bl	80029ac <_sbrk>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_sbrk_r+0x1a>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_sbrk_r+0x1a>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	200002c8 	.word	0x200002c8

08006a98 <__malloc_lock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__malloc_lock+0x8>)
 8006a9a:	f000 b811 	b.w	8006ac0 <__retarget_lock_acquire_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	200002d0 	.word	0x200002d0

08006aa4 <__malloc_unlock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__malloc_unlock+0x8>)
 8006aa6:	f000 b80c 	b.w	8006ac2 <__retarget_lock_release_recursive>
 8006aaa:	bf00      	nop
 8006aac:	200002d0 	.word	0x200002d0

08006ab0 <_malloc_usable_size_r>:
 8006ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab4:	1f18      	subs	r0, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bfbc      	itt	lt
 8006aba:	580b      	ldrlt	r3, [r1, r0]
 8006abc:	18c0      	addlt	r0, r0, r3
 8006abe:	4770      	bx	lr

08006ac0 <__retarget_lock_acquire_recursive>:
 8006ac0:	4770      	bx	lr

08006ac2 <__retarget_lock_release_recursive>:
 8006ac2:	4770      	bx	lr

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
