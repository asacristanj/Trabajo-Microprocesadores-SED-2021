
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ffc  08006ffc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007004  08007004  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800700c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000254  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013794  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ef  00000000  00000000  00033844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d14  00000000  00000000  00037e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141e2  00000000  00000000  0005ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9fb  00000000  00000000  0006ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001496f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa4  00000000  00000000  0014974c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a68 	.word	0x08006a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006a68 	.word	0x08006a68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <setLuces>:
int estado_luces=0;//0 off 1 on 2 auto
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;
int umbral_luces=80;

void setLuces(int n){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(n==0){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d110      	bne.n	80005c8 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <setLuces+0x8c>)
 80005ae:	f003 fa0b 	bl	80039c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <setLuces+0x90>)
 80005b8:	f003 fa06 	bl	80039c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4819      	ldr	r0, [pc, #100]	; (8000628 <setLuces+0x90>)
 80005c2:	f003 fa01 	bl	80039c8 <HAL_GPIO_WritePin>
 80005c6:	e023      	b.n	8000610 <setLuces+0x78>
	}else if(n==1){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d110      	bne.n	80005f0 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <setLuces+0x8c>)
 80005d6:	f003 f9f7 	bl	80039c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <setLuces+0x90>)
 80005e0:	f003 f9f2 	bl	80039c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <setLuces+0x90>)
 80005ea:	f003 f9ed 	bl	80039c8 <HAL_GPIO_WritePin>
 80005ee:	e00f      	b.n	8000610 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <setLuces+0x8c>)
 80005f8:	f003 f9e6 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <setLuces+0x90>)
 8000602:	f003 f9e1 	bl	80039c8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <setLuces+0x90>)
 800060c:	f003 f9dc 	bl	80039c8 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <setLuces+0x94>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
	actualizar_pantalla(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fa76 	bl	8001b08 <actualizar_pantalla>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40020000 	.word	0x40020000
 800062c:	2000009c 	.word	0x2000009c

08000630 <getEstadoLuces>:

int getEstadoLuces(){
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	return estado_luces;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <getEstadoLuces+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c

08000648 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <cambiarEstadoLuces+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff9f 	bl	8000598 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 800065a:	e00e      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <cambiarEstadoLuces+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d103      	bne.n	800066c <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff97 	bl	8000598 <setLuces>
}
 800066a:	e006      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <cambiarEstadoLuces+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d102      	bne.n	800067a <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff8f 	bl	8000598 <setLuces>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c

08000684 <medirLDR>:

void setUmbralLuces(int u){
	umbral_luces=u;
}

void medirLDR(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>300){
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <medirLDR+0xcc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d151      	bne.n	8000736 <medirLDR+0xb2>
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <medirLDR+0xd0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800069a:	d94c      	bls.n	8000736 <medirLDR+0xb2>
		counter_luces=0;
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <medirLDR+0xd0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
		int media=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
		tickstart_luces=HAL_GetTick();
 80006a6:	f002 fa2b 	bl	8002b00 <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <medirLDR+0xd4>)
 80006ae:	6013      	str	r3, [r2, #0]
		int i=0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
		for(i=0;i<10;i++){
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	e01f      	b.n	80006fa <medirLDR+0x76>
			HAL_ADC_Start(&hadc1);
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <medirLDR+0xd8>)
 80006bc:	f002 fa70 	bl	8002ba0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80006c0:	2164      	movs	r1, #100	; 0x64
 80006c2:	4826      	ldr	r0, [pc, #152]	; (800075c <medirLDR+0xd8>)
 80006c4:	f002 fb71 	bl	8002daa <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 80006c8:	4824      	ldr	r0, [pc, #144]	; (800075c <medirLDR+0xd8>)
 80006ca:	f002 fbf9 	bl	8002ec0 <HAL_ADC_GetValue>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b259      	sxtb	r1, r3
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <medirLDR+0xdc>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	460a      	mov	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <medirLDR+0xd8>)
 80006de:	f002 fb31 	bl	8002d44 <HAL_ADC_Stop>
			media+=adcval[i];
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <medirLDR+0xdc>)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	607b      	str	r3, [r7, #4]
		for(i=0;i<10;i++){
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	dddc      	ble.n	80006ba <medirLDR+0x36>
		}
		media=media/10;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <medirLDR+0xe0>)
 8000704:	fb82 1203 	smull	r1, r2, r2, r3
 8000708:	1092      	asrs	r2, r2, #2
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	607b      	str	r3, [r7, #4]
			if(media>umbral_luces){
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <medirLDR+0xe4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dd06      	ble.n	8000728 <medirLDR+0xa4>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <medirLDR+0xe8>)
 8000722:	f003 f951 	bl	80039c8 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000726:	e00f      	b.n	8000748 <medirLDR+0xc4>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <medirLDR+0xe8>)
 8000730:	f003 f94a 	bl	80039c8 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000734:	e008      	b.n	8000748 <medirLDR+0xc4>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 8000736:	f002 f9e3 	bl	8002b00 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <medirLDR+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <medirLDR+0xd0>)
 8000744:	6013      	str	r3, [r2, #0]
	}
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000009c 	.word	0x2000009c
 8000754:	200000a0 	.word	0x200000a0
 8000758:	200000a4 	.word	0x200000a4
 800075c:	2000018c 	.word	0x2000018c
 8000760:	200002b0 	.word	0x200002b0
 8000764:	66666667 	.word	0x66666667
 8000768:	20000000 	.word	0x20000000
 800076c:	40020c00 	.word	0x40020c00

08000770 <luces>:

void luces(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	medirLDR();
 8000774:	f7ff ff86 	bl	8000684 <medirLDR>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <setEstadoPersianas+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <setEstadoPersianas+0x8c>)
 800078a:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <setEstadoPersianas+0x88>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <setEstadoPersianas+0x88>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10c      	bne.n	80007b4 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <setEstadoPersianas+0x90>)
 80007a2:	f003 f911 	bl	80039c8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <setEstadoPersianas+0x90>)
 80007ae:	f003 f90b 	bl	80039c8 <HAL_GPIO_WritePin>
 80007b2:	e020      	b.n	80007f6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <setEstadoPersianas+0x88>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10c      	bne.n	80007d6 <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <setEstadoPersianas+0x90>)
 80007c4:	f003 f900 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <setEstadoPersianas+0x90>)
 80007d0:	f003 f8fa 	bl	80039c8 <HAL_GPIO_WritePin>
 80007d4:	e00f      	b.n	80007f6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <setEstadoPersianas+0x88>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d10b      	bne.n	80007f6 <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <setEstadoPersianas+0x90>)
 80007e6:	f003 f8ef 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <setEstadoPersianas+0x90>)
 80007f2:	f003 f8e9 	bl	80039c8 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(4);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f001 f986 	bl	8001b08 <actualizar_pantalla>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a8 	.word	0x200000a8
 8000808:	200000ac 	.word	0x200000ac
 800080c:	40020c00 	.word	0x40020c00

08000810 <getEstadoPersianas>:

int getEstadoPersianas(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	return estado_persianas;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <getEstadoPersianas+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200000a8 	.word	0x200000a8

08000828 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getEstadoAnteriorPersianas+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	200000ac 	.word	0x200000ac

08000840 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 8000844:	f7ff ffe4 	bl	8000810 <getEstadoPersianas>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d108      	bne.n	8000860 <cambiarEstadoPersianas+0x20>
 800084e:	f7ff ffeb 	bl	8000828 <getEstadoAnteriorPersianas>
 8000852:	4603      	mov	r3, r0
 8000854:	2b02      	cmp	r3, #2
 8000856:	d103      	bne.n	8000860 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff8f 	bl	800077c <setEstadoPersianas>
 800085e:	e02d      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8000860:	f7ff ffd6 	bl	8000810 <getEstadoPersianas>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d108      	bne.n	800087c <cambiarEstadoPersianas+0x3c>
 800086a:	f7ff ffdd 	bl	8000828 <getEstadoAnteriorPersianas>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d103      	bne.n	800087c <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff ff81 	bl	800077c <setEstadoPersianas>
 800087a:	e01f      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 800087c:	f7ff ffc8 	bl	8000810 <getEstadoPersianas>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d108      	bne.n	8000898 <cambiarEstadoPersianas+0x58>
 8000886:	f7ff ffcf 	bl	8000828 <getEstadoAnteriorPersianas>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff ff73 	bl	800077c <setEstadoPersianas>
 8000896:	e011      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 8000898:	f7ff ffba 	bl	8000810 <getEstadoPersianas>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d103      	bne.n	80008aa <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ff6a 	bl	800077c <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 80008a8:	e008      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 80008aa:	f7ff ffb1 	bl	8000810 <getEstadoPersianas>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d103      	bne.n	80008bc <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff61 	bl	800077c <setEstadoPersianas>
}
 80008ba:	e7ff      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <setEstadoRiego+0x94>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <setEstadoRiego+0x98>)
 80008ce:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <setEstadoRiego+0x94>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 80008d6:	f002 f913 	bl	8002b00 <HAL_GetTick>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <setEstadoRiego+0x9c>)
 80008de:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <setEstadoRiego+0x94>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10c      	bne.n	8000902 <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <setEstadoRiego+0xa0>)
 80008f0:	f003 f86a 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <setEstadoRiego+0xa0>)
 80008fc:	f003 f864 	bl	80039c8 <HAL_GPIO_WritePin>
 8000900:	e020      	b.n	8000944 <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <setEstadoRiego+0x94>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10c      	bne.n	8000924 <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <setEstadoRiego+0xa0>)
 8000912:	f003 f859 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <setEstadoRiego+0xa0>)
 800091e:	f003 f853 	bl	80039c8 <HAL_GPIO_WritePin>
 8000922:	e00f      	b.n	8000944 <setEstadoRiego+0x84>
	}
	else if(estado_riego==2){
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <setEstadoRiego+0x94>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d10b      	bne.n	8000944 <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <setEstadoRiego+0xa0>)
 8000934:	f003 f848 	bl	80039c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <setEstadoRiego+0xa0>)
 8000940:	f003 f842 	bl	80039c8 <HAL_GPIO_WritePin>
		}
	actualizar_pantalla(2);
 8000944:	2002      	movs	r0, #2
 8000946:	f001 f8df 	bl	8001b08 <actualizar_pantalla>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000004 	.word	0x20000004
 8000958:	20000008 	.word	0x20000008
 800095c:	200000f8 	.word	0x200000f8
 8000960:	40020c00 	.word	0x40020c00

08000964 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <cambiarEstadoRiego+0x30>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ffa5 	bl	80008c0 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 8000976:	e00a      	b.n	800098e <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <cambiarEstadoRiego+0x30>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d103      	bne.n	8000988 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff9d 	bl	80008c0 <setEstadoRiego>
}
 8000986:	e002      	b.n	800098e <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff99 	bl	80008c0 <setEstadoRiego>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <getEstadoAnteriorRiego>:
int getEstadoAnteriorRiego(){
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	return estado_anterior_riego;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <getEstadoAnteriorRiego+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <temporizador_riego>:
void temporizador_riego(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <temporizador_riego+0x30>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d003      	beq.n	80009c4 <temporizador_riego+0x14>
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <temporizador_riego+0x30>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10b      	bne.n	80009dc <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 80009c4:	f002 f89c 	bl	8002b00 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <temporizador_riego+0x34>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d4:	d902      	bls.n	80009dc <temporizador_riego+0x2c>
			setEstadoRiego(2);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff ff72 	bl	80008c0 <setEstadoRiego>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	200000f8 	.word	0x200000f8

080009e8 <riego>:
void riego(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	temporizador_riego();
 80009ec:	f7ff ffe0 	bl	80009b0 <temporizador_riego>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <setEstadoSeguridad>:
int estado_seguridad = 0; //0 sistema apagado, 1 sistema encendiendose, 2 sistema_ activo
int alarma_seguridad = 0; //0 alarma apagada, 1 alarma encendida

uint32_t tickstart_seguridad = 0, counter_seguridad = 0;

void setEstadoSeguridad(int n) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	estado_seguridad = n;
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <setEstadoSeguridad+0x70>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	if (estado_seguridad == 0) {
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10e      	bne.n	8000a28 <setEstadoSeguridad+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a10:	f002 ffda 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a1c:	f002 ffd4 	bl	80039c8 <HAL_GPIO_WritePin>
		alarma_seguridad = 0;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <setEstadoSeguridad+0x78>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e015      	b.n	8000a54 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 1) {
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <setEstadoSeguridad+0x4e>
		alarma_seguridad = 0;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <setEstadoSeguridad+0x78>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
		tickstart_seguridad = HAL_GetTick();
 8000a36:	f002 f863 	bl	8002b00 <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <setEstadoSeguridad+0x7c>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e008      	b.n	8000a54 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 2) {
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d104      	bne.n	8000a54 <setEstadoSeguridad+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a50:	f002 ffba 	bl	80039c8 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(3);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f001 f857 	bl	8001b08 <actualizar_pantalla>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000b0 	.word	0x200000b0
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	200000b4 	.word	0x200000b4
 8000a70:	200000b8 	.word	0x200000b8

08000a74 <activar_sensor>:

void activar_sensor() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

	if (estado_seguridad == 1) {
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <activar_sensor+0x78>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d133      	bne.n	8000ae8 <activar_sensor+0x74>
		counter_seguridad = HAL_GetTick() - tickstart_seguridad;
 8000a80:	f002 f83e 	bl	8002b00 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <activar_sensor+0x7c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <activar_sensor+0x80>)
 8000a8e:	6013      	str	r3, [r2, #0]
		if ((counter_seguridad > 0) && (counter_seguridad < 500)) {
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <activar_sensor+0x80>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00a      	beq.n	8000aae <activar_sensor+0x3a>
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <activar_sensor+0x80>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa0:	d205      	bcs.n	8000aae <activar_sensor+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <activar_sensor+0x84>)
 8000aa8:	f002 ff8e 	bl	80039c8 <HAL_GPIO_WritePin>
 8000aac:	e01c      	b.n	8000ae8 <activar_sensor+0x74>
		}else if ((counter_seguridad > 500) && (counter_seguridad < 1000)) {
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <activar_sensor+0x80>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ab6:	d90a      	bls.n	8000ace <activar_sensor+0x5a>
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <activar_sensor+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac0:	d205      	bcs.n	8000ace <activar_sensor+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <activar_sensor+0x84>)
 8000ac8:	f002 ff7e 	bl	80039c8 <HAL_GPIO_WritePin>
 8000acc:	e00c      	b.n	8000ae8 <activar_sensor+0x74>
		} else if (counter_seguridad > 5000) {
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <activar_sensor+0x80>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d906      	bls.n	8000ae8 <activar_sensor+0x74>
			counter_seguridad = 0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <activar_sensor+0x80>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff ff87 	bl	80009f4 <setEstadoSeguridad>
		}

	}
}
 8000ae6:	e7ff      	b.n	8000ae8 <activar_sensor+0x74>
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000b0 	.word	0x200000b0
 8000af0:	200000b8 	.word	0x200000b8
 8000af4:	200000bc 	.word	0x200000bc
 8000af8:	40020000 	.word	0x40020000

08000afc <getEstadoSeguridad>:

int getEstadoSeguridad() {
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <getEstadoSeguridad+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000b0 	.word	0x200000b0

08000b14 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if (getEstadoSeguridad() == 0) {
 8000b18:	f7ff fff0 	bl	8000afc <getEstadoSeguridad>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff ff66 	bl	80009f4 <setEstadoSeguridad>
	} else {
		setEstadoSeguridad(0);
	}
}
 8000b28:	e002      	b.n	8000b30 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ff62 	bl	80009f4 <setEstadoSeguridad>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <intruso_detectado>:

void intruso_detectado() {
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	if (estado_seguridad == 2) {
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <intruso_detectado+0x1c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d102      	bne.n	8000b46 <intruso_detectado+0x12>
		alarma_seguridad = 1;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <intruso_detectado+0x20>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
	}
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000b0 	.word	0x200000b0
 8000b54:	200000b4 	.word	0x200000b4

08000b58 <sonar_alarma>:

void sonar_alarma() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	if(estado_seguridad == 2 && alarma_seguridad == 1){
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <sonar_alarma+0x24>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d109      	bne.n	8000b78 <sonar_alarma+0x20>
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <sonar_alarma+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <sonar_alarma+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <sonar_alarma+0x2c>)
 8000b74:	f002 ff28 	bl	80039c8 <HAL_GPIO_WritePin>
		}
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000b0 	.word	0x200000b0
 8000b80:	200000b4 	.word	0x200000b4
 8000b84:	40020000 	.word	0x40020000

08000b88 <seguridad>:

void seguridad() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	activar_sensor();
 8000b8c:	f7ff ff72 	bl	8000a74 <activar_sensor>
	sonar_alarma();
 8000b90:	f7ff ffe2 	bl	8000b58 <sonar_alarma>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setEstadoClima>:
int temperatura_objetivo=20;
int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0, counter_clima=0;

void setEstadoClima(int n){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <setEstadoClima+0x80>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <setEstadoClima+0x80>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <setEstadoClima+0x84>)
 8000bb6:	f002 ff07 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <setEstadoClima+0x84>)
 8000bc2:	f002 ff01 	bl	80039c8 <HAL_GPIO_WritePin>
 8000bc6:	e020      	b.n	8000c0a <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <setEstadoClima+0x80>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10c      	bne.n	8000bea <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <setEstadoClima+0x84>)
 8000bd8:	f002 fef6 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <setEstadoClima+0x84>)
 8000be4:	f002 fef0 	bl	80039c8 <HAL_GPIO_WritePin>
 8000be8:	e00f      	b.n	8000c0a <setEstadoClima+0x72>
	}else if(estado_clima==2){
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <setEstadoClima+0x80>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d10b      	bne.n	8000c0a <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <setEstadoClima+0x84>)
 8000bfa:	f002 fee5 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <setEstadoClima+0x84>)
 8000c06:	f002 fedf 	bl	80039c8 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(5);
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f000 ff7c 	bl	8001b08 <actualizar_pantalla>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000f4 	.word	0x200000f4
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <getEstadoClima>:

int getEstadoClima(){
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	return estado_clima;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <getEstadoClima+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000f4 	.word	0x200000f4

08000c38 <cambiarEstadoClima>:

void cambiarEstadoClima(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	controldelclima=0;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <cambiarEstadoClima+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ffa4 	bl	8000b98 <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 8000c50:	e00e      	b.n	8000c70 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d103      	bne.n	8000c62 <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff ff9c 	bl	8000b98 <setEstadoClima>
}
 8000c60:	e006      	b.n	8000c70 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d102      	bne.n	8000c70 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ff94 	bl	8000b98 <setEstadoClima>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000cc 	.word	0x200000cc
 8000c78:	200000f4 	.word	0x200000f4

08000c7c <setControlClima>:

void setControlClima(int c){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	controldelclima=c;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <setControlClima+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
	if(c==0){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <setControlClima+0x1a>
		setEstadoClima(0);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ff81 	bl	8000b98 <setEstadoClima>
	}
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000cc 	.word	0x200000cc

08000ca4 <getControlClima>:

int getControlClima(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return controldelclima;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <getControlClima+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200000cc 	.word	0x200000cc

08000cbc <cambiarControlClima>:

void cambiarControlClima(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d103      	bne.n	8000cd0 <cambiarControlClima+0x14>
		controldelclima=1;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e005      	b.n	8000cdc <cambiarControlClima+0x20>
	}else{
		controldelclima=0;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		setEstadoClima(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff5e 	bl	8000b98 <setEstadoClima>
	}
	actualizar_pantalla(5);
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f000 ff13 	bl	8001b08 <actualizar_pantalla>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000cc 	.word	0x200000cc

08000cec <delay>:

int getTemperaturaObjetivo(){
	return temperatura_objetivo;
}

void delay(uint16_t time) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <delay+0x30>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 8000cfe:	bf00      	nop
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <delay+0x30>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d3f9      	bcc.n	8000d00 <delay+0x14>
		;
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200001d8 	.word	0x200001d8

08000d20 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f002 fc86 	bl	8003660 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f002 fc68 	bl	8003660 <HAL_GPIO_Init>
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <DHT11_Start+0x3c>)
 8000da0:	f7ff ffbe 	bl	8000d20 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <DHT11_Start+0x3c>)
 8000daa:	f002 fe0d 	bl	80039c8 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000dae:	f244 6050 	movw	r0, #18000	; 0x4650
 8000db2:	f7ff ff9b 	bl	8000cec <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000db6:	2201      	movs	r2, #1
 8000db8:	2104      	movs	r1, #4
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <DHT11_Start+0x3c>)
 8000dbc:	f002 fe04 	bl	80039c8 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f7ff ff93 	bl	8000cec <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DHT11_Start+0x3c>)
 8000dca:	f7ff ffc7 	bl	8000d5c <Set_Pin_Input>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f7ff ff82 	bl	8000cec <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000de8:	2104      	movs	r1, #4
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000dec:	f002 fdd4 	bl	8003998 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10e      	bne.n	8000e14 <DHT11_Check_Response+0x3c>
		delay(80);
 8000df6:	2050      	movs	r0, #80	; 0x50
 8000df8:	f7ff ff78 	bl	8000cec <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000e00:	f002 fdca 	bl	8003998 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <DHT11_Check_Response+0x38>
			Response = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8000e10:	23ff      	movs	r3, #255	; 0xff
 8000e12:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e14:	bf00      	nop
 8000e16:	2104      	movs	r1, #4
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000e1a:	f002 fdbd 	bl	8003998 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f8      	bne.n	8000e16 <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020000 	.word	0x40020000

08000e34 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	e037      	b.n	8000eb0 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e40:	bf00      	nop
 8000e42:	2104      	movs	r1, #4
 8000e44:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <DHT11_Read+0x8c>)
 8000e46:	f002 fda7 	bl	8003998 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f8      	beq.n	8000e42 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f7ff ff4b 	bl	8000cec <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e56:	2104      	movs	r1, #4
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <DHT11_Read+0x8c>)
 8000e5a:	f002 fd9d 	bl	8003998 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10e      	bne.n	8000e82 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	e00b      	b.n	8000e9a <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	f1c3 0307 	rsb	r3, r3, #7
 8000e88:	2201      	movs	r2, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e9a:	bf00      	nop
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <DHT11_Read+0x8c>)
 8000ea0:	f002 fd7a 	bl	8003998 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f8      	bne.n	8000e9c <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	71bb      	strb	r3, [r7, #6]
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d9c4      	bls.n	8000e40 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <lectura_dht11>:

void lectura_dht11() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000ec8:	f7ff ff66 	bl	8000d98 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000ecc:	f7ff ff84 	bl	8000dd8 <DHT11_Check_Response>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <lectura_dht11+0x8c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 8000ed8:	f7ff ffac 	bl	8000e34 <DHT11_Read>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <lectura_dht11+0x90>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8000ee4:	f7ff ffa6 	bl	8000e34 <DHT11_Read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <lectura_dht11+0x94>)
 8000eee:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8000ef0:	f7ff ffa0 	bl	8000e34 <DHT11_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <lectura_dht11+0x98>)
 8000efa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8000efc:	f7ff ff9a 	bl	8000e34 <DHT11_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <lectura_dht11+0x9c>)
 8000f06:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000f08:	f7ff ff94 	bl	8000e34 <DHT11_Read>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <lectura_dht11+0xa0>)
 8000f12:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <lectura_dht11+0x98>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <lectura_dht11+0xa4>)
 8000f1c:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <lectura_dht11+0x90>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <lectura_dht11+0xa8>)
 8000f26:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <lectura_dht11+0xa4>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <lectura_dht11+0xac>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <lectura_dht11+0xa8>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <lectura_dht11+0xb0>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000c8 	.word	0x200000c8
 8000f54:	20000150 	.word	0x20000150
 8000f58:	200001d5 	.word	0x200001d5
 8000f5c:	200001d4 	.word	0x200001d4
 8000f60:	200002ae 	.word	0x200002ae
 8000f64:	200002ac 	.word	0x200002ac
 8000f68:	20000154 	.word	0x20000154
 8000f6c:	20000152 	.word	0x20000152
 8000f70:	200000c0 	.word	0x200000c0
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <clima>:

void clima(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(counter_clima>2000){
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <clima+0x94>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f84:	d938      	bls.n	8000ff8 <clima+0x80>
		counter_clima=0;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <clima+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 8000f8c:	f001 fdb8 	bl	8002b00 <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <clima+0x98>)
 8000f94:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 8000f96:	f7ff ff95 	bl	8000ec4 <lectura_dht11>
		actualizar_pantalla(6);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f000 fdb4 	bl	8001b08 <actualizar_pantalla>
		if(controldelclima==1){
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <clima+0x9c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d12f      	bne.n	8001008 <clima+0x90>
			if(Temperature>temperatura_objetivo){
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <clima+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <clima+0xa4>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d50c      	bpl.n	8000fde <clima+0x66>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <clima+0xa8>)
 8000fcc:	f002 fcfc 	bl	80039c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <clima+0xa8>)
 8000fd8:	f002 fcf6 	bl	80039c8 <HAL_GPIO_WritePin>

	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
	}

}
 8000fdc:	e014      	b.n	8001008 <clima+0x90>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <clima+0xa8>)
 8000fe6:	f002 fcef 	bl	80039c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <clima+0xa8>)
 8000ff2:	f002 fce9 	bl	80039c8 <HAL_GPIO_WritePin>
}
 8000ff6:	e007      	b.n	8001008 <clima+0x90>
		counter_clima=HAL_GetTick()-tickstart_clima;
 8000ff8:	f001 fd82 	bl	8002b00 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <clima+0x98>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a01      	ldr	r2, [pc, #4]	; (800100c <clima+0x94>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200000d0 	.word	0x200000d0
 8001014:	200000cc 	.word	0x200000cc
 8001018:	2000000c 	.word	0x2000000c
 800101c:	200000c0 	.word	0x200000c0
 8001020:	40020c00 	.word	0x40020c00

08001024 <bluetooth>:
 for (int i = 0; i < 50; i++) {
 rx_buffer[0] = '\0';
 }
 }
 */
void bluetooth(char recibido[]) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if (strcmp(recibido, "a") == 0) {
 800102c:	49b0      	ldr	r1, [pc, #704]	; (80012f0 <bluetooth+0x2cc>)
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f8ce 	bl	80001d0 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d121      	bne.n	800107e <bluetooth+0x5a>
		if (getEstadoLuces() == 1)
 800103a:	f7ff faf9 	bl	8000630 <getEstadoLuces>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10c      	bne.n	800105e <bluetooth+0x3a>
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
					sprintf(tx_buffer, "Las luces ya estaban activadas\n"),
 8001044:	49ab      	ldr	r1, [pc, #684]	; (80012f4 <bluetooth+0x2d0>)
 8001046:	48ac      	ldr	r0, [pc, #688]	; (80012f8 <bluetooth+0x2d4>)
 8001048:	f005 f8e0 	bl	800620c <siprintf>
 800104c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800104e:	b29a      	uxth	r2, r3
 8001050:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001054:	49a8      	ldr	r1, [pc, #672]	; (80012f8 <bluetooth+0x2d4>)
 8001056:	48a9      	ldr	r0, [pc, #676]	; (80012fc <bluetooth+0x2d8>)
 8001058:	f004 f92b 	bl	80052b2 <HAL_UART_Transmit>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
			setEstadoSeguridad(0);
		}

	}
}
 800105c:	e2cd      	b.n	80015fa <bluetooth+0x5d6>
			setLuces(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fa9a 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces activadas\n"), 500);
 8001064:	49a6      	ldr	r1, [pc, #664]	; (8001300 <bluetooth+0x2dc>)
 8001066:	48a4      	ldr	r0, [pc, #656]	; (80012f8 <bluetooth+0x2d4>)
 8001068:	f005 f8d0 	bl	800620c <siprintf>
 800106c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800106e:	b29a      	uxth	r2, r3
 8001070:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001074:	49a0      	ldr	r1, [pc, #640]	; (80012f8 <bluetooth+0x2d4>)
 8001076:	48a1      	ldr	r0, [pc, #644]	; (80012fc <bluetooth+0x2d8>)
 8001078:	f004 f91b 	bl	80052b2 <HAL_UART_Transmit>
}
 800107c:	e2bd      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "b") == 0) {
 800107e:	49a1      	ldr	r1, [pc, #644]	; (8001304 <bluetooth+0x2e0>)
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff f8a5 	bl	80001d0 <strcmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d121      	bne.n	80010d0 <bluetooth+0xac>
		if (getEstadoLuces() == 0)
 800108c:	f7ff fad0 	bl	8000630 <getEstadoLuces>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <bluetooth+0x8c>
					sprintf(tx_buffer, "Luces ya estaban desactivadas\n"), 500);
 8001096:	499c      	ldr	r1, [pc, #624]	; (8001308 <bluetooth+0x2e4>)
 8001098:	4897      	ldr	r0, [pc, #604]	; (80012f8 <bluetooth+0x2d4>)
 800109a:	f005 f8b7 	bl	800620c <siprintf>
 800109e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a6:	4994      	ldr	r1, [pc, #592]	; (80012f8 <bluetooth+0x2d4>)
 80010a8:	4894      	ldr	r0, [pc, #592]	; (80012fc <bluetooth+0x2d8>)
 80010aa:	f004 f902 	bl	80052b2 <HAL_UART_Transmit>
}
 80010ae:	e2a4      	b.n	80015fa <bluetooth+0x5d6>
			setLuces(0);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fa71 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces desactivadas\n"), 500);
 80010b6:	4995      	ldr	r1, [pc, #596]	; (800130c <bluetooth+0x2e8>)
 80010b8:	488f      	ldr	r0, [pc, #572]	; (80012f8 <bluetooth+0x2d4>)
 80010ba:	f005 f8a7 	bl	800620c <siprintf>
 80010be:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c6:	498c      	ldr	r1, [pc, #560]	; (80012f8 <bluetooth+0x2d4>)
 80010c8:	488c      	ldr	r0, [pc, #560]	; (80012fc <bluetooth+0x2d8>)
 80010ca:	f004 f8f2 	bl	80052b2 <HAL_UART_Transmit>
}
 80010ce:	e294      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "c") == 0) {
 80010d0:	498f      	ldr	r1, [pc, #572]	; (8001310 <bluetooth+0x2ec>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f87c 	bl	80001d0 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d121      	bne.n	8001122 <bluetooth+0xfe>
		if (getEstadoLuces() == 2)
 80010de:	f7ff faa7 	bl	8000630 <getEstadoLuces>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d10c      	bne.n	8001102 <bluetooth+0xde>
					sprintf(tx_buffer, "Luces ya estaban en modo automatico\n"),
 80010e8:	498a      	ldr	r1, [pc, #552]	; (8001314 <bluetooth+0x2f0>)
 80010ea:	4883      	ldr	r0, [pc, #524]	; (80012f8 <bluetooth+0x2d4>)
 80010ec:	f005 f88e 	bl	800620c <siprintf>
 80010f0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f8:	497f      	ldr	r1, [pc, #508]	; (80012f8 <bluetooth+0x2d4>)
 80010fa:	4880      	ldr	r0, [pc, #512]	; (80012fc <bluetooth+0x2d8>)
 80010fc:	f004 f8d9 	bl	80052b2 <HAL_UART_Transmit>
}
 8001100:	e27b      	b.n	80015fa <bluetooth+0x5d6>
			setLuces(2);
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff fa48 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces en modo automatico\n"), 500);
 8001108:	4983      	ldr	r1, [pc, #524]	; (8001318 <bluetooth+0x2f4>)
 800110a:	487b      	ldr	r0, [pc, #492]	; (80012f8 <bluetooth+0x2d4>)
 800110c:	f005 f87e 	bl	800620c <siprintf>
 8001110:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001112:	b29a      	uxth	r2, r3
 8001114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001118:	4977      	ldr	r1, [pc, #476]	; (80012f8 <bluetooth+0x2d4>)
 800111a:	4878      	ldr	r0, [pc, #480]	; (80012fc <bluetooth+0x2d8>)
 800111c:	f004 f8c9 	bl	80052b2 <HAL_UART_Transmit>
}
 8001120:	e26b      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "d") == 0) {
 8001122:	497e      	ldr	r1, [pc, #504]	; (800131c <bluetooth+0x2f8>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff f853 	bl	80001d0 <strcmp>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d121      	bne.n	8001174 <bluetooth+0x150>
		if (getEstadoAnteriorRiego() == 0)
 8001130:	f7ff fc32 	bl	8000998 <getEstadoAnteriorRiego>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <bluetooth+0x130>
					sprintf(tx_buffer, "Ya estabas regando\n"), 500);
 800113a:	4979      	ldr	r1, [pc, #484]	; (8001320 <bluetooth+0x2fc>)
 800113c:	486e      	ldr	r0, [pc, #440]	; (80012f8 <bluetooth+0x2d4>)
 800113e:	f005 f865 	bl	800620c <siprintf>
 8001142:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114a:	496b      	ldr	r1, [pc, #428]	; (80012f8 <bluetooth+0x2d4>)
 800114c:	486b      	ldr	r0, [pc, #428]	; (80012fc <bluetooth+0x2d8>)
 800114e:	f004 f8b0 	bl	80052b2 <HAL_UART_Transmit>
}
 8001152:	e252      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Abriendo electrovalvula...\n"), 500);
 8001154:	4973      	ldr	r1, [pc, #460]	; (8001324 <bluetooth+0x300>)
 8001156:	4868      	ldr	r0, [pc, #416]	; (80012f8 <bluetooth+0x2d4>)
 8001158:	f005 f858 	bl	800620c <siprintf>
 800115c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800115e:	b29a      	uxth	r2, r3
 8001160:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001164:	4964      	ldr	r1, [pc, #400]	; (80012f8 <bluetooth+0x2d4>)
 8001166:	4865      	ldr	r0, [pc, #404]	; (80012fc <bluetooth+0x2d8>)
 8001168:	f004 f8a3 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoRiego(0);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fba7 	bl	80008c0 <setEstadoRiego>
}
 8001172:	e242      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "e") == 0) {
 8001174:	496c      	ldr	r1, [pc, #432]	; (8001328 <bluetooth+0x304>)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff f82a 	bl	80001d0 <strcmp>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d121      	bne.n	80011c6 <bluetooth+0x1a2>
		if (getEstadoAnteriorRiego() == 1)
 8001182:	f7ff fc09 	bl	8000998 <getEstadoAnteriorRiego>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10c      	bne.n	80011a6 <bluetooth+0x182>
					sprintf(tx_buffer, "La electrovalvula ya estaba cerrada\n"),
 800118c:	4967      	ldr	r1, [pc, #412]	; (800132c <bluetooth+0x308>)
 800118e:	485a      	ldr	r0, [pc, #360]	; (80012f8 <bluetooth+0x2d4>)
 8001190:	f005 f83c 	bl	800620c <siprintf>
 8001194:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001196:	b29a      	uxth	r2, r3
 8001198:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800119c:	4956      	ldr	r1, [pc, #344]	; (80012f8 <bluetooth+0x2d4>)
 800119e:	4857      	ldr	r0, [pc, #348]	; (80012fc <bluetooth+0x2d8>)
 80011a0:	f004 f887 	bl	80052b2 <HAL_UART_Transmit>
}
 80011a4:	e229      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Cerrando electrovalvula...\n"), 500);
 80011a6:	4962      	ldr	r1, [pc, #392]	; (8001330 <bluetooth+0x30c>)
 80011a8:	4853      	ldr	r0, [pc, #332]	; (80012f8 <bluetooth+0x2d4>)
 80011aa:	f005 f82f 	bl	800620c <siprintf>
 80011ae:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011b6:	4950      	ldr	r1, [pc, #320]	; (80012f8 <bluetooth+0x2d4>)
 80011b8:	4850      	ldr	r0, [pc, #320]	; (80012fc <bluetooth+0x2d8>)
 80011ba:	f004 f87a 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoRiego(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff fb7e 	bl	80008c0 <setEstadoRiego>
}
 80011c4:	e219      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "f") == 0) {
 80011c6:	495b      	ldr	r1, [pc, #364]	; (8001334 <bluetooth+0x310>)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f801 	bl	80001d0 <strcmp>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d121      	bne.n	8001218 <bluetooth+0x1f4>
		if (getEstadoPersianas() == 1)
 80011d4:	f7ff fb1c 	bl	8000810 <getEstadoPersianas>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10c      	bne.n	80011f8 <bluetooth+0x1d4>
					sprintf(tx_buffer, "Ya se esta subiendo la persiana\n"),
 80011de:	4956      	ldr	r1, [pc, #344]	; (8001338 <bluetooth+0x314>)
 80011e0:	4845      	ldr	r0, [pc, #276]	; (80012f8 <bluetooth+0x2d4>)
 80011e2:	f005 f813 	bl	800620c <siprintf>
 80011e6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ee:	4942      	ldr	r1, [pc, #264]	; (80012f8 <bluetooth+0x2d4>)
 80011f0:	4842      	ldr	r0, [pc, #264]	; (80012fc <bluetooth+0x2d8>)
 80011f2:	f004 f85e 	bl	80052b2 <HAL_UART_Transmit>
}
 80011f6:	e200      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Subiendo persiana...\n"), 500);
 80011f8:	4950      	ldr	r1, [pc, #320]	; (800133c <bluetooth+0x318>)
 80011fa:	483f      	ldr	r0, [pc, #252]	; (80012f8 <bluetooth+0x2d4>)
 80011fc:	f005 f806 	bl	800620c <siprintf>
 8001200:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001202:	b29a      	uxth	r2, r3
 8001204:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001208:	493b      	ldr	r1, [pc, #236]	; (80012f8 <bluetooth+0x2d4>)
 800120a:	483c      	ldr	r0, [pc, #240]	; (80012fc <bluetooth+0x2d8>)
 800120c:	f004 f851 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoPersianas(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fab3 	bl	800077c <setEstadoPersianas>
}
 8001216:	e1f0      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "g") == 0) {
 8001218:	4949      	ldr	r1, [pc, #292]	; (8001340 <bluetooth+0x31c>)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7fe ffd8 	bl	80001d0 <strcmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <bluetooth+0x246>
		if (getEstadoPersianas() == 2)
 8001226:	f7ff faf3 	bl	8000810 <getEstadoPersianas>
 800122a:	4603      	mov	r3, r0
 800122c:	2b02      	cmp	r3, #2
 800122e:	d10c      	bne.n	800124a <bluetooth+0x226>
					sprintf(tx_buffer, "Ya se esta bajando la persiana\n"),
 8001230:	4944      	ldr	r1, [pc, #272]	; (8001344 <bluetooth+0x320>)
 8001232:	4831      	ldr	r0, [pc, #196]	; (80012f8 <bluetooth+0x2d4>)
 8001234:	f004 ffea 	bl	800620c <siprintf>
 8001238:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800123a:	b29a      	uxth	r2, r3
 800123c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <bluetooth+0x2d4>)
 8001242:	482e      	ldr	r0, [pc, #184]	; (80012fc <bluetooth+0x2d8>)
 8001244:	f004 f835 	bl	80052b2 <HAL_UART_Transmit>
}
 8001248:	e1d7      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Bajando persiana...\n"), 500);
 800124a:	493f      	ldr	r1, [pc, #252]	; (8001348 <bluetooth+0x324>)
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <bluetooth+0x2d4>)
 800124e:	f004 ffdd 	bl	800620c <siprintf>
 8001252:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001254:	b29a      	uxth	r2, r3
 8001256:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <bluetooth+0x2d4>)
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <bluetooth+0x2d8>)
 800125e:	f004 f828 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoPersianas(2);
 8001262:	2002      	movs	r0, #2
 8001264:	f7ff fa8a 	bl	800077c <setEstadoPersianas>
}
 8001268:	e1c7      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "h") == 0) {
 800126a:	4938      	ldr	r1, [pc, #224]	; (800134c <bluetooth+0x328>)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7fe ffaf 	bl	80001d0 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d121      	bne.n	80012bc <bluetooth+0x298>
		if (getEstadoPersianas() == 0)
 8001278:	f7ff faca 	bl	8000810 <getEstadoPersianas>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <bluetooth+0x278>
					sprintf(tx_buffer, "La persiana ya estaba parada\n"), 500);
 8001282:	4933      	ldr	r1, [pc, #204]	; (8001350 <bluetooth+0x32c>)
 8001284:	481c      	ldr	r0, [pc, #112]	; (80012f8 <bluetooth+0x2d4>)
 8001286:	f004 ffc1 	bl	800620c <siprintf>
 800128a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800128c:	b29a      	uxth	r2, r3
 800128e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001292:	4919      	ldr	r1, [pc, #100]	; (80012f8 <bluetooth+0x2d4>)
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <bluetooth+0x2d8>)
 8001296:	f004 f80c 	bl	80052b2 <HAL_UART_Transmit>
}
 800129a:	e1ae      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Parando persiana...\n"), 500);
 800129c:	492d      	ldr	r1, [pc, #180]	; (8001354 <bluetooth+0x330>)
 800129e:	4816      	ldr	r0, [pc, #88]	; (80012f8 <bluetooth+0x2d4>)
 80012a0:	f004 ffb4 	bl	800620c <siprintf>
 80012a4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ac:	4912      	ldr	r1, [pc, #72]	; (80012f8 <bluetooth+0x2d4>)
 80012ae:	4813      	ldr	r0, [pc, #76]	; (80012fc <bluetooth+0x2d8>)
 80012b0:	f003 ffff 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoPersianas(0);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fa61 	bl	800077c <setEstadoPersianas>
}
 80012ba:	e19e      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "i") == 0) {
 80012bc:	4926      	ldr	r1, [pc, #152]	; (8001358 <bluetooth+0x334>)
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7fe ff86 	bl	80001d0 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d15a      	bne.n	8001380 <bluetooth+0x35c>
		if(getEstadoClima()==1){
 80012ca:	f7ff fca9 	bl	8000c20 <getEstadoClima>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d145      	bne.n	8001360 <bluetooth+0x33c>
							sprintf(tx_buffer, "La calefaccion ya estaba encendida\n"), 500);
 80012d4:	4921      	ldr	r1, [pc, #132]	; (800135c <bluetooth+0x338>)
 80012d6:	4808      	ldr	r0, [pc, #32]	; (80012f8 <bluetooth+0x2d4>)
 80012d8:	f004 ff98 	bl	800620c <siprintf>
 80012dc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <bluetooth+0x2d4>)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <bluetooth+0x2d8>)
 80012e8:	f003 ffe3 	bl	80052b2 <HAL_UART_Transmit>
}
 80012ec:	e185      	b.n	80015fa <bluetooth+0x5d6>
 80012ee:	bf00      	nop
 80012f0:	08006ae4 	.word	0x08006ae4
 80012f4:	08006ae8 	.word	0x08006ae8
 80012f8:	20000158 	.word	0x20000158
 80012fc:	20000268 	.word	0x20000268
 8001300:	08006b08 	.word	0x08006b08
 8001304:	08006b1c 	.word	0x08006b1c
 8001308:	08006b20 	.word	0x08006b20
 800130c:	08006b40 	.word	0x08006b40
 8001310:	08006b54 	.word	0x08006b54
 8001314:	08006b58 	.word	0x08006b58
 8001318:	08006b80 	.word	0x08006b80
 800131c:	08006b9c 	.word	0x08006b9c
 8001320:	08006ba0 	.word	0x08006ba0
 8001324:	08006bb4 	.word	0x08006bb4
 8001328:	08006bd0 	.word	0x08006bd0
 800132c:	08006bd4 	.word	0x08006bd4
 8001330:	08006bfc 	.word	0x08006bfc
 8001334:	08006c18 	.word	0x08006c18
 8001338:	08006c1c 	.word	0x08006c1c
 800133c:	08006c40 	.word	0x08006c40
 8001340:	08006c58 	.word	0x08006c58
 8001344:	08006c5c 	.word	0x08006c5c
 8001348:	08006c7c 	.word	0x08006c7c
 800134c:	08006c94 	.word	0x08006c94
 8001350:	08006c98 	.word	0x08006c98
 8001354:	08006cb8 	.word	0x08006cb8
 8001358:	08006cd0 	.word	0x08006cd0
 800135c:	08006cd4 	.word	0x08006cd4
			setEstadoClima(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc19 	bl	8000b98 <setEstadoClima>
					sprintf(tx_buffer, "Encendiendo calefaccion...\n"), 500);
 8001366:	49a7      	ldr	r1, [pc, #668]	; (8001604 <bluetooth+0x5e0>)
 8001368:	48a7      	ldr	r0, [pc, #668]	; (8001608 <bluetooth+0x5e4>)
 800136a:	f004 ff4f 	bl	800620c <siprintf>
 800136e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001370:	b29a      	uxth	r2, r3
 8001372:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001376:	49a4      	ldr	r1, [pc, #656]	; (8001608 <bluetooth+0x5e4>)
 8001378:	48a4      	ldr	r0, [pc, #656]	; (800160c <bluetooth+0x5e8>)
 800137a:	f003 ff9a 	bl	80052b2 <HAL_UART_Transmit>
}
 800137e:	e13c      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "j") == 0) {
 8001380:	49a3      	ldr	r1, [pc, #652]	; (8001610 <bluetooth+0x5ec>)
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7fe ff24 	bl	80001d0 <strcmp>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d121      	bne.n	80013d2 <bluetooth+0x3ae>
		if(getEstadoClima()==2){
 800138e:	f7ff fc47 	bl	8000c20 <getEstadoClima>
 8001392:	4603      	mov	r3, r0
 8001394:	2b02      	cmp	r3, #2
 8001396:	d10c      	bne.n	80013b2 <bluetooth+0x38e>
									sprintf(tx_buffer, "El ventilador ya estaba encendido\n"), 500);
 8001398:	499e      	ldr	r1, [pc, #632]	; (8001614 <bluetooth+0x5f0>)
 800139a:	489b      	ldr	r0, [pc, #620]	; (8001608 <bluetooth+0x5e4>)
 800139c:	f004 ff36 	bl	800620c <siprintf>
 80013a0:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a8:	4997      	ldr	r1, [pc, #604]	; (8001608 <bluetooth+0x5e4>)
 80013aa:	4898      	ldr	r0, [pc, #608]	; (800160c <bluetooth+0x5e8>)
 80013ac:	f003 ff81 	bl	80052b2 <HAL_UART_Transmit>
}
 80013b0:	e123      	b.n	80015fa <bluetooth+0x5d6>
					setEstadoClima(2);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f7ff fbf0 	bl	8000b98 <setEstadoClima>
							sprintf(tx_buffer, "Encendiendo ventilador...\n"), 500);
 80013b8:	4997      	ldr	r1, [pc, #604]	; (8001618 <bluetooth+0x5f4>)
 80013ba:	4893      	ldr	r0, [pc, #588]	; (8001608 <bluetooth+0x5e4>)
 80013bc:	f004 ff26 	bl	800620c <siprintf>
 80013c0:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013c8:	498f      	ldr	r1, [pc, #572]	; (8001608 <bluetooth+0x5e4>)
 80013ca:	4890      	ldr	r0, [pc, #576]	; (800160c <bluetooth+0x5e8>)
 80013cc:	f003 ff71 	bl	80052b2 <HAL_UART_Transmit>
}
 80013d0:	e113      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "k") == 0) {
 80013d2:	4992      	ldr	r1, [pc, #584]	; (800161c <bluetooth+0x5f8>)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7fe fefb 	bl	80001d0 <strcmp>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d133      	bne.n	8001448 <bluetooth+0x424>
		if (getEstadoClima() == 1)
 80013e0:	f7ff fc1e 	bl	8000c20 <getEstadoClima>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10c      	bne.n	8001404 <bluetooth+0x3e0>
					sprintf(tx_buffer, "Apagando calefaccion\n"), 500);
 80013ea:	498d      	ldr	r1, [pc, #564]	; (8001620 <bluetooth+0x5fc>)
 80013ec:	4886      	ldr	r0, [pc, #536]	; (8001608 <bluetooth+0x5e4>)
 80013ee:	f004 ff0d 	bl	800620c <siprintf>
 80013f2:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fa:	4983      	ldr	r1, [pc, #524]	; (8001608 <bluetooth+0x5e4>)
 80013fc:	4883      	ldr	r0, [pc, #524]	; (800160c <bluetooth+0x5e8>)
 80013fe:	f003 ff58 	bl	80052b2 <HAL_UART_Transmit>
 8001402:	e01d      	b.n	8001440 <bluetooth+0x41c>
		else if (getEstadoClima() == 2)
 8001404:	f7ff fc0c 	bl	8000c20 <getEstadoClima>
 8001408:	4603      	mov	r3, r0
 800140a:	2b02      	cmp	r3, #2
 800140c:	d10c      	bne.n	8001428 <bluetooth+0x404>
					sprintf(tx_buffer, "Apagando ventilador\n"), 500);
 800140e:	4985      	ldr	r1, [pc, #532]	; (8001624 <bluetooth+0x600>)
 8001410:	487d      	ldr	r0, [pc, #500]	; (8001608 <bluetooth+0x5e4>)
 8001412:	f004 fefb 	bl	800620c <siprintf>
 8001416:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001418:	b29a      	uxth	r2, r3
 800141a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800141e:	497a      	ldr	r1, [pc, #488]	; (8001608 <bluetooth+0x5e4>)
 8001420:	487a      	ldr	r0, [pc, #488]	; (800160c <bluetooth+0x5e8>)
 8001422:	f003 ff46 	bl	80052b2 <HAL_UART_Transmit>
 8001426:	e00b      	b.n	8001440 <bluetooth+0x41c>
					sprintf(tx_buffer,
 8001428:	497f      	ldr	r1, [pc, #508]	; (8001628 <bluetooth+0x604>)
 800142a:	4877      	ldr	r0, [pc, #476]	; (8001608 <bluetooth+0x5e4>)
 800142c:	f004 feee 	bl	800620c <siprintf>
 8001430:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001432:	b29a      	uxth	r2, r3
 8001434:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001438:	4973      	ldr	r1, [pc, #460]	; (8001608 <bluetooth+0x5e4>)
 800143a:	4874      	ldr	r0, [pc, #464]	; (800160c <bluetooth+0x5e8>)
 800143c:	f003 ff39 	bl	80052b2 <HAL_UART_Transmit>
		setEstadoClima(0);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fba9 	bl	8000b98 <setEstadoClima>
}
 8001446:	e0d8      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "l") == 0) {
 8001448:	4978      	ldr	r1, [pc, #480]	; (800162c <bluetooth+0x608>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7fe fec0 	bl	80001d0 <strcmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d121      	bne.n	800149a <bluetooth+0x476>
		if (getControlClima() == 1)
 8001456:	f7ff fc25 	bl	8000ca4 <getControlClima>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10c      	bne.n	800147a <bluetooth+0x456>
					sprintf(tx_buffer, "Termostato ya estaba activado\n"), 500);
 8001460:	4973      	ldr	r1, [pc, #460]	; (8001630 <bluetooth+0x60c>)
 8001462:	4869      	ldr	r0, [pc, #420]	; (8001608 <bluetooth+0x5e4>)
 8001464:	f004 fed2 	bl	800620c <siprintf>
 8001468:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800146a:	b29a      	uxth	r2, r3
 800146c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001470:	4965      	ldr	r1, [pc, #404]	; (8001608 <bluetooth+0x5e4>)
 8001472:	4866      	ldr	r0, [pc, #408]	; (800160c <bluetooth+0x5e8>)
 8001474:	f003 ff1d 	bl	80052b2 <HAL_UART_Transmit>
}
 8001478:	e0bf      	b.n	80015fa <bluetooth+0x5d6>
			setControlClima(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fbfe 	bl	8000c7c <setControlClima>
					sprintf(tx_buffer, "Termostato activado\n"), 500);
 8001480:	496c      	ldr	r1, [pc, #432]	; (8001634 <bluetooth+0x610>)
 8001482:	4861      	ldr	r0, [pc, #388]	; (8001608 <bluetooth+0x5e4>)
 8001484:	f004 fec2 	bl	800620c <siprintf>
 8001488:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800148a:	b29a      	uxth	r2, r3
 800148c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001490:	495d      	ldr	r1, [pc, #372]	; (8001608 <bluetooth+0x5e4>)
 8001492:	485e      	ldr	r0, [pc, #376]	; (800160c <bluetooth+0x5e8>)
 8001494:	f003 ff0d 	bl	80052b2 <HAL_UART_Transmit>
}
 8001498:	e0af      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "m") == 0) {
 800149a:	4967      	ldr	r1, [pc, #412]	; (8001638 <bluetooth+0x614>)
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7fe fe97 	bl	80001d0 <strcmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d121      	bne.n	80014ec <bluetooth+0x4c8>
		if (getControlClima() == 0)
 80014a8:	f7ff fbfc 	bl	8000ca4 <getControlClima>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <bluetooth+0x4a8>
					sprintf(tx_buffer, "Termostato ya estaba desactivado\n"),
 80014b2:	4962      	ldr	r1, [pc, #392]	; (800163c <bluetooth+0x618>)
 80014b4:	4854      	ldr	r0, [pc, #336]	; (8001608 <bluetooth+0x5e4>)
 80014b6:	f004 fea9 	bl	800620c <siprintf>
 80014ba:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014c2:	4951      	ldr	r1, [pc, #324]	; (8001608 <bluetooth+0x5e4>)
 80014c4:	4851      	ldr	r0, [pc, #324]	; (800160c <bluetooth+0x5e8>)
 80014c6:	f003 fef4 	bl	80052b2 <HAL_UART_Transmit>
}
 80014ca:	e096      	b.n	80015fa <bluetooth+0x5d6>
			setControlClima(0);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fbd5 	bl	8000c7c <setControlClima>
					sprintf(tx_buffer, "Termostato desactivado\n"), 500);
 80014d2:	495b      	ldr	r1, [pc, #364]	; (8001640 <bluetooth+0x61c>)
 80014d4:	484c      	ldr	r0, [pc, #304]	; (8001608 <bluetooth+0x5e4>)
 80014d6:	f004 fe99 	bl	800620c <siprintf>
 80014da:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014e2:	4949      	ldr	r1, [pc, #292]	; (8001608 <bluetooth+0x5e4>)
 80014e4:	4849      	ldr	r0, [pc, #292]	; (800160c <bluetooth+0x5e8>)
 80014e6:	f003 fee4 	bl	80052b2 <HAL_UART_Transmit>
}
 80014ea:	e086      	b.n	80015fa <bluetooth+0x5d6>
	}else if(strcmp(recibido,"n")==0){
 80014ec:	4955      	ldr	r1, [pc, #340]	; (8001644 <bluetooth+0x620>)
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7fe fe6e 	bl	80001d0 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d113      	bne.n	8001522 <bluetooth+0x4fe>
	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La temperatura es de %i ºC\n", (int) Temperature), 500);
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <bluetooth+0x624>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001504:	ee17 2a90 	vmov	r2, s15
 8001508:	4950      	ldr	r1, [pc, #320]	; (800164c <bluetooth+0x628>)
 800150a:	483f      	ldr	r0, [pc, #252]	; (8001608 <bluetooth+0x5e4>)
 800150c:	f004 fe7e 	bl	800620c <siprintf>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001518:	493b      	ldr	r1, [pc, #236]	; (8001608 <bluetooth+0x5e4>)
 800151a:	483c      	ldr	r0, [pc, #240]	; (800160c <bluetooth+0x5e8>)
 800151c:	f003 fec9 	bl	80052b2 <HAL_UART_Transmit>
}
 8001520:	e06b      	b.n	80015fa <bluetooth+0x5d6>
	 }else if(strcmp(recibido,"o")==0){
 8001522:	494b      	ldr	r1, [pc, #300]	; (8001650 <bluetooth+0x62c>)
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7fe fe53 	bl	80001d0 <strcmp>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d113      	bne.n	8001558 <bluetooth+0x534>
		 	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La humedad relativa es del %i %%\n",(int) Humidity), 500);
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <bluetooth+0x630>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800153a:	ee17 2a90 	vmov	r2, s15
 800153e:	4946      	ldr	r1, [pc, #280]	; (8001658 <bluetooth+0x634>)
 8001540:	4831      	ldr	r0, [pc, #196]	; (8001608 <bluetooth+0x5e4>)
 8001542:	f004 fe63 	bl	800620c <siprintf>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800154e:	492e      	ldr	r1, [pc, #184]	; (8001608 <bluetooth+0x5e4>)
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <bluetooth+0x5e8>)
 8001552:	f003 feae 	bl	80052b2 <HAL_UART_Transmit>
}
 8001556:	e050      	b.n	80015fa <bluetooth+0x5d6>
		 }else if (strcmp(recibido, "p") == 0) {
 8001558:	4940      	ldr	r1, [pc, #256]	; (800165c <bluetooth+0x638>)
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7fe fe38 	bl	80001d0 <strcmp>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d121      	bne.n	80015aa <bluetooth+0x586>
		if (getEstadoSeguridad() == 2)
 8001566:	f7ff fac9 	bl	8000afc <getEstadoSeguridad>
 800156a:	4603      	mov	r3, r0
 800156c:	2b02      	cmp	r3, #2
 800156e:	d10c      	bne.n	800158a <bluetooth+0x566>
					sprintf(tx_buffer,
 8001570:	493b      	ldr	r1, [pc, #236]	; (8001660 <bluetooth+0x63c>)
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <bluetooth+0x5e4>)
 8001574:	f004 fe4a 	bl	800620c <siprintf>
 8001578:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800157a:	b29a      	uxth	r2, r3
 800157c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001580:	4921      	ldr	r1, [pc, #132]	; (8001608 <bluetooth+0x5e4>)
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <bluetooth+0x5e8>)
 8001584:	f003 fe95 	bl	80052b2 <HAL_UART_Transmit>
 8001588:	e00b      	b.n	80015a2 <bluetooth+0x57e>
					sprintf(tx_buffer, "Encendiendo alarma...\n"), 500);
 800158a:	4936      	ldr	r1, [pc, #216]	; (8001664 <bluetooth+0x640>)
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <bluetooth+0x5e4>)
 800158e:	f004 fe3d 	bl	800620c <siprintf>
 8001592:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001594:	b29a      	uxth	r2, r3
 8001596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159a:	491b      	ldr	r1, [pc, #108]	; (8001608 <bluetooth+0x5e4>)
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <bluetooth+0x5e8>)
 800159e:	f003 fe88 	bl	80052b2 <HAL_UART_Transmit>
		setEstadoSeguridad(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fa26 	bl	80009f4 <setEstadoSeguridad>
}
 80015a8:	e027      	b.n	80015fa <bluetooth+0x5d6>
	} else if (strcmp(recibido, "q") == 0) {
 80015aa:	492f      	ldr	r1, [pc, #188]	; (8001668 <bluetooth+0x644>)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7fe fe0f 	bl	80001d0 <strcmp>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d120      	bne.n	80015fa <bluetooth+0x5d6>
		if (getEstadoSeguridad() == 0)
 80015b8:	f7ff faa0 	bl	8000afc <getEstadoSeguridad>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10c      	bne.n	80015dc <bluetooth+0x5b8>
					sprintf(tx_buffer, "La alarma ya estaba apagada\n"), 500);
 80015c2:	492a      	ldr	r1, [pc, #168]	; (800166c <bluetooth+0x648>)
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <bluetooth+0x5e4>)
 80015c6:	f004 fe21 	bl	800620c <siprintf>
 80015ca:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <bluetooth+0x5e4>)
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <bluetooth+0x5e8>)
 80015d6:	f003 fe6c 	bl	80052b2 <HAL_UART_Transmit>
}
 80015da:	e00e      	b.n	80015fa <bluetooth+0x5d6>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
 80015dc:	4924      	ldr	r1, [pc, #144]	; (8001670 <bluetooth+0x64c>)
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <bluetooth+0x5e4>)
 80015e0:	f004 fe14 	bl	800620c <siprintf>
 80015e4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ec:	4906      	ldr	r1, [pc, #24]	; (8001608 <bluetooth+0x5e4>)
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <bluetooth+0x5e8>)
 80015f0:	f003 fe5f 	bl	80052b2 <HAL_UART_Transmit>
			setEstadoSeguridad(0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff f9fd 	bl	80009f4 <setEstadoSeguridad>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08006cf8 	.word	0x08006cf8
 8001608:	20000158 	.word	0x20000158
 800160c:	20000268 	.word	0x20000268
 8001610:	08006d14 	.word	0x08006d14
 8001614:	08006d18 	.word	0x08006d18
 8001618:	08006d3c 	.word	0x08006d3c
 800161c:	08006d58 	.word	0x08006d58
 8001620:	08006d5c 	.word	0x08006d5c
 8001624:	08006d74 	.word	0x08006d74
 8001628:	08006d8c 	.word	0x08006d8c
 800162c:	08006dbc 	.word	0x08006dbc
 8001630:	08006dc0 	.word	0x08006dc0
 8001634:	08006de0 	.word	0x08006de0
 8001638:	08006df8 	.word	0x08006df8
 800163c:	08006dfc 	.word	0x08006dfc
 8001640:	08006e20 	.word	0x08006e20
 8001644:	08006e38 	.word	0x08006e38
 8001648:	200000c0 	.word	0x200000c0
 800164c:	08006e3c 	.word	0x08006e3c
 8001650:	08006e5c 	.word	0x08006e5c
 8001654:	200000c4 	.word	0x200000c4
 8001658:	08006e60 	.word	0x08006e60
 800165c:	08006e84 	.word	0x08006e84
 8001660:	08006e88 	.word	0x08006e88
 8001664:	08006ebc 	.word	0x08006ebc
 8001668:	08006ed4 	.word	0x08006ed4
 800166c:	08006ed8 	.word	0x08006ed8
 8001670:	08006ef8 	.word	0x08006ef8

08001674 <clrScr>:
#include "control_clima.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 800167e:	1dfa      	adds	r2, r7, #7
 8001680:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2110      	movs	r1, #16
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <clrScr+0x24>)
 800168c:	f002 fb12 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000fc 	.word	0x200000fc

0800169c <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 80016a8:	2302      	movs	r3, #2
 80016aa:	753b      	strb	r3, [r7, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	757b      	strb	r3, [r7, #21]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	75bb      	strb	r3, [r7, #22]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 80016be:	f107 0214 	add.w	r2, r7, #20
 80016c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2304      	movs	r3, #4
 80016ca:	2110      	movs	r1, #16
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <setColor+0x40>)
 80016ce:	f002 faf1 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000fc 	.word	0x200000fc

080016e0 <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 80016ec:	2303      	movs	r3, #3
 80016ee:	753b      	strb	r3, [r7, #20]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	757b      	strb	r3, [r7, #21]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	75bb      	strb	r3, [r7, #22]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 8001702:	f107 0214 	add.w	r2, r7, #20
 8001706:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2304      	movs	r3, #4
 800170e:	2110      	movs	r1, #16
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <setBackColor+0x40>)
 8001712:	f002 facf 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000fc 	.word	0x200000fc

08001724 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	dd01      	ble.n	800174a <drawRect+0x26>
		desb[0] = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	dd01      	ble.n	8001754 <drawRect+0x30>
		desb[1] = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	dd01      	ble.n	800175e <drawRect+0x3a>
		desb[2] = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2bff      	cmp	r3, #255	; 0xff
 8001762:	dd01      	ble.n	8001768 <drawRect+0x44>
		desb[3] = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8001768:	2304      	movs	r3, #4
 800176a:	753b      	strb	r3, [r7, #20]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	757b      	strb	r3, [r7, #21]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	75bb      	strb	r3, [r7, #22]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	75fb      	strb	r3, [r7, #23]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	763b      	strb	r3, [r7, #24]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	767b      	strb	r3, [r7, #25]
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	b2db      	uxtb	r3, r3
 800178e:	76bb      	strb	r3, [r7, #26]
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	b2db      	uxtb	r3, r3
 8001794:	76fb      	strb	r3, [r7, #27]
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	b2db      	uxtb	r3, r3
 800179a:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 800179c:	f107 0214 	add.w	r2, r7, #20
 80017a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2309      	movs	r3, #9
 80017a8:	2110      	movs	r1, #16
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <drawRect+0x94>)
 80017ac:	f002 fa82 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000fc 	.word	0x200000fc

080017bc <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	dd01      	ble.n	80017e2 <fillRect+0x26>
		desb[0] = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2bff      	cmp	r3, #255	; 0xff
 80017e6:	dd01      	ble.n	80017ec <fillRect+0x30>
		desb[1] = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	dd01      	ble.n	80017f6 <fillRect+0x3a>
		desb[2] = 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2bff      	cmp	r3, #255	; 0xff
 80017fa:	dd01      	ble.n	8001800 <fillRect+0x44>
		desb[3] = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8001800:	2305      	movs	r3, #5
 8001802:	753b      	strb	r3, [r7, #20]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	757b      	strb	r3, [r7, #21]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	75bb      	strb	r3, [r7, #22]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	75fb      	strb	r3, [r7, #23]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	763b      	strb	r3, [r7, #24]
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	767b      	strb	r3, [r7, #25]
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	b2db      	uxtb	r3, r3
 8001826:	76bb      	strb	r3, [r7, #26]
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	b2db      	uxtb	r3, r3
 800182c:	76fb      	strb	r3, [r7, #27]
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	b2db      	uxtb	r3, r3
 8001832:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 8001834:	f107 0214 	add.w	r2, r7, #20
 8001838:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2309      	movs	r3, #9
 8001840:	2110      	movs	r1, #16
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <fillRect+0x94>)
 8001844:	f002 fa36 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8001848:	bf00      	nop
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200000fc 	.word	0x200000fc

08001854 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b098      	sub	sp, #96	; 0x60
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 8001860:	2300      	movs	r3, #0
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2bff      	cmp	r3, #255	; 0xff
 800186c:	dd01      	ble.n	8001872 <print+0x1e>
		desb[0] = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2bff      	cmp	r3, #255	; 0xff
 8001876:	dd01      	ble.n	800187c <print+0x28>
		desb[1] = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 800187c:	2306      	movs	r3, #6
 800187e:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7fe fcaf 	bl	80001e4 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 800188a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800188c:	b2db      	uxtb	r3, r3
 800188e:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 8001890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001892:	b2db      	uxtb	r3, r3
 8001894:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 8001896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001898:	b2db      	uxtb	r3, r3
 800189a:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 800189c:	2304      	movs	r3, #4
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
 80018a0:	e00d      	b.n	80018be <print+0x6a>
		cadena[i] = t[i - 4];
 80018a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a4:	3b04      	subs	r3, #4
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	7819      	ldrb	r1, [r3, #0]
 80018ac:	f107 0214 	add.w	r2, r7, #20
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	4413      	add	r3, r2
 80018b4:	460a      	mov	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	3301      	adds	r3, #1
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
 80018be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c0:	3303      	adds	r3, #3
 80018c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018c4:	429a      	cmp	r2, r3
 80018c6:	ddec      	ble.n	80018a2 <print+0x4e>
	}
	cadena[longitud + 4] = x;
 80018c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ca:	3304      	adds	r3, #4
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018d4:	440b      	add	r3, r1
 80018d6:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 80018da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018dc:	3305      	adds	r3, #5
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018e6:	440b      	add	r3, r1
 80018e8:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) cadena, longitud + 6, 3000);
 80018ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3306      	adds	r3, #6
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f107 0214 	add.w	r2, r7, #20
 80018f8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80018fc:	9100      	str	r1, [sp, #0]
 80018fe:	2110      	movs	r1, #16
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <print+0xbc>)
 8001902:	f002 f9d7 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 8001906:	bf00      	nop
 8001908:	3758      	adds	r7, #88	; 0x58
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000fc 	.word	0x200000fc

08001914 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e01b      	b.n	8001964 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4413      	add	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff ff88 	bl	8001854 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fc48 	bl	80001e4 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	00da      	lsls	r2, r3, #3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4413      	add	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3301      	adds	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbdf      	blt.n	800192c <printfrase+0x18>
	}
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af02      	add	r7, sp, #8
 800197e:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 8001980:	2307      	movs	r3, #7
 8001982:	733b      	strb	r3, [r7, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) font, 2, 3000);
 800198a:	f107 020c 	add.w	r2, r7, #12
 800198e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2302      	movs	r3, #2
 8001996:	2110      	movs	r1, #16
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <setFont+0x30>)
 800199a:	f002 f98b 	bl	8003cb4 <HAL_I2C_Master_Transmit>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000fc 	.word	0x200000fc

080019ac <pantalla_principal>:
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 7, 3000);
}


void pantalla_principal() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
	clrScr();
 80019b2:	f7ff fe5f 	bl	8001674 <clrScr>
	setColor(255, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	20ff      	movs	r0, #255	; 0xff
 80019bc:	f7ff fe6e 	bl	800169c <setColor>
	fillRect(1, 1, 478, 40);
 80019c0:	2328      	movs	r3, #40	; 0x28
 80019c2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80019c6:	2101      	movs	r1, #1
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fef7 	bl	80017bc <fillRect>
	setColor(64, 64, 64);
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	2040      	movs	r0, #64	; 0x40
 80019d4:	f7ff fe62 	bl	800169c <setColor>
	fillRect(1, 318, 478, 280);
 80019d8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80019dc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80019e0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fee9 	bl	80017bc <fillRect>
	setColor(255, 255, 255);
 80019ea:	22ff      	movs	r2, #255	; 0xff
 80019ec:	21ff      	movs	r1, #255	; 0xff
 80019ee:	20ff      	movs	r0, #255	; 0xff
 80019f0:	f7ff fe54 	bl	800169c <setColor>
	setBackColor(255, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	20ff      	movs	r0, #255	; 0xff
 80019fa:	f7ff fe71 	bl	80016e0 <setBackColor>
	setFont(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ffba 	bl	8001978 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001a04:	220c      	movs	r2, #12
 8001a06:	2132      	movs	r1, #50	; 0x32
 8001a08:	4835      	ldr	r0, [pc, #212]	; (8001ae0 <pantalla_principal+0x134>)
 8001a0a:	f7ff ff23 	bl	8001854 <print>
	setBackColor(64, 64, 64);
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	2040      	movs	r0, #64	; 0x40
 8001a14:	f7ff fe64 	bl	80016e0 <setBackColor>
	setColor(255, 255, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	21ff      	movs	r1, #255	; 0xff
 8001a1c:	20ff      	movs	r0, #255	; 0xff
 8001a1e:	f7ff fe3d 	bl	800169c <setColor>
	setFont(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ffa8 	bl	8001978 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001a28:	4a2e      	ldr	r2, [pc, #184]	; (8001ae4 <pantalla_principal+0x138>)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001a34:	f107 000c 	add.w	r0, r7, #12
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f240 1219 	movw	r2, #281	; 0x119
 8001a3e:	2114      	movs	r1, #20
 8001a40:	f7ff ff68 	bl	8001914 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <pantalla_principal+0x13c>)
 8001a46:	463b      	mov	r3, r7
 8001a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001a4e:	4638      	mov	r0, r7
 8001a50:	2303      	movs	r3, #3
 8001a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a56:	2114      	movs	r1, #20
 8001a58:	f7ff ff5c 	bl	8001914 <printfrase>
	setColor(0, 0, 255);
 8001a5c:	22ff      	movs	r2, #255	; 0xff
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fe1b 	bl	800169c <setColor>
	drawRect(0, 0, 479, 319);
 8001a66:	f240 133f 	movw	r3, #319	; 0x13f
 8001a6a:	f240 12df 	movw	r2, #479	; 0x1df
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fe57 	bl	8001724 <drawRect>
	setFont(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ff7e 	bl	8001978 <setFont>
	setColor(255, 255, 255);
 8001a7c:	22ff      	movs	r2, #255	; 0xff
 8001a7e:	21ff      	movs	r1, #255	; 0xff
 8001a80:	20ff      	movs	r0, #255	; 0xff
 8001a82:	f7ff fe0b 	bl	800169c <setColor>
	setBackColor(0, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fe28 	bl	80016e0 <setBackColor>
	print("LUCES:", 50, 94);
 8001a90:	225e      	movs	r2, #94	; 0x5e
 8001a92:	2132      	movs	r1, #50	; 0x32
 8001a94:	4815      	ldr	r0, [pc, #84]	; (8001aec <pantalla_principal+0x140>)
 8001a96:	f7ff fedd 	bl	8001854 <print>
	print("RIEGO:", 50, 138);
 8001a9a:	228a      	movs	r2, #138	; 0x8a
 8001a9c:	2132      	movs	r1, #50	; 0x32
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <pantalla_principal+0x144>)
 8001aa0:	f7ff fed8 	bl	8001854 <print>
	print("ALARMA:", 50, 182);
 8001aa4:	22b6      	movs	r2, #182	; 0xb6
 8001aa6:	2132      	movs	r1, #50	; 0x32
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <pantalla_principal+0x148>)
 8001aaa:	f7ff fed3 	bl	8001854 <print>
	print("PERSIANA:", 50, 226);
 8001aae:	22e2      	movs	r2, #226	; 0xe2
 8001ab0:	2132      	movs	r1, #50	; 0x32
 8001ab2:	4811      	ldr	r0, [pc, #68]	; (8001af8 <pantalla_principal+0x14c>)
 8001ab4:	f7ff fece 	bl	8001854 <print>
	print("CLIMA:", 240, 94);
 8001ab8:	225e      	movs	r2, #94	; 0x5e
 8001aba:	21f0      	movs	r1, #240	; 0xf0
 8001abc:	480f      	ldr	r0, [pc, #60]	; (8001afc <pantalla_principal+0x150>)
 8001abe:	f7ff fec9 	bl	8001854 <print>
	print("TEMP:", 240, 138);
 8001ac2:	228a      	movs	r2, #138	; 0x8a
 8001ac4:	21f0      	movs	r1, #240	; 0xf0
 8001ac6:	480e      	ldr	r0, [pc, #56]	; (8001b00 <pantalla_principal+0x154>)
 8001ac8:	f7ff fec4 	bl	8001854 <print>
	print("HUMEDAD:", 240, 182);
 8001acc:	22b6      	movs	r2, #182	; 0xb6
 8001ace:	21f0      	movs	r1, #240	; 0xf0
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <pantalla_principal+0x158>)
 8001ad2:	f7ff febf 	bl	8001854 <print>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	08006f0c 	.word	0x08006f0c
 8001ae4:	08006f60 	.word	0x08006f60
 8001ae8:	08006f6c 	.word	0x08006f6c
 8001aec:	08006f20 	.word	0x08006f20
 8001af0:	08006f28 	.word	0x08006f28
 8001af4:	08006f30 	.word	0x08006f30
 8001af8:	08006f38 	.word	0x08006f38
 8001afc:	08006f44 	.word	0x08006f44
 8001b00:	08006f4c 	.word	0x08006f4c
 8001b04:	08006f54 	.word	0x08006f54

08001b08 <actualizar_pantalla>:

void actualizar_pantalla(int act){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	setColor(0, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fdc1 	bl	800169c <setColor>
	if(act==1){
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d12b      	bne.n	8001b78 <actualizar_pantalla+0x70>
		fillRect(146, 94, 210,110);
 8001b20:	236e      	movs	r3, #110	; 0x6e
 8001b22:	22d2      	movs	r2, #210	; 0xd2
 8001b24:	215e      	movs	r1, #94	; 0x5e
 8001b26:	2092      	movs	r0, #146	; 0x92
 8001b28:	f7ff fe48 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001b2c:	22ff      	movs	r2, #255	; 0xff
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	20ff      	movs	r0, #255	; 0xff
 8001b32:	f7ff fdb3 	bl	800169c <setColor>
		setBackColor(0, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fdd0 	bl	80016e0 <setBackColor>
			if(getEstadoLuces()==0){
 8001b40:	f7fe fd76 	bl	8000630 <getEstadoLuces>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <actualizar_pantalla+0x4e>
				print("OFF", 146, 94);
 8001b4a:	225e      	movs	r2, #94	; 0x5e
 8001b4c:	2192      	movs	r1, #146	; 0x92
 8001b4e:	4891      	ldr	r0, [pc, #580]	; (8001d94 <actualizar_pantalla+0x28c>)
 8001b50:	f7ff fe80 	bl	8001854 <print>
	}




}
 8001b54:	e11a      	b.n	8001d8c <actualizar_pantalla+0x284>
			}else if(getEstadoLuces()==1){
 8001b56:	f7fe fd6b 	bl	8000630 <getEstadoLuces>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <actualizar_pantalla+0x64>
				print("ON", 146, 94);
 8001b60:	225e      	movs	r2, #94	; 0x5e
 8001b62:	2192      	movs	r1, #146	; 0x92
 8001b64:	488c      	ldr	r0, [pc, #560]	; (8001d98 <actualizar_pantalla+0x290>)
 8001b66:	f7ff fe75 	bl	8001854 <print>
}
 8001b6a:	e10f      	b.n	8001d8c <actualizar_pantalla+0x284>
				print("AUTO", 146, 94);
 8001b6c:	225e      	movs	r2, #94	; 0x5e
 8001b6e:	2192      	movs	r1, #146	; 0x92
 8001b70:	488a      	ldr	r0, [pc, #552]	; (8001d9c <actualizar_pantalla+0x294>)
 8001b72:	f7ff fe6f 	bl	8001854 <print>
}
 8001b76:	e109      	b.n	8001d8c <actualizar_pantalla+0x284>
	}else if(act==2){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d11b      	bne.n	8001bb6 <actualizar_pantalla+0xae>
		fillRect(146, 138, 210,154);
 8001b7e:	239a      	movs	r3, #154	; 0x9a
 8001b80:	22d2      	movs	r2, #210	; 0xd2
 8001b82:	218a      	movs	r1, #138	; 0x8a
 8001b84:	2092      	movs	r0, #146	; 0x92
 8001b86:	f7ff fe19 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001b8a:	22ff      	movs	r2, #255	; 0xff
 8001b8c:	21ff      	movs	r1, #255	; 0xff
 8001b8e:	20ff      	movs	r0, #255	; 0xff
 8001b90:	f7ff fd84 	bl	800169c <setColor>
			if(getEstadoAnteriorRiego()==0){
 8001b94:	f7fe ff00 	bl	8000998 <getEstadoAnteriorRiego>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <actualizar_pantalla+0xa2>
				print("ON", 146, 138);
 8001b9e:	228a      	movs	r2, #138	; 0x8a
 8001ba0:	2192      	movs	r1, #146	; 0x92
 8001ba2:	487d      	ldr	r0, [pc, #500]	; (8001d98 <actualizar_pantalla+0x290>)
 8001ba4:	f7ff fe56 	bl	8001854 <print>
}
 8001ba8:	e0f0      	b.n	8001d8c <actualizar_pantalla+0x284>
				print("OFF", 146, 138);
 8001baa:	228a      	movs	r2, #138	; 0x8a
 8001bac:	2192      	movs	r1, #146	; 0x92
 8001bae:	4879      	ldr	r0, [pc, #484]	; (8001d94 <actualizar_pantalla+0x28c>)
 8001bb0:	f7ff fe50 	bl	8001854 <print>
}
 8001bb4:	e0ea      	b.n	8001d8c <actualizar_pantalla+0x284>
	}else if(act==3){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d11b      	bne.n	8001bf4 <actualizar_pantalla+0xec>
		fillRect(162, 182, 226,198);
 8001bbc:	23c6      	movs	r3, #198	; 0xc6
 8001bbe:	22e2      	movs	r2, #226	; 0xe2
 8001bc0:	21b6      	movs	r1, #182	; 0xb6
 8001bc2:	20a2      	movs	r0, #162	; 0xa2
 8001bc4:	f7ff fdfa 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001bc8:	22ff      	movs	r2, #255	; 0xff
 8001bca:	21ff      	movs	r1, #255	; 0xff
 8001bcc:	20ff      	movs	r0, #255	; 0xff
 8001bce:	f7ff fd65 	bl	800169c <setColor>
			if(getEstadoSeguridad()==0){
 8001bd2:	f7fe ff93 	bl	8000afc <getEstadoSeguridad>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <actualizar_pantalla+0xe0>
				print("OFF", 162, 182);
 8001bdc:	22b6      	movs	r2, #182	; 0xb6
 8001bde:	21a2      	movs	r1, #162	; 0xa2
 8001be0:	486c      	ldr	r0, [pc, #432]	; (8001d94 <actualizar_pantalla+0x28c>)
 8001be2:	f7ff fe37 	bl	8001854 <print>
}
 8001be6:	e0d1      	b.n	8001d8c <actualizar_pantalla+0x284>
				print("ON", 162, 182);
 8001be8:	22b6      	movs	r2, #182	; 0xb6
 8001bea:	21a2      	movs	r1, #162	; 0xa2
 8001bec:	486a      	ldr	r0, [pc, #424]	; (8001d98 <actualizar_pantalla+0x290>)
 8001bee:	f7ff fe31 	bl	8001854 <print>
}
 8001bf2:	e0cb      	b.n	8001d8c <actualizar_pantalla+0x284>
	}else if(act==4){
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d12d      	bne.n	8001c56 <actualizar_pantalla+0x14e>
		fillRect(194, 226, 258,242);
 8001bfa:	23f2      	movs	r3, #242	; 0xf2
 8001bfc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001c00:	21e2      	movs	r1, #226	; 0xe2
 8001c02:	20c2      	movs	r0, #194	; 0xc2
 8001c04:	f7ff fdda 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001c08:	22ff      	movs	r2, #255	; 0xff
 8001c0a:	21ff      	movs	r1, #255	; 0xff
 8001c0c:	20ff      	movs	r0, #255	; 0xff
 8001c0e:	f7ff fd45 	bl	800169c <setColor>
			if(getEstadoPersianas()==0){
 8001c12:	f7fe fdfd 	bl	8000810 <getEstadoPersianas>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <actualizar_pantalla+0x120>
				print("STOP", 194, 226);
 8001c1c:	22e2      	movs	r2, #226	; 0xe2
 8001c1e:	21c2      	movs	r1, #194	; 0xc2
 8001c20:	485f      	ldr	r0, [pc, #380]	; (8001da0 <actualizar_pantalla+0x298>)
 8001c22:	f7ff fe17 	bl	8001854 <print>
}
 8001c26:	e0b1      	b.n	8001d8c <actualizar_pantalla+0x284>
			else if(getEstadoPersianas()==1){
 8001c28:	f7fe fdf2 	bl	8000810 <getEstadoPersianas>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <actualizar_pantalla+0x136>
				print("DOWN", 194, 226);
 8001c32:	22e2      	movs	r2, #226	; 0xe2
 8001c34:	21c2      	movs	r1, #194	; 0xc2
 8001c36:	485b      	ldr	r0, [pc, #364]	; (8001da4 <actualizar_pantalla+0x29c>)
 8001c38:	f7ff fe0c 	bl	8001854 <print>
}
 8001c3c:	e0a6      	b.n	8001d8c <actualizar_pantalla+0x284>
			}else if(getEstadoPersianas()==2){
 8001c3e:	f7fe fde7 	bl	8000810 <getEstadoPersianas>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	f040 80a1 	bne.w	8001d8c <actualizar_pantalla+0x284>
				print("UP", 194, 226);
 8001c4a:	22e2      	movs	r2, #226	; 0xe2
 8001c4c:	21c2      	movs	r1, #194	; 0xc2
 8001c4e:	4856      	ldr	r0, [pc, #344]	; (8001da8 <actualizar_pantalla+0x2a0>)
 8001c50:	f7ff fe00 	bl	8001854 <print>
}
 8001c54:	e09a      	b.n	8001d8c <actualizar_pantalla+0x284>
	}else if(act==5){
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d141      	bne.n	8001ce0 <actualizar_pantalla+0x1d8>
		fillRect(336, 94, 400,110);
 8001c5c:	236e      	movs	r3, #110	; 0x6e
 8001c5e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c62:	215e      	movs	r1, #94	; 0x5e
 8001c64:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001c68:	f7ff fda8 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	21ff      	movs	r1, #255	; 0xff
 8001c70:	20ff      	movs	r0, #255	; 0xff
 8001c72:	f7ff fd13 	bl	800169c <setColor>
		setBackColor(0, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff fd30 	bl	80016e0 <setBackColor>
		if(getControlClima()==1){
 8001c80:	f7ff f810 	bl	8000ca4 <getControlClima>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d106      	bne.n	8001c98 <actualizar_pantalla+0x190>
			print("AUTO", 336, 94);
 8001c8a:	225e      	movs	r2, #94	; 0x5e
 8001c8c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001c90:	4842      	ldr	r0, [pc, #264]	; (8001d9c <actualizar_pantalla+0x294>)
 8001c92:	f7ff fddf 	bl	8001854 <print>
}
 8001c96:	e079      	b.n	8001d8c <actualizar_pantalla+0x284>
		}else if(getEstadoClima()==0){
 8001c98:	f7fe ffc2 	bl	8000c20 <getEstadoClima>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <actualizar_pantalla+0x1a8>
				print("OFF", 336, 94);
 8001ca2:	225e      	movs	r2, #94	; 0x5e
 8001ca4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001ca8:	483a      	ldr	r0, [pc, #232]	; (8001d94 <actualizar_pantalla+0x28c>)
 8001caa:	f7ff fdd3 	bl	8001854 <print>
}
 8001cae:	e06d      	b.n	8001d8c <actualizar_pantalla+0x284>
			}else if(getEstadoClima()==1){
 8001cb0:	f7fe ffb6 	bl	8000c20 <getEstadoClima>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d106      	bne.n	8001cc8 <actualizar_pantalla+0x1c0>
				print("CALD", 336, 94);
 8001cba:	225e      	movs	r2, #94	; 0x5e
 8001cbc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001cc0:	483a      	ldr	r0, [pc, #232]	; (8001dac <actualizar_pantalla+0x2a4>)
 8001cc2:	f7ff fdc7 	bl	8001854 <print>
}
 8001cc6:	e061      	b.n	8001d8c <actualizar_pantalla+0x284>
			}else if(getEstadoClima()==2){
 8001cc8:	f7fe ffaa 	bl	8000c20 <getEstadoClima>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d15c      	bne.n	8001d8c <actualizar_pantalla+0x284>
				print("AIRE", 336, 94);
 8001cd2:	225e      	movs	r2, #94	; 0x5e
 8001cd4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001cd8:	4835      	ldr	r0, [pc, #212]	; (8001db0 <actualizar_pantalla+0x2a8>)
 8001cda:	f7ff fdbb 	bl	8001854 <print>
}
 8001cde:	e055      	b.n	8001d8c <actualizar_pantalla+0x284>
	}else if(act==6){
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d152      	bne.n	8001d8c <actualizar_pantalla+0x284>
		fillRect(336, 138, 400,154);
 8001ce6:	239a      	movs	r3, #154	; 0x9a
 8001ce8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001cec:	218a      	movs	r1, #138	; 0x8a
 8001cee:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001cf2:	f7ff fd63 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	21ff      	movs	r1, #255	; 0xff
 8001cfa:	20ff      	movs	r0, #255	; 0xff
 8001cfc:	f7ff fcce 	bl	800169c <setColor>
		setBackColor(0, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff fceb 	bl	80016e0 <setBackColor>
		sprintf(bufff, "%i", (int) Temperature);
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <actualizar_pantalla+0x2ac>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	ee17 2a90 	vmov	r2, s15
 8001d1c:	4926      	ldr	r1, [pc, #152]	; (8001db8 <actualizar_pantalla+0x2b0>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fa74 	bl	800620c <siprintf>
		print(bufff, 336, 138);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	228a      	movs	r2, #138	; 0x8a
 8001d2a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd90 	bl	8001854 <print>
		setColor(0, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fcaf 	bl	800169c <setColor>
		fillRect(384, 182, 470,198);
 8001d3e:	23c6      	movs	r3, #198	; 0xc6
 8001d40:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001d44:	21b6      	movs	r1, #182	; 0xb6
 8001d46:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001d4a:	f7ff fd37 	bl	80017bc <fillRect>
		setColor(255, 255, 255);
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	21ff      	movs	r1, #255	; 0xff
 8001d52:	20ff      	movs	r0, #255	; 0xff
 8001d54:	f7ff fca2 	bl	800169c <setColor>
		setBackColor(0, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff fcbf 	bl	80016e0 <setBackColor>
		sprintf(bufff, "%i", (int) Humidity);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <actualizar_pantalla+0x2b4>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	ee17 2a90 	vmov	r2, s15
 8001d74:	4910      	ldr	r1, [pc, #64]	; (8001db8 <actualizar_pantalla+0x2b0>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 fa48 	bl	800620c <siprintf>
		print(bufff, 384, 182);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	22b6      	movs	r2, #182	; 0xb6
 8001d82:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd64 	bl	8001854 <print>
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	08006f78 	.word	0x08006f78
 8001d98:	08006f7c 	.word	0x08006f7c
 8001d9c:	08006f80 	.word	0x08006f80
 8001da0:	08006f88 	.word	0x08006f88
 8001da4:	08006f90 	.word	0x08006f90
 8001da8:	08006f98 	.word	0x08006f98
 8001dac:	08006f9c 	.word	0x08006f9c
 8001db0:	08006fa4 	.word	0x08006fa4
 8001db4:	200000c0 	.word	0x200000c0
 8001db8:	08006fac 	.word	0x08006fac
 8001dbc:	200000c4 	.word	0x200000c4

08001dc0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char readBuf[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4905      	ldr	r1, [pc, #20]	; (8001de0 <HAL_UART_RxCpltCallback+0x20>)
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_UART_RxCpltCallback+0x24>)
 8001dce:	f003 fb02 	bl	80053d6 <HAL_UART_Receive_IT>
 bluetooth(readBuf);
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <HAL_UART_RxCpltCallback+0x20>)
 8001dd4:	f7ff f926 	bl	8001024 <bluetooth>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200002bc 	.word	0x200002bc
 8001de4:	20000268 	.word	0x20000268

08001de8 <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d13b      	bne.n	8001e76 <debouncer+0x8e>
		if (button_count == 0) {
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <debouncer+0x98>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <debouncer+0x36>
			counter = HAL_GetTick();
 8001e06:	f000 fe7b 	bl	8002b00 <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <debouncer+0x9c>)
 8001e10:	601a      	str	r2, [r3, #0]
			button_count++;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <debouncer+0x98>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <debouncer+0x98>)
 8001e1c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8001e1e:	f000 fe6f 	bl	8002b00 <HAL_GetTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <debouncer+0x9c>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	2b13      	cmp	r3, #19
 8001e2c:	d923      	bls.n	8001e76 <debouncer+0x8e>
			counter = HAL_GetTick();
 8001e2e:	f000 fe67 	bl	8002b00 <HAL_GetTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <debouncer+0x9c>)
 8001e38:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68b8      	ldr	r0, [r7, #8]
 8001e40:	f001 fdaa 	bl	8003998 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d003      	beq.n	8001e52 <debouncer+0x6a>
				button_count = 1;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <debouncer+0x98>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e005      	b.n	8001e5e <debouncer+0x76>
			} else {
				button_count++;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <debouncer+0x98>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <debouncer+0x98>)
 8001e5c:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <debouncer+0x98>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d107      	bne.n	8001e76 <debouncer+0x8e>
				button_count = 0;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <debouncer+0x98>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
				return 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200000e0 	.word	0x200000e0
 8001e84:	200000e4 	.word	0x200000e4

08001e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d106      	bne.n	8001ea6 <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8001ea4:	e04a      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eac:	d106      	bne.n	8001ebc <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	e03f      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ecc:	220d      	movs	r2, #13
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	e034      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d106      	bne.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ee2:	220a      	movs	r2, #10
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	e029      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d106      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x74>
		button_int = 1;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	e01f      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d106      	bne.n	8001f12 <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f0c:	2209      	movs	r2, #9
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	e014      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f18:	d106      	bne.n	8001f28 <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f22:	220e      	movs	r2, #14
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	e009      	b.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f2e:	d105      	bne.n	8001f3c <HAL_GPIO_EXTI_Callback+0xb4>
		button_int = 1;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001f38:	220f      	movs	r2, #15
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	200000d8 	.word	0x200000d8
 8001f4c:	200000dc 	.word	0x200000dc

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f000 fd6e 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f8d2 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f000 fa6a 	bl	8002434 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f60:	f000 f98a 	bl	8002278 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001f64:	f000 fa3c 	bl	80023e0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001f68:	f000 f934 	bl	80021d4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001f6c:	f000 fa02 	bl	8002374 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001f70:	f000 f9b0 	bl	80022d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001f74:	485a      	ldr	r0, [pc, #360]	; (80020e0 <main+0x190>)
 8001f76:	f002 fe69 	bl	8004c4c <HAL_TIM_Base_Start>
	//int menu_actual = 0;
	//int retorno = 0;
	pantalla_principal();
 8001f7a:	f7ff fd17 	bl	80019ac <pantalla_principal>
	setEstadoPersianas(0);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7fe fbfc 	bl	800077c <setEstadoPersianas>
	setLuces(0);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fb07 	bl	8000598 <setLuces>
	setEstadoClima(0);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe fe04 	bl	8000b98 <setEstadoClima>
	setEstadoSeguridad(0);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7fe fd2f 	bl	80009f4 <setEstadoSeguridad>
	setEstadoRiego(2);
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7fe fc92 	bl	80008c0 <setEstadoRiego>
	lectura_dht11();
 8001f9c:	f7fe ff92 	bl	8000ec4 <lectura_dht11>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4950      	ldr	r1, [pc, #320]	; (80020e4 <main+0x194>)
 8001fa4:	4850      	ldr	r0, [pc, #320]	; (80020e8 <main+0x198>)
 8001fa6:	f003 fa16 	bl	80053d6 <HAL_UART_Receive_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (boton_presionado) {
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <main+0x19c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3b03      	subs	r3, #3
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	f200 808b 	bhi.w	80020cc <main+0x17c>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <main+0x6c>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001ff1 	.word	0x08001ff1
 8001fc0:	080020cd 	.word	0x080020cd
 8001fc4:	080020cd 	.word	0x080020cd
 8001fc8:	080020cd 	.word	0x080020cd
 8001fcc:	08002051 	.word	0x08002051
 8001fd0:	080020cd 	.word	0x080020cd
 8001fd4:	08002067 	.word	0x08002067
 8001fd8:	08002039 	.word	0x08002039
 8001fdc:	080020cd 	.word	0x080020cd
 8001fe0:	08002007 	.word	0x08002007
 8001fe4:	08002021 	.word	0x08002021
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	08002097 	.word	0x08002097
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	493f      	ldr	r1, [pc, #252]	; (80020f0 <main+0x1a0>)
 8001ff4:	483f      	ldr	r0, [pc, #252]	; (80020f4 <main+0x1a4>)
 8001ff6:	f7ff fef7 	bl	8001de8 <debouncer>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d056      	beq.n	80020ae <main+0x15e>
				cambiarEstadoLuces();
 8002000:	f7fe fb22 	bl	8000648 <cambiarEstadoLuces>
			}
			break;
 8002004:	e053      	b.n	80020ae <main+0x15e>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 8002006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800200a:	493b      	ldr	r1, [pc, #236]	; (80020f8 <main+0x1a8>)
 800200c:	4839      	ldr	r0, [pc, #228]	; (80020f4 <main+0x1a4>)
 800200e:	f7ff feeb 	bl	8001de8 <debouncer>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d04c      	beq.n	80020b2 <main+0x162>
				setEstadoPersianas(0);
 8002018:	2000      	movs	r0, #0
 800201a:	f7fe fbaf 	bl	800077c <setEstadoPersianas>
			}
			break;
 800201e:	e048      	b.n	80020b2 <main+0x162>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 8002020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002024:	4932      	ldr	r1, [pc, #200]	; (80020f0 <main+0x1a0>)
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <main+0x1a4>)
 8002028:	f7ff fede 	bl	8001de8 <debouncer>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d041      	beq.n	80020b6 <main+0x166>
				cambiarEstadoPersianas();
 8002032:	f7fe fc05 	bl	8000840 <cambiarEstadoPersianas>
			}
			break;
 8002036:	e03e      	b.n	80020b6 <main+0x166>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 8002038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203c:	492c      	ldr	r1, [pc, #176]	; (80020f0 <main+0x1a0>)
 800203e:	482d      	ldr	r0, [pc, #180]	; (80020f4 <main+0x1a4>)
 8002040:	f7ff fed2 	bl	8001de8 <debouncer>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d037      	beq.n	80020ba <main+0x16a>
				cambiarEstadoRiego();
 800204a:	f7fe fc8b 	bl	8000964 <cambiarEstadoRiego>
			}
			break;
 800204e:	e034      	b.n	80020ba <main+0x16a>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	4927      	ldr	r1, [pc, #156]	; (80020f0 <main+0x1a0>)
 8002054:	4827      	ldr	r0, [pc, #156]	; (80020f4 <main+0x1a4>)
 8002056:	f7ff fec7 	bl	8001de8 <debouncer>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02e      	beq.n	80020be <main+0x16e>
				cambiarEstadoSeguridad();
 8002060:	f7fe fd58 	bl	8000b14 <cambiarEstadoSeguridad>
			}
			break;
 8002064:	e02b      	b.n	80020be <main+0x16e>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 8002066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206a:	4921      	ldr	r1, [pc, #132]	; (80020f0 <main+0x1a0>)
 800206c:	4821      	ldr	r0, [pc, #132]	; (80020f4 <main+0x1a4>)
 800206e:	f7ff febb 	bl	8001de8 <debouncer>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d024      	beq.n	80020c2 <main+0x172>
				intruso_detectado();
 8002078:	f7fe fd5c 	bl	8000b34 <intruso_detectado>
			}
			break;
 800207c:	e021      	b.n	80020c2 <main+0x172>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 800207e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002082:	491e      	ldr	r1, [pc, #120]	; (80020fc <main+0x1ac>)
 8002084:	481b      	ldr	r0, [pc, #108]	; (80020f4 <main+0x1a4>)
 8002086:	f7ff feaf 	bl	8001de8 <debouncer>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01a      	beq.n	80020c6 <main+0x176>
				cambiarControlClima();
 8002090:	f7fe fe14 	bl	8000cbc <cambiarControlClima>
			}
			break;
 8002094:	e017      	b.n	80020c6 <main+0x176>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 8002096:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800209a:	4918      	ldr	r1, [pc, #96]	; (80020fc <main+0x1ac>)
 800209c:	4815      	ldr	r0, [pc, #84]	; (80020f4 <main+0x1a4>)
 800209e:	f7ff fea3 	bl	8001de8 <debouncer>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <main+0x17a>
				cambiarEstadoClima();
 80020a8:	f7fe fdc6 	bl	8000c38 <cambiarEstadoClima>
			}
			break;
 80020ac:	e00d      	b.n	80020ca <main+0x17a>
			break;
 80020ae:	bf00      	nop
 80020b0:	e00c      	b.n	80020cc <main+0x17c>
			break;
 80020b2:	bf00      	nop
 80020b4:	e00a      	b.n	80020cc <main+0x17c>
			break;
 80020b6:	bf00      	nop
 80020b8:	e008      	b.n	80020cc <main+0x17c>
			break;
 80020ba:	bf00      	nop
 80020bc:	e006      	b.n	80020cc <main+0x17c>
			break;
 80020be:	bf00      	nop
 80020c0:	e004      	b.n	80020cc <main+0x17c>
			break;
 80020c2:	bf00      	nop
 80020c4:	e002      	b.n	80020cc <main+0x17c>
			break;
 80020c6:	bf00      	nop
 80020c8:	e000      	b.n	80020cc <main+0x17c>
			break;
 80020ca:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 80020cc:	f7fe fb50 	bl	8000770 <luces>
		riego();
 80020d0:	f7fe fc8a 	bl	80009e8 <riego>
		seguridad();
 80020d4:	f7fe fd58 	bl	8000b88 <seguridad>
		clima();
 80020d8:	f7fe ff4e 	bl	8000f78 <clima>
		switch (boton_presionado) {
 80020dc:	e765      	b.n	8001faa <main+0x5a>
 80020de:	bf00      	nop
 80020e0:	200001d8 	.word	0x200001d8
 80020e4:	200002bc 	.word	0x200002bc
 80020e8:	20000268 	.word	0x20000268
 80020ec:	200000dc 	.word	0x200000dc
 80020f0:	40020000 	.word	0x40020000
 80020f4:	200000d8 	.word	0x200000d8
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40020400 	.word	0x40020400

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b094      	sub	sp, #80	; 0x50
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f874 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <SystemClock_Config+0xcc>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <SystemClock_Config+0xcc>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <SystemClock_Config+0xcc>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <SystemClock_Config+0xd0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <SystemClock_Config+0xd0>)
 800214a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <SystemClock_Config+0xd0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002160:	2301      	movs	r3, #1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002164:	2310      	movs	r3, #16
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002168:	2302      	movs	r3, #2
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800216c:	2300      	movs	r3, #0
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002170:	2308      	movs	r3, #8
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002174:	2332      	movs	r3, #50	; 0x32
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002178:	2302      	movs	r3, #2
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800217c:	2307      	movs	r3, #7
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002180:	f107 0320 	add.w	r3, r7, #32
 8002184:	4618      	mov	r0, r3
 8002186:	f002 f89d 	bl	80042c4 <HAL_RCC_OscConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002190:	f000 fa32 	bl	80025f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002194:	230f      	movs	r3, #15
 8002196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fafe 	bl	80047b4 <HAL_RCC_ClockConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021be:	f000 fa1b 	bl	80025f8 <Error_Handler>
  }
}
 80021c2:	bf00      	nop
 80021c4:	3750      	adds	r7, #80	; 0x50
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40007000 	.word	0x40007000

080021d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <MX_ADC1_Init+0x98>)
 80021e8:	4a21      	ldr	r2, [pc, #132]	; (8002270 <MX_ADC1_Init+0x9c>)
 80021ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_ADC1_Init+0x98>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <MX_ADC1_Init+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <MX_ADC1_Init+0x98>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <MX_ADC1_Init+0x98>)
 8002200:	2200      	movs	r2, #0
 8002202:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <MX_ADC1_Init+0x98>)
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <MX_ADC1_Init+0x98>)
 800220e:	2200      	movs	r2, #0
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_ADC1_Init+0x98>)
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <MX_ADC1_Init+0xa0>)
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_ADC1_Init+0x98>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <MX_ADC1_Init+0x98>)
 8002220:	2201      	movs	r2, #1
 8002222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_ADC1_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_ADC1_Init+0x98>)
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <MX_ADC1_Init+0x98>)
 8002234:	f000 fc70 	bl	8002b18 <HAL_ADC_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800223e:	f000 f9db 	bl	80025f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002242:	2301      	movs	r3, #1
 8002244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <MX_ADC1_Init+0x98>)
 8002254:	f000 fe42 	bl	8002edc <HAL_ADC_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800225e:	f000 f9cb 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000018c 	.word	0x2000018c
 8002270:	40012000 	.word	0x40012000
 8002274:	0f000001 	.word	0x0f000001

08002278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_I2C1_Init+0x50>)
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <MX_I2C1_Init+0x54>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_I2C1_Init+0x50>)
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <MX_I2C1_Init+0x58>)
 8002286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_I2C1_Init+0x50>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_I2C1_Init+0x50>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_I2C1_Init+0x50>)
 8002296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800229a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_I2C1_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_I2C1_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_I2C1_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_I2C1_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_I2C1_Init+0x50>)
 80022b6:	f001 fbb9 	bl	8003a2c <HAL_I2C_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022c0:	f000 f99a 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200000fc 	.word	0x200000fc
 80022cc:	40005400 	.word	0x40005400
 80022d0:	000186a0 	.word	0x000186a0

080022d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	463b      	mov	r3, r7
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_TIM1_Init+0x98>)
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <MX_TIM1_Init+0x9c>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_TIM1_Init+0x98>)
 80022f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80022fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <MX_TIM1_Init+0x98>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_TIM1_Init+0x98>)
 8002306:	22fe      	movs	r2, #254	; 0xfe
 8002308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_TIM1_Init+0x98>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_TIM1_Init+0x98>)
 8002312:	2200      	movs	r2, #0
 8002314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM1_Init+0x98>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800231c:	4813      	ldr	r0, [pc, #76]	; (800236c <MX_TIM1_Init+0x98>)
 800231e:	f002 fc45 	bl	8004bac <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002328:	f000 f966 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <MX_TIM1_Init+0x98>)
 800233a:	f002 fcef 	bl	8004d1c <HAL_TIM_ConfigClockSource>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002344:	f000 f958 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_TIM1_Init+0x98>)
 8002356:	f002 fee3 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002360:	f000 f94a 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000220 	.word	0x20000220
 8002370:	40010000 	.word	0x40010000

08002374 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	463b      	mov	r3, r7
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_TIM6_Init+0x68>)
 8002386:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_TIM6_Init+0x64>)
 800238a:	2231      	movs	r2, #49	; 0x31
 800238c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002396:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800239a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_TIM6_Init+0x64>)
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023a2:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_TIM6_Init+0x64>)
 80023a4:	f002 fc02 	bl	8004bac <HAL_TIM_Base_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80023ae:	f000 f923 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <MX_TIM6_Init+0x64>)
 80023c0:	f002 feae 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80023ca:	f000 f915 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200001d8 	.word	0x200001d8
 80023dc:	40001000 	.word	0x40001000

080023e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART6_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_USART6_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_USART6_UART_Init+0x4c>)
 80023ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART6_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART6_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART6_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART6_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART6_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART6_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART6_UART_Init+0x4c>)
 8002418:	f002 fefe 	bl	8005218 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f000 f8e9 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000268 	.word	0x20000268
 8002430:	40011400 	.word	0x40011400

08002434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a64      	ldr	r2, [pc, #400]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a41      	ldr	r2, [pc, #260]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <MX_GPIO_Init+0x1b0>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80024f8:	483b      	ldr	r0, [pc, #236]	; (80025e8 <MX_GPIO_Init+0x1b4>)
 80024fa:	f001 fa65 	bl	80039c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8002504:	4839      	ldr	r0, [pc, #228]	; (80025ec <MX_GPIO_Init+0x1b8>)
 8002506:	f001 fa5f 	bl	80039c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 800250a:	f242 6389 	movw	r3, #9865	; 0x2689
 800250e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002510:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4831      	ldr	r0, [pc, #196]	; (80025e8 <MX_GPIO_Init+0x1b4>)
 8002522:	f001 f89d 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002526:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800252a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	482a      	ldr	r0, [pc, #168]	; (80025e8 <MX_GPIO_Init+0x1b4>)
 8002540:	f001 f88e 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002544:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800254a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800254e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4825      	ldr	r0, [pc, #148]	; (80025f0 <MX_GPIO_Init+0x1bc>)
 800255c:	f001 f880 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002560:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002566:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800256a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	481f      	ldr	r0, [pc, #124]	; (80025f4 <MX_GPIO_Init+0x1c0>)
 8002578:	f001 f872 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800257c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002580:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <MX_GPIO_Init+0x1b8>)
 8002596:	f001 f863 	bl	8003660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2006      	movs	r0, #6
 80025a0:	f000 ff95 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025a4:	2006      	movs	r0, #6
 80025a6:	f000 ffae 	bl	8003506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2009      	movs	r0, #9
 80025b0:	f000 ff8d 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025b4:	2009      	movs	r0, #9
 80025b6:	f000 ffa6 	bl	8003506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2017      	movs	r0, #23
 80025c0:	f000 ff85 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025c4:	2017      	movs	r0, #23
 80025c6:	f000 ff9e 	bl	8003506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2028      	movs	r0, #40	; 0x28
 80025d0:	f000 ff7d 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025d4:	2028      	movs	r0, #40	; 0x28
 80025d6:	f000 ff96 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 80025da:	bf00      	nop
 80025dc:	3730      	adds	r7, #48	; 0x30
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40020400 	.word	0x40020400

080025f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002600:	e7fe      	b.n	8002600 <Error_Handler+0x8>
	...

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_MspInit+0x4c>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_MspInit+0x4c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002642:	2007      	movs	r0, #7
 8002644:	f000 ff38 	bl	80034b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800

08002654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_ADC_MspInit+0x7c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d127      	bne.n	80026c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_ADC_MspInit+0x80>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026ae:	2302      	movs	r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b2:	2303      	movs	r3, #3
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	; (80026d8 <HAL_ADC_MspInit+0x84>)
 80026c2:	f000 ffcd 	bl	8003660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40012000 	.word	0x40012000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_I2C_MspInit+0x84>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12b      	bne.n	8002756 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800271a:	23c0      	movs	r3, #192	; 0xc0
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271e:	2312      	movs	r3, #18
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800272a:	2304      	movs	r3, #4
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <HAL_I2C_MspInit+0x8c>)
 8002736:	f000 ff93 	bl	8003660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_I2C_MspInit+0x88>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	; 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40005400 	.word	0x40005400
 8002764:	40023800 	.word	0x40023800
 8002768:	40020400 	.word	0x40020400

0800276c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_TIM_Base_MspInit+0x64>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_TIM_Base_MspInit+0x6c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 80027b0:	f043 0310 	orr.w	r3, r3, #16
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x68>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40001000 	.word	0x40001000

080027dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_UART_MspInit+0x94>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d133      	bne.n	8002866 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_UART_MspInit+0x98>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_UART_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002836:	23c0      	movs	r3, #192	; 0xc0
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002846:	2308      	movs	r3, #8
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <HAL_UART_MspInit+0x9c>)
 8002852:	f000 ff05 	bl	8003660 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2047      	movs	r0, #71	; 0x47
 800285c:	f000 fe37 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002860:	2047      	movs	r0, #71	; 0x47
 8002862:	f000 fe50 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40011400 	.word	0x40011400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <NMI_Handler+0x4>

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <MemManage_Handler+0x4>

0800288e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <UsageFault_Handler+0x4>

0800289a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c8:	f000 f906 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f001 f891 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}

080028de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80028e2:	2008      	movs	r0, #8
 80028e4:	f001 f88a 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80028f0:	2080      	movs	r0, #128	; 0x80
 80028f2:	f001 f883 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80028f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028fa:	f001 f87f 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}

08002902 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002906:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800290a:	f001 f877 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800290e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002912:	f001 f873 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002916:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800291a:	f001 f86f 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800291e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002922:	f001 f86b 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002926:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800292a:	f001 f867 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800292e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002932:	f001 f863 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <USART6_IRQHandler+0x10>)
 8002942:	f002 fd79 	bl	8005438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000268 	.word	0x20000268

08002950 <_sbrk>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
 8002980:	f003 fc12 	bl	80061a8 <__errno>
 8002984:	4603      	mov	r3, r0
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20020000 	.word	0x20020000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	200000e8 	.word	0x200000e8
 80029b8:	200002d8 	.word	0x200002d8

080029bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack     /* set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a0a:	f7ff ffd7 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f003 fbd1 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a12:	f7ff fa9d 	bl	8001f50 <main>
  bx  lr    
 8002a16:	4770      	bx	lr
;  ldr   sp, =_estack     /* set stack pointer */
 8002a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a24:	0800700c 	.word	0x0800700c
  ldr r2, =_sbss
 8002a28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a2c:	200002d4 	.word	0x200002d4

08002a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC_IRQHandler>
	...

08002a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_Init+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_Init+0x40>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_Init+0x40>)
 8002a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_Init+0x40>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f000 fd2b 	bl	80034b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f000 f808 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f7ff fdcc 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x54>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd43 	bl	8003522 <HAL_SYSTICK_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00e      	b.n	8002ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d80a      	bhi.n	8002ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f000 fd0b 	bl	80034ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_InitTick+0x5c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000010 	.word	0x20000010
 8002ad0:	20000018 	.word	0x20000018
 8002ad4:	20000014 	.word	0x20000014

08002ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_IncTick+0x20>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x24>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_IncTick+0x24>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000018 	.word	0x20000018
 8002afc:	200002c0 	.word	0x200002c0

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetTick+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200002c0 	.word	0x200002c0

08002b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e033      	b.n	8002b96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fd8c 	bl	8002654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d118      	bne.n	8002b88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b5e:	f023 0302 	bic.w	r3, r3, #2
 8002b62:	f043 0202 	orr.w	r2, r3, #2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fad8 	bl	8003120 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
 8002b86:	e001      	b.n	8002b8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_Start+0x1a>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0b2      	b.n	8002d20 <HAL_ADC_Start+0x180>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d018      	beq.n	8002c02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002be0:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_ADC_Start+0x18c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_ADC_Start+0x190>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0c9a      	lsrs	r2, r3, #18
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d17a      	bne.n	8002d06 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	d106      	bne.n	8002c5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f023 0206 	bic.w	r2, r3, #6
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c5c:	e002      	b.n	8002c64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_ADC_Start+0x194>)
 8002c6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d12a      	bne.n	8002cdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_ADC_Start+0x198>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d015      	beq.n	8002cbc <HAL_ADC_Start+0x11c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_ADC_Start+0x19c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d105      	bne.n	8002ca6 <HAL_ADC_Start+0x106>
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_ADC_Start+0x194>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <HAL_ADC_Start+0x1a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d136      	bne.n	8002d1e <HAL_ADC_Start+0x17e>
 8002cb0:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_ADC_Start+0x194>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d130      	bne.n	8002d1e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d129      	bne.n	8002d1e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	e020      	b.n	8002d1e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_ADC_Start+0x198>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11b      	bne.n	8002d1e <HAL_ADC_Start+0x17e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d114      	bne.n	8002d1e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e00b      	b.n	8002d1e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	20000010 	.word	0x20000010
 8002d30:	431bde83 	.word	0x431bde83
 8002d34:	40012300 	.word	0x40012300
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	40012100 	.word	0x40012100
 8002d40:	40012200 	.word	0x40012200

08002d44 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Stop+0x16>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e021      	b.n	8002d9e <HAL_ADC_Stop+0x5a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d113      	bne.n	8002df0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd6:	d10b      	bne.n	8002df0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e063      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002df0:	f7ff fe86 	bl	8002b00 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002df6:	e021      	b.n	8002e3c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d01d      	beq.n	8002e3c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_ADC_PollForConversion+0x6c>
 8002e06:	f7ff fe7b 	bl	8002b00 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d212      	bcs.n	8002e3c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d00b      	beq.n	8002e3c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03d      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d1d6      	bne.n	8002df8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 0212 	mvn.w	r2, #18
 8002e52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d123      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d111      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1c>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e105      	b.n	8003104 <HAL_ADC_ConfigChannel+0x228>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d925      	bls.n	8002f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43da      	mvns	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4403      	add	r3, r0
 8002f46:	3b1e      	subs	r3, #30
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e022      	b.n	8002f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4403      	add	r3, r0
 8002f90:	409a      	lsls	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d824      	bhi.n	8002fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b05      	subs	r3, #5
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fea:	e04c      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d824      	bhi.n	800303e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	221f      	movs	r2, #31
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43da      	mvns	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	400a      	ands	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b23      	subs	r3, #35	; 0x23
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
 800303c:	e023      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	; 0x41
 8003050:	221f      	movs	r2, #31
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	; 0x41
 800307a:	fa00 f203 	lsl.w	r2, r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_ADC_ConfigChannel+0x234>)
 8003088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_ADC_ConfigChannel+0x238>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1cc>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b12      	cmp	r3, #18
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_ADC_ConfigChannel+0x238>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d123      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d003      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x1e6>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b11      	cmp	r3, #17
 80030c0:	d11b      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d111      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_ADC_ConfigChannel+0x23c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a10      	ldr	r2, [pc, #64]	; (800311c <HAL_ADC_ConfigChannel+0x240>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9a      	lsrs	r2, r3, #18
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40012300 	.word	0x40012300
 8003114:	40012000 	.word	0x40012000
 8003118:	20000010 	.word	0x20000010
 800311c:	431bde83 	.word	0x431bde83

08003120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003128:	4b79      	ldr	r3, [pc, #484]	; (8003310 <ADC_Init+0x1f0>)
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	4a58      	ldr	r2, [pc, #352]	; (8003314 <ADC_Init+0x1f4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e00f      	b.n	800321e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800320c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800321c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0202 	bic.w	r2, r2, #2
 800322c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e1b      	ldrb	r3, [r3, #24]
 8003238:	005a      	lsls	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800326a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	035a      	lsls	r2, r3, #13
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	e007      	b.n	8003294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003292:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	051a      	lsls	r2, r3, #20
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d6:	025a      	lsls	r2, r3, #9
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	029a      	lsls	r2, r3, #10
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40012300 	.word	0x40012300
 8003314:	0f000001 	.word	0x0f000001

08003318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4907      	ldr	r1, [pc, #28]	; (80033b4 <__NVIC_EnableIRQ+0x38>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
         );
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003484:	d301      	bcc.n	800348a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003486:	2301      	movs	r3, #1
 8003488:	e00f      	b.n	80034aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <SysTick_Config+0x40>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003492:	210f      	movs	r1, #15
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	f7ff ff8e 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <SysTick_Config+0x40>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SysTick_Config+0x40>)
 80034a4:	2207      	movs	r2, #7
 80034a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000e010 	.word	0xe000e010

080034b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff29 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff3e 	bl	8003360 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff8e 	bl	800340c <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5d 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff31 	bl	800337c <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa2 	bl	8003474 <SysTick_Config>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7ff fada 	bl	8002b00 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d008      	beq.n	800356c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e052      	b.n	8003612 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0216 	bic.w	r2, r2, #22
 800357a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <HAL_DMA_Abort+0x62>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0208 	bic.w	r2, r2, #8
 80035aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035bc:	e013      	b.n	80035e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035be:	f7ff fa9f 	bl	8002b00 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d90c      	bls.n	80035e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e015      	b.n	8003612 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e4      	bne.n	80035be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	223f      	movs	r2, #63	; 0x3f
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d004      	beq.n	8003638 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e00c      	b.n	8003652 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e16b      	b.n	8003954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 815a 	bne.w	800394e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b03      	cmp	r3, #3
 800371e:	d017      	beq.n	8003750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d123      	bne.n	80037a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b4 	beq.w	800394e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b60      	ldr	r3, [pc, #384]	; (800396c <HAL_GPIO_Init+0x30c>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	4a5f      	ldr	r2, [pc, #380]	; (800396c <HAL_GPIO_Init+0x30c>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	; 0x44
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_GPIO_Init+0x30c>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003802:	4a5b      	ldr	r2, [pc, #364]	; (8003970 <HAL_GPIO_Init+0x310>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_GPIO_Init+0x314>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02b      	beq.n	8003886 <HAL_GPIO_Init+0x226>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_GPIO_Init+0x318>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d025      	beq.n	8003882 <HAL_GPIO_Init+0x222>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a50      	ldr	r2, [pc, #320]	; (800397c <HAL_GPIO_Init+0x31c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01f      	beq.n	800387e <HAL_GPIO_Init+0x21e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4f      	ldr	r2, [pc, #316]	; (8003980 <HAL_GPIO_Init+0x320>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d019      	beq.n	800387a <HAL_GPIO_Init+0x21a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4e      	ldr	r2, [pc, #312]	; (8003984 <HAL_GPIO_Init+0x324>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_GPIO_Init+0x216>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4d      	ldr	r2, [pc, #308]	; (8003988 <HAL_GPIO_Init+0x328>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00d      	beq.n	8003872 <HAL_GPIO_Init+0x212>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4c      	ldr	r2, [pc, #304]	; (800398c <HAL_GPIO_Init+0x32c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <HAL_GPIO_Init+0x20e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4b      	ldr	r2, [pc, #300]	; (8003990 <HAL_GPIO_Init+0x330>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <HAL_GPIO_Init+0x20a>
 8003866:	2307      	movs	r3, #7
 8003868:	e00e      	b.n	8003888 <HAL_GPIO_Init+0x228>
 800386a:	2308      	movs	r3, #8
 800386c:	e00c      	b.n	8003888 <HAL_GPIO_Init+0x228>
 800386e:	2306      	movs	r3, #6
 8003870:	e00a      	b.n	8003888 <HAL_GPIO_Init+0x228>
 8003872:	2305      	movs	r3, #5
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x228>
 8003876:	2304      	movs	r3, #4
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x228>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x228>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x228>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x228>
 8003886:	2300      	movs	r3, #0
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003898:	4935      	ldr	r1, [pc, #212]	; (8003970 <HAL_GPIO_Init+0x310>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_GPIO_Init+0x334>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ca:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_GPIO_Init+0x334>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_GPIO_Init+0x334>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f4:	4a27      	ldr	r2, [pc, #156]	; (8003994 <HAL_GPIO_Init+0x334>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x334>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x334>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_GPIO_Init+0x334>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_GPIO_Init+0x334>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	f67f ae90 	bls.w	800367c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40021400 	.word	0x40021400
 800398c:	40021800 	.word	0x40021800
 8003990:	40021c00 	.word	0x40021c00
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e001      	b.n	80039ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e4:	e003      	b.n	80039ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fa34 	bl	8001e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40013c00 	.word	0x40013c00

08003a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e12b      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fe42 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a90:	f001 f864 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a81      	ldr	r2, [pc, #516]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d807      	bhi.n	8003ab0 <HAL_I2C_Init+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_I2C_Init+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e006      	b.n	8003abe <HAL_I2C_Init+0x92>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_I2C_Init+0x27c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bf94      	ite	ls
 8003ab8:	2301      	movls	r3, #1
 8003aba:	2300      	movhi	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0e7      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a78      	ldr	r2, [pc, #480]	; (8003cac <HAL_I2C_Init+0x280>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0c9b      	lsrs	r3, r3, #18
 8003ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a6a      	ldr	r2, [pc, #424]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d802      	bhi.n	8003b00 <HAL_I2C_Init+0xd4>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3301      	adds	r3, #1
 8003afe:	e009      	b.n	8003b14 <HAL_I2C_Init+0xe8>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <HAL_I2C_Init+0x284>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	3301      	adds	r3, #1
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	495c      	ldr	r1, [pc, #368]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d819      	bhi.n	8003b68 <HAL_I2C_Init+0x13c>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e59      	subs	r1, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b48:	400b      	ands	r3, r1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_I2C_Init+0x138>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e59      	subs	r1, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	e051      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b64:	2304      	movs	r3, #4
 8003b66:	e04f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HAL_I2C_Init+0x168>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e012      	b.n	8003bba <HAL_I2C_Init+0x18e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x196>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <HAL_I2C_Init+0x1bc>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e58      	subs	r0, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	440b      	add	r3, r1
 8003bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	e00f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6809      	ldr	r1, [r1, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6911      	ldr	r1, [r2, #16]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	000186a0 	.word	0x000186a0
 8003ca4:	001e847f 	.word	0x001e847f
 8003ca8:	003d08ff 	.word	0x003d08ff
 8003cac:	431bde83 	.word	0x431bde83
 8003cb0:	10624dd3 	.word	0x10624dd3

08003cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7fe ff1a 	bl	8002b00 <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	f040 80e0 	bne.w	8003e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2319      	movs	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4970      	ldr	r1, [pc, #448]	; (8003ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f964 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0d3      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2C_Master_Transmit+0x50>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0cc      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d007      	beq.n	8003d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2210      	movs	r2, #16
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	893a      	ldrh	r2, [r7, #8]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a50      	ldr	r2, [pc, #320]	; (8003eac <HAL_I2C_Master_Transmit+0x1f8>)
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d6c:	8979      	ldrh	r1, [r7, #10]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f89c 	bl	8003eb0 <I2C_MasterRequestWrite>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e08d      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d98:	e066      	b.n	8003e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9de 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11b      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x188>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f9ce 	bl	80041e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01a      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d194      	bne.n	8003d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00100002 	.word	0x00100002
 8003eac:	ffff0000 	.word	0xffff0000

08003eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d006      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00b      	b.n	8003f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d107      	bne.n	8003f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f84f 	bl	8003fb4 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d103      	bne.n	8003f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e035      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f40:	d108      	bne.n	8003f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	e01b      	b.n	8003f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f54:	897b      	ldrh	r3, [r7, #10]
 8003f56:	11db      	asrs	r3, r3, #7
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f063 030f 	orn	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <I2C_MasterRequestWrite+0xfc>)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f875 	bl	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e010      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <I2C_MasterRequestWrite+0x100>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f865 	bl	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010008 	.word	0x00010008
 8003fb0:	00010002 	.word	0x00010002

08003fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc4:	e025      	b.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d021      	beq.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe fd97 	bl	8002b00 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e023      	b.n	800405a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10d      	bne.n	8004038 <I2C_WaitOnFlagUntilTimeout+0x84>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	e00c      	b.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d0b6      	beq.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004070:	e051      	b.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d123      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e046      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d021      	beq.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7fe fd15 	bl	8002b00 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d116      	bne.n	8004116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e020      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10c      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	43da      	mvns	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e00b      	b.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d18d      	bne.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f878 	bl	8004264 <I2C_IsAcknowledgeFailed>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02d      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d021      	beq.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fe fcbb 	bl	8002b00 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d1ca      	bne.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ee:	e02d      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f837 	bl	8004264 <I2C_IsAcknowledgeFailed>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e02d      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d021      	beq.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004208:	f7fe fc7a 	bl	8002b00 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d116      	bne.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d1ca      	bne.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d11b      	bne.n	80042b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004284:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e264      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	4ba3      	ldr	r3, [pc, #652]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4ba0      	ldr	r3, [pc, #640]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d157      	bne.n	80043cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e23f      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x74>
 800432a:	4b91      	ldr	r3, [pc, #580]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a90      	ldr	r2, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a8a      	ldr	r2, [pc, #552]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a87      	ldr	r2, [pc, #540]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 800435c:	4b84      	ldr	r3, [pc, #528]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a80      	ldr	r2, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fbc0 	bl	8002b00 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fe fbbc 	bl	8002b00 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e204      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xc0>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe fbac 	bl	8002b00 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fe fba8 	bl	8002b00 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1f0      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0xe8>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1c4      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b56      	ldr	r3, [pc, #344]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4952      	ldr	r1, [pc, #328]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <HAL_RCC_OscConfig+0x2b0>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe fb61 	bl	8002b00 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004442:	f7fe fb5d 	bl	8002b00 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a5      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b46      	ldr	r3, [pc, #280]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4940      	ldr	r1, [pc, #256]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_OscConfig+0x2b0>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe fb40 	bl	8002b00 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fe fb3c 	bl	8002b00 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e184      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d030      	beq.n	8004510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCC_OscConfig+0x2b4>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fe fb20 	bl	8002b00 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe fb1c 	bl	8002b00 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e164      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x200>
 80044e2:	e015      	b.n	8004510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x2b4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fb09 	bl	8002b00 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fe fb05 	bl	8002b00 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e14d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a0 	beq.w	800465e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d121      	bne.n	800459e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <HAL_RCC_OscConfig+0x2b8>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004566:	f7fe facb 	bl	8002b00 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	e011      	b.n	8004592 <HAL_RCC_OscConfig+0x2ce>
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	42470000 	.word	0x42470000
 8004578:	42470e80 	.word	0x42470e80
 800457c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fe fabe 	bl	8002b00 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e106      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <HAL_RCC_OscConfig+0x4e4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
 80045a6:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	e01c      	b.n	80045ee <HAL_RCC_OscConfig+0x32a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x312>
 80045bc:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a7a      	ldr	r2, [pc, #488]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	4b78      	ldr	r3, [pc, #480]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a77      	ldr	r2, [pc, #476]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x32a>
 80045d6:	4b75      	ldr	r3, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a74      	ldr	r2, [pc, #464]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	4b72      	ldr	r3, [pc, #456]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a71      	ldr	r2, [pc, #452]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d015      	beq.n	8004622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fe fa83 	bl	8002b00 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fe fa7f 	bl	8002b00 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0c5      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCC_OscConfig+0x33a>
 8004620:	e014      	b.n	800464c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe fa6d 	bl	8002b00 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fe fa69 	bl	8002b00 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	; 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0af      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	4b5a      	ldr	r3, [pc, #360]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ee      	bne.n	800462a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a55      	ldr	r2, [pc, #340]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 809b 	beq.w	800479e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d05c      	beq.n	800472e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d141      	bne.n	8004700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b4c      	ldr	r3, [pc, #304]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fa3d 	bl	8002b00 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fa39 	bl	8002b00 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e081      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	019b      	lsls	r3, r3, #6
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	4937      	ldr	r1, [pc, #220]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe fa12 	bl	8002b00 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe fa0e 	bl	8002b00 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e056      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x41c>
 80046fe:	e04e      	b.n	800479e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fe f9fb 	bl	8002b00 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7fe f9f7 	bl	8002b00 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e03f      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x44a>
 800472c:	e037      	b.n	800479e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e032      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_RCC_OscConfig+0x4e8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d028      	beq.n	800479a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d121      	bne.n	800479a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d11a      	bne.n	800479a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004770:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004772:	4293      	cmp	r3, r2
 8004774:	d111      	bne.n	800479a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	3b01      	subs	r3, #1
 8004784:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d107      	bne.n	800479a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40007000 	.word	0x40007000
 80047ac:	40023800 	.word	0x40023800
 80047b0:	42470060 	.word	0x42470060

080047b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0cc      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b68      	ldr	r3, [pc, #416]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90c      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800482a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d044      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d003      	beq.n	8004872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e067      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4934      	ldr	r1, [pc, #208]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fe f92c 	bl	8002b00 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fe f928 	bl	8002b00 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20c      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe f88c 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00
 8004970:	40023800 	.word	0x40023800
 8004974:	08006fb0 	.word	0x08006fb0
 8004978:	20000010 	.word	0x20000010
 800497c:	20000014 	.word	0x20000014

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	2300      	movs	r3, #0
 8004992:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004998:	4b67      	ldr	r3, [pc, #412]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x40>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	f200 80bd 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x3a>
 80049b2:	e0b7      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049b6:	60bb      	str	r3, [r7, #8]
       break;
 80049b8:	e0b7      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049bc:	60bb      	str	r3, [r7, #8]
      break;
 80049be:	e0b4      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b5d      	ldr	r3, [pc, #372]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ca:	4b5b      	ldr	r3, [pc, #364]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04d      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b58      	ldr	r3, [pc, #352]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	461a      	mov	r2, r3
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	ea02 0800 	and.w	r8, r2, r0
 80049ee:	ea03 0901 	and.w	r9, r3, r1
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	014b      	lsls	r3, r1, #5
 8004a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a04:	0142      	lsls	r2, r0, #5
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	ebb0 0008 	subs.w	r0, r0, r8
 8004a0e:	eb61 0109 	sbc.w	r1, r1, r9
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	018b      	lsls	r3, r1, #6
 8004a1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a20:	0182      	lsls	r2, r0, #6
 8004a22:	1a12      	subs	r2, r2, r0
 8004a24:	eb63 0301 	sbc.w	r3, r3, r1
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	00d9      	lsls	r1, r3, #3
 8004a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a36:	00d0      	lsls	r0, r2, #3
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	eb12 0208 	adds.w	r2, r2, r8
 8004a40:	eb43 0309 	adc.w	r3, r3, r9
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	0259      	lsls	r1, r3, #9
 8004a4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a52:	0250      	lsls	r0, r2, #9
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	f7fb fc1c 	bl	80002a0 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e04a      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	ea02 0400 	and.w	r4, r2, r0
 8004a8a:	ea03 0501 	and.w	r5, r3, r1
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	014b      	lsls	r3, r1, #5
 8004a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aa0:	0142      	lsls	r2, r0, #5
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	1b00      	subs	r0, r0, r4
 8004aa8:	eb61 0105 	sbc.w	r1, r1, r5
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	018b      	lsls	r3, r1, #6
 8004ab6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aba:	0182      	lsls	r2, r0, #6
 8004abc:	1a12      	subs	r2, r2, r0
 8004abe:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	00d9      	lsls	r1, r3, #3
 8004acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad0:	00d0      	lsls	r0, r2, #3
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	1912      	adds	r2, r2, r4
 8004ad8:	eb45 0303 	adc.w	r3, r5, r3
 8004adc:	f04f 0000 	mov.w	r0, #0
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	0299      	lsls	r1, r3, #10
 8004ae6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aea:	0290      	lsls	r0, r2, #10
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	f7fb fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	60bb      	str	r3, [r7, #8]
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b26:	60bb      	str	r3, [r7, #8]
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000010 	.word	0x20000010

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	08006fc0 	.word	0x08006fc0

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b88:	f7ff ffdc 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0b5b      	lsrs	r3, r3, #13
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	08006fc0 	.word	0x08006fc0

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd fdca 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 f95e 	bl	8004eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e046      	b.n	8004cf2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a23      	ldr	r2, [pc, #140]	; (8004d00 <HAL_TIM_Base_Start+0xb4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d01d      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_TIM_Base_Start+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_TIM_Base_Start+0xbc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_Base_Start+0xc0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_TIM_Base_Start+0xc4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_Base_Start+0x70>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_TIM_Base_Start+0xcc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d111      	bne.n	8004ce0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d010      	beq.n	8004cf0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cde:	e007      	b.n	8004cf0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800

08004d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_ConfigClockSource+0x1c>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e0b4      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x186>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	d03e      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d76:	f200 8087 	bhi.w	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	f000 8086 	beq.w	8004e8e <HAL_TIM_ConfigClockSource+0x172>
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d87f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b70      	cmp	r3, #112	; 0x70
 8004d8a:	d01a      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d87b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b60      	cmp	r3, #96	; 0x60
 8004d92:	d050      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x11a>
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d877      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b50      	cmp	r3, #80	; 0x50
 8004d9a:	d03c      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xfa>
 8004d9c:	2b50      	cmp	r3, #80	; 0x50
 8004d9e:	d873      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d058      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x13a>
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d86f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b30      	cmp	r3, #48	; 0x30
 8004daa:	d064      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d86b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d060      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d867      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d05c      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d05a      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	e062      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6899      	ldr	r1, [r3, #8]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f000 f985 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
      break;
 8004dee:	e04f      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f000 f96e 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e12:	609a      	str	r2, [r3, #8]
      break;
 8004e14:	e03c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 f8e2 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2150      	movs	r1, #80	; 0x50
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f93b 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e34:	e02c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 f901 	bl	800504a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2160      	movs	r1, #96	; 0x60
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f92b 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e54:	e01c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 f8c2 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f91b 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e74:	e00c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 f912 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3d      	ldr	r2, [pc, #244]	; (8004fc4 <TIM_Base_SetConfig+0x118>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a3c      	ldr	r2, [pc, #240]	; (8004fc8 <TIM_Base_SetConfig+0x11c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <TIM_Base_SetConfig+0x120>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3a      	ldr	r2, [pc, #232]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d027      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <TIM_Base_SetConfig+0x118>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d023      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <TIM_Base_SetConfig+0x11c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <TIM_Base_SetConfig+0x120>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d017      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <TIM_Base_SetConfig+0x128>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a27      	ldr	r2, [pc, #156]	; (8004fd8 <TIM_Base_SetConfig+0x12c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <TIM_Base_SetConfig+0x130>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <TIM_Base_SetConfig+0x134>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a24      	ldr	r2, [pc, #144]	; (8004fe4 <TIM_Base_SetConfig+0x138>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <TIM_Base_SetConfig+0x13c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <TIM_Base_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_Base_SetConfig+0xf8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <TIM_Base_SetConfig+0x124>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d103      	bne.n	8004fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	40001800 	.word	0x40001800
 8004fe4:	40001c00 	.word	0x40001c00
 8004fe8:	40002000 	.word	0x40002000

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0210 	bic.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e05a      	b.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d01d      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a17      	ldr	r2, [pc, #92]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a15      	ldr	r2, [pc, #84]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10c      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e03f      	b.n	80052aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd facc 	bl	80027dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	; 0x24
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fddb 	bl	8005e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08a      	sub	sp, #40	; 0x28
 80052b6:	af02      	add	r7, sp, #8
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d17c      	bne.n	80053cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_UART_Transmit+0x2c>
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e075      	b.n	80053ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x3e>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e06e      	b.n	80053ce <HAL_UART_Transmit+0x11c>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2221      	movs	r2, #33	; 0x21
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005306:	f7fd fbfb 	bl	8002b00 <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005320:	d108      	bne.n	8005334 <HAL_UART_Transmit+0x82>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d104      	bne.n	8005334 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e003      	b.n	800533c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005344:	e02a      	b.n	800539c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fb1f 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e036      	b.n	80053ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005374:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3302      	adds	r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e007      	b.n	800538e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3301      	adds	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1cf      	bne.n	8005346 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2140      	movs	r1, #64	; 0x40
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 faef 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e006      	b.n	80053ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d11d      	bne.n	800542c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Receive_IT+0x26>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e016      	b.n	800542e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_UART_Receive_IT+0x38>
 800540a:	2302      	movs	r3, #2
 800540c:	e00f      	b.n	800542e <HAL_UART_Receive_IT+0x58>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	461a      	mov	r2, r3
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fb24 	bl	8005a70 <UART_Start_Receive_IT>
 8005428:	4603      	mov	r3, r0
 800542a:	e000      	b.n	800542e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b0ba      	sub	sp, #232	; 0xe8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_UART_IRQHandler+0x66>
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fc03 	bl	8005ca2 <UART_Receive_IT>
      return;
 800549c:	e256      	b.n	800594c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800549e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80de 	beq.w	8005664 <HAL_UART_IRQHandler+0x22c>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80d1 	beq.w	8005664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_UART_IRQHandler+0xae>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0xd2>
 80054f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0202 	orr.w	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xf6>
 8005516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d011      	beq.n	800555e <HAL_UART_IRQHandler+0x126>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0208 	orr.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 81ed 	beq.w	8005942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_UART_IRQHandler+0x14e>
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fb8e 	bl	8005ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <HAL_UART_IRQHandler+0x17a>
 80055aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d04f      	beq.n	8005652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa96 	bl	8005ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d141      	bne.n	800564a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3314      	adds	r3, #20
 80055cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800560a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1d9      	bne.n	80055c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	2b00      	cmp	r3, #0
 8005618:	d013      	beq.n	8005642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	4a7d      	ldr	r2, [pc, #500]	; (8005814 <HAL_UART_IRQHandler+0x3dc>)
 8005620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd fff7 	bl	800361a <HAL_DMA_Abort_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e00e      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f990 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e00a      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f98c 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e006      	b.n	8005660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f988 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800565e:	e170      	b.n	8005942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	bf00      	nop
    return;
 8005662:	e16e      	b.n	8005942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 814a 	bne.w	8005902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8143 	beq.w	8005902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 813c 	beq.w	8005902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	f040 80b4 	bne.w	8005818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8140 	beq.w	8005946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f080 8139 	bcs.w	8005946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e6:	f000 8088 	beq.w	80057fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800571a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800572e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d9      	bne.n	80056ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800575a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800575e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800576c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e1      	bne.n	8005736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3314      	adds	r3, #20
 8005778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800579c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e3      	bne.n	8005772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80057de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e3      	bne.n	80057b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd fea0 	bl	800353a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005802:	b29b      	uxth	r3, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8b6 	bl	800597c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005810:	e099      	b.n	8005946 <HAL_UART_IRQHandler+0x50e>
 8005812:	bf00      	nop
 8005814:	08005bab 	.word	0x08005bab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005820:	b29b      	uxth	r3, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 808b 	beq.w	800594a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8086 	beq.w	800594a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005862:	647a      	str	r2, [r7, #68]	; 0x44
 8005864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e3      	bne.n	800583e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3314      	adds	r3, #20
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	623b      	str	r3, [r7, #32]
   return(result);
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800589a:	633a      	str	r2, [r7, #48]	; 0x30
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e3      	bne.n	8005876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058e0:	61fa      	str	r2, [r7, #28]
 80058e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	617b      	str	r3, [r7, #20]
   return(result);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e3      	bne.n	80058bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f83e 	bl	800597c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005900:	e023      	b.n	800594a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_UART_IRQHandler+0x4ea>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f959 	bl	8005bd2 <UART_Transmit_IT>
    return;
 8005920:	e014      	b.n	800594c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <HAL_UART_IRQHandler+0x514>
 800592e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f999 	bl	8005c72 <UART_EndTransmit_IT>
    return;
 8005940:	e004      	b.n	800594c <HAL_UART_IRQHandler+0x514>
    return;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <HAL_UART_IRQHandler+0x514>
      return;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_UART_IRQHandler+0x514>
      return;
 800594a:	bf00      	nop
  }
}
 800594c:	37e8      	adds	r7, #232	; 0xe8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop

08005954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b090      	sub	sp, #64	; 0x40
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a4:	e050      	b.n	8005a48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d04c      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b4:	f7fd f8a4 	bl	8002b00 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d241      	bcs.n	8005a48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e4:	637a      	str	r2, [r7, #52]	; 0x34
 80059e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	613b      	str	r3, [r7, #16]
   return(result);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a18:	623a      	str	r2, [r7, #32]
 8005a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	6a3a      	ldr	r2, [r7, #32]
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e00f      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d09f      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3740      	adds	r7, #64	; 0x40
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2222      	movs	r2, #34	; 0x22
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b095      	sub	sp, #84	; 0x54
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e5      	bne.n	8005b20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d119      	bne.n	8005b90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	647b      	str	r3, [r7, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7c:	61ba      	str	r2, [r7, #24]
 8005b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b9e:	bf00      	nop
 8005ba0:	3754      	adds	r7, #84	; 0x54
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fecf 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b21      	cmp	r3, #33	; 0x21
 8005be4:	d13e      	bne.n	8005c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bee:	d114      	bne.n	8005c1a <UART_Transmit_IT+0x48>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d110      	bne.n	8005c1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]
 8005c18:	e008      	b.n	8005c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6211      	str	r1, [r2, #32]
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe5e 	bl	8005954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b08c      	sub	sp, #48	; 0x30
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b22      	cmp	r3, #34	; 0x22
 8005cb4:	f040 80ab 	bne.w	8005e0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d117      	bne.n	8005cf2 <UART_Receive_IT+0x50>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d113      	bne.n	8005cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf0:	e026      	b.n	8005d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d007      	beq.n	8005d16 <UART_Receive_IT+0x74>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <UART_Receive_IT+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e008      	b.n	8005d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d15a      	bne.n	8005e0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0220 	bic.w	r2, r2, #32
 8005d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d135      	bne.n	8005e00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f023 0310 	bic.w	r3, r3, #16
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	623a      	str	r2, [r7, #32]
 8005dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e5      	bne.n	8005d9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d10a      	bne.n	8005df2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fdbf 	bl	800597c <HAL_UARTEx_RxEventCallback>
 8005dfe:	e002      	b.n	8005e06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fb ffdd 	bl	8001dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e002      	b.n	8005e10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3730      	adds	r7, #48	; 0x30
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	b09f      	sub	sp, #124	; 0x7c
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2e:	68d9      	ldr	r1, [r3, #12]
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	ea40 0301 	orr.w	r3, r0, r1
 8005e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e5c:	f021 010c 	bic.w	r1, r1, #12
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e66:	430b      	orrs	r3, r1
 8005e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	6999      	ldr	r1, [r3, #24]
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	ea40 0301 	orr.w	r3, r0, r1
 8005e80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4bc5      	ldr	r3, [pc, #788]	; (800619c <UART_SetConfig+0x384>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d004      	beq.n	8005e96 <UART_SetConfig+0x7e>
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4bc3      	ldr	r3, [pc, #780]	; (80061a0 <UART_SetConfig+0x388>)
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d103      	bne.n	8005e9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e96:	f7fe fe75 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8005e9a:	6778      	str	r0, [r7, #116]	; 0x74
 8005e9c:	e002      	b.n	8005ea4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fe fe5d 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8005ea2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eac:	f040 80b6 	bne.w	800601c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb2:	461c      	mov	r4, r3
 8005eb4:	f04f 0500 	mov.w	r5, #0
 8005eb8:	4622      	mov	r2, r4
 8005eba:	462b      	mov	r3, r5
 8005ebc:	1891      	adds	r1, r2, r2
 8005ebe:	6439      	str	r1, [r7, #64]	; 0x40
 8005ec0:	415b      	adcs	r3, r3
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec8:	1912      	adds	r2, r2, r4
 8005eca:	eb45 0303 	adc.w	r3, r5, r3
 8005ece:	f04f 0000 	mov.w	r0, #0
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	00d9      	lsls	r1, r3, #3
 8005ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005edc:	00d0      	lsls	r0, r2, #3
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	1911      	adds	r1, r2, r4
 8005ee4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ee6:	416b      	adcs	r3, r5
 8005ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f04:	f7fa f9cc 	bl	80002a0 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4ba5      	ldr	r3, [pc, #660]	; (80061a4 <UART_SetConfig+0x38c>)
 8005f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	011e      	lsls	r6, r3, #4
 8005f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f18:	461c      	mov	r4, r3
 8005f1a:	f04f 0500 	mov.w	r5, #0
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	1891      	adds	r1, r2, r2
 8005f24:	6339      	str	r1, [r7, #48]	; 0x30
 8005f26:	415b      	adcs	r3, r3
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f2e:	1912      	adds	r2, r2, r4
 8005f30:	eb45 0303 	adc.w	r3, r5, r3
 8005f34:	f04f 0000 	mov.w	r0, #0
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	00d9      	lsls	r1, r3, #3
 8005f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f42:	00d0      	lsls	r0, r2, #3
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	1911      	adds	r1, r2, r4
 8005f4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f4c:	416b      	adcs	r3, r5
 8005f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	1891      	adds	r1, r2, r2
 8005f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f5e:	415b      	adcs	r3, r3
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f6a:	f7fa f999 	bl	80002a0 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4b8c      	ldr	r3, [pc, #560]	; (80061a4 <UART_SetConfig+0x38c>)
 8005f74:	fba3 1302 	umull	r1, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	2164      	movs	r1, #100	; 0x64
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	3332      	adds	r3, #50	; 0x32
 8005f86:	4a87      	ldr	r2, [pc, #540]	; (80061a4 <UART_SetConfig+0x38c>)
 8005f88:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f94:	441e      	add	r6, r3
 8005f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	1894      	adds	r4, r2, r2
 8005fa4:	623c      	str	r4, [r7, #32]
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fae:	1812      	adds	r2, r2, r0
 8005fb0:	eb41 0303 	adc.w	r3, r1, r3
 8005fb4:	f04f 0400 	mov.w	r4, #0
 8005fb8:	f04f 0500 	mov.w	r5, #0
 8005fbc:	00dd      	lsls	r5, r3, #3
 8005fbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fc2:	00d4      	lsls	r4, r2, #3
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	1814      	adds	r4, r2, r0
 8005fca:	653c      	str	r4, [r7, #80]	; 0x50
 8005fcc:	414b      	adcs	r3, r1
 8005fce:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	1891      	adds	r1, r2, r2
 8005fdc:	61b9      	str	r1, [r7, #24]
 8005fde:	415b      	adcs	r3, r3
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fea:	f7fa f959 	bl	80002a0 <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4b6c      	ldr	r3, [pc, #432]	; (80061a4 <UART_SetConfig+0x38c>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	; 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	3332      	adds	r3, #50	; 0x32
 8006006:	4a67      	ldr	r2, [pc, #412]	; (80061a4 <UART_SetConfig+0x38c>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 0207 	and.w	r2, r3, #7
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4432      	add	r2, r6
 8006018:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800601a:	e0b9      	b.n	8006190 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800601c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601e:	461c      	mov	r4, r3
 8006020:	f04f 0500 	mov.w	r5, #0
 8006024:	4622      	mov	r2, r4
 8006026:	462b      	mov	r3, r5
 8006028:	1891      	adds	r1, r2, r2
 800602a:	6139      	str	r1, [r7, #16]
 800602c:	415b      	adcs	r3, r3
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006034:	1912      	adds	r2, r2, r4
 8006036:	eb45 0303 	adc.w	r3, r5, r3
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	00d9      	lsls	r1, r3, #3
 8006044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006048:	00d0      	lsls	r0, r2, #3
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	eb12 0804 	adds.w	r8, r2, r4
 8006052:	eb43 0905 	adc.w	r9, r3, r5
 8006056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	008b      	lsls	r3, r1, #2
 800606a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800606e:	0082      	lsls	r2, r0, #2
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa f914 	bl	80002a0 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <UART_SetConfig+0x38c>)
 800607e:	fba3 2302 	umull	r2, r3, r3, r2
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	011e      	lsls	r6, r3, #4
 8006086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006088:	4618      	mov	r0, r3
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	1894      	adds	r4, r2, r2
 8006094:	60bc      	str	r4, [r7, #8]
 8006096:	415b      	adcs	r3, r3
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609e:	1812      	adds	r2, r2, r0
 80060a0:	eb41 0303 	adc.w	r3, r1, r3
 80060a4:	f04f 0400 	mov.w	r4, #0
 80060a8:	f04f 0500 	mov.w	r5, #0
 80060ac:	00dd      	lsls	r5, r3, #3
 80060ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b2:	00d4      	lsls	r4, r2, #3
 80060b4:	4622      	mov	r2, r4
 80060b6:	462b      	mov	r3, r5
 80060b8:	1814      	adds	r4, r2, r0
 80060ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80060bc:	414b      	adcs	r3, r1
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	008b      	lsls	r3, r1, #2
 80060d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d8:	0082      	lsls	r2, r0, #2
 80060da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060de:	f7fa f8df 	bl	80002a0 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <UART_SetConfig+0x38c>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <UART_SetConfig+0x38c>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006106:	441e      	add	r6, r3
 8006108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610a:	4618      	mov	r0, r3
 800610c:	f04f 0100 	mov.w	r1, #0
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	1894      	adds	r4, r2, r2
 8006116:	603c      	str	r4, [r7, #0]
 8006118:	415b      	adcs	r3, r3
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006120:	1812      	adds	r2, r2, r0
 8006122:	eb41 0303 	adc.w	r3, r1, r3
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	f04f 0500 	mov.w	r5, #0
 800612e:	00dd      	lsls	r5, r3, #3
 8006130:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006134:	00d4      	lsls	r4, r2, #3
 8006136:	4622      	mov	r2, r4
 8006138:	462b      	mov	r3, r5
 800613a:	eb12 0a00 	adds.w	sl, r2, r0
 800613e:	eb43 0b01 	adc.w	fp, r3, r1
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4618      	mov	r0, r3
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	008b      	lsls	r3, r1, #2
 8006156:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800615a:	0082      	lsls	r2, r0, #2
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	f7fa f89e 	bl	80002a0 <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <UART_SetConfig+0x38c>)
 800616a:	fba3 1302 	umull	r1, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2164      	movs	r1, #100	; 0x64
 8006172:	fb01 f303 	mul.w	r3, r1, r3
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	3332      	adds	r3, #50	; 0x32
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <UART_SetConfig+0x38c>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4432      	add	r2, r6
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	377c      	adds	r7, #124	; 0x7c
 8006194:	46bd      	mov	sp, r7
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	bf00      	nop
 800619c:	40011000 	.word	0x40011000
 80061a0:	40011400 	.word	0x40011400
 80061a4:	51eb851f 	.word	0x51eb851f

080061a8 <__errno>:
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <__errno+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	2000001c 	.word	0x2000001c

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4d0d      	ldr	r5, [pc, #52]	; (80061ec <__libc_init_array+0x38>)
 80061b8:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <__libc_init_array+0x3c>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	2600      	movs	r6, #0
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	4d0b      	ldr	r5, [pc, #44]	; (80061f4 <__libc_init_array+0x40>)
 80061c6:	4c0c      	ldr	r4, [pc, #48]	; (80061f8 <__libc_init_array+0x44>)
 80061c8:	f000 fc4e 	bl	8006a68 <_init>
 80061cc:	1b64      	subs	r4, r4, r5
 80061ce:	10a4      	asrs	r4, r4, #2
 80061d0:	2600      	movs	r6, #0
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	08007004 	.word	0x08007004
 80061f0:	08007004 	.word	0x08007004
 80061f4:	08007004 	.word	0x08007004
 80061f8:	08007008 	.word	0x08007008

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <siprintf>:
 800620c:	b40e      	push	{r1, r2, r3}
 800620e:	b500      	push	{lr}
 8006210:	b09c      	sub	sp, #112	; 0x70
 8006212:	ab1d      	add	r3, sp, #116	; 0x74
 8006214:	9002      	str	r0, [sp, #8]
 8006216:	9006      	str	r0, [sp, #24]
 8006218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800621c:	4809      	ldr	r0, [pc, #36]	; (8006244 <siprintf+0x38>)
 800621e:	9107      	str	r1, [sp, #28]
 8006220:	9104      	str	r1, [sp, #16]
 8006222:	4909      	ldr	r1, [pc, #36]	; (8006248 <siprintf+0x3c>)
 8006224:	f853 2b04 	ldr.w	r2, [r3], #4
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	a902      	add	r1, sp, #8
 8006230:	f000 f868 	bl	8006304 <_svfiprintf_r>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	b01c      	add	sp, #112	; 0x70
 800623c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006240:	b003      	add	sp, #12
 8006242:	4770      	bx	lr
 8006244:	2000001c 	.word	0x2000001c
 8006248:	ffff0208 	.word	0xffff0208

0800624c <__ssputs_r>:
 800624c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	688e      	ldr	r6, [r1, #8]
 8006252:	429e      	cmp	r6, r3
 8006254:	4682      	mov	sl, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4690      	mov	r8, r2
 800625a:	461f      	mov	r7, r3
 800625c:	d838      	bhi.n	80062d0 <__ssputs_r+0x84>
 800625e:	898a      	ldrh	r2, [r1, #12]
 8006260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006264:	d032      	beq.n	80062cc <__ssputs_r+0x80>
 8006266:	6825      	ldr	r5, [r4, #0]
 8006268:	6909      	ldr	r1, [r1, #16]
 800626a:	eba5 0901 	sub.w	r9, r5, r1
 800626e:	6965      	ldr	r5, [r4, #20]
 8006270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006278:	3301      	adds	r3, #1
 800627a:	444b      	add	r3, r9
 800627c:	106d      	asrs	r5, r5, #1
 800627e:	429d      	cmp	r5, r3
 8006280:	bf38      	it	cc
 8006282:	461d      	movcc	r5, r3
 8006284:	0553      	lsls	r3, r2, #21
 8006286:	d531      	bpl.n	80062ec <__ssputs_r+0xa0>
 8006288:	4629      	mov	r1, r5
 800628a:	f000 fb47 	bl	800691c <_malloc_r>
 800628e:	4606      	mov	r6, r0
 8006290:	b950      	cbnz	r0, 80062a8 <__ssputs_r+0x5c>
 8006292:	230c      	movs	r3, #12
 8006294:	f8ca 3000 	str.w	r3, [sl]
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	6921      	ldr	r1, [r4, #16]
 80062aa:	464a      	mov	r2, r9
 80062ac:	f000 fabe 	bl	800682c <memcpy>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	6126      	str	r6, [r4, #16]
 80062be:	6165      	str	r5, [r4, #20]
 80062c0:	444e      	add	r6, r9
 80062c2:	eba5 0509 	sub.w	r5, r5, r9
 80062c6:	6026      	str	r6, [r4, #0]
 80062c8:	60a5      	str	r5, [r4, #8]
 80062ca:	463e      	mov	r6, r7
 80062cc:	42be      	cmp	r6, r7
 80062ce:	d900      	bls.n	80062d2 <__ssputs_r+0x86>
 80062d0:	463e      	mov	r6, r7
 80062d2:	4632      	mov	r2, r6
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	4641      	mov	r1, r8
 80062d8:	f000 fab6 	bl	8006848 <memmove>
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	1b9b      	subs	r3, r3, r6
 80062e2:	4432      	add	r2, r6
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6022      	str	r2, [r4, #0]
 80062e8:	2000      	movs	r0, #0
 80062ea:	e7db      	b.n	80062a4 <__ssputs_r+0x58>
 80062ec:	462a      	mov	r2, r5
 80062ee:	f000 fb6f 	bl	80069d0 <_realloc_r>
 80062f2:	4606      	mov	r6, r0
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1e1      	bne.n	80062bc <__ssputs_r+0x70>
 80062f8:	6921      	ldr	r1, [r4, #16]
 80062fa:	4650      	mov	r0, sl
 80062fc:	f000 fabe 	bl	800687c <_free_r>
 8006300:	e7c7      	b.n	8006292 <__ssputs_r+0x46>
	...

08006304 <_svfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	4698      	mov	r8, r3
 800630a:	898b      	ldrh	r3, [r1, #12]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	b09d      	sub	sp, #116	; 0x74
 8006310:	4607      	mov	r7, r0
 8006312:	460d      	mov	r5, r1
 8006314:	4614      	mov	r4, r2
 8006316:	d50e      	bpl.n	8006336 <_svfiprintf_r+0x32>
 8006318:	690b      	ldr	r3, [r1, #16]
 800631a:	b963      	cbnz	r3, 8006336 <_svfiprintf_r+0x32>
 800631c:	2140      	movs	r1, #64	; 0x40
 800631e:	f000 fafd 	bl	800691c <_malloc_r>
 8006322:	6028      	str	r0, [r5, #0]
 8006324:	6128      	str	r0, [r5, #16]
 8006326:	b920      	cbnz	r0, 8006332 <_svfiprintf_r+0x2e>
 8006328:	230c      	movs	r3, #12
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e0d1      	b.n	80064d6 <_svfiprintf_r+0x1d2>
 8006332:	2340      	movs	r3, #64	; 0x40
 8006334:	616b      	str	r3, [r5, #20]
 8006336:	2300      	movs	r3, #0
 8006338:	9309      	str	r3, [sp, #36]	; 0x24
 800633a:	2320      	movs	r3, #32
 800633c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006340:	f8cd 800c 	str.w	r8, [sp, #12]
 8006344:	2330      	movs	r3, #48	; 0x30
 8006346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064f0 <_svfiprintf_r+0x1ec>
 800634a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800634e:	f04f 0901 	mov.w	r9, #1
 8006352:	4623      	mov	r3, r4
 8006354:	469a      	mov	sl, r3
 8006356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635a:	b10a      	cbz	r2, 8006360 <_svfiprintf_r+0x5c>
 800635c:	2a25      	cmp	r2, #37	; 0x25
 800635e:	d1f9      	bne.n	8006354 <_svfiprintf_r+0x50>
 8006360:	ebba 0b04 	subs.w	fp, sl, r4
 8006364:	d00b      	beq.n	800637e <_svfiprintf_r+0x7a>
 8006366:	465b      	mov	r3, fp
 8006368:	4622      	mov	r2, r4
 800636a:	4629      	mov	r1, r5
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff ff6d 	bl	800624c <__ssputs_r>
 8006372:	3001      	adds	r0, #1
 8006374:	f000 80aa 	beq.w	80064cc <_svfiprintf_r+0x1c8>
 8006378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637a:	445a      	add	r2, fp
 800637c:	9209      	str	r2, [sp, #36]	; 0x24
 800637e:	f89a 3000 	ldrb.w	r3, [sl]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80a2 	beq.w	80064cc <_svfiprintf_r+0x1c8>
 8006388:	2300      	movs	r3, #0
 800638a:	f04f 32ff 	mov.w	r2, #4294967295
 800638e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006392:	f10a 0a01 	add.w	sl, sl, #1
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	9307      	str	r3, [sp, #28]
 800639a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800639e:	931a      	str	r3, [sp, #104]	; 0x68
 80063a0:	4654      	mov	r4, sl
 80063a2:	2205      	movs	r2, #5
 80063a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a8:	4851      	ldr	r0, [pc, #324]	; (80064f0 <_svfiprintf_r+0x1ec>)
 80063aa:	f7f9 ff29 	bl	8000200 <memchr>
 80063ae:	9a04      	ldr	r2, [sp, #16]
 80063b0:	b9d8      	cbnz	r0, 80063ea <_svfiprintf_r+0xe6>
 80063b2:	06d0      	lsls	r0, r2, #27
 80063b4:	bf44      	itt	mi
 80063b6:	2320      	movmi	r3, #32
 80063b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063bc:	0711      	lsls	r1, r2, #28
 80063be:	bf44      	itt	mi
 80063c0:	232b      	movmi	r3, #43	; 0x2b
 80063c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c6:	f89a 3000 	ldrb.w	r3, [sl]
 80063ca:	2b2a      	cmp	r3, #42	; 0x2a
 80063cc:	d015      	beq.n	80063fa <_svfiprintf_r+0xf6>
 80063ce:	9a07      	ldr	r2, [sp, #28]
 80063d0:	4654      	mov	r4, sl
 80063d2:	2000      	movs	r0, #0
 80063d4:	f04f 0c0a 	mov.w	ip, #10
 80063d8:	4621      	mov	r1, r4
 80063da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063de:	3b30      	subs	r3, #48	; 0x30
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	d94e      	bls.n	8006482 <_svfiprintf_r+0x17e>
 80063e4:	b1b0      	cbz	r0, 8006414 <_svfiprintf_r+0x110>
 80063e6:	9207      	str	r2, [sp, #28]
 80063e8:	e014      	b.n	8006414 <_svfiprintf_r+0x110>
 80063ea:	eba0 0308 	sub.w	r3, r0, r8
 80063ee:	fa09 f303 	lsl.w	r3, r9, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	46a2      	mov	sl, r4
 80063f8:	e7d2      	b.n	80063a0 <_svfiprintf_r+0x9c>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	9103      	str	r1, [sp, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfbb      	ittet	lt
 8006406:	425b      	neglt	r3, r3
 8006408:	f042 0202 	orrlt.w	r2, r2, #2
 800640c:	9307      	strge	r3, [sp, #28]
 800640e:	9307      	strlt	r3, [sp, #28]
 8006410:	bfb8      	it	lt
 8006412:	9204      	strlt	r2, [sp, #16]
 8006414:	7823      	ldrb	r3, [r4, #0]
 8006416:	2b2e      	cmp	r3, #46	; 0x2e
 8006418:	d10c      	bne.n	8006434 <_svfiprintf_r+0x130>
 800641a:	7863      	ldrb	r3, [r4, #1]
 800641c:	2b2a      	cmp	r3, #42	; 0x2a
 800641e:	d135      	bne.n	800648c <_svfiprintf_r+0x188>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	9203      	str	r2, [sp, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfb8      	it	lt
 800642c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006430:	3402      	adds	r4, #2
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006500 <_svfiprintf_r+0x1fc>
 8006438:	7821      	ldrb	r1, [r4, #0]
 800643a:	2203      	movs	r2, #3
 800643c:	4650      	mov	r0, sl
 800643e:	f7f9 fedf 	bl	8000200 <memchr>
 8006442:	b140      	cbz	r0, 8006456 <_svfiprintf_r+0x152>
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	eba0 000a 	sub.w	r0, r0, sl
 800644a:	fa03 f000 	lsl.w	r0, r3, r0
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	4303      	orrs	r3, r0
 8006452:	3401      	adds	r4, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645a:	4826      	ldr	r0, [pc, #152]	; (80064f4 <_svfiprintf_r+0x1f0>)
 800645c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006460:	2206      	movs	r2, #6
 8006462:	f7f9 fecd 	bl	8000200 <memchr>
 8006466:	2800      	cmp	r0, #0
 8006468:	d038      	beq.n	80064dc <_svfiprintf_r+0x1d8>
 800646a:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <_svfiprintf_r+0x1f4>)
 800646c:	bb1b      	cbnz	r3, 80064b6 <_svfiprintf_r+0x1b2>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	3307      	adds	r3, #7
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	3308      	adds	r3, #8
 8006478:	9303      	str	r3, [sp, #12]
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	4433      	add	r3, r6
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e767      	b.n	8006352 <_svfiprintf_r+0x4e>
 8006482:	fb0c 3202 	mla	r2, ip, r2, r3
 8006486:	460c      	mov	r4, r1
 8006488:	2001      	movs	r0, #1
 800648a:	e7a5      	b.n	80063d8 <_svfiprintf_r+0xd4>
 800648c:	2300      	movs	r3, #0
 800648e:	3401      	adds	r4, #1
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	4619      	mov	r1, r3
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4620      	mov	r0, r4
 800649a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800649e:	3a30      	subs	r2, #48	; 0x30
 80064a0:	2a09      	cmp	r2, #9
 80064a2:	d903      	bls.n	80064ac <_svfiprintf_r+0x1a8>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0c5      	beq.n	8006434 <_svfiprintf_r+0x130>
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	e7c3      	b.n	8006434 <_svfiprintf_r+0x130>
 80064ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b0:	4604      	mov	r4, r0
 80064b2:	2301      	movs	r3, #1
 80064b4:	e7f0      	b.n	8006498 <_svfiprintf_r+0x194>
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	462a      	mov	r2, r5
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <_svfiprintf_r+0x1f8>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	4638      	mov	r0, r7
 80064c2:	f3af 8000 	nop.w
 80064c6:	1c42      	adds	r2, r0, #1
 80064c8:	4606      	mov	r6, r0
 80064ca:	d1d6      	bne.n	800647a <_svfiprintf_r+0x176>
 80064cc:	89ab      	ldrh	r3, [r5, #12]
 80064ce:	065b      	lsls	r3, r3, #25
 80064d0:	f53f af2c 	bmi.w	800632c <_svfiprintf_r+0x28>
 80064d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064d6:	b01d      	add	sp, #116	; 0x74
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	ab03      	add	r3, sp, #12
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <_svfiprintf_r+0x1f8>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	4638      	mov	r0, r7
 80064e8:	f000 f87a 	bl	80065e0 <_printf_i>
 80064ec:	e7eb      	b.n	80064c6 <_svfiprintf_r+0x1c2>
 80064ee:	bf00      	nop
 80064f0:	08006fc8 	.word	0x08006fc8
 80064f4:	08006fd2 	.word	0x08006fd2
 80064f8:	00000000 	.word	0x00000000
 80064fc:	0800624d 	.word	0x0800624d
 8006500:	08006fce 	.word	0x08006fce

08006504 <_printf_common>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	4616      	mov	r6, r2
 800650a:	4699      	mov	r9, r3
 800650c:	688a      	ldr	r2, [r1, #8]
 800650e:	690b      	ldr	r3, [r1, #16]
 8006510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006514:	4293      	cmp	r3, r2
 8006516:	bfb8      	it	lt
 8006518:	4613      	movlt	r3, r2
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006520:	4607      	mov	r7, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b10a      	cbz	r2, 800652a <_printf_common+0x26>
 8006526:	3301      	adds	r3, #1
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	0699      	lsls	r1, r3, #26
 800652e:	bf42      	ittt	mi
 8006530:	6833      	ldrmi	r3, [r6, #0]
 8006532:	3302      	addmi	r3, #2
 8006534:	6033      	strmi	r3, [r6, #0]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	f015 0506 	ands.w	r5, r5, #6
 800653c:	d106      	bne.n	800654c <_printf_common+0x48>
 800653e:	f104 0a19 	add.w	sl, r4, #25
 8006542:	68e3      	ldr	r3, [r4, #12]
 8006544:	6832      	ldr	r2, [r6, #0]
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	42ab      	cmp	r3, r5
 800654a:	dc26      	bgt.n	800659a <_printf_common+0x96>
 800654c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006550:	1e13      	subs	r3, r2, #0
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	bf18      	it	ne
 8006556:	2301      	movne	r3, #1
 8006558:	0692      	lsls	r2, r2, #26
 800655a:	d42b      	bmi.n	80065b4 <_printf_common+0xb0>
 800655c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006560:	4649      	mov	r1, r9
 8006562:	4638      	mov	r0, r7
 8006564:	47c0      	blx	r8
 8006566:	3001      	adds	r0, #1
 8006568:	d01e      	beq.n	80065a8 <_printf_common+0xa4>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	68e5      	ldr	r5, [r4, #12]
 800656e:	6832      	ldr	r2, [r6, #0]
 8006570:	f003 0306 	and.w	r3, r3, #6
 8006574:	2b04      	cmp	r3, #4
 8006576:	bf08      	it	eq
 8006578:	1aad      	subeq	r5, r5, r2
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	6922      	ldr	r2, [r4, #16]
 800657e:	bf0c      	ite	eq
 8006580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006584:	2500      	movne	r5, #0
 8006586:	4293      	cmp	r3, r2
 8006588:	bfc4      	itt	gt
 800658a:	1a9b      	subgt	r3, r3, r2
 800658c:	18ed      	addgt	r5, r5, r3
 800658e:	2600      	movs	r6, #0
 8006590:	341a      	adds	r4, #26
 8006592:	42b5      	cmp	r5, r6
 8006594:	d11a      	bne.n	80065cc <_printf_common+0xc8>
 8006596:	2000      	movs	r0, #0
 8006598:	e008      	b.n	80065ac <_printf_common+0xa8>
 800659a:	2301      	movs	r3, #1
 800659c:	4652      	mov	r2, sl
 800659e:	4649      	mov	r1, r9
 80065a0:	4638      	mov	r0, r7
 80065a2:	47c0      	blx	r8
 80065a4:	3001      	adds	r0, #1
 80065a6:	d103      	bne.n	80065b0 <_printf_common+0xac>
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	3501      	adds	r5, #1
 80065b2:	e7c6      	b.n	8006542 <_printf_common+0x3e>
 80065b4:	18e1      	adds	r1, r4, r3
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	2030      	movs	r0, #48	; 0x30
 80065ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065be:	4422      	add	r2, r4
 80065c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c8:	3302      	adds	r3, #2
 80065ca:	e7c7      	b.n	800655c <_printf_common+0x58>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4622      	mov	r2, r4
 80065d0:	4649      	mov	r1, r9
 80065d2:	4638      	mov	r0, r7
 80065d4:	47c0      	blx	r8
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0e6      	beq.n	80065a8 <_printf_common+0xa4>
 80065da:	3601      	adds	r6, #1
 80065dc:	e7d9      	b.n	8006592 <_printf_common+0x8e>
	...

080065e0 <_printf_i>:
 80065e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	460c      	mov	r4, r1
 80065e6:	4691      	mov	r9, r2
 80065e8:	7e27      	ldrb	r7, [r4, #24]
 80065ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065ec:	2f78      	cmp	r7, #120	; 0x78
 80065ee:	4680      	mov	r8, r0
 80065f0:	469a      	mov	sl, r3
 80065f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f6:	d807      	bhi.n	8006608 <_printf_i+0x28>
 80065f8:	2f62      	cmp	r7, #98	; 0x62
 80065fa:	d80a      	bhi.n	8006612 <_printf_i+0x32>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	f000 80d8 	beq.w	80067b2 <_printf_i+0x1d2>
 8006602:	2f58      	cmp	r7, #88	; 0x58
 8006604:	f000 80a3 	beq.w	800674e <_printf_i+0x16e>
 8006608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800660c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006610:	e03a      	b.n	8006688 <_printf_i+0xa8>
 8006612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006616:	2b15      	cmp	r3, #21
 8006618:	d8f6      	bhi.n	8006608 <_printf_i+0x28>
 800661a:	a001      	add	r0, pc, #4	; (adr r0, 8006620 <_printf_i+0x40>)
 800661c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006620:	08006679 	.word	0x08006679
 8006624:	0800668d 	.word	0x0800668d
 8006628:	08006609 	.word	0x08006609
 800662c:	08006609 	.word	0x08006609
 8006630:	08006609 	.word	0x08006609
 8006634:	08006609 	.word	0x08006609
 8006638:	0800668d 	.word	0x0800668d
 800663c:	08006609 	.word	0x08006609
 8006640:	08006609 	.word	0x08006609
 8006644:	08006609 	.word	0x08006609
 8006648:	08006609 	.word	0x08006609
 800664c:	08006799 	.word	0x08006799
 8006650:	080066bd 	.word	0x080066bd
 8006654:	0800677b 	.word	0x0800677b
 8006658:	08006609 	.word	0x08006609
 800665c:	08006609 	.word	0x08006609
 8006660:	080067bb 	.word	0x080067bb
 8006664:	08006609 	.word	0x08006609
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006609 	.word	0x08006609
 8006670:	08006609 	.word	0x08006609
 8006674:	08006783 	.word	0x08006783
 8006678:	680b      	ldr	r3, [r1, #0]
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	600a      	str	r2, [r1, #0]
 8006680:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006688:	2301      	movs	r3, #1
 800668a:	e0a3      	b.n	80067d4 <_printf_i+0x1f4>
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	6808      	ldr	r0, [r1, #0]
 8006690:	062e      	lsls	r6, r5, #24
 8006692:	f100 0304 	add.w	r3, r0, #4
 8006696:	d50a      	bpl.n	80066ae <_printf_i+0xce>
 8006698:	6805      	ldr	r5, [r0, #0]
 800669a:	600b      	str	r3, [r1, #0]
 800669c:	2d00      	cmp	r5, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xc8>
 80066a0:	232d      	movs	r3, #45	; 0x2d
 80066a2:	426d      	negs	r5, r5
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a8:	485e      	ldr	r0, [pc, #376]	; (8006824 <_printf_i+0x244>)
 80066aa:	230a      	movs	r3, #10
 80066ac:	e019      	b.n	80066e2 <_printf_i+0x102>
 80066ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066b2:	6805      	ldr	r5, [r0, #0]
 80066b4:	600b      	str	r3, [r1, #0]
 80066b6:	bf18      	it	ne
 80066b8:	b22d      	sxthne	r5, r5
 80066ba:	e7ef      	b.n	800669c <_printf_i+0xbc>
 80066bc:	680b      	ldr	r3, [r1, #0]
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	1d18      	adds	r0, r3, #4
 80066c2:	6008      	str	r0, [r1, #0]
 80066c4:	0628      	lsls	r0, r5, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xec>
 80066c8:	681d      	ldr	r5, [r3, #0]
 80066ca:	e002      	b.n	80066d2 <_printf_i+0xf2>
 80066cc:	0669      	lsls	r1, r5, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xe8>
 80066d0:	881d      	ldrh	r5, [r3, #0]
 80066d2:	4854      	ldr	r0, [pc, #336]	; (8006824 <_printf_i+0x244>)
 80066d4:	2f6f      	cmp	r7, #111	; 0x6f
 80066d6:	bf0c      	ite	eq
 80066d8:	2308      	moveq	r3, #8
 80066da:	230a      	movne	r3, #10
 80066dc:	2100      	movs	r1, #0
 80066de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e2:	6866      	ldr	r6, [r4, #4]
 80066e4:	60a6      	str	r6, [r4, #8]
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	bfa2      	ittt	ge
 80066ea:	6821      	ldrge	r1, [r4, #0]
 80066ec:	f021 0104 	bicge.w	r1, r1, #4
 80066f0:	6021      	strge	r1, [r4, #0]
 80066f2:	b90d      	cbnz	r5, 80066f8 <_printf_i+0x118>
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	d04d      	beq.n	8006794 <_printf_i+0x1b4>
 80066f8:	4616      	mov	r6, r2
 80066fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80066fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006702:	5dc7      	ldrb	r7, [r0, r7]
 8006704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006708:	462f      	mov	r7, r5
 800670a:	42bb      	cmp	r3, r7
 800670c:	460d      	mov	r5, r1
 800670e:	d9f4      	bls.n	80066fa <_printf_i+0x11a>
 8006710:	2b08      	cmp	r3, #8
 8006712:	d10b      	bne.n	800672c <_printf_i+0x14c>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	07df      	lsls	r7, r3, #31
 8006718:	d508      	bpl.n	800672c <_printf_i+0x14c>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	6861      	ldr	r1, [r4, #4]
 800671e:	4299      	cmp	r1, r3
 8006720:	bfde      	ittt	le
 8006722:	2330      	movle	r3, #48	; 0x30
 8006724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006728:	f106 36ff 	addle.w	r6, r6, #4294967295
 800672c:	1b92      	subs	r2, r2, r6
 800672e:	6122      	str	r2, [r4, #16]
 8006730:	f8cd a000 	str.w	sl, [sp]
 8006734:	464b      	mov	r3, r9
 8006736:	aa03      	add	r2, sp, #12
 8006738:	4621      	mov	r1, r4
 800673a:	4640      	mov	r0, r8
 800673c:	f7ff fee2 	bl	8006504 <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	d14c      	bne.n	80067de <_printf_i+0x1fe>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	b004      	add	sp, #16
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	4835      	ldr	r0, [pc, #212]	; (8006824 <_printf_i+0x244>)
 8006750:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	680e      	ldr	r6, [r1, #0]
 8006758:	061f      	lsls	r7, r3, #24
 800675a:	f856 5b04 	ldr.w	r5, [r6], #4
 800675e:	600e      	str	r6, [r1, #0]
 8006760:	d514      	bpl.n	800678c <_printf_i+0x1ac>
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	bf44      	itt	mi
 8006766:	f043 0320 	orrmi.w	r3, r3, #32
 800676a:	6023      	strmi	r3, [r4, #0]
 800676c:	b91d      	cbnz	r5, 8006776 <_printf_i+0x196>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	f023 0320 	bic.w	r3, r3, #32
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	2310      	movs	r3, #16
 8006778:	e7b0      	b.n	80066dc <_printf_i+0xfc>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f043 0320 	orr.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2378      	movs	r3, #120	; 0x78
 8006784:	4828      	ldr	r0, [pc, #160]	; (8006828 <_printf_i+0x248>)
 8006786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678a:	e7e3      	b.n	8006754 <_printf_i+0x174>
 800678c:	065e      	lsls	r6, r3, #25
 800678e:	bf48      	it	mi
 8006790:	b2ad      	uxthmi	r5, r5
 8006792:	e7e6      	b.n	8006762 <_printf_i+0x182>
 8006794:	4616      	mov	r6, r2
 8006796:	e7bb      	b.n	8006710 <_printf_i+0x130>
 8006798:	680b      	ldr	r3, [r1, #0]
 800679a:	6826      	ldr	r6, [r4, #0]
 800679c:	6960      	ldr	r0, [r4, #20]
 800679e:	1d1d      	adds	r5, r3, #4
 80067a0:	600d      	str	r5, [r1, #0]
 80067a2:	0635      	lsls	r5, r6, #24
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0x1cc>
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <_printf_i+0x1d2>
 80067ac:	0671      	lsls	r1, r6, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0x1c8>
 80067b0:	8018      	strh	r0, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	4616      	mov	r6, r2
 80067b8:	e7ba      	b.n	8006730 <_printf_i+0x150>
 80067ba:	680b      	ldr	r3, [r1, #0]
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	600a      	str	r2, [r1, #0]
 80067c0:	681e      	ldr	r6, [r3, #0]
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7f9 fd1a 	bl	8000200 <memchr>
 80067cc:	b108      	cbz	r0, 80067d2 <_printf_i+0x1f2>
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	6060      	str	r0, [r4, #4]
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	e7a8      	b.n	8006730 <_printf_i+0x150>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0ab      	beq.n	8006744 <_printf_i+0x164>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	d413      	bmi.n	800681a <_printf_i+0x23a>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e7a4      	b.n	8006748 <_printf_i+0x168>
 80067fe:	2301      	movs	r3, #1
 8006800:	4632      	mov	r2, r6
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d09b      	beq.n	8006744 <_printf_i+0x164>
 800680c:	3501      	adds	r5, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	9903      	ldr	r1, [sp, #12]
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	42ab      	cmp	r3, r5
 8006816:	dcf2      	bgt.n	80067fe <_printf_i+0x21e>
 8006818:	e7eb      	b.n	80067f2 <_printf_i+0x212>
 800681a:	2500      	movs	r5, #0
 800681c:	f104 0619 	add.w	r6, r4, #25
 8006820:	e7f5      	b.n	800680e <_printf_i+0x22e>
 8006822:	bf00      	nop
 8006824:	08006fd9 	.word	0x08006fd9
 8006828:	08006fea 	.word	0x08006fea

0800682c <memcpy>:
 800682c:	440a      	add	r2, r1
 800682e:	4291      	cmp	r1, r2
 8006830:	f100 33ff 	add.w	r3, r0, #4294967295
 8006834:	d100      	bne.n	8006838 <memcpy+0xc>
 8006836:	4770      	bx	lr
 8006838:	b510      	push	{r4, lr}
 800683a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006842:	4291      	cmp	r1, r2
 8006844:	d1f9      	bne.n	800683a <memcpy+0xe>
 8006846:	bd10      	pop	{r4, pc}

08006848 <memmove>:
 8006848:	4288      	cmp	r0, r1
 800684a:	b510      	push	{r4, lr}
 800684c:	eb01 0402 	add.w	r4, r1, r2
 8006850:	d902      	bls.n	8006858 <memmove+0x10>
 8006852:	4284      	cmp	r4, r0
 8006854:	4623      	mov	r3, r4
 8006856:	d807      	bhi.n	8006868 <memmove+0x20>
 8006858:	1e43      	subs	r3, r0, #1
 800685a:	42a1      	cmp	r1, r4
 800685c:	d008      	beq.n	8006870 <memmove+0x28>
 800685e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006866:	e7f8      	b.n	800685a <memmove+0x12>
 8006868:	4402      	add	r2, r0
 800686a:	4601      	mov	r1, r0
 800686c:	428a      	cmp	r2, r1
 800686e:	d100      	bne.n	8006872 <memmove+0x2a>
 8006870:	bd10      	pop	{r4, pc}
 8006872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800687a:	e7f7      	b.n	800686c <memmove+0x24>

0800687c <_free_r>:
 800687c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800687e:	2900      	cmp	r1, #0
 8006880:	d048      	beq.n	8006914 <_free_r+0x98>
 8006882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006886:	9001      	str	r0, [sp, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f1a1 0404 	sub.w	r4, r1, #4
 800688e:	bfb8      	it	lt
 8006890:	18e4      	addlt	r4, r4, r3
 8006892:	f000 f8d3 	bl	8006a3c <__malloc_lock>
 8006896:	4a20      	ldr	r2, [pc, #128]	; (8006918 <_free_r+0x9c>)
 8006898:	9801      	ldr	r0, [sp, #4]
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	4615      	mov	r5, r2
 800689e:	b933      	cbnz	r3, 80068ae <_free_r+0x32>
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	6014      	str	r4, [r2, #0]
 80068a4:	b003      	add	sp, #12
 80068a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068aa:	f000 b8cd 	b.w	8006a48 <__malloc_unlock>
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	d90b      	bls.n	80068ca <_free_r+0x4e>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1862      	adds	r2, r4, r1
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bf04      	itt	eq
 80068ba:	681a      	ldreq	r2, [r3, #0]
 80068bc:	685b      	ldreq	r3, [r3, #4]
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	bf04      	itt	eq
 80068c2:	1852      	addeq	r2, r2, r1
 80068c4:	6022      	streq	r2, [r4, #0]
 80068c6:	602c      	str	r4, [r5, #0]
 80068c8:	e7ec      	b.n	80068a4 <_free_r+0x28>
 80068ca:	461a      	mov	r2, r3
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b10b      	cbz	r3, 80068d4 <_free_r+0x58>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d9fa      	bls.n	80068ca <_free_r+0x4e>
 80068d4:	6811      	ldr	r1, [r2, #0]
 80068d6:	1855      	adds	r5, r2, r1
 80068d8:	42a5      	cmp	r5, r4
 80068da:	d10b      	bne.n	80068f4 <_free_r+0x78>
 80068dc:	6824      	ldr	r4, [r4, #0]
 80068de:	4421      	add	r1, r4
 80068e0:	1854      	adds	r4, r2, r1
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	d1dd      	bne.n	80068a4 <_free_r+0x28>
 80068e8:	681c      	ldr	r4, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	6053      	str	r3, [r2, #4]
 80068ee:	4421      	add	r1, r4
 80068f0:	6011      	str	r1, [r2, #0]
 80068f2:	e7d7      	b.n	80068a4 <_free_r+0x28>
 80068f4:	d902      	bls.n	80068fc <_free_r+0x80>
 80068f6:	230c      	movs	r3, #12
 80068f8:	6003      	str	r3, [r0, #0]
 80068fa:	e7d3      	b.n	80068a4 <_free_r+0x28>
 80068fc:	6825      	ldr	r5, [r4, #0]
 80068fe:	1961      	adds	r1, r4, r5
 8006900:	428b      	cmp	r3, r1
 8006902:	bf04      	itt	eq
 8006904:	6819      	ldreq	r1, [r3, #0]
 8006906:	685b      	ldreq	r3, [r3, #4]
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	bf04      	itt	eq
 800690c:	1949      	addeq	r1, r1, r5
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	6054      	str	r4, [r2, #4]
 8006912:	e7c7      	b.n	80068a4 <_free_r+0x28>
 8006914:	b003      	add	sp, #12
 8006916:	bd30      	pop	{r4, r5, pc}
 8006918:	200000ec 	.word	0x200000ec

0800691c <_malloc_r>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	1ccd      	adds	r5, r1, #3
 8006920:	f025 0503 	bic.w	r5, r5, #3
 8006924:	3508      	adds	r5, #8
 8006926:	2d0c      	cmp	r5, #12
 8006928:	bf38      	it	cc
 800692a:	250c      	movcc	r5, #12
 800692c:	2d00      	cmp	r5, #0
 800692e:	4606      	mov	r6, r0
 8006930:	db01      	blt.n	8006936 <_malloc_r+0x1a>
 8006932:	42a9      	cmp	r1, r5
 8006934:	d903      	bls.n	800693e <_malloc_r+0x22>
 8006936:	230c      	movs	r3, #12
 8006938:	6033      	str	r3, [r6, #0]
 800693a:	2000      	movs	r0, #0
 800693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693e:	f000 f87d 	bl	8006a3c <__malloc_lock>
 8006942:	4921      	ldr	r1, [pc, #132]	; (80069c8 <_malloc_r+0xac>)
 8006944:	680a      	ldr	r2, [r1, #0]
 8006946:	4614      	mov	r4, r2
 8006948:	b99c      	cbnz	r4, 8006972 <_malloc_r+0x56>
 800694a:	4f20      	ldr	r7, [pc, #128]	; (80069cc <_malloc_r+0xb0>)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	b923      	cbnz	r3, 800695a <_malloc_r+0x3e>
 8006950:	4621      	mov	r1, r4
 8006952:	4630      	mov	r0, r6
 8006954:	f000 f862 	bl	8006a1c <_sbrk_r>
 8006958:	6038      	str	r0, [r7, #0]
 800695a:	4629      	mov	r1, r5
 800695c:	4630      	mov	r0, r6
 800695e:	f000 f85d 	bl	8006a1c <_sbrk_r>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d123      	bne.n	80069ae <_malloc_r+0x92>
 8006966:	230c      	movs	r3, #12
 8006968:	6033      	str	r3, [r6, #0]
 800696a:	4630      	mov	r0, r6
 800696c:	f000 f86c 	bl	8006a48 <__malloc_unlock>
 8006970:	e7e3      	b.n	800693a <_malloc_r+0x1e>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	1b5b      	subs	r3, r3, r5
 8006976:	d417      	bmi.n	80069a8 <_malloc_r+0x8c>
 8006978:	2b0b      	cmp	r3, #11
 800697a:	d903      	bls.n	8006984 <_malloc_r+0x68>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	441c      	add	r4, r3
 8006980:	6025      	str	r5, [r4, #0]
 8006982:	e004      	b.n	800698e <_malloc_r+0x72>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	42a2      	cmp	r2, r4
 8006988:	bf0c      	ite	eq
 800698a:	600b      	streq	r3, [r1, #0]
 800698c:	6053      	strne	r3, [r2, #4]
 800698e:	4630      	mov	r0, r6
 8006990:	f000 f85a 	bl	8006a48 <__malloc_unlock>
 8006994:	f104 000b 	add.w	r0, r4, #11
 8006998:	1d23      	adds	r3, r4, #4
 800699a:	f020 0007 	bic.w	r0, r0, #7
 800699e:	1ac2      	subs	r2, r0, r3
 80069a0:	d0cc      	beq.n	800693c <_malloc_r+0x20>
 80069a2:	1a1b      	subs	r3, r3, r0
 80069a4:	50a3      	str	r3, [r4, r2]
 80069a6:	e7c9      	b.n	800693c <_malloc_r+0x20>
 80069a8:	4622      	mov	r2, r4
 80069aa:	6864      	ldr	r4, [r4, #4]
 80069ac:	e7cc      	b.n	8006948 <_malloc_r+0x2c>
 80069ae:	1cc4      	adds	r4, r0, #3
 80069b0:	f024 0403 	bic.w	r4, r4, #3
 80069b4:	42a0      	cmp	r0, r4
 80069b6:	d0e3      	beq.n	8006980 <_malloc_r+0x64>
 80069b8:	1a21      	subs	r1, r4, r0
 80069ba:	4630      	mov	r0, r6
 80069bc:	f000 f82e 	bl	8006a1c <_sbrk_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1dd      	bne.n	8006980 <_malloc_r+0x64>
 80069c4:	e7cf      	b.n	8006966 <_malloc_r+0x4a>
 80069c6:	bf00      	nop
 80069c8:	200000ec 	.word	0x200000ec
 80069cc:	200000f0 	.word	0x200000f0

080069d0 <_realloc_r>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	4607      	mov	r7, r0
 80069d4:	4614      	mov	r4, r2
 80069d6:	460e      	mov	r6, r1
 80069d8:	b921      	cbnz	r1, 80069e4 <_realloc_r+0x14>
 80069da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069de:	4611      	mov	r1, r2
 80069e0:	f7ff bf9c 	b.w	800691c <_malloc_r>
 80069e4:	b922      	cbnz	r2, 80069f0 <_realloc_r+0x20>
 80069e6:	f7ff ff49 	bl	800687c <_free_r>
 80069ea:	4625      	mov	r5, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f0:	f000 f830 	bl	8006a54 <_malloc_usable_size_r>
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d20f      	bcs.n	8006a18 <_realloc_r+0x48>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff ff8e 	bl	800691c <_malloc_r>
 8006a00:	4605      	mov	r5, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d0f2      	beq.n	80069ec <_realloc_r+0x1c>
 8006a06:	4631      	mov	r1, r6
 8006a08:	4622      	mov	r2, r4
 8006a0a:	f7ff ff0f 	bl	800682c <memcpy>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7ff ff33 	bl	800687c <_free_r>
 8006a16:	e7e9      	b.n	80069ec <_realloc_r+0x1c>
 8006a18:	4635      	mov	r5, r6
 8006a1a:	e7e7      	b.n	80069ec <_realloc_r+0x1c>

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_sbrk_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fb ff92 	bl	8002950 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	200002c4 	.word	0x200002c4

08006a3c <__malloc_lock>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__malloc_lock+0x8>)
 8006a3e:	f000 b811 	b.w	8006a64 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	200002cc 	.word	0x200002cc

08006a48 <__malloc_unlock>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__malloc_unlock+0x8>)
 8006a4a:	f000 b80c 	b.w	8006a66 <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	200002cc 	.word	0x200002cc

08006a54 <_malloc_usable_size_r>:
 8006a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a58:	1f18      	subs	r0, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfbc      	itt	lt
 8006a5e:	580b      	ldrlt	r3, [r1, r0]
 8006a60:	18c0      	addlt	r0, r0, r3
 8006a62:	4770      	bx	lr

08006a64 <__retarget_lock_acquire_recursive>:
 8006a64:	4770      	bx	lr

08006a66 <__retarget_lock_release_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <_init>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr

08006a74 <_fini>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr
