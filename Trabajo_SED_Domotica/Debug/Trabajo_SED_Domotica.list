
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005194  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080054ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000001f0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011db0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e56  00000000  00000000  00031e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  00034d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002232b  00000000  00000000  00035d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cea  00000000  00000000  000580bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d91fd  00000000  00000000  0006ada5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143fa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047e8  00000000  00000000  00143ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005304 	.word	0x08005304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08005304 	.word	0x08005304

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <setLuces>:

ADC_HandleTypeDef hadc1;
int estado_luces=0;
int modo_luces=0; //0 manual 1 auto

void setLuces(int n){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(n==0){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d106      	bne.n	80004ec <setLuces+0x1c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <setLuces+0x38>)
 80004e6:	f003 f95d 	bl	80037a4 <HAL_GPIO_WritePin>
 80004ea:	e005      	b.n	80004f8 <setLuces+0x28>

	}else{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <setLuces+0x38>)
 80004f4:	f003 f956 	bl	80037a4 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <setLuces+0x3c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020c00 	.word	0x40020c00
 800050c:	200000b0 	.word	0x200000b0

08000510 <getEstadoLuces>:

int getEstadoLuces(){
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	return estado_luces;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <getEstadoLuces+0x14>)
 8000516:	681b      	ldr	r3, [r3, #0]
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200000b0 	.word	0x200000b0

08000528 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	if(estado_luces==0){
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <cambiarEstadoLuces+0x20>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <cambiarEstadoLuces+0x14>
		setLuces(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ffcb 	bl	80004d0 <setLuces>
	}else{
		setLuces(0);
	}
}
 800053a:	e002      	b.n	8000542 <cambiarEstadoLuces+0x1a>
		setLuces(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ffc7 	bl	80004d0 <setLuces>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000b0 	.word	0x200000b0

0800054c <medirLDR>:
	}else{
		setModoLuces(0);
	}
}

void medirLDR(){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	if(modo_luces==1){
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <medirLDR+0x3c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d111      	bne.n	800057e <medirLDR+0x32>
		int8_t adcval;
			HAL_ADC_Start(&hadc1);
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <medirLDR+0x40>)
 800055c:	f002 faa0 	bl	8002aa0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000560:	2164      	movs	r1, #100	; 0x64
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <medirLDR+0x40>)
 8000564:	f002 fba1 	bl	8002caa <HAL_ADC_PollForConversion>
			adcval=HAL_ADC_GetValue(&hadc1);
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <medirLDR+0x40>)
 800056a:	f002 fc29 	bl	8002dc0 <HAL_ADC_GetValue>
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
			HAL_ADC_Stop(&hadc1);
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <medirLDR+0x40>)
 8000574:	f002 fb66 	bl	8002c44 <HAL_ADC_Stop>
			if(adcval>500)
				setLuces(1);
			else
				setLuces(0);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffa9 	bl	80004d0 <setLuces>
	}
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000b4 	.word	0x200000b4
 800058c:	200001a4 	.word	0x200001a4

08000590 <luces>:

void luces(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	medirLDR();
 8000594:	f7ff ffda 	bl	800054c <medirLDR>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <clrScr>:
#include "control_luces.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 80005a6:	1dfa      	adds	r2, r7, #7
 80005a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2110      	movs	r1, #16
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <clrScr+0x24>)
 80005b4:	f003 fa6c 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 80005d0:	2302      	movs	r3, #2
 80005d2:	753b      	strb	r3, [r7, #20]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	757b      	strb	r3, [r7, #21]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	75bb      	strb	r3, [r7, #22]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 80005e6:	f107 0214 	add.w	r2, r7, #20
 80005ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2304      	movs	r3, #4
 80005f2:	2110      	movs	r1, #16
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <setColor+0x40>)
 80005f6:	f003 fa4b 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000e4 	.word	0x200000e4

08000608 <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 8000614:	2303      	movs	r3, #3
 8000616:	753b      	strb	r3, [r7, #20]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	757b      	strb	r3, [r7, #21]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	75bb      	strb	r3, [r7, #22]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 800062a:	f107 0214 	add.w	r2, r7, #20
 800062e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2304      	movs	r3, #4
 8000636:	2110      	movs	r1, #16
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <setBackColor+0x40>)
 800063a:	f003 fa29 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000e4 	.word	0x200000e4

0800064c <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af02      	add	r7, sp, #8
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2bff      	cmp	r3, #255	; 0xff
 800066c:	dd01      	ble.n	8000672 <drawRect+0x26>
		desb[0] = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2bff      	cmp	r3, #255	; 0xff
 8000676:	dd01      	ble.n	800067c <drawRect+0x30>
		desb[1] = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2bff      	cmp	r3, #255	; 0xff
 8000680:	dd01      	ble.n	8000686 <drawRect+0x3a>
		desb[2] = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	dd01      	ble.n	8000690 <drawRect+0x44>
		desb[3] = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8000690:	2304      	movs	r3, #4
 8000692:	753b      	strb	r3, [r7, #20]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	757b      	strb	r3, [r7, #21]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	75bb      	strb	r3, [r7, #22]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	75fb      	strb	r3, [r7, #23]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	763b      	strb	r3, [r7, #24]
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	767b      	strb	r3, [r7, #25]
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	76bb      	strb	r3, [r7, #26]
 80006b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	76fb      	strb	r3, [r7, #27]
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 80006c4:	f107 0214 	add.w	r2, r7, #20
 80006c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2309      	movs	r3, #9
 80006d0:	2110      	movs	r1, #16
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <drawRect+0x94>)
 80006d4:	f003 f9dc 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 80006d8:	bf00      	nop
 80006da:	3730      	adds	r7, #48	; 0x30
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000e4 	.word	0x200000e4

080006e4 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2bff      	cmp	r3, #255	; 0xff
 8000704:	dd01      	ble.n	800070a <fillRect+0x26>
		desb[0] = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2bff      	cmp	r3, #255	; 0xff
 800070e:	dd01      	ble.n	8000714 <fillRect+0x30>
		desb[1] = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2bff      	cmp	r3, #255	; 0xff
 8000718:	dd01      	ble.n	800071e <fillRect+0x3a>
		desb[2] = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	dd01      	ble.n	8000728 <fillRect+0x44>
		desb[3] = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	757b      	strb	r3, [r7, #21]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	75bb      	strb	r3, [r7, #22]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	75fb      	strb	r3, [r7, #23]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	763b      	strb	r3, [r7, #24]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	767b      	strb	r3, [r7, #25]
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	b2db      	uxtb	r3, r3
 800074e:	76bb      	strb	r3, [r7, #26]
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	b2db      	uxtb	r3, r3
 8000754:	76fb      	strb	r3, [r7, #27]
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	b2db      	uxtb	r3, r3
 800075a:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 800075c:	f107 0214 	add.w	r2, r7, #20
 8000760:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2309      	movs	r3, #9
 8000768:	2110      	movs	r1, #16
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <fillRect+0x94>)
 800076c:	f003 f990 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000e4 	.word	0x200000e4

0800077c <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b098      	sub	sp, #96	; 0x60
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
 800078c:	2300      	movs	r3, #0
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	dd01      	ble.n	800079a <print+0x1e>
		desb[0] = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	dd01      	ble.n	80007a4 <print+0x28>
		desb[1] = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 80007a4:	2306      	movs	r3, #6
 80007a6:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd0d 	bl	80001c8 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 80007b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 80007be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 80007c4:	2304      	movs	r3, #4
 80007c6:	657b      	str	r3, [r7, #84]	; 0x54
 80007c8:	e00d      	b.n	80007e6 <print+0x6a>
		cadena[i] = t[i - 4];
 80007ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007cc:	3b04      	subs	r3, #4
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4413      	add	r3, r2
 80007d2:	7819      	ldrb	r1, [r3, #0]
 80007d4:	f107 0214 	add.w	r2, r7, #20
 80007d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007da:	4413      	add	r3, r2
 80007dc:	460a      	mov	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 80007e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e2:	3301      	adds	r3, #1
 80007e4:	657b      	str	r3, [r7, #84]	; 0x54
 80007e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007e8:	3303      	adds	r3, #3
 80007ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007ec:	429a      	cmp	r2, r3
 80007ee:	ddec      	ble.n	80007ca <print+0x4e>
	}
	cadena[longitud + 4] = x;
 80007f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f2:	3304      	adds	r3, #4
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80007fc:	440b      	add	r3, r1
 80007fe:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 8000802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000804:	3305      	adds	r3, #5
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800080e:	440b      	add	r3, r1
 8000810:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 8000814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000816:	b29b      	uxth	r3, r3
 8000818:	3306      	adds	r3, #6
 800081a:	b29b      	uxth	r3, r3
 800081c:	f107 0214 	add.w	r2, r7, #20
 8000820:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000824:	9100      	str	r1, [sp, #0]
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <print+0xbc>)
 800082a:	f003 f931 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 800082e:	bf00      	nop
 8000830:	3758      	adds	r7, #88	; 0x58
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000e4 	.word	0x200000e4

0800083c <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e01b      	b.n	800088c <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	4413      	add	r3, r2
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4619      	mov	r1, r3
 8000868:	f7ff ff88 	bl	800077c <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fca6 	bl	80001c8 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	00da      	lsls	r2, r3, #3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	4413      	add	r3, r2
 8000884:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbdf      	blt.n	8000854 <printfrase+0x18>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 80008a8:	2307      	movs	r3, #7
 80008aa:	733b      	strb	r3, [r7, #12]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	2110      	movs	r1, #16
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <setFont+0x30>)
 80008c2:	f003 f8e5 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000e4 	.word	0x200000e4

080008d4 <fillCircle>:
	}
	uint8_t coord[7] = { 8, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
}
//Imprime circulos rellenos
void fillCircle(int x, int y, int r) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int desb[3] = { 0, 0, 0 };
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (x > 255) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2bff      	cmp	r3, #255	; 0xff
 80008f0:	dd01      	ble.n	80008f6 <fillCircle+0x22>
		desb[0] = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
	}
	if (y > 255) {
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	2bff      	cmp	r3, #255	; 0xff
 80008fa:	dd01      	ble.n	8000900 <fillCircle+0x2c>
		desb[1] = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
	}
	if (r > 255) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2bff      	cmp	r3, #255	; 0xff
 8000904:	dd01      	ble.n	800090a <fillCircle+0x36>
		desb[2] = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	}
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
 800090a:	2309      	movs	r3, #9
 800090c:	753b      	strb	r3, [r7, #20]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	757b      	strb	r3, [r7, #21]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	75bb      	strb	r3, [r7, #22]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	75fb      	strb	r3, [r7, #23]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	763b      	strb	r3, [r7, #24]
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	767b      	strb	r3, [r7, #25]
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	b2db      	uxtb	r3, r3
 8000930:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
 8000932:	f107 0214 	add.w	r2, r7, #20
 8000936:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2307      	movs	r3, #7
 800093e:	2110      	movs	r1, #16
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <fillCircle+0x7c>)
 8000942:	f003 f8a5 	bl	8003a90 <HAL_I2C_Master_Transmit>
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e4 	.word	0x200000e4

08000954 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 8000954:	b490      	push	{r4, r7}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 8000962:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <botones+0x130>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 8000968:	4a47      	ldr	r2, [pc, #284]	; (8000a88 <botones+0x134>)
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 800096e:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <botones+0x138>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000974:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <botones+0x13c>)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 800097a:	4a46      	ldr	r2, [pc, #280]	; (8000a94 <botones+0x140>)
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 8000980:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <botones+0x144>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <botones+0x148>)
 8000988:	461c      	mov	r4, r3
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <botones+0x14c>)
 8000998:	461c      	mov	r4, r3
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <botones+0x150>)
 80009a8:	461c      	mov	r4, r3
 80009aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <botones+0x154>)
 80009b8:	461c      	mov	r4, r3
 80009ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 80009c6:	4a39      	ldr	r2, [pc, #228]	; (8000aac <botones+0x158>)
 80009c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ca:	6013      	str	r3, [r2, #0]
	columnas = c;
 80009cc:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <botones+0x15c>)
 80009ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d0:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <botones+0x15c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d013      	beq.n	8000a02 <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <botones+0x138>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a34      	ldr	r2, [pc, #208]	; (8000ab0 <botones+0x15c>)
 80009e0:	6812      	ldr	r2, [r2, #0]
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <botones+0x130>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	1ad2      	subs	r2, r2, r3
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <botones+0x15c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009fc:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <botones+0x160>)
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e011      	b.n	8000a26 <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <botones+0x138>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <botones+0x15c>)
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <botones+0x130>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <botones+0x15c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <botones+0x160>)
 8000a24:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <botones+0x158>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d013      	beq.n	8000a56 <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <botones+0x13c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <botones+0x158>)
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
 8000a3a:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <botones+0x134>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <botones+0x158>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <botones+0x164>)
 8000a52:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 8000a54:	e011      	b.n	8000a7a <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <botones+0x13c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <botones+0x158>)
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <botones+0x134>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	1ad2      	subs	r2, r2, r3
				/ filas;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <botones+0x158>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <botones+0x164>)
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc90      	pop	{r4, r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	20000010 	.word	0x20000010
 8000a98:	20000014 	.word	0x20000014
 8000a9c:	20000018 	.word	0x20000018
 8000aa0:	20000024 	.word	0x20000024
 8000aa4:	20000030 	.word	0x20000030
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	20000048 	.word	0x20000048
 8000ab0:	2000004c 	.word	0x2000004c
 8000ab4:	200001ec 	.word	0x200001ec
 8000ab8:	2000027c 	.word	0x2000027c

08000abc <crear_botonera>:

void crear_botonera() {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e05d      	b.n	8000b84 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	e052      	b.n	8000b74 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <crear_botonera+0xdc>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <crear_botonera+0xe0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	fb02 f203 	mul.w	r2, r2, r3
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <crear_botonera+0xe4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000ae2:	4413      	add	r3, r2
 8000ae4:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <crear_botonera+0xe8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <crear_botonera+0xec>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	fb02 f203 	mul.w	r2, r2, r3
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <crear_botonera+0xf0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <crear_botonera+0xf4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <crear_botonera+0xf4>)
 8000b04:	6851      	ldr	r1, [r2, #4]
 8000b06:	4a2a      	ldr	r2, [pc, #168]	; (8000bb0 <crear_botonera+0xf4>)
 8000b08:	6892      	ldr	r2, [r2, #8]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd5a 	bl	80005c4 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <crear_botonera+0xf8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	1ad0      	subs	r0, r2, r3
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <crear_botonera+0xf8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <crear_botonera+0xe0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <crear_botonera+0xf8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <crear_botonera+0xec>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <crear_botonera+0xf8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4622      	mov	r2, r4
 8000b3e:	f7ff fdd1 	bl	80006e4 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <crear_botonera+0xfc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <crear_botonera+0xfc>)
 8000b48:	6851      	ldr	r1, [r2, #4]
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <crear_botonera+0xfc>)
 8000b4c:	6892      	ldr	r2, [r2, #8]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd38 	bl	80005c4 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <crear_botonera+0xe0>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <crear_botonera+0xec>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	460a      	mov	r2, r1
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fdbb 	bl	80006e4 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <crear_botonera+0x100>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dba7      	blt.n	8000ace <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <crear_botonera+0x104>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	db9c      	blt.n	8000ac8 <crear_botonera+0xc>
		}
	}
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	200001ec 	.word	0x200001ec
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	2000027c 	.word	0x2000027c
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	20000024 	.word	0x20000024
 8000bb4:	20000010 	.word	0x20000010
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	2000004c 	.word	0x2000004c
 8000bc0:	20000048 	.word	0x20000048

08000bc4 <resaltar_boton>:

void resaltar_boton(int b) {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08d      	sub	sp, #52	; 0x34
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int j = 0; j < filas; j++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd4:	e083      	b.n	8000cde <resaltar_boton+0x11a>
		for (int i = 0; i < columnas; i++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e078      	b.n	8000cce <resaltar_boton+0x10a>
			if (boton_resaltado == k) {
 8000bdc:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <resaltar_boton+0x218>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d16d      	bne.n	8000cc2 <resaltar_boton+0xfe>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000be6:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <resaltar_boton+0x21c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b7e      	ldr	r3, [pc, #504]	; (8000de4 <resaltar_boton+0x220>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf2:	fb02 f203 	mul.w	r2, r2, r3
 8000bf6:	4b7c      	ldr	r3, [pc, #496]	; (8000de8 <resaltar_boton+0x224>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000bfa:	4413      	add	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000bfe:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <resaltar_boton+0x228>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b7b      	ldr	r3, [pc, #492]	; (8000df0 <resaltar_boton+0x22c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c0a:	fb02 f203 	mul.w	r2, r2, r3
 8000c0e:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <resaltar_boton+0x230>)
 8000c10:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
				setColor(0, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fcd2 	bl	80005c4 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c20:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <resaltar_boton+0x234>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	1ad0      	subs	r0, r2, r3
 8000c28:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <resaltar_boton+0x234>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000c30:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <resaltar_boton+0x220>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c38:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <resaltar_boton+0x234>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000c3e:	4b6c      	ldr	r3, [pc, #432]	; (8000df0 <resaltar_boton+0x22c>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <resaltar_boton+0x234>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4622      	mov	r2, r4
 8000c4e:	f7ff fd49 	bl	80006e4 <fillRect>
				setColor(cmarco.r, cmarco.g, cmarco.b);
 8000c52:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <resaltar_boton+0x238>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a69      	ldr	r2, [pc, #420]	; (8000dfc <resaltar_boton+0x238>)
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <resaltar_boton+0x238>)
 8000c5c:	6892      	ldr	r2, [r2, #8]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fcb0 	bl	80005c4 <setColor>
				fillRect(x - marco_boton, y - marco_boton,
 8000c64:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <resaltar_boton+0x23c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	1ad0      	subs	r0, r2, r3
 8000c6c:	4b64      	ldr	r3, [pc, #400]	; (8000e00 <resaltar_boton+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + marco_boton,
 8000c74:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <resaltar_boton+0x220>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c7c:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <resaltar_boton+0x23c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	18d4      	adds	r4, r2, r3
						y + alto_boton + marco_boton);
 8000c82:	4b5b      	ldr	r3, [pc, #364]	; (8000df0 <resaltar_boton+0x22c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <resaltar_boton+0x23c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4622      	mov	r2, r4
 8000c92:	f7ff fd27 	bl	80006e4 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000c96:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <resaltar_boton+0x240>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	; (8000e04 <resaltar_boton+0x240>)
 8000c9c:	6851      	ldr	r1, [r2, #4]
 8000c9e:	4a59      	ldr	r2, [pc, #356]	; (8000e04 <resaltar_boton+0x240>)
 8000ca0:	6892      	ldr	r2, [r2, #8]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc8e 	bl	80005c4 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <resaltar_boton+0x220>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	18d1      	adds	r1, r2, r3
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <resaltar_boton+0x22c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	460a      	mov	r2, r1
 8000cba:	68f9      	ldr	r1, [r7, #12]
 8000cbc:	6938      	ldr	r0, [r7, #16]
 8000cbe:	f7ff fd11 	bl	80006e4 <fillRect>
			}
			k++;
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	3301      	adds	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <resaltar_boton+0x244>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	db81      	blt.n	8000bdc <resaltar_boton+0x18>
	for (int j = 0; j < filas; j++) {
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	3301      	adds	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <resaltar_boton+0x248>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f6ff af76 	blt.w	8000bd6 <resaltar_boton+0x12>
		}
	}
	k = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	boton_resaltado = b;
 8000cee:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <resaltar_boton+0x218>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < filas; j++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	e065      	b.n	8000dc6 <resaltar_boton+0x202>
		for (int i = 0; i < columnas; i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	e05a      	b.n	8000db6 <resaltar_boton+0x1f2>
			if (boton_resaltado == k) {
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <resaltar_boton+0x218>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d14f      	bne.n	8000daa <resaltar_boton+0x1e6>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <resaltar_boton+0x21c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <resaltar_boton+0x220>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	fb02 f203 	mul.w	r2, r2, r3
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <resaltar_boton+0x224>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000d1e:	4413      	add	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <resaltar_boton+0x228>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <resaltar_boton+0x22c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	6a3a      	ldr	r2, [r7, #32]
 8000d2e:	fb02 f203 	mul.w	r2, r2, r3
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <resaltar_boton+0x230>)
 8000d34:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]
				setColor(cmarcon.r, cmarcon.g, cmarcon.b);
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <resaltar_boton+0x24c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a34      	ldr	r2, [pc, #208]	; (8000e10 <resaltar_boton+0x24c>)
 8000d40:	6851      	ldr	r1, [r2, #4]
 8000d42:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <resaltar_boton+0x24c>)
 8000d44:	6892      	ldr	r2, [r2, #8]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fc3c 	bl	80005c4 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <resaltar_boton+0x234>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	1ad0      	subs	r0, r2, r3
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <resaltar_boton+0x234>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <resaltar_boton+0x220>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <resaltar_boton+0x234>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <resaltar_boton+0x22c>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <resaltar_boton+0x234>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4622      	mov	r2, r4
 8000d7a:	f7ff fcb3 	bl	80006e4 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <resaltar_boton+0x240>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <resaltar_boton+0x240>)
 8000d84:	6851      	ldr	r1, [r2, #4]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <resaltar_boton+0x240>)
 8000d88:	6892      	ldr	r2, [r2, #8]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc1a 	bl	80005c4 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <resaltar_boton+0x220>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	18d1      	adds	r1, r2, r3
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <resaltar_boton+0x22c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4413      	add	r3, r2
 8000da0:	460a      	mov	r2, r1
 8000da2:	6979      	ldr	r1, [r7, #20]
 8000da4:	69b8      	ldr	r0, [r7, #24]
 8000da6:	f7ff fc9d 	bl	80006e4 <fillRect>
			}
			k++;
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	3301      	adds	r3, #1
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	3301      	adds	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <resaltar_boton+0x244>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	db9f      	blt.n	8000d00 <resaltar_boton+0x13c>
	for (int j = 0; j < filas; j++) {
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <resaltar_boton+0x248>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a3a      	ldr	r2, [r7, #32]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	db94      	blt.n	8000cfa <resaltar_boton+0x136>
		}
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3734      	adds	r7, #52	; 0x34
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000b8 	.word	0x200000b8
 8000de0:	200001ec 	.word	0x200001ec
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000000 	.word	0x20000000
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000014 	.word	0x20000014
 8000dfc:	20000024 	.word	0x20000024
 8000e00:	20000010 	.word	0x20000010
 8000e04:	20000018 	.word	0x20000018
 8000e08:	2000004c 	.word	0x2000004c
 8000e0c:	20000048 	.word	0x20000048
 8000e10:	20000030 	.word	0x20000030

08000e14 <rellenar_botones>:

void rellenar_botones(const char *t[]) {
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000e20:	2310      	movs	r3, #16
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000e24:	2310      	movs	r3, #16
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000e28:	4b99      	ldr	r3, [pc, #612]	; (8001090 <rellenar_botones+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a98      	ldr	r2, [pc, #608]	; (8001090 <rellenar_botones+0x27c>)
 8000e2e:	6851      	ldr	r1, [r2, #4]
 8000e30:	4a97      	ldr	r2, [pc, #604]	; (8001090 <rellenar_botones+0x27c>)
 8000e32:	6892      	ldr	r2, [r2, #8]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fbc5 	bl	80005c4 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000e3a:	4b96      	ldr	r3, [pc, #600]	; (8001094 <rellenar_botones+0x280>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a95      	ldr	r2, [pc, #596]	; (8001094 <rellenar_botones+0x280>)
 8000e40:	6851      	ldr	r1, [r2, #4]
 8000e42:	4a94      	ldr	r2, [pc, #592]	; (8001094 <rellenar_botones+0x280>)
 8000e44:	6892      	ldr	r2, [r2, #8]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fbde 	bl	8000608 <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8000e50:	e112      	b.n	8001078 <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e56:	e106      	b.n	8001066 <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000e58:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <rellenar_botones+0x284>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b8f      	ldr	r3, [pc, #572]	; (800109c <rellenar_botones+0x288>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e64:	fb02 f203 	mul.w	r2, r2, r3
 8000e68:	4b8d      	ldr	r3, [pc, #564]	; (80010a0 <rellenar_botones+0x28c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000e6c:	4413      	add	r3, r2
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <rellenar_botones+0x290>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b8c      	ldr	r3, [pc, #560]	; (80010a8 <rellenar_botones+0x294>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e7c:	fb02 f203 	mul.w	r2, r2, r3
 8000e80:	4b8a      	ldr	r3, [pc, #552]	; (80010ac <rellenar_botones+0x298>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff f995 	bl	80001c8 <strlen>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ea2:	fb03 f302 	mul.w	r3, r3, r2
 8000ea6:	4a7d      	ldr	r2, [pc, #500]	; (800109c <rellenar_botones+0x288>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d82d      	bhi.n	8000f0a <rellenar_botones+0xf6>
				print(t[k - 1],
 8000eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000ebe:	4b77      	ldr	r3, [pc, #476]	; (800109c <rellenar_botones+0x288>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f977 	bl	80001c8 <strlen>
 8000eda:	4602      	mov	r2, r0
 8000edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ede:	fb03 f302 	mul.w	r3, r3, r2
 8000ee2:	1aeb      	subs	r3, r5, r3
 8000ee4:	085a      	lsrs	r2, r3, #1
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee8:	4413      	add	r3, r2
				print(t[k - 1],
 8000eea:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000eec:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <rellenar_botones+0x294>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	0fda      	lsrs	r2, r3, #31
 8000ef6:	4413      	add	r3, r2
 8000ef8:	105b      	asrs	r3, r3, #1
 8000efa:	461a      	mov	r2, r3
				print(t[k - 1],
 8000efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efe:	4413      	add	r3, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fc3a 	bl	800077c <print>
 8000f08:	e0a7      	b.n	800105a <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f0e:	e00e      	b.n	8000f2e <rellenar_botones+0x11a>
					t1[i] = 0;
 8000f10:	f107 021c 	add.w	r2, r7, #28
 8000f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f16:	4413      	add	r3, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f30:	2b13      	cmp	r3, #19
 8000f32:	dded      	ble.n	8000f10 <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
 8000f38:	e013      	b.n	8000f62 <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f40:	3b01      	subs	r3, #1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4c:	4413      	add	r3, r2
 8000f4e:	7819      	ldrb	r1, [r3, #0]
 8000f50:	f107 021c 	add.w	r2, r7, #28
 8000f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f56:	4413      	add	r3, r2
 8000f58:	460a      	mov	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f5e:	3301      	adds	r3, #1
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
 8000f62:	4b4e      	ldr	r3, [pc, #312]	; (800109c <rellenar_botones+0x288>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbe3      	blt.n	8000f3a <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <rellenar_botones+0x288>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f7e:	e019      	b.n	8000fb4 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f86:	3b01      	subs	r3, #1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f92:	441a      	add	r2, r3
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <rellenar_botones+0x288>)
 8000f96:	6819      	ldr	r1, [r3, #0]
 8000f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9a:	fb91 f3f3 	sdiv	r3, r1, r3
 8000f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000fa8:	440b      	add	r3, r1
 8000faa:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8000fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f8ff 	bl	80001c8 <strlen>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d2d6      	bcs.n	8000f80 <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <rellenar_botones+0x288>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461c      	mov	r4, r3
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f8f3 	bl	80001c8 <strlen>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe6:	fb03 f302 	mul.w	r3, r3, r2
 8000fea:	1ae3      	subs	r3, r4, r3
 8000fec:	085a      	lsrs	r2, r3, #1
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <rellenar_botones+0x294>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	0fda      	lsrs	r2, r3, #31
 8001000:	4413      	add	r3, r2
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8001006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001008:	441a      	add	r2, r3
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fbb4 	bl	800077c <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <rellenar_botones+0x288>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	461c      	mov	r4, r3
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8d2 	bl	80001c8 <strlen>
 8001024:	4602      	mov	r2, r0
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	fb03 f302 	mul.w	r3, r3, r2
 800102c:	1ae3      	subs	r3, r4, r3
 800102e:	085a      	lsrs	r2, r3, #1
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	4413      	add	r3, r2
 8001034:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <rellenar_botones+0x294>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	0fda      	lsrs	r2, r3, #31
 8001042:	4413      	add	r3, r2
 8001044:	105b      	asrs	r3, r3, #1
 8001046:	461a      	mov	r2, r3
 8001048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104a:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 800104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104e:	441a      	add	r2, r3
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fb91 	bl	800077c <print>
			}

			k++;
 800105a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800105c:	3301      	adds	r3, #1
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 8001060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001062:	3301      	adds	r3, #1
 8001064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <rellenar_botones+0x29c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800106c:	429a      	cmp	r2, r3
 800106e:	f6ff aef3 	blt.w	8000e58 <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8001072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001074:	3301      	adds	r3, #1
 8001076:	653b      	str	r3, [r7, #80]	; 0x50
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <rellenar_botones+0x2a0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800107e:	429a      	cmp	r2, r3
 8001080:	f6ff aee7 	blt.w	8000e52 <rellenar_botones+0x3e>
		}
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3758      	adds	r7, #88	; 0x58
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	2000003c 	.word	0x2000003c
 8001094:	20000018 	.word	0x20000018
 8001098:	200001ec 	.word	0x200001ec
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000000 	.word	0x20000000
 80010a4:	2000027c 	.word	0x2000027c
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	20000004 	.word	0x20000004
 80010b0:	2000004c 	.word	0x2000004c
 80010b4:	20000048 	.word	0x20000048

080010b8 <pantalla_principal>:

//-------------------------------------------------------------------------------//

void pantalla_principal() {
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b0a8      	sub	sp, #160	; 0xa0
 80010bc:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
 80010be:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <pantalla_principal+0x180>)
 80010c0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80010c4:	461d      	mov	r5, r3
 80010c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010ce:	e884 0003 	stmia.w	r4, {r0, r1}
			"SEGURIDAD" };
	rgb boton = { 0, 0, 255 };
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d6:	2300      	movs	r3, #0
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 80010de:	4a57      	ldr	r2, [pc, #348]	; (800123c <pantalla_principal+0x184>)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <pantalla_principal+0x184>)
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 8001102:	f7ff fa4b 	bl	800059c <clrScr>
	setColor(255, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	20ff      	movs	r0, #255	; 0xff
 800110c:	f7ff fa5a 	bl	80005c4 <setColor>
	fillRect(1, 1, 478, 40);
 8001110:	2328      	movs	r3, #40	; 0x28
 8001112:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff fae3 	bl	80006e4 <fillRect>
	setColor(64, 64, 64);
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	2040      	movs	r0, #64	; 0x40
 8001124:	f7ff fa4e 	bl	80005c4 <setColor>
	fillRect(1, 318, 478, 280);
 8001128:	f44f 738c 	mov.w	r3, #280	; 0x118
 800112c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001130:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff fad5 	bl	80006e4 <fillRect>
	setColor(255, 255, 255);
 800113a:	22ff      	movs	r2, #255	; 0xff
 800113c:	21ff      	movs	r1, #255	; 0xff
 800113e:	20ff      	movs	r0, #255	; 0xff
 8001140:	f7ff fa40 	bl	80005c4 <setColor>
	setBackColor(255, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	20ff      	movs	r0, #255	; 0xff
 800114a:	f7ff fa5d 	bl	8000608 <setBackColor>
	setFont(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fba6 	bl	80008a0 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001154:	220c      	movs	r2, #12
 8001156:	2132      	movs	r1, #50	; 0x32
 8001158:	4839      	ldr	r0, [pc, #228]	; (8001240 <pantalla_principal+0x188>)
 800115a:	f7ff fb0f 	bl	800077c <print>
	setBackColor(64, 64, 64);
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	2040      	movs	r0, #64	; 0x40
 8001164:	f7ff fa50 	bl	8000608 <setBackColor>
	setColor(255, 255, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	21ff      	movs	r1, #255	; 0xff
 800116c:	20ff      	movs	r0, #255	; 0xff
 800116e:	f7ff fa29 	bl	80005c4 <setColor>
	setFont(0);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fb94 	bl	80008a0 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <pantalla_principal+0x18c>)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001180:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001184:	f107 000c 	add.w	r0, r7, #12
 8001188:	2303      	movs	r3, #3
 800118a:	f240 1219 	movw	r2, #281	; 0x119
 800118e:	2114      	movs	r1, #20
 8001190:	f7ff fb54 	bl	800083c <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001194:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <pantalla_principal+0x190>)
 8001196:	463b      	mov	r3, r7
 8001198:	ca07      	ldmia	r2, {r0, r1, r2}
 800119a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800119e:	4638      	mov	r0, r7
 80011a0:	2303      	movs	r3, #3
 80011a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011a6:	2114      	movs	r1, #20
 80011a8:	f7ff fb48 	bl	800083c <printfrase>
	setColor(0, 0, 255);
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fa07 	bl	80005c4 <setColor>
	drawRect(0, 0, 479, 319);
 80011b6:	f240 133f 	movw	r3, #319	; 0x13f
 80011ba:	f240 12df 	movw	r2, #479	; 0x1df
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fa43 	bl	800064c <drawRect>
	botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 80011c6:	2303      	movs	r3, #3
 80011c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80011ca:	2302      	movs	r3, #2
 80011cc:	930e      	str	r3, [sp, #56]	; 0x38
 80011ce:	ac0b      	add	r4, sp, #44	; 0x2c
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011dc:	ac08      	add	r4, sp, #32
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011ea:	ac05      	add	r4, sp, #20
 80011ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011f8:	ac02      	add	r4, sp, #8
 80011fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001206:	2305      	movs	r3, #5
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2302      	movs	r3, #2
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2346      	movs	r3, #70	; 0x46
 8001210:	2264      	movs	r2, #100	; 0x64
 8001212:	2146      	movs	r1, #70	; 0x46
 8001214:	201e      	movs	r0, #30
 8001216:	f7ff fb9d 	bl	8000954 <botones>
	crear_botonera();
 800121a:	f7ff fc4f 	bl	8000abc <crear_botonera>
	setFont(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fb3e 	bl	80008a0 <setFont>
	rellenar_botones(t_menu);
 8001224:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fdf3 	bl	8000e14 <rellenar_botones>
}
 800122e:	bf00      	nop
 8001230:	3760      	adds	r7, #96	; 0x60
 8001232:	46bd      	mov	sp, r7
 8001234:	bdb0      	pop	{r4, r5, r7, pc}
 8001236:	bf00      	nop
 8001238:	080053f4 	.word	0x080053f4
 800123c:	0800540c 	.word	0x0800540c
 8001240:	080053e0 	.word	0x080053e0
 8001244:	08005418 	.word	0x08005418
 8001248:	08005424 	.word	0x08005424

0800124c <pantalla_luces>:

void pantalla_luces() {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b0a9      	sub	sp, #164	; 0xa4
 8001250:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
 8001252:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <pantalla_luces+0x184>)
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
 8001268:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <pantalla_luces+0x188>)
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
	rgb boton = { 0, 0, 255 };
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001270:	2300      	movs	r3, #0
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
 8001274:	23ff      	movs	r3, #255	; 0xff
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <pantalla_luces+0x18c>)
 800127a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001280:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 8001290:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <pantalla_luces+0x18c>)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	ca07      	ldmia	r2, {r0, r1, r2}
 8001298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 800129c:	f7ff f97e 	bl	800059c <clrScr>
	setColor(255, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	20ff      	movs	r0, #255	; 0xff
 80012a6:	f7ff f98d 	bl	80005c4 <setColor>
	fillRect(1, 1, 478, 40);
 80012aa:	2328      	movs	r3, #40	; 0x28
 80012ac:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80012b0:	2101      	movs	r1, #1
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fa16 	bl	80006e4 <fillRect>
	setColor(64, 64, 64);
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	2040      	movs	r0, #64	; 0x40
 80012be:	f7ff f981 	bl	80005c4 <setColor>
	fillRect(1, 318, 478, 280);
 80012c2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012c6:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80012ca:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff fa08 	bl	80006e4 <fillRect>
	setColor(255, 255, 255);
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	20ff      	movs	r0, #255	; 0xff
 80012da:	f7ff f973 	bl	80005c4 <setColor>
	setBackColor(255, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	20ff      	movs	r0, #255	; 0xff
 80012e4:	f7ff f990 	bl	8000608 <setBackColor>
	setFont(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fad9 	bl	80008a0 <setFont>
	print("* MENU LUCES *", 100, 12);
 80012ee:	220c      	movs	r2, #12
 80012f0:	2164      	movs	r1, #100	; 0x64
 80012f2:	483a      	ldr	r0, [pc, #232]	; (80013dc <pantalla_luces+0x190>)
 80012f4:	f7ff fa42 	bl	800077c <print>
	setBackColor(64, 64, 64);
 80012f8:	2240      	movs	r2, #64	; 0x40
 80012fa:	2140      	movs	r1, #64	; 0x40
 80012fc:	2040      	movs	r0, #64	; 0x40
 80012fe:	f7ff f983 	bl	8000608 <setBackColor>
	setColor(255, 255, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	21ff      	movs	r1, #255	; 0xff
 8001306:	20ff      	movs	r0, #255	; 0xff
 8001308:	f7ff f95c 	bl	80005c4 <setColor>
	setFont(0);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fac7 	bl	80008a0 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001312:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <pantalla_luces+0x194>)
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	ca07      	ldmia	r2, {r0, r1, r2}
 800131a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 800131e:	f107 000c 	add.w	r0, r7, #12
 8001322:	2303      	movs	r3, #3
 8001324:	f240 1219 	movw	r2, #281	; 0x119
 8001328:	2114      	movs	r1, #20
 800132a:	f7ff fa87 	bl	800083c <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <pantalla_luces+0x198>)
 8001330:	463b      	mov	r3, r7
 8001332:	ca07      	ldmia	r2, {r0, r1, r2}
 8001334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001338:	4638      	mov	r0, r7
 800133a:	2303      	movs	r3, #3
 800133c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001340:	2114      	movs	r1, #20
 8001342:	f7ff fa7b 	bl	800083c <printfrase>
	setColor(0, 0, 255);
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff f93a 	bl	80005c4 <setColor>
	drawRect(0, 0, 479, 319);
 8001350:	f240 133f 	movw	r3, #319	; 0x13f
 8001354:	f240 12df 	movw	r2, #479	; 0x1df
 8001358:	2100      	movs	r1, #0
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff f976 	bl	800064c <drawRect>
	botones(40, 85, 180, 150, 2, 5, boton, marco, nmarco, texto, 1, 2);
 8001360:	2302      	movs	r3, #2
 8001362:	930f      	str	r3, [sp, #60]	; 0x3c
 8001364:	2301      	movs	r3, #1
 8001366:	930e      	str	r3, [sp, #56]	; 0x38
 8001368:	ac0b      	add	r4, sp, #44	; 0x2c
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001376:	ac08      	add	r4, sp, #32
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001384:	ac05      	add	r4, sp, #20
 8001386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001392:	ac02      	add	r4, sp, #8
 8001394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800139c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013a0:	2305      	movs	r3, #5
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2302      	movs	r3, #2
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2396      	movs	r3, #150	; 0x96
 80013aa:	22b4      	movs	r2, #180	; 0xb4
 80013ac:	2155      	movs	r1, #85	; 0x55
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f7ff fad0 	bl	8000954 <botones>
	crear_botonera();
 80013b4:	f7ff fb82 	bl	8000abc <crear_botonera>
	setFont(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fa71 	bl	80008a0 <setFont>
	rellenar_botones(t_menu_luces);
 80013be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd26 	bl	8000e14 <rellenar_botones>
}
 80013c8:	bf00      	nop
 80013ca:	3764      	adds	r7, #100	; 0x64
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	08005430 	.word	0x08005430
 80013d4:	0800543c 	.word	0x0800543c
 80013d8:	0800540c 	.word	0x0800540c
 80013dc:	08005444 	.word	0x08005444
 80013e0:	08005418 	.word	0x08005418
 80013e4:	08005454 	.word	0x08005454

080013e8 <pantalla_luces_manual>:
void pantalla_luces_manual() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
	clrScr();
 80013ee:	f7ff f8d5 	bl	800059c <clrScr>
	setColor(255, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	20ff      	movs	r0, #255	; 0xff
 80013f8:	f7ff f8e4 	bl	80005c4 <setColor>
	fillRect(1, 1, 478, 40);
 80013fc:	2328      	movs	r3, #40	; 0x28
 80013fe:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001402:	2101      	movs	r1, #1
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff f96d 	bl	80006e4 <fillRect>
	setColor(64, 64, 64);
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	2040      	movs	r0, #64	; 0x40
 8001410:	f7ff f8d8 	bl	80005c4 <setColor>
	fillRect(1, 318, 478, 280);
 8001414:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001418:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800141c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff f95f 	bl	80006e4 <fillRect>
	setColor(255, 255, 255);
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	21ff      	movs	r1, #255	; 0xff
 800142a:	20ff      	movs	r0, #255	; 0xff
 800142c:	f7ff f8ca 	bl	80005c4 <setColor>
	setBackColor(255, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	20ff      	movs	r0, #255	; 0xff
 8001436:	f7ff f8e7 	bl	8000608 <setBackColor>
	setFont(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fa30 	bl	80008a0 <setFont>
	print("* CONTROL MANUAL DE LUCES *", 30, 12);
 8001440:	220c      	movs	r2, #12
 8001442:	211e      	movs	r1, #30
 8001444:	4860      	ldr	r0, [pc, #384]	; (80015c8 <pantalla_luces_manual+0x1e0>)
 8001446:	f7ff f999 	bl	800077c <print>
	setBackColor(64, 64, 64);
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	2040      	movs	r0, #64	; 0x40
 8001450:	f7ff f8da 	bl	8000608 <setBackColor>
	setColor(255, 255, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	21ff      	movs	r1, #255	; 0xff
 8001458:	20ff      	movs	r0, #255	; 0xff
 800145a:	f7ff f8b3 	bl	80005c4 <setColor>
	setFont(0);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fa1e 	bl	80008a0 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001464:	4a59      	ldr	r2, [pc, #356]	; (80015cc <pantalla_luces_manual+0x1e4>)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	ca07      	ldmia	r2, {r0, r1, r2}
 800146c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001470:	f107 000c 	add.w	r0, r7, #12
 8001474:	2303      	movs	r3, #3
 8001476:	f240 1219 	movw	r2, #281	; 0x119
 800147a:	2114      	movs	r1, #20
 800147c:	f7ff f9de 	bl	800083c <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 8001480:	4a53      	ldr	r2, [pc, #332]	; (80015d0 <pantalla_luces_manual+0x1e8>)
 8001482:	463b      	mov	r3, r7
 8001484:	ca07      	ldmia	r2, {r0, r1, r2}
 8001486:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800148a:	4638      	mov	r0, r7
 800148c:	2303      	movs	r3, #3
 800148e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001492:	2114      	movs	r1, #20
 8001494:	f7ff f9d2 	bl	800083c <printfrase>
	setColor(0, 0, 255);
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff f891 	bl	80005c4 <setColor>
	drawRect(0, 0, 479, 319);
 80014a2:	f240 133f 	movw	r3, #319	; 0x13f
 80014a6:	f240 12df 	movw	r2, #479	; 0x1df
 80014aa:	2100      	movs	r1, #0
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff f8cd 	bl	800064c <drawRect>

	setColor(0, 255, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	21ff      	movs	r1, #255	; 0xff
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff f884 	bl	80005c4 <setColor>
	fillCircle(118, 130, 25);
 80014bc:	2219      	movs	r2, #25
 80014be:	2182      	movs	r1, #130	; 0x82
 80014c0:	2076      	movs	r0, #118	; 0x76
 80014c2:	f7ff fa07 	bl	80008d4 <fillCircle>
	setColor(255, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff f87a 	bl	80005c4 <setColor>
	fillCircle(358, 130, 25);
 80014d0:	2219      	movs	r2, #25
 80014d2:	2182      	movs	r1, #130	; 0x82
 80014d4:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80014d8:	f7ff f9fc 	bl	80008d4 <fillCircle>
	setColor(255, 255, 255);
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	21ff      	movs	r1, #255	; 0xff
 80014e0:	20ff      	movs	r0, #255	; 0xff
 80014e2:	f7ff f86f 	bl	80005c4 <setColor>
	setBackColor(0, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff f88c 	bl	8000608 <setBackColor>
	setFont(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff f9d5 	bl	80008a0 <setFont>
	print("ON", 102, 170);
 80014f6:	22aa      	movs	r2, #170	; 0xaa
 80014f8:	2166      	movs	r1, #102	; 0x66
 80014fa:	4836      	ldr	r0, [pc, #216]	; (80015d4 <pantalla_luces_manual+0x1ec>)
 80014fc:	f7ff f93e 	bl	800077c <print>
	print("OFF", 334, 170);
 8001500:	22aa      	movs	r2, #170	; 0xaa
 8001502:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <pantalla_luces_manual+0x1f0>)
 8001508:	f7ff f938 	bl	800077c <print>

	if (getEstadoLuces() == 0) {
 800150c:	f7ff f800 	bl	8000510 <getEstadoLuces>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d12a      	bne.n	800156c <pantalla_luces_manual+0x184>
		setColor(0, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff f852 	bl	80005c4 <setColor>
		fillCircle(118, 130, 30);
 8001520:	221e      	movs	r2, #30
 8001522:	2182      	movs	r1, #130	; 0x82
 8001524:	2076      	movs	r0, #118	; 0x76
 8001526:	f7ff f9d5 	bl	80008d4 <fillCircle>
		setColor(0, 0, 255);
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	2100      	movs	r1, #0
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff f848 	bl	80005c4 <setColor>
		fillCircle(358, 130, 30);
 8001534:	221e      	movs	r2, #30
 8001536:	2182      	movs	r1, #130	; 0x82
 8001538:	f44f 70b3 	mov.w	r0, #358	; 0x166
 800153c:	f7ff f9ca 	bl	80008d4 <fillCircle>
		setColor(0, 255, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	21ff      	movs	r1, #255	; 0xff
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff f83d 	bl	80005c4 <setColor>
		fillCircle(118, 130, 25);
 800154a:	2219      	movs	r2, #25
 800154c:	2182      	movs	r1, #130	; 0x82
 800154e:	2076      	movs	r0, #118	; 0x76
 8001550:	f7ff f9c0 	bl	80008d4 <fillCircle>
		setColor(255, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	20ff      	movs	r0, #255	; 0xff
 800155a:	f7ff f833 	bl	80005c4 <setColor>
		fillCircle(358, 130, 25);
 800155e:	2219      	movs	r2, #25
 8001560:	2182      	movs	r1, #130	; 0x82
 8001562:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001566:	f7ff f9b5 	bl	80008d4 <fillCircle>
		fillCircle(118, 130, 25);
		setColor(255, 0, 0);
		fillCircle(358, 130, 25);
	}

}
 800156a:	e029      	b.n	80015c0 <pantalla_luces_manual+0x1d8>
		setColor(0, 0, 255);
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff f827 	bl	80005c4 <setColor>
		fillCircle(118, 130, 30);
 8001576:	221e      	movs	r2, #30
 8001578:	2182      	movs	r1, #130	; 0x82
 800157a:	2076      	movs	r0, #118	; 0x76
 800157c:	f7ff f9aa 	bl	80008d4 <fillCircle>
		setColor(0, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff f81d 	bl	80005c4 <setColor>
		fillCircle(358, 130, 30);
 800158a:	221e      	movs	r2, #30
 800158c:	2182      	movs	r1, #130	; 0x82
 800158e:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001592:	f7ff f99f 	bl	80008d4 <fillCircle>
		setColor(0, 255, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	21ff      	movs	r1, #255	; 0xff
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff f812 	bl	80005c4 <setColor>
		fillCircle(118, 130, 25);
 80015a0:	2219      	movs	r2, #25
 80015a2:	2182      	movs	r1, #130	; 0x82
 80015a4:	2076      	movs	r0, #118	; 0x76
 80015a6:	f7ff f995 	bl	80008d4 <fillCircle>
		setColor(255, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	20ff      	movs	r0, #255	; 0xff
 80015b0:	f7ff f808 	bl	80005c4 <setColor>
		fillCircle(358, 130, 25);
 80015b4:	2219      	movs	r2, #25
 80015b6:	2182      	movs	r1, #130	; 0x82
 80015b8:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80015bc:	f7ff f98a 	bl	80008d4 <fillCircle>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08005460 	.word	0x08005460
 80015cc:	08005418 	.word	0x08005418
 80015d0:	08005454 	.word	0x08005454
 80015d4:	0800547c 	.word	0x0800547c
 80015d8:	08005480 	.word	0x08005480

080015dc <reset_buffer>:
#include "string.h"
#include "TFT.h"

UART_HandleTypeDef huart6;
char rx_buffer[50], tx_buffer[50];
void reset_buffer() {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	e005      	b.n	80015f4 <reset_buffer+0x18>
		rx_buffer[0] = '\0';
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <reset_buffer+0x2c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b31      	cmp	r3, #49	; 0x31
 80015f8:	ddf6      	ble.n	80015e8 <reset_buffer+0xc>
	}
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	2000013c 	.word	0x2000013c

0800160c <seleccion_menu_principal>:

const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
		"SEGURIDAD" };
const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
int opcion = 0;
int seleccion_menu_principal() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 8001612:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001616:	2232      	movs	r2, #50	; 0x32
 8001618:	498b      	ldr	r1, [pc, #556]	; (8001848 <seleccion_menu_principal+0x23c>)
 800161a:	488c      	ldr	r0, [pc, #560]	; (800184c <seleccion_menu_principal+0x240>)
 800161c:	f003 fb6d 	bl	8004cfa <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 8001620:	4b89      	ldr	r3, [pc, #548]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b72      	cmp	r3, #114	; 0x72
 8001626:	d132      	bne.n	800168e <seleccion_menu_principal+0x82>
 8001628:	4b87      	ldr	r3, [pc, #540]	; (8001848 <seleccion_menu_principal+0x23c>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	2b69      	cmp	r3, #105	; 0x69
 800162e:	d12e      	bne.n	800168e <seleccion_menu_principal+0x82>
 8001630:	4b85      	ldr	r3, [pc, #532]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	2b67      	cmp	r3, #103	; 0x67
 8001636:	d12a      	bne.n	800168e <seleccion_menu_principal+0x82>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 8001638:	4b83      	ldr	r3, [pc, #524]	; (8001848 <seleccion_menu_principal+0x23c>)
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	2b68      	cmp	r3, #104	; 0x68
 800163e:	d126      	bne.n	800168e <seleccion_menu_principal+0x82>
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001642:	791b      	ldrb	r3, [r3, #4]
 8001644:	2b74      	cmp	r3, #116	; 0x74
 8001646:	d122      	bne.n	800168e <seleccion_menu_principal+0x82>
		if (opcion == 3) {
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <seleccion_menu_principal+0x244>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d103      	bne.n	8001658 <seleccion_menu_principal+0x4c>
			opcion = 1;
 8001650:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <seleccion_menu_principal+0x244>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e00c      	b.n	8001672 <seleccion_menu_principal+0x66>
		} else if (opcion == 6) {
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <seleccion_menu_principal+0x244>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b06      	cmp	r3, #6
 800165e:	d103      	bne.n	8001668 <seleccion_menu_principal+0x5c>
			opcion = 4;
 8001660:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <seleccion_menu_principal+0x244>)
 8001662:	2204      	movs	r2, #4
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e004      	b.n	8001672 <seleccion_menu_principal+0x66>
		} else {
			opcion++;
 8001668:	4b79      	ldr	r3, [pc, #484]	; (8001850 <seleccion_menu_principal+0x244>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a78      	ldr	r2, [pc, #480]	; (8001850 <seleccion_menu_principal+0x244>)
 8001670:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <seleccion_menu_principal+0x244>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff faa4 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff f90f 	bl	80008a0 <setFont>
		rellenar_botones(t_menu);
 8001682:	4874      	ldr	r0, [pc, #464]	; (8001854 <seleccion_menu_principal+0x248>)
 8001684:	f7ff fbc6 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 8001688:	f7ff ffa8 	bl	80015dc <reset_buffer>
 800168c:	e0d6      	b.n	800183c <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b6c      	cmp	r3, #108	; 0x6c
 8001694:	d136      	bne.n	8001704 <seleccion_menu_principal+0xf8>
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	2b65      	cmp	r3, #101	; 0x65
 800169c:	d132      	bne.n	8001704 <seleccion_menu_principal+0xf8>
 800169e:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <seleccion_menu_principal+0x23c>)
 80016a0:	789b      	ldrb	r3, [r3, #2]
 80016a2:	2b66      	cmp	r3, #102	; 0x66
 80016a4:	d12e      	bne.n	8001704 <seleccion_menu_principal+0xf8>
			&& rx_buffer[3] == 't') {
 80016a6:	4b68      	ldr	r3, [pc, #416]	; (8001848 <seleccion_menu_principal+0x23c>)
 80016a8:	78db      	ldrb	r3, [r3, #3]
 80016aa:	2b74      	cmp	r3, #116	; 0x74
 80016ac:	d12a      	bne.n	8001704 <seleccion_menu_principal+0xf8>
		if (opcion == 1) {
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <seleccion_menu_principal+0x244>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d103      	bne.n	80016be <seleccion_menu_principal+0xb2>
			opcion = 3;
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <seleccion_menu_principal+0x244>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e014      	b.n	80016e8 <seleccion_menu_principal+0xdc>
		} else if (opcion == 4) {
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <seleccion_menu_principal+0x244>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d103      	bne.n	80016ce <seleccion_menu_principal+0xc2>
			opcion = 6;
 80016c6:	4b62      	ldr	r3, [pc, #392]	; (8001850 <seleccion_menu_principal+0x244>)
 80016c8:	2206      	movs	r2, #6
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e00c      	b.n	80016e8 <seleccion_menu_principal+0xdc>
		} else if (opcion == 0) {
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <seleccion_menu_principal+0x244>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <seleccion_menu_principal+0xd2>
			opcion = 1;
 80016d6:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <seleccion_menu_principal+0x244>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e004      	b.n	80016e8 <seleccion_menu_principal+0xdc>
		} else {
			opcion--;
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <seleccion_menu_principal+0x244>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <seleccion_menu_principal+0x244>)
 80016e6:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <seleccion_menu_principal+0x244>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fa69 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff f8d4 	bl	80008a0 <setFont>
		rellenar_botones(t_menu);
 80016f8:	4856      	ldr	r0, [pc, #344]	; (8001854 <seleccion_menu_principal+0x248>)
 80016fa:	f7ff fb8b 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 80016fe:	f7ff ff6d 	bl	80015dc <reset_buffer>
 8001702:	e09b      	b.n	800183c <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'u' && rx_buffer[1] == 'p') {
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b75      	cmp	r3, #117	; 0x75
 800170a:	d136      	bne.n	800177a <seleccion_menu_principal+0x16e>
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <seleccion_menu_principal+0x23c>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	2b70      	cmp	r3, #112	; 0x70
 8001712:	d132      	bne.n	800177a <seleccion_menu_principal+0x16e>
		if (opcion == 1) {
 8001714:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <seleccion_menu_principal+0x244>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d103      	bne.n	8001724 <seleccion_menu_principal+0x118>
			opcion = 4;
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <seleccion_menu_principal+0x244>)
 800171e:	2204      	movs	r2, #4
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e01c      	b.n	800175e <seleccion_menu_principal+0x152>
		} else if (opcion == 2) {
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <seleccion_menu_principal+0x244>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d103      	bne.n	8001734 <seleccion_menu_principal+0x128>
			opcion = 5;
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <seleccion_menu_principal+0x244>)
 800172e:	2205      	movs	r2, #5
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e014      	b.n	800175e <seleccion_menu_principal+0x152>
		} else if (opcion == 3) {
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <seleccion_menu_principal+0x244>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d103      	bne.n	8001744 <seleccion_menu_principal+0x138>
			opcion = 6;
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <seleccion_menu_principal+0x244>)
 800173e:	2206      	movs	r2, #6
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e00c      	b.n	800175e <seleccion_menu_principal+0x152>
		} else if (opcion == 0) {
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <seleccion_menu_principal+0x244>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d103      	bne.n	8001754 <seleccion_menu_principal+0x148>
			opcion = 1;
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <seleccion_menu_principal+0x244>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e004      	b.n	800175e <seleccion_menu_principal+0x152>
		} else {
			opcion -= 3;
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <seleccion_menu_principal+0x244>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b03      	subs	r3, #3
 800175a:	4a3d      	ldr	r2, [pc, #244]	; (8001850 <seleccion_menu_principal+0x244>)
 800175c:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <seleccion_menu_principal+0x244>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa2e 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff f899 	bl	80008a0 <setFont>
		rellenar_botones(t_menu);
 800176e:	4839      	ldr	r0, [pc, #228]	; (8001854 <seleccion_menu_principal+0x248>)
 8001770:	f7ff fb50 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 8001774:	f7ff ff32 	bl	80015dc <reset_buffer>
 8001778:	e060      	b.n	800183c <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'd' && rx_buffer[1] == 'o' && rx_buffer[2] == 'w'
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <seleccion_menu_principal+0x23c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d13e      	bne.n	8001800 <seleccion_menu_principal+0x1f4>
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	2b6f      	cmp	r3, #111	; 0x6f
 8001788:	d13a      	bne.n	8001800 <seleccion_menu_principal+0x1f4>
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <seleccion_menu_principal+0x23c>)
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	2b77      	cmp	r3, #119	; 0x77
 8001790:	d136      	bne.n	8001800 <seleccion_menu_principal+0x1f4>
			&& rx_buffer[3] == 'n') {
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	2b6e      	cmp	r3, #110	; 0x6e
 8001798:	d132      	bne.n	8001800 <seleccion_menu_principal+0x1f4>
		if (opcion == 4) {
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <seleccion_menu_principal+0x244>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d103      	bne.n	80017aa <seleccion_menu_principal+0x19e>
			opcion = 1;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <seleccion_menu_principal+0x244>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e01c      	b.n	80017e4 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 5) {
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <seleccion_menu_principal+0x244>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d103      	bne.n	80017ba <seleccion_menu_principal+0x1ae>
			opcion = 2;
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <seleccion_menu_principal+0x244>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e014      	b.n	80017e4 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 0) {
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <seleccion_menu_principal+0x244>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <seleccion_menu_principal+0x1be>
			opcion = 1;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <seleccion_menu_principal+0x244>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00c      	b.n	80017e4 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 6) {
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <seleccion_menu_principal+0x244>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d103      	bne.n	80017da <seleccion_menu_principal+0x1ce>
			opcion = 3;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <seleccion_menu_principal+0x244>)
 80017d4:	2203      	movs	r2, #3
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e004      	b.n	80017e4 <seleccion_menu_principal+0x1d8>
		} else {
			opcion += 3;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <seleccion_menu_principal+0x244>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3303      	adds	r3, #3
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <seleccion_menu_principal+0x244>)
 80017e2:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <seleccion_menu_principal+0x244>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f9eb 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff f856 	bl	80008a0 <setFont>
		rellenar_botones(t_menu);
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <seleccion_menu_principal+0x248>)
 80017f6:	f7ff fb0d 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 80017fa:	f7ff feef 	bl	80015dc <reset_buffer>
 80017fe:	e01d      	b.n	800183c <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b73      	cmp	r3, #115	; 0x73
 8001806:	d119      	bne.n	800183c <seleccion_menu_principal+0x230>
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <seleccion_menu_principal+0x23c>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	2b74      	cmp	r3, #116	; 0x74
 800180e:	d115      	bne.n	800183c <seleccion_menu_principal+0x230>
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	2b61      	cmp	r3, #97	; 0x61
 8001816:	d111      	bne.n	800183c <seleccion_menu_principal+0x230>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <seleccion_menu_principal+0x23c>)
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	2b72      	cmp	r3, #114	; 0x72
 800181e:	d10d      	bne.n	800183c <seleccion_menu_principal+0x230>
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <seleccion_menu_principal+0x23c>)
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	2b74      	cmp	r3, #116	; 0x74
 8001826:	d109      	bne.n	800183c <seleccion_menu_principal+0x230>
		reset_buffer();
 8001828:	f7ff fed8 	bl	80015dc <reset_buffer>
		int op = opcion;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <seleccion_menu_principal+0x244>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	607b      	str	r3, [r7, #4]
		opcion = 0;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <seleccion_menu_principal+0x244>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		return op;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	e000      	b.n	800183e <seleccion_menu_principal+0x232>
	}
	return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000013c 	.word	0x2000013c
 800184c:	20000238 	.word	0x20000238
 8001850:	200000bc 	.word	0x200000bc
 8001854:	20000050 	.word	0x20000050

08001858 <seleccion_menu_luces>:

int opcion_luces = 0;
int seleccion_menu_luces() {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 800185e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001862:	2232      	movs	r2, #50	; 0x32
 8001864:	4954      	ldr	r1, [pc, #336]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001866:	4855      	ldr	r0, [pc, #340]	; (80019bc <seleccion_menu_luces+0x164>)
 8001868:	f003 fa47 	bl	8004cfa <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <seleccion_menu_luces+0x160>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b72      	cmp	r3, #114	; 0x72
 8001872:	d12a      	bne.n	80018ca <seleccion_menu_luces+0x72>
 8001874:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	2b69      	cmp	r3, #105	; 0x69
 800187a:	d126      	bne.n	80018ca <seleccion_menu_luces+0x72>
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <seleccion_menu_luces+0x160>)
 800187e:	789b      	ldrb	r3, [r3, #2]
 8001880:	2b67      	cmp	r3, #103	; 0x67
 8001882:	d122      	bne.n	80018ca <seleccion_menu_luces+0x72>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001886:	78db      	ldrb	r3, [r3, #3]
 8001888:	2b68      	cmp	r3, #104	; 0x68
 800188a:	d11e      	bne.n	80018ca <seleccion_menu_luces+0x72>
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <seleccion_menu_luces+0x160>)
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	2b74      	cmp	r3, #116	; 0x74
 8001892:	d11a      	bne.n	80018ca <seleccion_menu_luces+0x72>
		if (opcion_luces == 2) {
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <seleccion_menu_luces+0x168>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d103      	bne.n	80018a4 <seleccion_menu_luces+0x4c>
			opcion_luces = 1;
 800189c:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <seleccion_menu_luces+0x168>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e004      	b.n	80018ae <seleccion_menu_luces+0x56>
		} else {
			opcion_luces++;
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018ac:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f986 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7fe fff1 	bl	80008a0 <setFont>
		rellenar_botones(t_menu_luces);
 80018be:	4841      	ldr	r0, [pc, #260]	; (80019c4 <seleccion_menu_luces+0x16c>)
 80018c0:	f7ff faa8 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 80018c4:	f7ff fe8a 	bl	80015dc <reset_buffer>
 80018c8:	e070      	b.n	80019ac <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <seleccion_menu_luces+0x160>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b6c      	cmp	r3, #108	; 0x6c
 80018d0:	d12e      	bne.n	8001930 <seleccion_menu_luces+0xd8>
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <seleccion_menu_luces+0x160>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	2b65      	cmp	r3, #101	; 0x65
 80018d8:	d12a      	bne.n	8001930 <seleccion_menu_luces+0xd8>
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <seleccion_menu_luces+0x160>)
 80018dc:	789b      	ldrb	r3, [r3, #2]
 80018de:	2b66      	cmp	r3, #102	; 0x66
 80018e0:	d126      	bne.n	8001930 <seleccion_menu_luces+0xd8>
			&& rx_buffer[3] == 't') {
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <seleccion_menu_luces+0x160>)
 80018e4:	78db      	ldrb	r3, [r3, #3]
 80018e6:	2b74      	cmp	r3, #116	; 0x74
 80018e8:	d122      	bne.n	8001930 <seleccion_menu_luces+0xd8>
		if (opcion_luces == 1) {
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d103      	bne.n	80018fa <seleccion_menu_luces+0xa2>
			opcion_luces = 2;
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e00c      	b.n	8001914 <seleccion_menu_luces+0xbc>
		} else if (opcion_luces == 0) {
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <seleccion_menu_luces+0x168>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <seleccion_menu_luces+0xb2>
			opcion_luces = 1;
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <seleccion_menu_luces+0x168>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e004      	b.n	8001914 <seleccion_menu_luces+0xbc>
		} else {
			opcion_luces--;
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <seleccion_menu_luces+0x168>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <seleccion_menu_luces+0x168>)
 8001912:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <seleccion_menu_luces+0x168>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f953 	bl	8000bc4 <resaltar_boton>
		setFont(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f7fe ffbe 	bl	80008a0 <setFont>
		rellenar_botones(t_menu_luces);
 8001924:	4827      	ldr	r0, [pc, #156]	; (80019c4 <seleccion_menu_luces+0x16c>)
 8001926:	f7ff fa75 	bl	8000e14 <rellenar_botones>
		reset_buffer();
 800192a:	f7ff fe57 	bl	80015dc <reset_buffer>
 800192e:	e03d      	b.n	80019ac <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b73      	cmp	r3, #115	; 0x73
 8001936:	d11a      	bne.n	800196e <seleccion_menu_luces+0x116>
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <seleccion_menu_luces+0x160>)
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	2b65      	cmp	r3, #101	; 0x65
 800193e:	d116      	bne.n	800196e <seleccion_menu_luces+0x116>
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001942:	789b      	ldrb	r3, [r3, #2]
 8001944:	2b6c      	cmp	r3, #108	; 0x6c
 8001946:	d112      	bne.n	800196e <seleccion_menu_luces+0x116>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <seleccion_menu_luces+0x160>)
 800194a:	78db      	ldrb	r3, [r3, #3]
 800194c:	2b65      	cmp	r3, #101	; 0x65
 800194e:	d10e      	bne.n	800196e <seleccion_menu_luces+0x116>
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001952:	791b      	ldrb	r3, [r3, #4]
 8001954:	2b63      	cmp	r3, #99	; 0x63
 8001956:	d10a      	bne.n	800196e <seleccion_menu_luces+0x116>
			&& rx_buffer[5] == 't') {
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <seleccion_menu_luces+0x160>)
 800195a:	795b      	ldrb	r3, [r3, #5]
 800195c:	2b74      	cmp	r3, #116	; 0x74
 800195e:	d106      	bne.n	800196e <seleccion_menu_luces+0x116>
		reset_buffer();
 8001960:	f7ff fe3c 	bl	80015dc <reset_buffer>
		opcion_luces = 0;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <seleccion_menu_luces+0x168>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
		return 0;
 800196a:	2300      	movs	r3, #0
 800196c:	e01f      	b.n	80019ae <seleccion_menu_luces+0x156>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b73      	cmp	r3, #115	; 0x73
 8001974:	d11a      	bne.n	80019ac <seleccion_menu_luces+0x154>
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b74      	cmp	r3, #116	; 0x74
 800197c:	d116      	bne.n	80019ac <seleccion_menu_luces+0x154>
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	2b61      	cmp	r3, #97	; 0x61
 8001984:	d112      	bne.n	80019ac <seleccion_menu_luces+0x154>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001988:	78db      	ldrb	r3, [r3, #3]
 800198a:	2b72      	cmp	r3, #114	; 0x72
 800198c:	d10e      	bne.n	80019ac <seleccion_menu_luces+0x154>
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <seleccion_menu_luces+0x160>)
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	2b74      	cmp	r3, #116	; 0x74
 8001994:	d10a      	bne.n	80019ac <seleccion_menu_luces+0x154>
		reset_buffer();
 8001996:	f7ff fe21 	bl	80015dc <reset_buffer>
		int op = opcion_luces;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <seleccion_menu_luces+0x168>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	607b      	str	r3, [r7, #4]
		opcion_luces = 0;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <seleccion_menu_luces+0x168>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
		return op + 6;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3306      	adds	r3, #6
 80019aa:	e000      	b.n	80019ae <seleccion_menu_luces+0x156>
	}
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000013c 	.word	0x2000013c
 80019bc:	20000238 	.word	0x20000238
 80019c0:	200000c0 	.word	0x200000c0
 80019c4:	20000068 	.word	0x20000068

080019c8 <menu_luces_manual>:
int menu_luces_manual() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 80019cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019d0:	2232      	movs	r2, #50	; 0x32
 80019d2:	495c      	ldr	r1, [pc, #368]	; (8001b44 <menu_luces_manual+0x17c>)
 80019d4:	485c      	ldr	r0, [pc, #368]	; (8001b48 <menu_luces_manual+0x180>)
 80019d6:	f003 f990 	bl	8004cfa <HAL_UART_Receive>
	if (rx_buffer[0] == 's' && rx_buffer[1] == 'q' && rx_buffer[2] == 'u'
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <menu_luces_manual+0x17c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b73      	cmp	r3, #115	; 0x73
 80019e0:	d148      	bne.n	8001a74 <menu_luces_manual+0xac>
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <menu_luces_manual+0x17c>)
 80019e4:	785b      	ldrb	r3, [r3, #1]
 80019e6:	2b71      	cmp	r3, #113	; 0x71
 80019e8:	d144      	bne.n	8001a74 <menu_luces_manual+0xac>
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <menu_luces_manual+0x17c>)
 80019ec:	789b      	ldrb	r3, [r3, #2]
 80019ee:	2b75      	cmp	r3, #117	; 0x75
 80019f0:	d140      	bne.n	8001a74 <menu_luces_manual+0xac>
			&& rx_buffer[3] == 'a' && rx_buffer[4] == 'r'
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <menu_luces_manual+0x17c>)
 80019f4:	78db      	ldrb	r3, [r3, #3]
 80019f6:	2b61      	cmp	r3, #97	; 0x61
 80019f8:	d13c      	bne.n	8001a74 <menu_luces_manual+0xac>
 80019fa:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <menu_luces_manual+0x17c>)
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	2b72      	cmp	r3, #114	; 0x72
 8001a00:	d138      	bne.n	8001a74 <menu_luces_manual+0xac>
			&& rx_buffer[5] == 'e') {
 8001a02:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a04:	795b      	ldrb	r3, [r3, #5]
 8001a06:	2b65      	cmp	r3, #101	; 0x65
 8001a08:	d134      	bne.n	8001a74 <menu_luces_manual+0xac>
		if (getEstadoLuces() == 0) {
 8001a0a:	f7fe fd81 	bl	8000510 <getEstadoLuces>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d12c      	bne.n	8001a6e <menu_luces_manual+0xa6>
			setLuces(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7fe fd5b 	bl	80004d0 <setLuces>
			setColor(0, 0, 255);
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7fe fdd0 	bl	80005c4 <setColor>
			fillCircle(118, 130, 30);
 8001a24:	221e      	movs	r2, #30
 8001a26:	2182      	movs	r1, #130	; 0x82
 8001a28:	2076      	movs	r0, #118	; 0x76
 8001a2a:	f7fe ff53 	bl	80008d4 <fillCircle>
			setColor(0, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7fe fdc6 	bl	80005c4 <setColor>
			fillCircle(358, 130, 30);
 8001a38:	221e      	movs	r2, #30
 8001a3a:	2182      	movs	r1, #130	; 0x82
 8001a3c:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a40:	f7fe ff48 	bl	80008d4 <fillCircle>
			setColor(0, 255, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	21ff      	movs	r1, #255	; 0xff
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7fe fdbb 	bl	80005c4 <setColor>
			fillCircle(118, 130, 25);
 8001a4e:	2219      	movs	r2, #25
 8001a50:	2182      	movs	r1, #130	; 0x82
 8001a52:	2076      	movs	r0, #118	; 0x76
 8001a54:	f7fe ff3e 	bl	80008d4 <fillCircle>
			setColor(255, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	20ff      	movs	r0, #255	; 0xff
 8001a5e:	f7fe fdb1 	bl	80005c4 <setColor>
			fillCircle(358, 130, 25);
 8001a62:	2219      	movs	r2, #25
 8001a64:	2182      	movs	r1, #130	; 0x82
 8001a66:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a6a:	f7fe ff33 	bl	80008d4 <fillCircle>
		}
		reset_buffer();
 8001a6e:	f7ff fdb5 	bl	80015dc <reset_buffer>
 8001a72:	e064      	b.n	8001b3e <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 'c' && rx_buffer[1] == 'r' && rx_buffer[2] == 'o'
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b63      	cmp	r3, #99	; 0x63
 8001a7a:	d144      	bne.n	8001b06 <menu_luces_manual+0x13e>
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b72      	cmp	r3, #114	; 0x72
 8001a82:	d140      	bne.n	8001b06 <menu_luces_manual+0x13e>
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	2b6f      	cmp	r3, #111	; 0x6f
 8001a8a:	d13c      	bne.n	8001b06 <menu_luces_manual+0x13e>
			&& rx_buffer[3] == 's' && rx_buffer[4] == 's') {
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	2b73      	cmp	r3, #115	; 0x73
 8001a92:	d138      	bne.n	8001b06 <menu_luces_manual+0x13e>
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <menu_luces_manual+0x17c>)
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	2b73      	cmp	r3, #115	; 0x73
 8001a9a:	d134      	bne.n	8001b06 <menu_luces_manual+0x13e>
		if (getEstadoLuces() == 1) {
 8001a9c:	f7fe fd38 	bl	8000510 <getEstadoLuces>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12c      	bne.n	8001b00 <menu_luces_manual+0x138>
			setLuces(0);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7fe fd12 	bl	80004d0 <setLuces>
			setColor(0, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7fe fd87 	bl	80005c4 <setColor>
			fillCircle(118, 130, 30);
 8001ab6:	221e      	movs	r2, #30
 8001ab8:	2182      	movs	r1, #130	; 0x82
 8001aba:	2076      	movs	r0, #118	; 0x76
 8001abc:	f7fe ff0a 	bl	80008d4 <fillCircle>
			setColor(0, 0, 255);
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7fe fd7d 	bl	80005c4 <setColor>
			fillCircle(358, 130, 30);
 8001aca:	221e      	movs	r2, #30
 8001acc:	2182      	movs	r1, #130	; 0x82
 8001ace:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001ad2:	f7fe feff 	bl	80008d4 <fillCircle>
			setColor(0, 255, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	21ff      	movs	r1, #255	; 0xff
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7fe fd72 	bl	80005c4 <setColor>
			fillCircle(118, 130, 25);
 8001ae0:	2219      	movs	r2, #25
 8001ae2:	2182      	movs	r1, #130	; 0x82
 8001ae4:	2076      	movs	r0, #118	; 0x76
 8001ae6:	f7fe fef5 	bl	80008d4 <fillCircle>
			setColor(255, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	20ff      	movs	r0, #255	; 0xff
 8001af0:	f7fe fd68 	bl	80005c4 <setColor>
			fillCircle(358, 130, 25);
 8001af4:	2219      	movs	r2, #25
 8001af6:	2182      	movs	r1, #130	; 0x82
 8001af8:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001afc:	f7fe feea 	bl	80008d4 <fillCircle>
		}
		reset_buffer();
 8001b00:	f7ff fd6c 	bl	80015dc <reset_buffer>
 8001b04:	e01b      	b.n	8001b3e <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b73      	cmp	r3, #115	; 0x73
 8001b0c:	d117      	bne.n	8001b3e <menu_luces_manual+0x176>
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	2b65      	cmp	r3, #101	; 0x65
 8001b14:	d113      	bne.n	8001b3e <menu_luces_manual+0x176>
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	2b6c      	cmp	r3, #108	; 0x6c
 8001b1c:	d10f      	bne.n	8001b3e <menu_luces_manual+0x176>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b20:	78db      	ldrb	r3, [r3, #3]
 8001b22:	2b65      	cmp	r3, #101	; 0x65
 8001b24:	d10b      	bne.n	8001b3e <menu_luces_manual+0x176>
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b28:	791b      	ldrb	r3, [r3, #4]
 8001b2a:	2b63      	cmp	r3, #99	; 0x63
 8001b2c:	d107      	bne.n	8001b3e <menu_luces_manual+0x176>
			&& rx_buffer[5] == 't') {
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <menu_luces_manual+0x17c>)
 8001b30:	795b      	ldrb	r3, [r3, #5]
 8001b32:	2b74      	cmp	r3, #116	; 0x74
 8001b34:	d103      	bne.n	8001b3e <menu_luces_manual+0x176>
		reset_buffer();
 8001b36:	f7ff fd51 	bl	80015dc <reset_buffer>
		return 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <menu_luces_manual+0x178>
	}
return 8;
 8001b3e:	2308      	movs	r3, #8
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2000013c 	.word	0x2000013c
 8001b48:	20000238 	.word	0x20000238

08001b4c <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <setEstadoPersianas+0x84>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <setEstadoPersianas+0x88>)
 8001b5a:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <setEstadoPersianas+0x84>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <setEstadoPersianas+0x84>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b70:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001b72:	f001 fe17 	bl	80037a4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7c:	4816      	ldr	r0, [pc, #88]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001b7e:	f001 fe11 	bl	80037a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}else if(estado_persianas==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
}
 8001b82:	e020      	b.n	8001bc6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <setEstadoPersianas+0x84>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10c      	bne.n	8001ba6 <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001b94:	f001 fe06 	bl	80037a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9e:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001ba0:	f001 fe00 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001ba4:	e00f      	b.n	8001bc6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <setEstadoPersianas+0x84>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d10b      	bne.n	8001bc6 <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001bb6:	f001 fdf5 	bl	80037a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <setEstadoPersianas+0x8c>)
 8001bc2:	f001 fdef 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200000c4 	.word	0x200000c4
 8001bd4:	200000c8 	.word	0x200000c8
 8001bd8:	40020c00 	.word	0x40020c00

08001bdc <getEstadoPersianas>:

int getEstadoPersianas(){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return estado_persianas;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <getEstadoPersianas+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200000c4 	.word	0x200000c4

08001bf4 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <getEstadoAnteriorPersianas+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200000c8 	.word	0x200000c8

08001c0c <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 8001c10:	f7ff ffe4 	bl	8001bdc <getEstadoPersianas>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <cambiarEstadoPersianas+0x20>
 8001c1a:	f7ff ffeb 	bl	8001bf4 <getEstadoAnteriorPersianas>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d103      	bne.n	8001c2c <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff ff91 	bl	8001b4c <setEstadoPersianas>
 8001c2a:	e03b      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8001c2c:	f7ff ffd6 	bl	8001bdc <getEstadoPersianas>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <cambiarEstadoPersianas+0x3c>
 8001c36:	f7ff ffdd 	bl	8001bf4 <getEstadoAnteriorPersianas>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d103      	bne.n	8001c48 <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7ff ff83 	bl	8001b4c <setEstadoPersianas>
 8001c46:	e02d      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 8001c48:	f7ff ffc8 	bl	8001bdc <getEstadoPersianas>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <cambiarEstadoPersianas+0x58>
 8001c52:	f7ff ffcf 	bl	8001bf4 <getEstadoAnteriorPersianas>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f7ff ff75 	bl	8001b4c <setEstadoPersianas>
 8001c62:	e01f      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 8001c64:	f7ff ffba 	bl	8001bdc <getEstadoPersianas>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <cambiarEstadoPersianas+0x74>
 8001c6e:	f7ff ffc1 	bl	8001bf4 <getEstadoAnteriorPersianas>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <cambiarEstadoPersianas+0x74>
		setEstadoPersianas(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ff67 	bl	8001b4c <setEstadoPersianas>
 8001c7e:	e011      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
	}else if(getEstadoPersianas()==1){
 8001c80:	f7ff ffac 	bl	8001bdc <getEstadoPersianas>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d103      	bne.n	8001c92 <cambiarEstadoPersianas+0x86>
		setEstadoPersianas(0);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff ff5e 	bl	8001b4c <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 8001c90:	e008      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
	}else if(getEstadoPersianas()==2){
 8001c92:	f7ff ffa3 	bl	8001bdc <getEstadoPersianas>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d103      	bne.n	8001ca4 <cambiarEstadoPersianas+0x98>
		setEstadoPersianas(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff55 	bl	8001b4c <setEstadoPersianas>
}
 8001ca2:	e7ff      	b.n	8001ca4 <cambiarEstadoPersianas+0x98>
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <setEstadoRiego+0x8c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <setEstadoRiego+0x90>)
 8001cb6:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <setEstadoRiego+0x8c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 8001cbe:	f000 fe9f 	bl	8002a00 <HAL_GetTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <setEstadoRiego+0x94>)
 8001cc6:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <setEstadoRiego+0x8c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd6:	481a      	ldr	r0, [pc, #104]	; (8001d40 <setEstadoRiego+0x98>)
 8001cd8:	f001 fd64 	bl	80037a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <setEstadoRiego+0x98>)
 8001ce4:	f001 fd5e 	bl	80037a4 <HAL_GPIO_WritePin>
	}
	else if(estado_riego==2){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
}
 8001ce8:	e020      	b.n	8001d2c <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <setEstadoRiego+0x8c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10c      	bne.n	8001d0c <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf8:	4811      	ldr	r0, [pc, #68]	; (8001d40 <setEstadoRiego+0x98>)
 8001cfa:	f001 fd53 	bl	80037a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <setEstadoRiego+0x98>)
 8001d06:	f001 fd4d 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001d0a:	e00f      	b.n	8001d2c <setEstadoRiego+0x84>
	else if(estado_riego==2){
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <setEstadoRiego+0x8c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d10b      	bne.n	8001d2c <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <setEstadoRiego+0x98>)
 8001d1c:	f001 fd42 	bl	80037a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <setEstadoRiego+0x98>)
 8001d28:	f001 fd3c 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000080 	.word	0x20000080
 8001d38:	20000084 	.word	0x20000084
 8001d3c:	200000e0 	.word	0x200000e0
 8001d40:	40020c00 	.word	0x40020c00

08001d44 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <cambiarEstadoRiego+0x30>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff ffa9 	bl	8001ca8 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 8001d56:	e00a      	b.n	8001d6e <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <cambiarEstadoRiego+0x30>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d103      	bne.n	8001d68 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff ffa1 	bl	8001ca8 <setEstadoRiego>
}
 8001d66:	e002      	b.n	8001d6e <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ff9d 	bl	8001ca8 <setEstadoRiego>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000084 	.word	0x20000084

08001d78 <temporizador_riego>:

void temporizador_riego(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <temporizador_riego+0x34>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <temporizador_riego+0x14>
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <temporizador_riego+0x34>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10c      	bne.n	8001da6 <temporizador_riego+0x2e>
		if(HAL_GetTick()-tickstart_riego>5000){
 8001d8c:	f000 fe38 	bl	8002a00 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <temporizador_riego+0x38>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d902      	bls.n	8001da6 <temporizador_riego+0x2e>
			setEstadoRiego(2);
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff ff81 	bl	8001ca8 <setEstadoRiego>
		}
	}
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000080 	.word	0x20000080
 8001db0:	200000e0 	.word	0x200000e0

08001db4 <riego>:
void riego(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	temporizador_riego();
 8001db8:	f7ff ffde 	bl	8001d78 <temporizador_riego>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <setEstadoSeguridad>:

uint32_t tickstart_seguridad;



void setEstadoSeguridad(int n){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	estado_seguridad=n;
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <setEstadoSeguridad+0x58>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
	if(estado_seguridad==0){
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <setEstadoSeguridad+0x58>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <setEstadoSeguridad+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2140      	movs	r1, #64	; 0x40
 8001dda:	4810      	ldr	r0, [pc, #64]	; (8001e1c <setEstadoSeguridad+0x5c>)
 8001ddc:	f001 fce2 	bl	80037a4 <HAL_GPIO_WritePin>
		alarma_seguridad=0;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <setEstadoSeguridad+0x60>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
		tickstart_seguridad=HAL_GetTick();
	}else if(estado_seguridad==2){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);

	}
}
 8001de6:	e012      	b.n	8001e0e <setEstadoSeguridad+0x4e>
	}else if(estado_seguridad==1){
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <setEstadoSeguridad+0x58>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <setEstadoSeguridad+0x3c>
		tickstart_seguridad=HAL_GetTick();
 8001df0:	f000 fe06 	bl	8002a00 <HAL_GetTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <setEstadoSeguridad+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	e008      	b.n	8001e0e <setEstadoSeguridad+0x4e>
	}else if(estado_seguridad==2){
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <setEstadoSeguridad+0x58>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d104      	bne.n	8001e0e <setEstadoSeguridad+0x4e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2140      	movs	r1, #64	; 0x40
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <setEstadoSeguridad+0x5c>)
 8001e0a:	f001 fccb 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200000cc 	.word	0x200000cc
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	200000d0 	.word	0x200000d0
 8001e24:	200000dc 	.word	0x200000dc

08001e28 <activar_sensor>:

void activar_sensor(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if(estado_seguridad==1){
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <activar_sensor+0x2c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10c      	bne.n	8001e4e <activar_sensor+0x26>
		if(HAL_GetTick()-tickstart_seguridad>5000){
 8001e34:	f000 fde4 	bl	8002a00 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <activar_sensor+0x30>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d902      	bls.n	8001e4e <activar_sensor+0x26>
			setEstadoSeguridad(2);
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f7ff ffb9 	bl	8001dc0 <setEstadoSeguridad>
		}
	}
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200000cc 	.word	0x200000cc
 8001e58:	200000dc 	.word	0x200000dc

08001e5c <getEstadoSeguridad>:

int getEstadoSeguridad(){
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <getEstadoSeguridad+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200000cc 	.word	0x200000cc

08001e74 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	if(getEstadoSeguridad()==0){
 8001e78:	f7ff fff0 	bl	8001e5c <getEstadoSeguridad>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff ff9c 	bl	8001dc0 <setEstadoSeguridad>
	}else {
		setEstadoSeguridad(0);
	}
}
 8001e88:	e002      	b.n	8001e90 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff ff98 	bl	8001dc0 <setEstadoSeguridad>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <intruso_detectado>:

void intruso_detectado(){
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	alarma_seguridad=0;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <intruso_detectado+0x24>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
	if(estado_seguridad==2){
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <intruso_detectado+0x28>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d102      	bne.n	8001eac <intruso_detectado+0x18>
		alarma_seguridad=1;
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <intruso_detectado+0x24>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
	}
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200000d0 	.word	0x200000d0
 8001ebc:	200000cc 	.word	0x200000cc

08001ec0 <sonar_alarma>:

void sonar_alarma(){
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <seguridad>:

void seguridad(){
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
	activar_sensor();
 8001ed2:	f7ff ffa9 	bl	8001e28 <activar_sensor>
	sonar_alarma();
 8001ed6:	f7ff fff3 	bl	8001ec0 <sonar_alarma>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <debouncer>:
//Interrupciones botones:
volatile int button_int;

//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d13b      	bne.n	8001f6e <debouncer+0x8e>
		if (button_count == 0) {
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <debouncer+0x98>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <debouncer+0x36>
			counter = HAL_GetTick();
 8001efe:	f000 fd7f 	bl	8002a00 <HAL_GetTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <debouncer+0x9c>)
 8001f08:	601a      	str	r2, [r3, #0]
			button_count++;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <debouncer+0x98>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <debouncer+0x98>)
 8001f14:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8001f16:	f000 fd73 	bl	8002a00 <HAL_GetTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <debouncer+0x9c>)
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	2b13      	cmp	r3, #19
 8001f24:	d923      	bls.n	8001f6e <debouncer+0x8e>
			counter = HAL_GetTick();
 8001f26:	f000 fd6b 	bl	8002a00 <HAL_GetTick>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <debouncer+0x9c>)
 8001f30:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4619      	mov	r1, r3
 8001f36:	68b8      	ldr	r0, [r7, #8]
 8001f38:	f001 fc1c 	bl	8003774 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d003      	beq.n	8001f4a <debouncer+0x6a>
				button_count = 1;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <debouncer+0x98>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e005      	b.n	8001f56 <debouncer+0x76>
			} else {
				button_count++;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <debouncer+0x98>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <debouncer+0x98>)
 8001f54:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <debouncer+0x98>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d107      	bne.n	8001f6e <debouncer+0x8e>
				button_count = 0;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <debouncer+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
				return 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200000d4 	.word	0x200000d4
 8001f7c:	200000d8 	.word	0x200000d8

08001f80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
				button[i] = 0;
		}
		button[n] = 1;
	}
*/
	if (GPIO_Pin == GPIO_PIN_3) {
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d10d      	bne.n	8001fac <HAL_GPIO_EXTI_Callback+0x2c>
		button_int=1;
 8001f90:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_3)){
 8001f96:	2208      	movs	r2, #8
 8001f98:	4940      	ldr	r1, [pc, #256]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001f9a:	483f      	ldr	r0, [pc, #252]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001f9c:	f7ff ffa0 	bl	8001ee0 <debouncer>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d073      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
			cambiarEstadoLuces();
 8001fa6:	f7fe fabf 	bl	8000528 <cambiarEstadoLuces>
		if (debouncer(&button_int, GPIOA, GPIO_PIN_9)){
		intruso_detectado();
		}
	}

}
 8001faa:	e070      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x54>
		button_int=1;
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_11)){
 8001fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fbe:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001fc0:	4835      	ldr	r0, [pc, #212]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fc2:	f7ff ff8d 	bl	8001ee0 <debouncer>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d060      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		setEstadoPersianas(0);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fdbd 	bl	8001b4c <setEstadoPersianas>
}
 8001fd2:	e05c      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	}else if (GPIO_Pin == GPIO_PIN_12) {
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d10f      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x7c>
		button_int=1;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_12)){
 8001fe2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe6:	492d      	ldr	r1, [pc, #180]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001fe8:	482b      	ldr	r0, [pc, #172]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8001fea:	f7ff ff79 	bl	8001ee0 <debouncer>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d04c      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		setEstadoPersianas(0);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fda9 	bl	8001b4c <setEstadoPersianas>
}
 8001ffa:	e048      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	}else if (GPIO_Pin == GPIO_PIN_13) {
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002002:	d10e      	bne.n	8002022 <HAL_GPIO_EXTI_Callback+0xa2>
		button_int=1;
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_13)){
 800200a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200e:	4923      	ldr	r1, [pc, #140]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8002010:	4821      	ldr	r0, [pc, #132]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002012:	f7ff ff65 	bl	8001ee0 <debouncer>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d038      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		cambiarEstadoPersianas();
 800201c:	f7ff fdf6 	bl	8001c0c <cambiarEstadoPersianas>
}
 8002020:	e035      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	}else if (GPIO_Pin == GPIO_PIN_10) {
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	d10e      	bne.n	8002048 <HAL_GPIO_EXTI_Callback+0xc8>
		button_int=1;
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_10)){
 8002030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002034:	4919      	ldr	r1, [pc, #100]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002038:	f7ff ff52 	bl	8001ee0 <debouncer>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d025      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		cambiarEstadoRiego();
 8002042:	f7ff fe7f 	bl	8001d44 <cambiarEstadoRiego>
}
 8002046:	e022      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	}else if (GPIO_Pin == GPIO_PIN_7) {
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d10d      	bne.n	800206a <HAL_GPIO_EXTI_Callback+0xea>
		button_int=1;
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_7)){
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	4911      	ldr	r1, [pc, #68]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 8002058:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 800205a:	f7ff ff41 	bl	8001ee0 <debouncer>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d014      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		cambiarEstadoSeguridad();
 8002064:	f7ff ff06 	bl	8001e74 <cambiarEstadoSeguridad>
}
 8002068:	e011      	b.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
	}else if (GPIO_Pin == GPIO_PIN_9) {
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d10d      	bne.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		button_int=1;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]
		if (debouncer(&button_int, GPIOA, GPIO_PIN_9)){
 8002078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <HAL_GPIO_EXTI_Callback+0x11c>)
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <HAL_GPIO_EXTI_Callback+0x118>)
 8002080:	f7ff ff2e 	bl	8001ee0 <debouncer>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x10e>
		intruso_detectado();
 800208a:	f7ff ff03 	bl	8001e94 <intruso_detectado>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000138 	.word	0x20000138
 800209c:	40020000 	.word	0x40020000

080020a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a6:	f000 fc45 	bl	8002934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020aa:	f000 f875 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ae:	f000 f9bd 	bl	800242c <MX_GPIO_Init>
  MX_I2C1_Init();
 80020b2:	f000 f92d 	bl	8002310 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80020b6:	f000 f98f 	bl	80023d8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80020ba:	f000 f8d7 	bl	800226c <MX_ADC1_Init>
  MX_TIM6_Init();
 80020be:	f000 f955 	bl	800236c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	int menu_actual = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//MENU PRINCIPAL
		if (menu_actual == 0) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <main+0x54>
			if (retorno == 0) {
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d104      	bne.n	80020e0 <main+0x40>
				pantalla_principal();
 80020d6:	f7fe ffef 	bl	80010b8 <pantalla_principal>
				retorno++;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_principal();
 80020e0:	f7ff fa94 	bl	800160c <seleccion_menu_principal>
 80020e4:	6078      	str	r0, [r7, #4]
			if (menu_actual != 0) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d04d      	beq.n	8002188 <main+0xe8>
				retorno--;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	e049      	b.n	8002188 <main+0xe8>
			}
//MENU SELECCION MODO LUCES
		} else if (menu_actual == 1) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d111      	bne.n	800211e <main+0x7e>
			if (retorno == 0) {
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d104      	bne.n	800210a <main+0x6a>
				pantalla_luces();
 8002100:	f7ff f8a4 	bl	800124c <pantalla_luces>
				retorno++;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_luces();
 800210a:	f7ff fba5 	bl	8001858 <seleccion_menu_luces>
 800210e:	6078      	str	r0, [r7, #4]
			if (menu_actual != 1) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d038      	beq.n	8002188 <main+0xe8>
				retorno--;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	e034      	b.n	8002188 <main+0xe8>
			}
//MENU SELECCION MODO PERSIANAS
		} else if (menu_actual == 2) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d102      	bne.n	800212a <main+0x8a>
			clrScr();
 8002124:	f7fe fa3a 	bl	800059c <clrScr>
 8002128:	e02e      	b.n	8002188 <main+0xe8>
		}
//MENU SELECCION MODO RIEGO
		else if (menu_actual == 3) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d102      	bne.n	8002136 <main+0x96>
			clrScr();
 8002130:	f7fe fa34 	bl	800059c <clrScr>
 8002134:	e028      	b.n	8002188 <main+0xe8>
		}
//MENU SELECCION MODO CLIMA
		else if (menu_actual == 4) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d102      	bne.n	8002142 <main+0xa2>
			clrScr();
 800213c:	f7fe fa2e 	bl	800059c <clrScr>
 8002140:	e022      	b.n	8002188 <main+0xe8>
		}
//MENU SELECCION AUDIO
		else if (menu_actual == 5) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d102      	bne.n	800214e <main+0xae>
			clrScr();
 8002148:	f7fe fa28 	bl	800059c <clrScr>
 800214c:	e01c      	b.n	8002188 <main+0xe8>
		}
//MENU SEGURIDAD
		else if (menu_actual == 6) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b06      	cmp	r3, #6
 8002152:	d102      	bne.n	800215a <main+0xba>
			clrScr();
 8002154:	f7fe fa22 	bl	800059c <clrScr>
 8002158:	e016      	b.n	8002188 <main+0xe8>
		}
//MENU LUCES AUTOMATICO (7)
		else if (menu_actual == 7) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b07      	cmp	r3, #7
 800215e:	d013      	beq.n	8002188 <main+0xe8>

		}
//MENU LUCES MANUAL (8)
		else if (menu_actual == 8) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b08      	cmp	r3, #8
 8002164:	d110      	bne.n	8002188 <main+0xe8>
			if (retorno == 0) {
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <main+0xd6>
				pantalla_luces_manual();
 800216c:	f7ff f93c 	bl	80013e8 <pantalla_luces_manual>
				retorno++;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	603b      	str	r3, [r7, #0]
			}
			menu_actual = menu_luces_manual();
 8002176:	f7ff fc27 	bl	80019c8 <menu_luces_manual>
 800217a:	6078      	str	r0, [r7, #4]
			if (menu_actual != 8) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b08      	cmp	r3, #8
 8002180:	d002      	beq.n	8002188 <main+0xe8>
				retorno--;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3b01      	subs	r3, #1
 8002186:	603b      	str	r3, [r7, #0]
			}
		}
		luces();
 8002188:	f7fe fa02 	bl	8000590 <luces>
		riego();
 800218c:	f7ff fe12 	bl	8001db4 <riego>
		seguridad();
 8002190:	f7ff fe9d 	bl	8001ece <seguridad>
		if (menu_actual == 0) {
 8002194:	e799      	b.n	80020ca <main+0x2a>
	...

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2230      	movs	r2, #48	; 0x30
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 f8a4 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <SystemClock_Config+0xcc>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <SystemClock_Config+0xd0>)
 80021e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002208:	2308      	movs	r3, #8
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800220c:	2332      	movs	r3, #50	; 0x32
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002210:	2302      	movs	r3, #2
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002214:	2307      	movs	r3, #7
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4618      	mov	r0, r3
 800221e:	f001 ff3f 	bl	80040a0 <HAL_RCC_OscConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002228:	f000 f9c4 	bl	80025b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222c:	230f      	movs	r3, #15
 800222e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f002 f9a0 	bl	8004590 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002256:	f000 f9ad 	bl	80025b4 <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3750      	adds	r7, #80	; 0x50
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002272:	463b      	mov	r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <MX_ADC1_Init+0x98>)
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <MX_ADC1_Init+0x9c>)
 8002282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <MX_ADC1_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <MX_ADC1_Init+0x98>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <MX_ADC1_Init+0x98>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_ADC1_Init+0x98>)
 8002298:	2200      	movs	r2, #0
 800229a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <MX_ADC1_Init+0x98>)
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <MX_ADC1_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_ADC1_Init+0x98>)
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <MX_ADC1_Init+0xa0>)
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_ADC1_Init+0x98>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_ADC1_Init+0x98>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_ADC1_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_ADC1_Init+0x98>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <MX_ADC1_Init+0x98>)
 80022cc:	f000 fba4 	bl	8002a18 <HAL_ADC_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 f96d 	bl	80025b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022da:	2301      	movs	r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022e6:	463b      	mov	r3, r7
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_ADC1_Init+0x98>)
 80022ec:	f000 fd76 	bl	8002ddc <HAL_ADC_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80022f6:	f000 f95d 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200001a4 	.word	0x200001a4
 8002308:	40012000 	.word	0x40012000
 800230c:	0f000001 	.word	0x0f000001

08002310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_I2C1_Init+0x50>)
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <MX_I2C1_Init+0x54>)
 8002318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_I2C1_Init+0x50>)
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <MX_I2C1_Init+0x58>)
 800231e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_I2C1_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_I2C1_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_I2C1_Init+0x50>)
 800232e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_I2C1_Init+0x50>)
 800234e:	f001 fa5b 	bl	8003808 <HAL_I2C_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002358:	f000 f92c 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200000e4 	.word	0x200000e4
 8002364:	40005400 	.word	0x40005400
 8002368:	00061a80 	.word	0x00061a80

0800236c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	463b      	mov	r3, r7
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <MX_TIM6_Init+0x64>)
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <MX_TIM6_Init+0x68>)
 800237e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <MX_TIM6_Init+0x64>)
 8002382:	2231      	movs	r2, #49	; 0x31
 8002384:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <MX_TIM6_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_TIM6_Init+0x64>)
 800238e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002392:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_TIM6_Init+0x64>)
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <MX_TIM6_Init+0x64>)
 800239c:	f002 faf4 	bl	8004988 <HAL_TIM_Base_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80023a6:	f000 f905 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	4619      	mov	r1, r3
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <MX_TIM6_Init+0x64>)
 80023b8:	f002 fbd6 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80023c2:	f000 f8f7 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200001f0 	.word	0x200001f0
 80023d4:	40001000 	.word	0x40001000

080023d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_USART6_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_USART6_UART_Init+0x4c>)
 8002410:	f002 fc26 	bl	8004c60 <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f000 f8cb 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000238 	.word	0x20000238
 8002428:	40011400 	.word	0x40011400

0800242c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <MX_GPIO_Init+0x178>)
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <MX_GPIO_Init+0x178>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <MX_GPIO_Init+0x178>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <MX_GPIO_Init+0x178>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <MX_GPIO_Init+0x178>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <MX_GPIO_Init+0x178>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <MX_GPIO_Init+0x178>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <MX_GPIO_Init+0x178>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <MX_GPIO_Init+0x178>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80024d4:	4834      	ldr	r0, [pc, #208]	; (80025a8 <MX_GPIO_Init+0x17c>)
 80024d6:	f001 f965 	bl	80037a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80024da:	2200      	movs	r2, #0
 80024dc:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80024e0:	4832      	ldr	r0, [pc, #200]	; (80025ac <MX_GPIO_Init+0x180>)
 80024e2:	f001 f95f 	bl	80037a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 80024e6:	f643 6389 	movw	r3, #16009	; 0x3e89
 80024ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	482a      	ldr	r0, [pc, #168]	; (80025a8 <MX_GPIO_Init+0x17c>)
 80024fe:	f000 ff9d 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002502:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8002506:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	4823      	ldr	r0, [pc, #140]	; (80025a8 <MX_GPIO_Init+0x17c>)
 800251c:	f000 ff8e 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002520:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002526:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	481e      	ldr	r0, [pc, #120]	; (80025b0 <MX_GPIO_Init+0x184>)
 8002538:	f000 ff80 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800253c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002540:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4815      	ldr	r0, [pc, #84]	; (80025ac <MX_GPIO_Init+0x180>)
 8002556:	f000 ff71 	bl	800343c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2006      	movs	r0, #6
 8002560:	f000 ff35 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002564:	2006      	movs	r0, #6
 8002566:	f000 ff4e 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	2009      	movs	r0, #9
 8002570:	f000 ff2d 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002574:	2009      	movs	r0, #9
 8002576:	f000 ff46 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2017      	movs	r0, #23
 8002580:	f000 ff25 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002584:	2017      	movs	r0, #23
 8002586:	f000 ff3e 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2028      	movs	r0, #40	; 0x28
 8002590:	f000 ff1d 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002594:	2028      	movs	r0, #40	; 0x28
 8002596:	f000 ff36 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40020400 	.word	0x40020400

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_MspInit+0x4c>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x4c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025fe:	2007      	movs	r0, #7
 8002600:	f000 feda 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <HAL_ADC_MspInit+0x7c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d127      	bne.n	8002682 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_ADC_MspInit+0x80>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_ADC_MspInit+0x80>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_ADC_MspInit+0x80>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_ADC_MspInit+0x80>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_ADC_MspInit+0x80>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_ADC_MspInit+0x80>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800266a:	2302      	movs	r3, #2
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266e:	2303      	movs	r3, #3
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_ADC_MspInit+0x84>)
 800267e:	f000 fedd 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012000 	.word	0x40012000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_I2C_MspInit+0x84>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12b      	bne.n	8002712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d6:	23c0      	movs	r3, #192	; 0xc0
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026da:	2312      	movs	r3, #18
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026e6:	2304      	movs	r3, #4
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <HAL_I2C_MspInit+0x8c>)
 80026f2:	f000 fea3 	bl	800343c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_I2C_MspInit+0x88>)
 8002700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_I2C_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3728      	adds	r7, #40	; 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40005400 	.word	0x40005400
 8002720:	40023800 	.word	0x40023800
 8002724:	40020400 	.word	0x40020400

08002728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_TIM_Base_MspInit+0x3c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_TIM_Base_MspInit+0x40>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_TIM_Base_MspInit+0x40>)
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_TIM_Base_MspInit+0x40>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40001000 	.word	0x40001000
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0x84>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_UART_MspInit+0x88>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_UART_MspInit+0x88>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_UART_MspInit+0x88>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_UART_MspInit+0x88>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_UART_MspInit+0x88>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_UART_MspInit+0x88>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c6:	23c0      	movs	r3, #192	; 0xc0
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027d6:	2308      	movs	r3, #8
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <HAL_UART_MspInit+0x8c>)
 80027e2:	f000 fe2b 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020800 	.word	0x40020800

080027fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <NMI_Handler+0x4>

08002802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <MemManage_Handler+0x4>

0800280e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler+0x4>

08002814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <UsageFault_Handler+0x4>

0800281a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002848:	f000 f8c6 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 ffbf 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}

0800285e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002862:	2008      	movs	r0, #8
 8002864:	f000 ffb8 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002870:	2080      	movs	r0, #128	; 0x80
 8002872:	f000 ffb1 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800287a:	f000 ffad 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}

08002882 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002886:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800288a:	f000 ffa5 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800288e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002892:	f000 ffa1 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002896:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800289a:	f000 ff9d 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800289e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028a2:	f000 ff99 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80028a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028aa:	f000 ff95 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80028ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028b2:	f000 ff91 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <SystemInit+0x20>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <SystemInit+0x20>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028fc:	4c0b      	ldr	r4, [pc, #44]	; (800292c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800290a:	f7ff ffd7 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290e:	f002 fccd 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002912:	f7ff fbc5 	bl	80020a0 <main>
  bx  lr    
 8002916:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800291c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002920:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002924:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8002928:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800292c:	20000284 	.word	0x20000284

08002930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002930:	e7fe      	b.n	8002930 <ADC_IRQHandler>
	...

08002934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_Init+0x40>)
 800293e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_Init+0x40>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_Init+0x40>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f000 fd2b 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002962:	2000      	movs	r0, #0
 8002964:	f000 f808 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002968:	f7ff fe2a 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fd43 	bl	8003422 <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f000 fd0b 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000088 	.word	0x20000088
 80029d0:	20000090 	.word	0x20000090
 80029d4:	2000008c 	.word	0x2000008c

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000090 	.word	0x20000090
 80029fc:	20000280 	.word	0x20000280

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000280 	.word	0x20000280

08002a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e033      	b.n	8002a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fdea 	bl	8002610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a5e:	f023 0302 	bic.w	r3, r3, #2
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fad8 	bl	8003020 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
 8002a86:	e001      	b.n	8002a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Start+0x1a>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0b2      	b.n	8002c20 <HAL_ADC_Start+0x180>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d018      	beq.n	8002b02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_ADC_Start+0x18c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_ADC_Start+0x190>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0c9a      	lsrs	r2, r3, #18
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002af4:	e002      	b.n	8002afc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f9      	bne.n	8002af6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d17a      	bne.n	8002c06 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d106      	bne.n	8002b5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f023 0206 	bic.w	r2, r3, #6
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002b6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12a      	bne.n	8002bdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <HAL_ADC_Start+0x198>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d015      	beq.n	8002bbc <HAL_ADC_Start+0x11c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_ADC_Start+0x19c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_Start+0x106>
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_ADC_Start+0x1a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d136      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d130      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d129      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e020      	b.n	8002c1e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_ADC_Start+0x198>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11b      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d114      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e00b      	b.n	8002c1e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000088 	.word	0x20000088
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	40012300 	.word	0x40012300
 8002c38:	40012000 	.word	0x40012000
 8002c3c:	40012100 	.word	0x40012100
 8002c40:	40012200 	.word	0x40012200

08002c44 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Stop+0x16>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e021      	b.n	8002c9e <HAL_ADC_Stop+0x5a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d113      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e063      	b.n	8002db8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cf0:	f7ff fe86 	bl	8002a00 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cf6:	e021      	b.n	8002d3c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d01d      	beq.n	8002d3c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x6c>
 8002d06:	f7ff fe7b 	bl	8002a00 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d212      	bcs.n	8002d3c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d00b      	beq.n	8002d3c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e03d      	b.n	8002db8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d1d6      	bne.n	8002cf8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0212 	mvn.w	r2, #18
 8002d52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d123      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11f      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1c>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e105      	b.n	8003004 <HAL_ADC_ConfigChannel+0x228>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d925      	bls.n	8002e54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68d9      	ldr	r1, [r3, #12]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	2207      	movs	r2, #7
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43da      	mvns	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68d9      	ldr	r1, [r3, #12]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4403      	add	r3, r0
 8002e46:	3b1e      	subs	r3, #30
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	e022      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	2207      	movs	r2, #7
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	400a      	ands	r2, r1
 8002e76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4403      	add	r3, r0
 8002e90:	409a      	lsls	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d824      	bhi.n	8002eec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b05      	subs	r3, #5
 8002eb4:	221f      	movs	r2, #31
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	3b05      	subs	r3, #5
 8002ede:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eea:	e04c      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d824      	bhi.n	8002f3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b23      	subs	r3, #35	; 0x23
 8002f06:	221f      	movs	r2, #31
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	400a      	ands	r2, r1
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b23      	subs	r3, #35	; 0x23
 8002f30:	fa00 f203 	lsl.w	r2, r0, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f3c:	e023      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b41      	subs	r3, #65	; 0x41
 8002f50:	221f      	movs	r2, #31
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43da      	mvns	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	3b41      	subs	r3, #65	; 0x41
 8002f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_ADC_ConfigChannel+0x234>)
 8002f88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <HAL_ADC_ConfigChannel+0x238>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d109      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1cc>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d105      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_ADC_ConfigChannel+0x238>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d123      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x21e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d003      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x1e6>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b11      	cmp	r3, #17
 8002fc0:	d11b      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d111      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_ADC_ConfigChannel+0x23c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_ADC_ConfigChannel+0x240>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9a      	lsrs	r2, r3, #18
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fec:	e002      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f9      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40012300 	.word	0x40012300
 8003014:	40012000 	.word	0x40012000
 8003018:	20000088 	.word	0x20000088
 800301c:	431bde83 	.word	0x431bde83

08003020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003028:	4b79      	ldr	r3, [pc, #484]	; (8003210 <ADC_Init+0x1f0>)
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	021a      	lsls	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <ADC_Init+0x1f4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e00f      	b.n	800311e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800311c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0202 	bic.w	r2, r2, #2
 800312c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7e1b      	ldrb	r3, [r3, #24]
 8003138:	005a      	lsls	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800316a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	3b01      	subs	r3, #1
 8003178:	035a      	lsls	r2, r3, #13
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e007      	b.n	8003194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	051a      	lsls	r2, r3, #20
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031d6:	025a      	lsls	r2, r3, #9
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	029a      	lsls	r2, r3, #10
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40012300 	.word	0x40012300
 8003214:	0f000001 	.word	0x0f000001

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff3e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e16b      	b.n	8003730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	f040 815a 	bne.w	800372a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	2b02      	cmp	r3, #2
 800348c:	d130      	bne.n	80034f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d017      	beq.n	800352c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d123      	bne.n	8003580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80b4 	beq.w	800372a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b60      	ldr	r3, [pc, #384]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035de:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_GPIO_Init+0x310>)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_GPIO_Init+0x314>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <HAL_GPIO_Init+0x226>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_GPIO_Init+0x318>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d025      	beq.n	800365e <HAL_GPIO_Init+0x222>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_GPIO_Init+0x31c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <HAL_GPIO_Init+0x21e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4f      	ldr	r2, [pc, #316]	; (800375c <HAL_GPIO_Init+0x320>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d019      	beq.n	8003656 <HAL_GPIO_Init+0x21a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4e      	ldr	r2, [pc, #312]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_GPIO_Init+0x216>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4d      	ldr	r2, [pc, #308]	; (8003764 <HAL_GPIO_Init+0x328>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00d      	beq.n	800364e <HAL_GPIO_Init+0x212>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <HAL_GPIO_Init+0x32c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <HAL_GPIO_Init+0x20e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_GPIO_Init+0x330>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_GPIO_Init+0x20a>
 8003642:	2307      	movs	r3, #7
 8003644:	e00e      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003646:	2308      	movs	r3, #8
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800364a:	2306      	movs	r3, #6
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <HAL_GPIO_Init+0x310>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a6:	4a32      	ldr	r2, [pc, #200]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f ae90 	bls.w	8003458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40021c00 	.word	0x40021c00
 8003770:	40013c00 	.word	0x40013c00

08003774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e001      	b.n	8003796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fbc2 	bl	8001f80 <HAL_GPIO_EXTI_Callback>
  }
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e12b      	b.n	8003a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe ff32 	bl	8002698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800386a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800386c:	f001 f864 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8003870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a81      	ldr	r2, [pc, #516]	; (8003a7c <HAL_I2C_Init+0x274>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d807      	bhi.n	800388c <HAL_I2C_Init+0x84>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a80      	ldr	r2, [pc, #512]	; (8003a80 <HAL_I2C_Init+0x278>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e006      	b.n	800389a <HAL_I2C_Init+0x92>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <HAL_I2C_Init+0x27c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0e7      	b.n	8003a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a78      	ldr	r2, [pc, #480]	; (8003a88 <HAL_I2C_Init+0x280>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	0c9b      	lsrs	r3, r3, #18
 80038ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_I2C_Init+0x274>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d802      	bhi.n	80038dc <HAL_I2C_Init+0xd4>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3301      	adds	r3, #1
 80038da:	e009      	b.n	80038f0 <HAL_I2C_Init+0xe8>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	4a69      	ldr	r2, [pc, #420]	; (8003a8c <HAL_I2C_Init+0x284>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	3301      	adds	r3, #1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	495c      	ldr	r1, [pc, #368]	; (8003a7c <HAL_I2C_Init+0x274>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d819      	bhi.n	8003944 <HAL_I2C_Init+0x13c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e59      	subs	r1, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fbb1 f3f3 	udiv	r3, r1, r3
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003924:	400b      	ands	r3, r1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_I2C_Init+0x138>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e59      	subs	r1, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fbb1 f3f3 	udiv	r3, r1, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	e051      	b.n	80039e4 <HAL_I2C_Init+0x1dc>
 8003940:	2304      	movs	r3, #4
 8003942:	e04f      	b.n	80039e4 <HAL_I2C_Init+0x1dc>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <HAL_I2C_Init+0x168>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e012      	b.n	8003996 <HAL_I2C_Init+0x18e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e58      	subs	r0, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	0099      	lsls	r1, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	fbb0 f3f3 	udiv	r3, r0, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Init+0x196>
 800399a:	2301      	movs	r3, #1
 800399c:	e022      	b.n	80039e4 <HAL_I2C_Init+0x1dc>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10e      	bne.n	80039c4 <HAL_I2C_Init+0x1bc>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e58      	subs	r0, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	440b      	add	r3, r1
 80039b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b8:	3301      	adds	r3, #1
 80039ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c2:	e00f      	b.n	80039e4 <HAL_I2C_Init+0x1dc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	0099      	lsls	r1, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	6809      	ldr	r1, [r1, #0]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6911      	ldr	r1, [r2, #16]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68d2      	ldr	r2, [r2, #12]
 8003a1e:	4311      	orrs	r1, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	000186a0 	.word	0x000186a0
 8003a80:	001e847f 	.word	0x001e847f
 8003a84:	003d08ff 	.word	0x003d08ff
 8003a88:	431bde83 	.word	0x431bde83
 8003a8c:	10624dd3 	.word	0x10624dd3

08003a90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	817b      	strh	r3, [r7, #10]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7fe ffac 	bl	8002a00 <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	f040 80e0 	bne.w	8003c78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2319      	movs	r3, #25
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4970      	ldr	r1, [pc, #448]	; (8003c84 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f964 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e0d3      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2C_Master_Transmit+0x50>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0cc      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d007      	beq.n	8003b06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2221      	movs	r2, #33	; 0x21
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2210      	movs	r2, #16
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	893a      	ldrh	r2, [r7, #8]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b48:	8979      	ldrh	r1, [r7, #10]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f89c 	bl	8003c8c <I2C_MasterRequestWrite>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e08d      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b74:	e066      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9de 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06b      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_I2C_Master_Transmit+0x188>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d017      	beq.n	8003c18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	6a39      	ldr	r1, [r7, #32]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f9ce 	bl	8003fbe <I2C_WaitOnBTFFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00d      	beq.n	8003c44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d107      	bne.n	8003c40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e01a      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d194      	bne.n	8003b76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	00100002 	.word	0x00100002
 8003c88:	ffff0000 	.word	0xffff0000

08003c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d006      	beq.n	8003cb6 <I2C_MasterRequestWrite+0x2a>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d003      	beq.n	8003cb6 <I2C_MasterRequestWrite+0x2a>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb4:	d108      	bne.n	8003cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e00b      	b.n	8003ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b12      	cmp	r3, #18
 8003cce:	d107      	bne.n	8003ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f84f 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d103      	bne.n	8003d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e035      	b.n	8003d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1c:	d108      	bne.n	8003d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	e01b      	b.n	8003d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	11db      	asrs	r3, r3, #7
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 0306 	and.w	r3, r3, #6
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f063 030f 	orn	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	490e      	ldr	r1, [pc, #56]	; (8003d88 <I2C_MasterRequestWrite+0xfc>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f875 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e010      	b.n	8003d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4907      	ldr	r1, [pc, #28]	; (8003d8c <I2C_MasterRequestWrite+0x100>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f865 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	00010008 	.word	0x00010008
 8003d8c:	00010002 	.word	0x00010002

08003d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da0:	e025      	b.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fe29 	bl	8002a00 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e023      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10d      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	e00c      	b.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0b6      	beq.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e4c:	e051      	b.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5c:	d123      	bne.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e046      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d021      	beq.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fe fda7 	bl	8002a00 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d116      	bne.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e020      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10c      	bne.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e00b      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d18d      	bne.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	e02d      	b.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f878 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02d      	b.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d021      	beq.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe fd4d 	bl	8002a00 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d116      	bne.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d1ca      	bne.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fca:	e02d      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f837 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e02d      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d021      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fe fd0c 	bl	8002a00 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d1ca      	bne.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d11b      	bne.n	8004090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f043 0204 	orr.w	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e264      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4ba0      	ldr	r3, [pc, #640]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b9d      	ldr	r3, [pc, #628]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b99      	ldr	r3, [pc, #612]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e23f      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b91      	ldr	r3, [pc, #580]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a90      	ldr	r2, [pc, #576]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a8a      	ldr	r2, [pc, #552]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b88      	ldr	r3, [pc, #544]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a87      	ldr	r2, [pc, #540]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b84      	ldr	r3, [pc, #528]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a83      	ldr	r2, [pc, #524]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b81      	ldr	r3, [pc, #516]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a80      	ldr	r2, [pc, #512]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fc52 	bl	8002a00 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe fc4e 	bl	8002a00 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e204      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fc3e 	bl	8002a00 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fc3a 	bl	8002a00 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1f0      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b62      	ldr	r3, [pc, #392]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b5c      	ldr	r3, [pc, #368]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c4      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b56      	ldr	r3, [pc, #344]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4952      	ldr	r1, [pc, #328]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b4f      	ldr	r3, [pc, #316]	; (8004350 <HAL_RCC_OscConfig+0x2b0>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fe fbf3 	bl	8002a00 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7fe fbef 	bl	8002a00 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a5      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4940      	ldr	r1, [pc, #256]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_OscConfig+0x2b0>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fbd2 	bl	8002a00 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7fe fbce 	bl	8002a00 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e184      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d030      	beq.n	80042ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCC_OscConfig+0x2b4>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe fbb2 	bl	8002a00 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe fbae 	bl	8002a00 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e164      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
 80042be:	e015      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_OscConfig+0x2b4>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe fb9b 	bl	8002a00 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fe fb97 	bl	8002a00 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e14d      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a0 	beq.w	800443a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a0e      	ldr	r2, [pc, #56]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d121      	bne.n	800437a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a07      	ldr	r2, [pc, #28]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fe fb5d 	bl	8002a00 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e011      	b.n	800436e <HAL_RCC_OscConfig+0x2ce>
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	42470000 	.word	0x42470000
 8004354:	42470e80 	.word	0x42470e80
 8004358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fe fb50 	bl	8002a00 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e106      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436e:	4b85      	ldr	r3, [pc, #532]	; (8004584 <HAL_RCC_OscConfig+0x4e4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x2f0>
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a80      	ldr	r2, [pc, #512]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	e01c      	b.n	80043ca <HAL_RCC_OscConfig+0x32a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x312>
 8004398:	4b7b      	ldr	r3, [pc, #492]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a7a      	ldr	r2, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	4b78      	ldr	r3, [pc, #480]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a77      	ldr	r2, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0x32a>
 80043b2:	4b75      	ldr	r3, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a74      	ldr	r2, [pc, #464]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	4b72      	ldr	r3, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a71      	ldr	r2, [pc, #452]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fe fb15 	bl	8002a00 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fe fb11 	bl	8002a00 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0c5      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ee      	beq.n	80043da <HAL_RCC_OscConfig+0x33a>
 80043fc:	e014      	b.n	8004428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fe faff 	bl	8002a00 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fe fafb 	bl	8002a00 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0af      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	4b5a      	ldr	r3, [pc, #360]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b56      	ldr	r3, [pc, #344]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a55      	ldr	r2, [pc, #340]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 809b 	beq.w	800457a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d05c      	beq.n	800450a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d141      	bne.n	80044dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b4c      	ldr	r3, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fe facf 	bl	8002a00 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fe facb 	bl	8002a00 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e081      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	4937      	ldr	r1, [pc, #220]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe faa4 	bl	8002a00 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fe faa0 	bl	8002a00 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e056      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x41c>
 80044da:	e04e      	b.n	800457a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fe fa8d 	bl	8002a00 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fe fa89 	bl	8002a00 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e03f      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x44a>
 8004508:	e037      	b.n	800457a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e032      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d028      	beq.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d121      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d11a      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800454e:	4293      	cmp	r3, r2
 8004550:	d111      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d107      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40007000 	.word	0x40007000
 8004588:	40023800 	.word	0x40023800
 800458c:	42470060 	.word	0x42470060

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fe f9be 	bl	8002a00 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fe f9ba 	bl	8002a00 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490a      	ldr	r1, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe f91e 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	08005484 	.word	0x08005484
 8004754:	20000088 	.word	0x20000088
 8004758:	2000008c 	.word	0x2000008c

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	2300      	movs	r3, #0
 800476e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004774:	4b67      	ldr	r3, [pc, #412]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d00d      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x40>
 8004780:	2b08      	cmp	r3, #8
 8004782:	f200 80bd 	bhi.w	8004900 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x3a>
 800478e:	e0b7      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b61      	ldr	r3, [pc, #388]	; (8004918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004792:	60bb      	str	r3, [r7, #8]
       break;
 8004794:	e0b7      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004796:	4b61      	ldr	r3, [pc, #388]	; (800491c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004798:	60bb      	str	r3, [r7, #8]
      break;
 800479a:	e0b4      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479c:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a6:	4b5b      	ldr	r3, [pc, #364]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04d      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	461a      	mov	r2, r3
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	ea02 0800 	and.w	r8, r2, r0
 80047ca:	ea03 0901 	and.w	r9, r3, r1
 80047ce:	4640      	mov	r0, r8
 80047d0:	4649      	mov	r1, r9
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	014b      	lsls	r3, r1, #5
 80047dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047e0:	0142      	lsls	r2, r0, #5
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	ebb0 0008 	subs.w	r0, r0, r8
 80047ea:	eb61 0109 	sbc.w	r1, r1, r9
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	018b      	lsls	r3, r1, #6
 80047f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047fc:	0182      	lsls	r2, r0, #6
 80047fe:	1a12      	subs	r2, r2, r0
 8004800:	eb63 0301 	sbc.w	r3, r3, r1
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	00d9      	lsls	r1, r3, #3
 800480e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004812:	00d0      	lsls	r0, r2, #3
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	eb12 0208 	adds.w	r2, r2, r8
 800481c:	eb43 0309 	adc.w	r3, r3, r9
 8004820:	f04f 0000 	mov.w	r0, #0
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	0259      	lsls	r1, r3, #9
 800482a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800482e:	0250      	lsls	r0, r2, #9
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	461a      	mov	r2, r3
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f7fb fcca 	bl	80001d8 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e04a      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	ea02 0400 	and.w	r4, r2, r0
 8004866:	ea03 0501 	and.w	r5, r3, r1
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	014b      	lsls	r3, r1, #5
 8004878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800487c:	0142      	lsls	r2, r0, #5
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	1b00      	subs	r0, r0, r4
 8004884:	eb61 0105 	sbc.w	r1, r1, r5
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	018b      	lsls	r3, r1, #6
 8004892:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004896:	0182      	lsls	r2, r0, #6
 8004898:	1a12      	subs	r2, r2, r0
 800489a:	eb63 0301 	sbc.w	r3, r3, r1
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	00d9      	lsls	r1, r3, #3
 80048a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048ac:	00d0      	lsls	r0, r2, #3
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	1912      	adds	r2, r2, r4
 80048b4:	eb45 0303 	adc.w	r3, r5, r3
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	0299      	lsls	r1, r3, #10
 80048c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048c6:	0290      	lsls	r0, r2, #10
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	f7fb fc7e 	bl	80001d8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	60bb      	str	r3, [r7, #8]
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004902:	60bb      	str	r3, [r7, #8]
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	68bb      	ldr	r3, [r7, #8]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400
 800491c:	007a1200 	.word	0x007a1200

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000088 	.word	0x20000088

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800493c:	f7ff fff0 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	08005494 	.word	0x08005494

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004964:	f7ff ffdc 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0b5b      	lsrs	r3, r3, #13
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	08005494 	.word	0x08005494

08004988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e041      	b.n	8004a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fd feba 	bl	8002728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 f82e 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <TIM_Base_SetConfig+0x118>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <TIM_Base_SetConfig+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	; (8004b48 <TIM_Base_SetConfig+0x120>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3a      	ldr	r2, [pc, #232]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d027      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <TIM_Base_SetConfig+0x118>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d023      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2b      	ldr	r2, [pc, #172]	; (8004b44 <TIM_Base_SetConfig+0x11c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <TIM_Base_SetConfig+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <TIM_Base_SetConfig+0x128>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <TIM_Base_SetConfig+0x12c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a26      	ldr	r2, [pc, #152]	; (8004b58 <TIM_Base_SetConfig+0x130>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <TIM_Base_SetConfig+0x134>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <TIM_Base_SetConfig+0x138>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <TIM_Base_SetConfig+0x13c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0xf8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d103      	bne.n	8004b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	615a      	str	r2, [r3, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40001800 	.word	0x40001800
 8004b60:	40001c00 	.word	0x40001c00
 8004b64:	40002000 	.word	0x40002000

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e05a      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d01d      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40010400 	.word	0x40010400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40001800 	.word	0x40001800

08004c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e03f      	b.n	8004cf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd fd70 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	; 0x24
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f939 	bl	8004f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08a      	sub	sp, #40	; 0x28
 8004cfe:	af02      	add	r7, sp, #8
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	f040 808c 	bne.w	8004e34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_UART_Receive+0x2e>
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e084      	b.n	8004e36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Receive+0x40>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e07d      	b.n	8004e36 <HAL_UART_Receive+0x13c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2222      	movs	r2, #34	; 0x22
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d56:	f7fd fe53 	bl	8002a00 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Receive+0x8a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d94:	e043      	b.n	8004e1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2120      	movs	r1, #32
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f84c 	bl	8004e3e <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e042      	b.n	8004e36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3302      	adds	r3, #2
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e01f      	b.n	8004e10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d007      	beq.n	8004dea <HAL_UART_Receive+0xf0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <HAL_UART_Receive+0xfe>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e008      	b.n	8004e0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1b6      	bne.n	8004d96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b090      	sub	sp, #64	; 0x40
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4e:	e050      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d04c      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5e:	f7fd fdcf 	bl	8002a00 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d241      	bcs.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec2:	623a      	str	r2, [r7, #32]
 8004ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00f      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d09f      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3740      	adds	r7, #64	; 0x40
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	b09f      	sub	sp, #124	; 0x7c
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f32:	68d9      	ldr	r1, [r3, #12]
 8004f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	ea40 0301 	orr.w	r3, r0, r1
 8004f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f60:	f021 010c 	bic.w	r1, r1, #12
 8004f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	6999      	ldr	r1, [r3, #24]
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	ea40 0301 	orr.w	r3, r0, r1
 8004f84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4bc5      	ldr	r3, [pc, #788]	; (80052a0 <UART_SetConfig+0x384>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d004      	beq.n	8004f9a <UART_SetConfig+0x7e>
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4bc3      	ldr	r3, [pc, #780]	; (80052a4 <UART_SetConfig+0x388>)
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d103      	bne.n	8004fa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f9a:	f7ff fce1 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8004f9e:	6778      	str	r0, [r7, #116]	; 0x74
 8004fa0:	e002      	b.n	8004fa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fa2:	f7ff fcc9 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8004fa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb0:	f040 80b6 	bne.w	8005120 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb6:	461c      	mov	r4, r3
 8004fb8:	f04f 0500 	mov.w	r5, #0
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	6439      	str	r1, [r7, #64]	; 0x40
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fcc:	1912      	adds	r2, r2, r4
 8004fce:	eb45 0303 	adc.w	r3, r5, r3
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	00d9      	lsls	r1, r3, #3
 8004fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fe0:	00d0      	lsls	r0, r2, #3
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	1911      	adds	r1, r2, r4
 8004fe8:	6639      	str	r1, [r7, #96]	; 0x60
 8004fea:	416b      	adcs	r3, r5
 8004fec:	667b      	str	r3, [r7, #100]	; 0x64
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005008:	f7fb f8e6 	bl	80001d8 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4ba5      	ldr	r3, [pc, #660]	; (80052a8 <UART_SetConfig+0x38c>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011e      	lsls	r6, r3, #4
 800501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501c:	461c      	mov	r4, r3
 800501e:	f04f 0500 	mov.w	r5, #0
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	1891      	adds	r1, r2, r2
 8005028:	6339      	str	r1, [r7, #48]	; 0x30
 800502a:	415b      	adcs	r3, r3
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005032:	1912      	adds	r2, r2, r4
 8005034:	eb45 0303 	adc.w	r3, r5, r3
 8005038:	f04f 0000 	mov.w	r0, #0
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	00d9      	lsls	r1, r3, #3
 8005042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005046:	00d0      	lsls	r0, r2, #3
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	1911      	adds	r1, r2, r4
 800504e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005050:	416b      	adcs	r3, r5
 8005052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	1891      	adds	r1, r2, r2
 8005060:	62b9      	str	r1, [r7, #40]	; 0x28
 8005062:	415b      	adcs	r3, r3
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800506a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800506e:	f7fb f8b3 	bl	80001d8 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4b8c      	ldr	r3, [pc, #560]	; (80052a8 <UART_SetConfig+0x38c>)
 8005078:	fba3 1302 	umull	r1, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	2164      	movs	r1, #100	; 0x64
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	3332      	adds	r3, #50	; 0x32
 800508a:	4a87      	ldr	r2, [pc, #540]	; (80052a8 <UART_SetConfig+0x38c>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005098:	441e      	add	r6, r3
 800509a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800509c:	4618      	mov	r0, r3
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	1894      	adds	r4, r2, r2
 80050a8:	623c      	str	r4, [r7, #32]
 80050aa:	415b      	adcs	r3, r3
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b2:	1812      	adds	r2, r2, r0
 80050b4:	eb41 0303 	adc.w	r3, r1, r3
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	f04f 0500 	mov.w	r5, #0
 80050c0:	00dd      	lsls	r5, r3, #3
 80050c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050c6:	00d4      	lsls	r4, r2, #3
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	1814      	adds	r4, r2, r0
 80050ce:	653c      	str	r4, [r7, #80]	; 0x50
 80050d0:	414b      	adcs	r3, r1
 80050d2:	657b      	str	r3, [r7, #84]	; 0x54
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	461a      	mov	r2, r3
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	61b9      	str	r1, [r7, #24]
 80050e2:	415b      	adcs	r3, r3
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050ee:	f7fb f873 	bl	80001d8 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4b6c      	ldr	r3, [pc, #432]	; (80052a8 <UART_SetConfig+0x38c>)
 80050f8:	fba3 1302 	umull	r1, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	2164      	movs	r1, #100	; 0x64
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	3332      	adds	r3, #50	; 0x32
 800510a:	4a67      	ldr	r2, [pc, #412]	; (80052a8 <UART_SetConfig+0x38c>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	f003 0207 	and.w	r2, r3, #7
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4432      	add	r2, r6
 800511c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800511e:	e0b9      	b.n	8005294 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005122:	461c      	mov	r4, r3
 8005124:	f04f 0500 	mov.w	r5, #0
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	1891      	adds	r1, r2, r2
 800512e:	6139      	str	r1, [r7, #16]
 8005130:	415b      	adcs	r3, r3
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005138:	1912      	adds	r2, r2, r4
 800513a:	eb45 0303 	adc.w	r3, r5, r3
 800513e:	f04f 0000 	mov.w	r0, #0
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	00d9      	lsls	r1, r3, #3
 8005148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800514c:	00d0      	lsls	r0, r2, #3
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	eb12 0804 	adds.w	r8, r2, r4
 8005156:	eb43 0905 	adc.w	r9, r3, r5
 800515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	f04f 0100 	mov.w	r1, #0
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	008b      	lsls	r3, r1, #2
 800516e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005172:	0082      	lsls	r2, r0, #2
 8005174:	4640      	mov	r0, r8
 8005176:	4649      	mov	r1, r9
 8005178:	f7fb f82e 	bl	80001d8 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <UART_SetConfig+0x38c>)
 8005182:	fba3 2302 	umull	r2, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	011e      	lsls	r6, r3, #4
 800518a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518c:	4618      	mov	r0, r3
 800518e:	f04f 0100 	mov.w	r1, #0
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	1894      	adds	r4, r2, r2
 8005198:	60bc      	str	r4, [r7, #8]
 800519a:	415b      	adcs	r3, r3
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a2:	1812      	adds	r2, r2, r0
 80051a4:	eb41 0303 	adc.w	r3, r1, r3
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	f04f 0500 	mov.w	r5, #0
 80051b0:	00dd      	lsls	r5, r3, #3
 80051b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051b6:	00d4      	lsls	r4, r2, #3
 80051b8:	4622      	mov	r2, r4
 80051ba:	462b      	mov	r3, r5
 80051bc:	1814      	adds	r4, r2, r0
 80051be:	64bc      	str	r4, [r7, #72]	; 0x48
 80051c0:	414b      	adcs	r3, r1
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	008b      	lsls	r3, r1, #2
 80051d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051dc:	0082      	lsls	r2, r0, #2
 80051de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051e2:	f7fa fff9 	bl	80001d8 <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <UART_SetConfig+0x38c>)
 80051ec:	fba3 1302 	umull	r1, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	2164      	movs	r1, #100	; 0x64
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	3332      	adds	r3, #50	; 0x32
 80051fe:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <UART_SetConfig+0x38c>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800520a:	441e      	add	r6, r3
 800520c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520e:	4618      	mov	r0, r3
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	1894      	adds	r4, r2, r2
 800521a:	603c      	str	r4, [r7, #0]
 800521c:	415b      	adcs	r3, r3
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005224:	1812      	adds	r2, r2, r0
 8005226:	eb41 0303 	adc.w	r3, r1, r3
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	f04f 0500 	mov.w	r5, #0
 8005232:	00dd      	lsls	r5, r3, #3
 8005234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005238:	00d4      	lsls	r4, r2, #3
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	eb12 0a00 	adds.w	sl, r2, r0
 8005242:	eb43 0b01 	adc.w	fp, r3, r1
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4618      	mov	r0, r3
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800525e:	0082      	lsls	r2, r0, #2
 8005260:	4650      	mov	r0, sl
 8005262:	4659      	mov	r1, fp
 8005264:	f7fa ffb8 	bl	80001d8 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <UART_SetConfig+0x38c>)
 800526e:	fba3 1302 	umull	r1, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <UART_SetConfig+0x38c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4432      	add	r2, r6
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	377c      	adds	r7, #124	; 0x7c
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	40011000 	.word	0x40011000
 80052a4:	40011400 	.word	0x40011400
 80052a8:	51eb851f 	.word	0x51eb851f

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4d0d      	ldr	r5, [pc, #52]	; (80052e4 <__libc_init_array+0x38>)
 80052b0:	4c0d      	ldr	r4, [pc, #52]	; (80052e8 <__libc_init_array+0x3c>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	2600      	movs	r6, #0
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	4d0b      	ldr	r5, [pc, #44]	; (80052ec <__libc_init_array+0x40>)
 80052be:	4c0c      	ldr	r4, [pc, #48]	; (80052f0 <__libc_init_array+0x44>)
 80052c0:	f000 f820 	bl	8005304 <_init>
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	2600      	movs	r6, #0
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	f855 3b04 	ldr.w	r3, [r5], #4
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	080054a4 	.word	0x080054a4
 80052e8:	080054a4 	.word	0x080054a4
 80052ec:	080054a4 	.word	0x080054a4
 80052f0:	080054a8 	.word	0x080054a8

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
