
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca4  08003ca4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cac  08003cac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000015c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcae  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016af  00000000  00000000  0002bd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  0002dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fffc  00000000  00000000  0002e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc8d  00000000  00000000  0004e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40a4  00000000  00000000  0005a339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e3dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a0  00000000  00000000  0011e430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b30 	.word	0x08003b30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08003b30 	.word	0x08003b30

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <clrScr>:
#include "string.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 80004da:	1dfa      	adds	r2, r7, #7
 80004dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	2110      	movs	r1, #16
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <clrScr+0x24>)
 80004e8:	f002 f854 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000b4 	.word	0x200000b4

080004f8 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 8000504:	2302      	movs	r3, #2
 8000506:	753b      	strb	r3, [r7, #20]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	757b      	strb	r3, [r7, #21]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	75bb      	strb	r3, [r7, #22]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 800051a:	f107 0214 	add.w	r2, r7, #20
 800051e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2304      	movs	r3, #4
 8000526:	2110      	movs	r1, #16
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <setColor+0x40>)
 800052a:	f002 f833 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b4 	.word	0x200000b4

0800053c <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af02      	add	r7, sp, #8
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 8000548:	2303      	movs	r3, #3
 800054a:	753b      	strb	r3, [r7, #20]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	757b      	strb	r3, [r7, #21]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	75bb      	strb	r3, [r7, #22]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 800055e:	f107 0214 	add.w	r2, r7, #20
 8000562:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2304      	movs	r3, #4
 800056a:	2110      	movs	r1, #16
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <setBackColor+0x40>)
 800056e:	f002 f811 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8000572:	bf00      	nop
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000b4 	.word	0x200000b4

08000580 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af02      	add	r7, sp, #8
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2bff      	cmp	r3, #255	; 0xff
 80005a0:	dd01      	ble.n	80005a6 <drawRect+0x26>
		desb[0] = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	2bff      	cmp	r3, #255	; 0xff
 80005aa:	dd01      	ble.n	80005b0 <drawRect+0x30>
		desb[1] = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	dd01      	ble.n	80005ba <drawRect+0x3a>
		desb[2] = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	dd01      	ble.n	80005c4 <drawRect+0x44>
		desb[3] = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80005c4:	2304      	movs	r3, #4
 80005c6:	753b      	strb	r3, [r7, #20]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	757b      	strb	r3, [r7, #21]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	75bb      	strb	r3, [r7, #22]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	75fb      	strb	r3, [r7, #23]
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	763b      	strb	r3, [r7, #24]
 80005e0:	6a3b      	ldr	r3, [r7, #32]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	767b      	strb	r3, [r7, #25]
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	76bb      	strb	r3, [r7, #26]
 80005ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	76fb      	strb	r3, [r7, #27]
 80005f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 80005f8:	f107 0214 	add.w	r2, r7, #20
 80005fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2309      	movs	r3, #9
 8000604:	2110      	movs	r1, #16
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <drawRect+0x94>)
 8000608:	f001 ffc4 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3730      	adds	r7, #48	; 0x30
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b4 	.word	0x200000b4

08000618 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	dd01      	ble.n	800063e <fillRect+0x26>
		desb[0] = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	dd01      	ble.n	8000648 <fillRect+0x30>
		desb[1] = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2bff      	cmp	r3, #255	; 0xff
 800064c:	dd01      	ble.n	8000652 <fillRect+0x3a>
		desb[2] = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2bff      	cmp	r3, #255	; 0xff
 8000656:	dd01      	ble.n	800065c <fillRect+0x44>
		desb[3] = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 800065c:	2305      	movs	r3, #5
 800065e:	753b      	strb	r3, [r7, #20]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	757b      	strb	r3, [r7, #21]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	75bb      	strb	r3, [r7, #22]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	75fb      	strb	r3, [r7, #23]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	763b      	strb	r3, [r7, #24]
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	767b      	strb	r3, [r7, #25]
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	b2db      	uxtb	r3, r3
 8000682:	76bb      	strb	r3, [r7, #26]
 8000684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000686:	b2db      	uxtb	r3, r3
 8000688:	76fb      	strb	r3, [r7, #27]
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	b2db      	uxtb	r3, r3
 800068e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 8000690:	f107 0214 	add.w	r2, r7, #20
 8000694:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2309      	movs	r3, #9
 800069c:	2110      	movs	r1, #16
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <fillRect+0x94>)
 80006a0:	f001 ff78 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 80006a4:	bf00      	nop
 80006a6:	3730      	adds	r7, #48	; 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000b4 	.word	0x200000b4

080006b0 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b098      	sub	sp, #96	; 0x60
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 80006bc:	2300      	movs	r3, #0
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	dd01      	ble.n	80006ce <print+0x1e>
		desb[0] = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2bff      	cmp	r3, #255	; 0xff
 80006d2:	dd01      	ble.n	80006d8 <print+0x28>
		desb[1] = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 80006d8:	2306      	movs	r3, #6
 80006da:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff fd73 	bl	80001c8 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 80006e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 80006ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 80006f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 80006f8:	2304      	movs	r3, #4
 80006fa:	657b      	str	r3, [r7, #84]	; 0x54
 80006fc:	e00d      	b.n	800071a <print+0x6a>
		cadena[i] = t[i - 4];
 80006fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000700:	3b04      	subs	r3, #4
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	7819      	ldrb	r1, [r3, #0]
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800070e:	4413      	add	r3, r2
 8000710:	460a      	mov	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 8000714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000716:	3301      	adds	r3, #1
 8000718:	657b      	str	r3, [r7, #84]	; 0x54
 800071a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800071c:	3303      	adds	r3, #3
 800071e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000720:	429a      	cmp	r2, r3
 8000722:	ddec      	ble.n	80006fe <print+0x4e>
	}
	cadena[longitud + 4] = x;
 8000724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000726:	3304      	adds	r3, #4
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000730:	440b      	add	r3, r1
 8000732:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 8000736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000738:	3305      	adds	r3, #5
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000742:	440b      	add	r3, r1
 8000744:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 8000748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074a:	b29b      	uxth	r3, r3
 800074c:	3306      	adds	r3, #6
 800074e:	b29b      	uxth	r3, r3
 8000750:	f107 0214 	add.w	r2, r7, #20
 8000754:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000758:	9100      	str	r1, [sp, #0]
 800075a:	2110      	movs	r1, #16
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <print+0xbc>)
 800075e:	f001 ff19 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	; 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000b4 	.word	0x200000b4

08000770 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	e01b      	b.n	80007c0 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4619      	mov	r1, r3
 800079c:	f7ff ff88 	bl	80006b0 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd0c 	bl	80001c8 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	00da      	lsls	r2, r3, #3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4413      	add	r3, r2
 80007b8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	3301      	adds	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbdf      	blt.n	8000788 <printfrase+0x18>
	}
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 80007dc:	2307      	movs	r3, #7
 80007de:	733b      	strb	r3, [r7, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	2110      	movs	r1, #16
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <setFont+0x30>)
 80007f6:	f001 fecd 	bl	8002594 <HAL_I2C_Master_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000b4 	.word	0x200000b4

08000808 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 8000808:	b490      	push	{r4, r7}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 8000816:	4a48      	ldr	r2, [pc, #288]	; (8000938 <botones+0x130>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 800081c:	4a47      	ldr	r2, [pc, #284]	; (800093c <botones+0x134>)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 8000822:	4a47      	ldr	r2, [pc, #284]	; (8000940 <botones+0x138>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000828:	4a46      	ldr	r2, [pc, #280]	; (8000944 <botones+0x13c>)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 800082e:	4a46      	ldr	r2, [pc, #280]	; (8000948 <botones+0x140>)
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 8000834:	4a45      	ldr	r2, [pc, #276]	; (800094c <botones+0x144>)
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <botones+0x148>)
 800083c:	461c      	mov	r4, r3
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <botones+0x14c>)
 800084c:	461c      	mov	r4, r3
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <botones+0x150>)
 800085c:	461c      	mov	r4, r3
 800085e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 800086a:	4b3c      	ldr	r3, [pc, #240]	; (800095c <botones+0x154>)
 800086c:	461c      	mov	r4, r3
 800086e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 800087a:	4a39      	ldr	r2, [pc, #228]	; (8000960 <botones+0x158>)
 800087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800087e:	6013      	str	r3, [r2, #0]
	columnas = c;
 8000880:	4a38      	ldr	r2, [pc, #224]	; (8000964 <botones+0x15c>)
 8000882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000884:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <botones+0x15c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d013      	beq.n	80008b6 <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <botones+0x138>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <botones+0x15c>)
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <botones+0x130>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <botones+0x15c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80008b0:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <botones+0x160>)
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e011      	b.n	80008da <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <botones+0x138>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <botones+0x15c>)
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <botones+0x130>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	1ad2      	subs	r2, r2, r3
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <botones+0x15c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80008d6:	4a24      	ldr	r2, [pc, #144]	; (8000968 <botones+0x160>)
 80008d8:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <botones+0x158>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d013      	beq.n	800090a <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <botones+0x13c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <botones+0x158>)
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <botones+0x134>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <botones+0x158>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <botones+0x164>)
 8000906:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 8000908:	e011      	b.n	800092e <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <botones+0x13c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <botones+0x158>)
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <botones+0x134>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	1ad2      	subs	r2, r2, r3
				/ filas;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <botones+0x158>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <botones+0x164>)
 800092c:	6013      	str	r3, [r2, #0]
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bc90      	pop	{r4, r7}
 8000936:	4770      	bx	lr
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004
 8000940:	20000008 	.word	0x20000008
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000010 	.word	0x20000010
 800094c:	20000014 	.word	0x20000014
 8000950:	20000018 	.word	0x20000018
 8000954:	20000024 	.word	0x20000024
 8000958:	20000030 	.word	0x20000030
 800095c:	2000003c 	.word	0x2000003c
 8000960:	20000048 	.word	0x20000048
 8000964:	2000004c 	.word	0x2000004c
 8000968:	20000198 	.word	0x20000198
 800096c:	200001e0 	.word	0x200001e0

08000970 <crear_botonera>:

void crear_botonera() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e05d      	b.n	8000a38 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	e052      	b.n	8000a28 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <crear_botonera+0xdc>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <crear_botonera+0xe0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	fb02 f203 	mul.w	r2, r2, r3
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <crear_botonera+0xe4>)
 8000994:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000996:	4413      	add	r3, r2
 8000998:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <crear_botonera+0xe8>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <crear_botonera+0xec>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	fb02 f203 	mul.w	r2, r2, r3
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <crear_botonera+0xf0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 80009b2:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <crear_botonera+0xf4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <crear_botonera+0xf4>)
 80009b8:	6851      	ldr	r1, [r2, #4]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <crear_botonera+0xf4>)
 80009bc:	6892      	ldr	r2, [r2, #8]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd9a 	bl	80004f8 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <crear_botonera+0xf8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	1ad0      	subs	r0, r2, r3
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <crear_botonera+0xf8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <crear_botonera+0xe0>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <crear_botonera+0xf8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <crear_botonera+0xec>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <crear_botonera+0xf8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4622      	mov	r2, r4
 80009f2:	f7ff fe11 	bl	8000618 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <crear_botonera+0xfc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <crear_botonera+0xfc>)
 80009fc:	6851      	ldr	r1, [r2, #4]
 80009fe:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <crear_botonera+0xfc>)
 8000a00:	6892      	ldr	r2, [r2, #8]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd78 	bl	80004f8 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <crear_botonera+0xe0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	18d1      	adds	r1, r2, r3
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <crear_botonera+0xec>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	460a      	mov	r2, r1
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fdfb 	bl	8000618 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <crear_botonera+0x100>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dba7      	blt.n	8000982 <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <crear_botonera+0x104>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	db9c      	blt.n	800097c <crear_botonera+0xc>
		}
	}
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	20000198 	.word	0x20000198
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000000 	.word	0x20000000
 8000a58:	200001e0 	.word	0x200001e0
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000024 	.word	0x20000024
 8000a68:	20000010 	.word	0x20000010
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	2000004c 	.word	0x2000004c
 8000a74:	20000048 	.word	0x20000048

08000a78 <resaltar_boton>:

void resaltar_boton(int b) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08d      	sub	sp, #52	; 0x34
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int j = 0; j < filas; j++) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a88:	e083      	b.n	8000b92 <resaltar_boton+0x11a>
		for (int i = 0; i < columnas; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8e:	e078      	b.n	8000b82 <resaltar_boton+0x10a>
			if (boton_resaltado == k) {
 8000a90:	4b7f      	ldr	r3, [pc, #508]	; (8000c90 <resaltar_boton+0x218>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d16d      	bne.n	8000b76 <resaltar_boton+0xfe>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <resaltar_boton+0x21c>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b7e      	ldr	r3, [pc, #504]	; (8000c98 <resaltar_boton+0x220>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	fb02 f203 	mul.w	r2, r2, r3
 8000aaa:	4b7c      	ldr	r3, [pc, #496]	; (8000c9c <resaltar_boton+0x224>)
 8000aac:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000aae:	4413      	add	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000ab2:	4b7b      	ldr	r3, [pc, #492]	; (8000ca0 <resaltar_boton+0x228>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b7b      	ldr	r3, [pc, #492]	; (8000ca4 <resaltar_boton+0x22c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000abe:	fb02 f203 	mul.w	r2, r2, r3
 8000ac2:	4b79      	ldr	r3, [pc, #484]	; (8000ca8 <resaltar_boton+0x230>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
				setColor(0, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fd12 	bl	80004f8 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000ad4:	4b75      	ldr	r3, [pc, #468]	; (8000cac <resaltar_boton+0x234>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	1ad0      	subs	r0, r2, r3
 8000adc:	4b73      	ldr	r3, [pc, #460]	; (8000cac <resaltar_boton+0x234>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000ae4:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <resaltar_boton+0x220>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000aec:	4b6f      	ldr	r3, [pc, #444]	; (8000cac <resaltar_boton+0x234>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000af2:	4b6c      	ldr	r3, [pc, #432]	; (8000ca4 <resaltar_boton+0x22c>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000afa:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <resaltar_boton+0x234>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4622      	mov	r2, r4
 8000b02:	f7ff fd89 	bl	8000618 <fillRect>
				setColor(cmarco.r, cmarco.g, cmarco.b);
 8000b06:	4b6a      	ldr	r3, [pc, #424]	; (8000cb0 <resaltar_boton+0x238>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a69      	ldr	r2, [pc, #420]	; (8000cb0 <resaltar_boton+0x238>)
 8000b0c:	6851      	ldr	r1, [r2, #4]
 8000b0e:	4a68      	ldr	r2, [pc, #416]	; (8000cb0 <resaltar_boton+0x238>)
 8000b10:	6892      	ldr	r2, [r2, #8]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fcf0 	bl	80004f8 <setColor>
				fillRect(x - marco_boton, y - marco_boton,
 8000b18:	4b66      	ldr	r3, [pc, #408]	; (8000cb4 <resaltar_boton+0x23c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	1ad0      	subs	r0, r2, r3
 8000b20:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <resaltar_boton+0x23c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + marco_boton,
 8000b28:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <resaltar_boton+0x220>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000b30:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <resaltar_boton+0x23c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	18d4      	adds	r4, r2, r3
						y + alto_boton + marco_boton);
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <resaltar_boton+0x22c>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <resaltar_boton+0x23c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4622      	mov	r2, r4
 8000b46:	f7ff fd67 	bl	8000618 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000b4a:	4b5b      	ldr	r3, [pc, #364]	; (8000cb8 <resaltar_boton+0x240>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a5a      	ldr	r2, [pc, #360]	; (8000cb8 <resaltar_boton+0x240>)
 8000b50:	6851      	ldr	r1, [r2, #4]
 8000b52:	4a59      	ldr	r2, [pc, #356]	; (8000cb8 <resaltar_boton+0x240>)
 8000b54:	6892      	ldr	r2, [r2, #8]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fcce 	bl	80004f8 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <resaltar_boton+0x220>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <resaltar_boton+0x22c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	68f9      	ldr	r1, [r7, #12]
 8000b70:	6938      	ldr	r0, [r7, #16]
 8000b72:	f7ff fd51 	bl	8000618 <fillRect>
			}
			k++;
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	3301      	adds	r3, #1
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	3301      	adds	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
 8000b82:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <resaltar_boton+0x244>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	db81      	blt.n	8000a90 <resaltar_boton+0x18>
	for (int j = 0; j < filas; j++) {
 8000b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8e:	3301      	adds	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <resaltar_boton+0x248>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f6ff af76 	blt.w	8000a8a <resaltar_boton+0x12>
		}
	}
	k = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	boton_resaltado = b;
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	; (8000c90 <resaltar_boton+0x218>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < filas; j++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	e065      	b.n	8000c7a <resaltar_boton+0x202>
		for (int i = 0; i < columnas; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	e05a      	b.n	8000c6a <resaltar_boton+0x1f2>
			if (boton_resaltado == k) {
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <resaltar_boton+0x218>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d14f      	bne.n	8000c5e <resaltar_boton+0x1e6>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <resaltar_boton+0x21c>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <resaltar_boton+0x220>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <resaltar_boton+0x224>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000bd2:	4413      	add	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <resaltar_boton+0x228>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <resaltar_boton+0x22c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	6a3a      	ldr	r2, [r7, #32]
 8000be2:	fb02 f203 	mul.w	r2, r2, r3
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <resaltar_boton+0x230>)
 8000be8:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000bea:	4413      	add	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
				setColor(cmarcon.r, cmarcon.g, cmarcon.b);
 8000bee:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <resaltar_boton+0x24c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <resaltar_boton+0x24c>)
 8000bf4:	6851      	ldr	r1, [r2, #4]
 8000bf6:	4a33      	ldr	r2, [pc, #204]	; (8000cc4 <resaltar_boton+0x24c>)
 8000bf8:	6892      	ldr	r2, [r2, #8]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fc7c 	bl	80004f8 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <resaltar_boton+0x234>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	1ad0      	subs	r0, r2, r3
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <resaltar_boton+0x234>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <resaltar_boton+0x220>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <resaltar_boton+0x234>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <resaltar_boton+0x22c>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <resaltar_boton+0x234>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4622      	mov	r2, r4
 8000c2e:	f7ff fcf3 	bl	8000618 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <resaltar_boton+0x240>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <resaltar_boton+0x240>)
 8000c38:	6851      	ldr	r1, [r2, #4]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <resaltar_boton+0x240>)
 8000c3c:	6892      	ldr	r2, [r2, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fc5a 	bl	80004f8 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <resaltar_boton+0x220>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <resaltar_boton+0x22c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4413      	add	r3, r2
 8000c54:	460a      	mov	r2, r1
 8000c56:	6979      	ldr	r1, [r7, #20]
 8000c58:	69b8      	ldr	r0, [r7, #24]
 8000c5a:	f7ff fcdd 	bl	8000618 <fillRect>
			}
			k++;
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	3301      	adds	r3, #1
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	3301      	adds	r3, #1
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <resaltar_boton+0x244>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	db9f      	blt.n	8000bb4 <resaltar_boton+0x13c>
	for (int j = 0; j < filas; j++) {
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	3301      	adds	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <resaltar_boton+0x248>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a3a      	ldr	r2, [r7, #32]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	db94      	blt.n	8000bae <resaltar_boton+0x136>
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3734      	adds	r7, #52	; 0x34
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	20000198 	.word	0x20000198
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200001e0 	.word	0x200001e0
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	20000024 	.word	0x20000024
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	20000018 	.word	0x20000018
 8000cbc:	2000004c 	.word	0x2000004c
 8000cc0:	20000048 	.word	0x20000048
 8000cc4:	20000030 	.word	0x20000030

08000cc8 <rellenar_botones>:

void rellenar_botones(const char *t[]) {
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000cdc:	4b99      	ldr	r3, [pc, #612]	; (8000f44 <rellenar_botones+0x27c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a98      	ldr	r2, [pc, #608]	; (8000f44 <rellenar_botones+0x27c>)
 8000ce2:	6851      	ldr	r1, [r2, #4]
 8000ce4:	4a97      	ldr	r2, [pc, #604]	; (8000f44 <rellenar_botones+0x27c>)
 8000ce6:	6892      	ldr	r2, [r2, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc05 	bl	80004f8 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000cee:	4b96      	ldr	r3, [pc, #600]	; (8000f48 <rellenar_botones+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a95      	ldr	r2, [pc, #596]	; (8000f48 <rellenar_botones+0x280>)
 8000cf4:	6851      	ldr	r1, [r2, #4]
 8000cf6:	4a94      	ldr	r2, [pc, #592]	; (8000f48 <rellenar_botones+0x280>)
 8000cf8:	6892      	ldr	r2, [r2, #8]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc1e 	bl	800053c <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	653b      	str	r3, [r7, #80]	; 0x50
 8000d04:	e112      	b.n	8000f2c <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d0a:	e106      	b.n	8000f1a <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000d0c:	4b8f      	ldr	r3, [pc, #572]	; (8000f4c <rellenar_botones+0x284>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b8f      	ldr	r3, [pc, #572]	; (8000f50 <rellenar_botones+0x288>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d18:	fb02 f203 	mul.w	r2, r2, r3
 8000d1c:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <rellenar_botones+0x28c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000d20:	4413      	add	r3, r2
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000d24:	4b8c      	ldr	r3, [pc, #560]	; (8000f58 <rellenar_botones+0x290>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b8c      	ldr	r3, [pc, #560]	; (8000f5c <rellenar_botones+0x294>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d30:	fb02 f203 	mul.w	r2, r2, r3
 8000d34:	4b8a      	ldr	r3, [pc, #552]	; (8000f60 <rellenar_botones+0x298>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d42:	3b01      	subs	r3, #1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fa3b 	bl	80001c8 <strlen>
 8000d52:	4602      	mov	r2, r0
 8000d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d56:	fb03 f302 	mul.w	r3, r3, r2
 8000d5a:	4a7d      	ldr	r2, [pc, #500]	; (8000f50 <rellenar_botones+0x288>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d82d      	bhi.n	8000dbe <rellenar_botones+0xf6>
				print(t[k - 1],
 8000d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000d72:	4b77      	ldr	r3, [pc, #476]	; (8000f50 <rellenar_botones+0x288>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	461d      	mov	r5, r3
 8000d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fa1d 	bl	80001c8 <strlen>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d92:	fb03 f302 	mul.w	r3, r3, r2
 8000d96:	1aeb      	subs	r3, r5, r3
 8000d98:	085a      	lsrs	r2, r3, #1
 8000d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9c:	4413      	add	r3, r2
				print(t[k - 1],
 8000d9e:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <rellenar_botones+0x294>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	0fda      	lsrs	r2, r3, #31
 8000daa:	4413      	add	r3, r2
 8000dac:	105b      	asrs	r3, r3, #1
 8000dae:	461a      	mov	r2, r3
				print(t[k - 1],
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	4413      	add	r3, r2
 8000db4:	461a      	mov	r2, r3
 8000db6:	4620      	mov	r0, r4
 8000db8:	f7ff fc7a 	bl	80006b0 <print>
 8000dbc:	e0a7      	b.n	8000f0e <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dc2:	e00e      	b.n	8000de2 <rellenar_botones+0x11a>
					t1[i] = 0;
 8000dc4:	f107 021c 	add.w	r2, r7, #28
 8000dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dca:	4413      	add	r3, r2
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000dd0:	f107 0208 	add.w	r2, r7, #8
 8000dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dd6:	4413      	add	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dde:	3301      	adds	r3, #1
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de4:	2b13      	cmp	r3, #19
 8000de6:	dded      	ble.n	8000dc4 <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
 8000dec:	e013      	b.n	8000e16 <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000df4:	3b01      	subs	r3, #1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e00:	4413      	add	r3, r2
 8000e02:	7819      	ldrb	r1, [r3, #0]
 8000e04:	f107 021c 	add.w	r2, r7, #28
 8000e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e0a:	4413      	add	r3, r2
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e12:	3301      	adds	r3, #1
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
 8000e16:	4b4e      	ldr	r3, [pc, #312]	; (8000f50 <rellenar_botones+0x288>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbe3      	blt.n	8000dee <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000e26:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <rellenar_botones+0x288>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
 8000e32:	e019      	b.n	8000e68 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8000e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e46:	441a      	add	r2, r3
 8000e48:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <rellenar_botones+0x288>)
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e4e:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000e54:	1acb      	subs	r3, r1, r3
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8000e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e64:	3301      	adds	r3, #1
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9a5 	bl	80001c8 <strlen>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d2d6      	bcs.n	8000e34 <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <rellenar_botones+0x288>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461c      	mov	r4, r3
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f999 	bl	80001c8 <strlen>
 8000e96:	4602      	mov	r2, r0
 8000e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9a:	fb03 f302 	mul.w	r3, r3, r2
 8000e9e:	1ae3      	subs	r3, r4, r3
 8000ea0:	085a      	lsrs	r2, r3, #1
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <rellenar_botones+0x294>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	0fda      	lsrs	r2, r3, #31
 8000eb4:	4413      	add	r3, r2
 8000eb6:	105b      	asrs	r3, r3, #1
 8000eb8:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	441a      	add	r2, r3
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fbf4 	bl	80006b0 <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <rellenar_botones+0x288>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	461c      	mov	r4, r3
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f978 	bl	80001c8 <strlen>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000edc:	fb03 f302 	mul.w	r3, r3, r2
 8000ee0:	1ae3      	subs	r3, r4, r3
 8000ee2:	085a      	lsrs	r2, r3, #1
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <rellenar_botones+0x294>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	0fda      	lsrs	r2, r3, #31
 8000ef6:	4413      	add	r3, r2
 8000ef8:	105b      	asrs	r3, r3, #1
 8000efa:	461a      	mov	r2, r3
 8000efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efe:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f02:	441a      	add	r2, r3
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fbd1 	bl	80006b0 <print>
			}

			k++;
 8000f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f10:	3301      	adds	r3, #1
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 8000f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f16:	3301      	adds	r3, #1
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <rellenar_botones+0x29c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f6ff aef3 	blt.w	8000d0c <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8000f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f28:	3301      	adds	r3, #1
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <rellenar_botones+0x2a0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f6ff aee7 	blt.w	8000d06 <rellenar_botones+0x3e>
		}
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3758      	adds	r7, #88	; 0x58
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bdb0      	pop	{r4, r5, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000003c 	.word	0x2000003c
 8000f48:	20000018 	.word	0x20000018
 8000f4c:	20000198 	.word	0x20000198
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000000 	.word	0x20000000
 8000f58:	200001e0 	.word	0x200001e0
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	20000004 	.word	0x20000004
 8000f64:	2000004c 	.word	0x2000004c
 8000f68:	20000048 	.word	0x20000048

08000f6c <pantalla_principal>:

//-------------------------------------------------------------------------------//

void pantalla_principal(){
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b0a8      	sub	sp, #160	; 0xa0
 8000f70:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <pantalla_principal+0x180>)
 8000f74:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000f78:	461d      	mov	r5, r3
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f82:	e884 0003 	stmia.w	r4, {r0, r1}
			"SEGURIDAD" };
	rgb boton = { 0, 0, 255 };
 8000f86:	2300      	movs	r3, #0
 8000f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f8e:	23ff      	movs	r3, #255	; 0xff
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
		rgb marco = { 255, 255, 255 };
 8000f92:	4a57      	ldr	r2, [pc, #348]	; (80010f0 <pantalla_principal+0x184>)
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		rgb nmarco = { 255, 0, 0 };
 8000f9e:	23ff      	movs	r3, #255	; 0xff
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
		rgb texto = { 255, 255, 255 };
 8000faa:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <pantalla_principal+0x184>)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		clrScr();
 8000fb6:	f7ff fa8b 	bl	80004d0 <clrScr>
		setColor(255, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	f7ff fa9a 	bl	80004f8 <setColor>
		fillRect(1, 1, 478, 40);
 8000fc4:	2328      	movs	r3, #40	; 0x28
 8000fc6:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff fb23 	bl	8000618 <fillRect>
		setColor(64, 64, 64);
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	2040      	movs	r0, #64	; 0x40
 8000fd8:	f7ff fa8e 	bl	80004f8 <setColor>
		fillRect(1, 318, 478, 280);
 8000fdc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000fe0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000fe4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff fb15 	bl	8000618 <fillRect>
		setColor(255, 255, 255);
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	21ff      	movs	r1, #255	; 0xff
 8000ff2:	20ff      	movs	r0, #255	; 0xff
 8000ff4:	f7ff fa80 	bl	80004f8 <setColor>
		setBackColor(255, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	20ff      	movs	r0, #255	; 0xff
 8000ffe:	f7ff fa9d 	bl	800053c <setBackColor>
		setFont(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fbe6 	bl	80007d4 <setFont>
		print("* CASA DOMOTICA *", 50, 12);
 8001008:	220c      	movs	r2, #12
 800100a:	2132      	movs	r1, #50	; 0x32
 800100c:	4839      	ldr	r0, [pc, #228]	; (80010f4 <pantalla_principal+0x188>)
 800100e:	f7ff fb4f 	bl	80006b0 <print>
		setBackColor(64, 64, 64);
 8001012:	2240      	movs	r2, #64	; 0x40
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	2040      	movs	r0, #64	; 0x40
 8001018:	f7ff fa90 	bl	800053c <setBackColor>
		setColor(255, 255, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	21ff      	movs	r1, #255	; 0xff
 8001020:	20ff      	movs	r0, #255	; 0xff
 8001022:	f7ff fa69 	bl	80004f8 <setColor>
		setFont(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fbd4 	bl	80007d4 <setFont>
		const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 800102c:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <pantalla_principal+0x18c>)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	ca07      	ldmia	r2, {r0, r1, r2}
 8001034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		printfrase(t, 20, 281, 3);
 8001038:	f107 000c 	add.w	r0, r7, #12
 800103c:	2303      	movs	r3, #3
 800103e:	f240 1219 	movw	r2, #281	; 0x119
 8001042:	2114      	movs	r1, #20
 8001044:	f7ff fb94 	bl	8000770 <printfrase>
		const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <pantalla_principal+0x190>)
 800104a:	463b      	mov	r3, r7
 800104c:	ca07      	ldmia	r2, {r0, r1, r2}
 800104e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				", Carlos Murillo" };
		printfrase(t2, 20, 300, 3);
 8001052:	4638      	mov	r0, r7
 8001054:	2303      	movs	r3, #3
 8001056:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800105a:	2114      	movs	r1, #20
 800105c:	f7ff fb88 	bl	8000770 <printfrase>
		setColor(0, 0, 255);
 8001060:	22ff      	movs	r2, #255	; 0xff
 8001062:	2100      	movs	r1, #0
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fa47 	bl	80004f8 <setColor>
		drawRect(0, 0, 479, 319);
 800106a:	f240 133f 	movw	r3, #319	; 0x13f
 800106e:	f240 12df 	movw	r2, #479	; 0x1df
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fa83 	bl	8000580 <drawRect>
		botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 800107a:	2303      	movs	r3, #3
 800107c:	930f      	str	r3, [sp, #60]	; 0x3c
 800107e:	2302      	movs	r3, #2
 8001080:	930e      	str	r3, [sp, #56]	; 0x38
 8001082:	ac0b      	add	r4, sp, #44	; 0x2c
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800108c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001090:	ac08      	add	r4, sp, #32
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800109a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800109e:	ac05      	add	r4, sp, #20
 80010a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010ac:	ac02      	add	r4, sp, #8
 80010ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010ba:	2305      	movs	r3, #5
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2302      	movs	r3, #2
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2346      	movs	r3, #70	; 0x46
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	2146      	movs	r1, #70	; 0x46
 80010c8:	201e      	movs	r0, #30
 80010ca:	f7ff fb9d 	bl	8000808 <botones>
		crear_botonera();
 80010ce:	f7ff fc4f 	bl	8000970 <crear_botonera>
		setFont(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fb7e 	bl	80007d4 <setFont>
		rellenar_botones(t_menu);
 80010d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fdf3 	bl	8000cc8 <rellenar_botones>
}
 80010e2:	bf00      	nop
 80010e4:	3760      	adds	r7, #96	; 0x60
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08003c20 	.word	0x08003c20
 80010f0:	08003c38 	.word	0x08003c38
 80010f4:	08003c0c 	.word	0x08003c0c
 80010f8:	08003c44 	.word	0x08003c44
 80010fc:	08003c50 	.word	0x08003c50

08001100 <pantalla_luces>:

void pantalla_luces(){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0a9      	sub	sp, #164	; 0xa4
 8001104:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL"};
 8001106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <pantalla_luces+0x184>)
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <pantalla_luces+0x188>)
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
	rgb boton = { 0, 0, 255 };
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001124:	2300      	movs	r3, #0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
		rgb marco = { 255, 255, 255 };
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <pantalla_luces+0x18c>)
 800112e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001132:	ca07      	ldmia	r2, {r0, r1, r2}
 8001134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		rgb nmarco = { 255, 0, 0 };
 8001138:	23ff      	movs	r3, #255	; 0xff
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
		rgb texto = { 255, 255, 255 };
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <pantalla_luces+0x18c>)
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	ca07      	ldmia	r2, {r0, r1, r2}
 800114c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		clrScr();
 8001150:	f7ff f9be 	bl	80004d0 <clrScr>
		setColor(255, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	f7ff f9cd 	bl	80004f8 <setColor>
		fillRect(1, 1, 478, 40);
 800115e:	2328      	movs	r3, #40	; 0x28
 8001160:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001164:	2101      	movs	r1, #1
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fa56 	bl	8000618 <fillRect>
		setColor(64, 64, 64);
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	2140      	movs	r1, #64	; 0x40
 8001170:	2040      	movs	r0, #64	; 0x40
 8001172:	f7ff f9c1 	bl	80004f8 <setColor>
		fillRect(1, 318, 478, 280);
 8001176:	f44f 738c 	mov.w	r3, #280	; 0x118
 800117a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800117e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fa48 	bl	8000618 <fillRect>
		setColor(255, 255, 255);
 8001188:	22ff      	movs	r2, #255	; 0xff
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	20ff      	movs	r0, #255	; 0xff
 800118e:	f7ff f9b3 	bl	80004f8 <setColor>
		setBackColor(255, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	20ff      	movs	r0, #255	; 0xff
 8001198:	f7ff f9d0 	bl	800053c <setBackColor>
		setFont(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fb19 	bl	80007d4 <setFont>
		print("* MENU LUCES *", 100, 12);
 80011a2:	220c      	movs	r2, #12
 80011a4:	2164      	movs	r1, #100	; 0x64
 80011a6:	483a      	ldr	r0, [pc, #232]	; (8001290 <pantalla_luces+0x190>)
 80011a8:	f7ff fa82 	bl	80006b0 <print>
		setBackColor(64, 64, 64);
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	2040      	movs	r0, #64	; 0x40
 80011b2:	f7ff f9c3 	bl	800053c <setBackColor>
		setColor(255, 255, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21ff      	movs	r1, #255	; 0xff
 80011ba:	20ff      	movs	r0, #255	; 0xff
 80011bc:	f7ff f99c 	bl	80004f8 <setColor>
		setFont(0);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fb07 	bl	80007d4 <setFont>
		const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 80011c6:	4a33      	ldr	r2, [pc, #204]	; (8001294 <pantalla_luces+0x194>)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		printfrase(t, 20, 281, 3);
 80011d2:	f107 000c 	add.w	r0, r7, #12
 80011d6:	2303      	movs	r3, #3
 80011d8:	f240 1219 	movw	r2, #281	; 0x119
 80011dc:	2114      	movs	r1, #20
 80011de:	f7ff fac7 	bl	8000770 <printfrase>
		const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 80011e2:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <pantalla_luces+0x198>)
 80011e4:	463b      	mov	r3, r7
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				" Carlos Murillo" };
		printfrase(t2, 20, 300, 3);
 80011ec:	4638      	mov	r0, r7
 80011ee:	2303      	movs	r3, #3
 80011f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011f4:	2114      	movs	r1, #20
 80011f6:	f7ff fabb 	bl	8000770 <printfrase>
		setColor(0, 0, 255);
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff f97a 	bl	80004f8 <setColor>
		drawRect(0, 0, 479, 319);
 8001204:	f240 133f 	movw	r3, #319	; 0x13f
 8001208:	f240 12df 	movw	r2, #479	; 0x1df
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff f9b6 	bl	8000580 <drawRect>
		botones(40, 85, 180, 150, 2, 5, boton, marco, nmarco, texto, 1, 2);
 8001214:	2302      	movs	r3, #2
 8001216:	930f      	str	r3, [sp, #60]	; 0x3c
 8001218:	2301      	movs	r3, #1
 800121a:	930e      	str	r3, [sp, #56]	; 0x38
 800121c:	ac0b      	add	r4, sp, #44	; 0x2c
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800122a:	ac08      	add	r4, sp, #32
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001238:	ac05      	add	r4, sp, #20
 800123a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001246:	ac02      	add	r4, sp, #8
 8001248:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800124c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001254:	2305      	movs	r3, #5
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	2302      	movs	r3, #2
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2396      	movs	r3, #150	; 0x96
 800125e:	22b4      	movs	r2, #180	; 0xb4
 8001260:	2155      	movs	r1, #85	; 0x55
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f7ff fad0 	bl	8000808 <botones>
		crear_botonera();
 8001268:	f7ff fb82 	bl	8000970 <crear_botonera>
		setFont(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fab1 	bl	80007d4 <setFont>
		rellenar_botones(t_menu_luces);
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd26 	bl	8000cc8 <rellenar_botones>
}
 800127c:	bf00      	nop
 800127e:	3764      	adds	r7, #100	; 0x64
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	08003c5c 	.word	0x08003c5c
 8001288:	08003c68 	.word	0x08003c68
 800128c:	08003c38 	.word	0x08003c38
 8001290:	08003c70 	.word	0x08003c70
 8001294:	08003c44 	.word	0x08003c44
 8001298:	08003c80 	.word	0x08003c80

0800129c <reset_buffer>:
#include "string.h"
#include "TFT.h"

UART_HandleTypeDef huart6;
char rx_buffer[50], tx_buffer[50];
void reset_buffer(){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e005      	b.n	80012b4 <reset_buffer+0x18>
		rx_buffer[0]='\0';
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <reset_buffer+0x2c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<50;i++){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b31      	cmp	r3, #49	; 0x31
 80012b8:	ddf6      	ble.n	80012a8 <reset_buffer+0xc>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000130 	.word	0x20000130

080012cc <seleccion_menu_principal>:

const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
		"SEGURIDAD" };
const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL"};
int opcion = 0;
int seleccion_menu_principal(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*)rx_buffer, 50, 500);
 80012d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d6:	2232      	movs	r2, #50	; 0x32
 80012d8:	498d      	ldr	r1, [pc, #564]	; (8001510 <seleccion_menu_principal+0x244>)
 80012da:	488e      	ldr	r0, [pc, #568]	; (8001514 <seleccion_menu_principal+0x248>)
 80012dc:	f002 f923 	bl	8003526 <HAL_UART_Receive>
	if (rx_buffer[0]=='r'&&rx_buffer[1]=='i'&&rx_buffer[2]=='g'&&rx_buffer[3]=='h'&&rx_buffer[4]=='t') {
 80012e0:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <seleccion_menu_principal+0x244>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b72      	cmp	r3, #114	; 0x72
 80012e6:	d133      	bne.n	8001350 <seleccion_menu_principal+0x84>
 80012e8:	4b89      	ldr	r3, [pc, #548]	; (8001510 <seleccion_menu_principal+0x244>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	2b69      	cmp	r3, #105	; 0x69
 80012ee:	d12f      	bne.n	8001350 <seleccion_menu_principal+0x84>
 80012f0:	4b87      	ldr	r3, [pc, #540]	; (8001510 <seleccion_menu_principal+0x244>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2b67      	cmp	r3, #103	; 0x67
 80012f6:	d12b      	bne.n	8001350 <seleccion_menu_principal+0x84>
 80012f8:	4b85      	ldr	r3, [pc, #532]	; (8001510 <seleccion_menu_principal+0x244>)
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	2b68      	cmp	r3, #104	; 0x68
 80012fe:	d127      	bne.n	8001350 <seleccion_menu_principal+0x84>
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <seleccion_menu_principal+0x244>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	2b74      	cmp	r3, #116	; 0x74
 8001306:	d123      	bne.n	8001350 <seleccion_menu_principal+0x84>
		if (opcion == 3) {
 8001308:	4b83      	ldr	r3, [pc, #524]	; (8001518 <seleccion_menu_principal+0x24c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d103      	bne.n	8001318 <seleccion_menu_principal+0x4c>
			opcion = 1;
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00c      	b.n	8001332 <seleccion_menu_principal+0x66>
		}else if (opcion == 6) {
 8001318:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <seleccion_menu_principal+0x24c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b06      	cmp	r3, #6
 800131e:	d103      	bne.n	8001328 <seleccion_menu_principal+0x5c>
			opcion = 4;
 8001320:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001322:	2204      	movs	r2, #4
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e004      	b.n	8001332 <seleccion_menu_principal+0x66>
		}else{
			opcion++;
 8001328:	4b7b      	ldr	r3, [pc, #492]	; (8001518 <seleccion_menu_principal+0x24c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a7a      	ldr	r2, [pc, #488]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001330:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001332:	4b79      	ldr	r3, [pc, #484]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fb9e 	bl	8000a78 <resaltar_boton>
		setFont(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fa49 	bl	80007d4 <setFont>
		rellenar_botones(t_menu);
 8001342:	4876      	ldr	r0, [pc, #472]	; (800151c <seleccion_menu_principal+0x250>)
 8001344:	f7ff fcc0 	bl	8000cc8 <rellenar_botones>
		reset_buffer();
 8001348:	f7ff ffa8 	bl	800129c <reset_buffer>
		return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e0da      	b.n	8001506 <seleccion_menu_principal+0x23a>
	} else if (rx_buffer[0]=='l'&&rx_buffer[1]=='e'&&rx_buffer[2]=='f'&&rx_buffer[3]=='t') {
 8001350:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <seleccion_menu_principal+0x244>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b6c      	cmp	r3, #108	; 0x6c
 8001356:	d137      	bne.n	80013c8 <seleccion_menu_principal+0xfc>
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <seleccion_menu_principal+0x244>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	2b65      	cmp	r3, #101	; 0x65
 800135e:	d133      	bne.n	80013c8 <seleccion_menu_principal+0xfc>
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <seleccion_menu_principal+0x244>)
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	2b66      	cmp	r3, #102	; 0x66
 8001366:	d12f      	bne.n	80013c8 <seleccion_menu_principal+0xfc>
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <seleccion_menu_principal+0x244>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b74      	cmp	r3, #116	; 0x74
 800136e:	d12b      	bne.n	80013c8 <seleccion_menu_principal+0xfc>
		if (opcion == 1) {
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d103      	bne.n	8001380 <seleccion_menu_principal+0xb4>
			opcion = 3;
 8001378:	4b67      	ldr	r3, [pc, #412]	; (8001518 <seleccion_menu_principal+0x24c>)
 800137a:	2203      	movs	r2, #3
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e014      	b.n	80013aa <seleccion_menu_principal+0xde>
		}else if (opcion == 4) {
 8001380:	4b65      	ldr	r3, [pc, #404]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b04      	cmp	r3, #4
 8001386:	d103      	bne.n	8001390 <seleccion_menu_principal+0xc4>
			opcion = 6;
 8001388:	4b63      	ldr	r3, [pc, #396]	; (8001518 <seleccion_menu_principal+0x24c>)
 800138a:	2206      	movs	r2, #6
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e00c      	b.n	80013aa <seleccion_menu_principal+0xde>
		}else if (opcion == 0) {
 8001390:	4b61      	ldr	r3, [pc, #388]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <seleccion_menu_principal+0xd4>
			opcion = 1;
 8001398:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <seleccion_menu_principal+0x24c>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e004      	b.n	80013aa <seleccion_menu_principal+0xde>
		}else{
			opcion--;
 80013a0:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4a5c      	ldr	r2, [pc, #368]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013a8:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fb62 	bl	8000a78 <resaltar_boton>
		setFont(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fa0d 	bl	80007d4 <setFont>
		rellenar_botones(t_menu);
 80013ba:	4858      	ldr	r0, [pc, #352]	; (800151c <seleccion_menu_principal+0x250>)
 80013bc:	f7ff fc84 	bl	8000cc8 <rellenar_botones>
		reset_buffer();
 80013c0:	f7ff ff6c 	bl	800129c <reset_buffer>
		return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e09e      	b.n	8001506 <seleccion_menu_principal+0x23a>
	}
	else if (rx_buffer[0]=='u'&&rx_buffer[1]=='p') {
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <seleccion_menu_principal+0x244>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b75      	cmp	r3, #117	; 0x75
 80013ce:	d137      	bne.n	8001440 <seleccion_menu_principal+0x174>
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <seleccion_menu_principal+0x244>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	2b70      	cmp	r3, #112	; 0x70
 80013d6:	d133      	bne.n	8001440 <seleccion_menu_principal+0x174>
				if (opcion == 1) {
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d103      	bne.n	80013e8 <seleccion_menu_principal+0x11c>
					opcion = 4;
 80013e0:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e01c      	b.n	8001422 <seleccion_menu_principal+0x156>
				}else if (opcion == 2) {
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d103      	bne.n	80013f8 <seleccion_menu_principal+0x12c>
					opcion = 5;
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e014      	b.n	8001422 <seleccion_menu_principal+0x156>
				}else if (opcion == 3) {
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <seleccion_menu_principal+0x24c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d103      	bne.n	8001408 <seleccion_menu_principal+0x13c>
					opcion = 6;
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001402:	2206      	movs	r2, #6
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e00c      	b.n	8001422 <seleccion_menu_principal+0x156>
				}else if (opcion == 0) {
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <seleccion_menu_principal+0x24c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <seleccion_menu_principal+0x14c>
					opcion = 1;
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e004      	b.n	8001422 <seleccion_menu_principal+0x156>
				}else{
					opcion-=3;
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <seleccion_menu_principal+0x24c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b03      	subs	r3, #3
 800141e:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001420:	6013      	str	r3, [r2, #0]
				}
				resaltar_boton(opcion);
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fb26 	bl	8000a78 <resaltar_boton>
				setFont(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff f9d1 	bl	80007d4 <setFont>
				rellenar_botones(t_menu);
 8001432:	483a      	ldr	r0, [pc, #232]	; (800151c <seleccion_menu_principal+0x250>)
 8001434:	f7ff fc48 	bl	8000cc8 <rellenar_botones>
				reset_buffer();
 8001438:	f7ff ff30 	bl	800129c <reset_buffer>
				return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e062      	b.n	8001506 <seleccion_menu_principal+0x23a>
			}
	else if (rx_buffer[0]=='d'&&rx_buffer[1]=='o'&&rx_buffer[2]=='w'&&rx_buffer[3]=='n') {
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <seleccion_menu_principal+0x244>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d13f      	bne.n	80014c8 <seleccion_menu_principal+0x1fc>
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <seleccion_menu_principal+0x244>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	2b6f      	cmp	r3, #111	; 0x6f
 800144e:	d13b      	bne.n	80014c8 <seleccion_menu_principal+0x1fc>
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <seleccion_menu_principal+0x244>)
 8001452:	789b      	ldrb	r3, [r3, #2]
 8001454:	2b77      	cmp	r3, #119	; 0x77
 8001456:	d137      	bne.n	80014c8 <seleccion_menu_principal+0x1fc>
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <seleccion_menu_principal+0x244>)
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	2b6e      	cmp	r3, #110	; 0x6e
 800145e:	d133      	bne.n	80014c8 <seleccion_menu_principal+0x1fc>
				if (opcion == 4) {
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d103      	bne.n	8001470 <seleccion_menu_principal+0x1a4>
					opcion = 1;
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <seleccion_menu_principal+0x24c>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e01c      	b.n	80014aa <seleccion_menu_principal+0x1de>
				}else if (opcion == 5) {
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d103      	bne.n	8001480 <seleccion_menu_principal+0x1b4>
					opcion = 2;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <seleccion_menu_principal+0x24c>)
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e014      	b.n	80014aa <seleccion_menu_principal+0x1de>
				}else if (opcion == 0) {
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <seleccion_menu_principal+0x1c4>
					opcion = 1;
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <seleccion_menu_principal+0x24c>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00c      	b.n	80014aa <seleccion_menu_principal+0x1de>
				}else if (opcion == 6) {
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <seleccion_menu_principal+0x24c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d103      	bne.n	80014a0 <seleccion_menu_principal+0x1d4>
					opcion = 3;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <seleccion_menu_principal+0x24c>)
 800149a:	2203      	movs	r2, #3
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e004      	b.n	80014aa <seleccion_menu_principal+0x1de>
				}else{
					opcion+=3;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <seleccion_menu_principal+0x24c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3303      	adds	r3, #3
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <seleccion_menu_principal+0x24c>)
 80014a8:	6013      	str	r3, [r2, #0]
				}
				resaltar_boton(opcion);
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <seleccion_menu_principal+0x24c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fae2 	bl	8000a78 <resaltar_boton>
				setFont(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff f98d 	bl	80007d4 <setFont>
				rellenar_botones(t_menu);
 80014ba:	4818      	ldr	r0, [pc, #96]	; (800151c <seleccion_menu_principal+0x250>)
 80014bc:	f7ff fc04 	bl	8000cc8 <rellenar_botones>
				reset_buffer();
 80014c0:	f7ff feec 	bl	800129c <reset_buffer>
				return 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e01e      	b.n	8001506 <seleccion_menu_principal+0x23a>
			}
	else if (rx_buffer[0]=='s'&&rx_buffer[1]=='t'&&rx_buffer[2]=='a'&&rx_buffer[3]=='r'&&rx_buffer[4]=='t') {
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <seleccion_menu_principal+0x244>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b73      	cmp	r3, #115	; 0x73
 80014ce:	d119      	bne.n	8001504 <seleccion_menu_principal+0x238>
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <seleccion_menu_principal+0x244>)
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	2b74      	cmp	r3, #116	; 0x74
 80014d6:	d115      	bne.n	8001504 <seleccion_menu_principal+0x238>
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <seleccion_menu_principal+0x244>)
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	2b61      	cmp	r3, #97	; 0x61
 80014de:	d111      	bne.n	8001504 <seleccion_menu_principal+0x238>
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <seleccion_menu_principal+0x244>)
 80014e2:	78db      	ldrb	r3, [r3, #3]
 80014e4:	2b72      	cmp	r3, #114	; 0x72
 80014e6:	d10d      	bne.n	8001504 <seleccion_menu_principal+0x238>
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <seleccion_menu_principal+0x244>)
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	2b74      	cmp	r3, #116	; 0x74
 80014ee:	d109      	bne.n	8001504 <seleccion_menu_principal+0x238>
		reset_buffer();
 80014f0:	f7ff fed4 	bl	800129c <reset_buffer>
		int op=opcion;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <seleccion_menu_principal+0x24c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	607b      	str	r3, [r7, #4]
		opcion=0;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <seleccion_menu_principal+0x24c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
		return op;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	e000      	b.n	8001506 <seleccion_menu_principal+0x23a>
				}
	return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000130 	.word	0x20000130
 8001514:	2000019c 	.word	0x2000019c
 8001518:	200000ac 	.word	0x200000ac
 800151c:	20000050 	.word	0x20000050

08001520 <seleccion_menu_luces>:

int opcion_luces=0;
int seleccion_menu_luces(){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*)rx_buffer, 50, 500);
 8001524:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001528:	2232      	movs	r2, #50	; 0x32
 800152a:	4942      	ldr	r1, [pc, #264]	; (8001634 <seleccion_menu_luces+0x114>)
 800152c:	4842      	ldr	r0, [pc, #264]	; (8001638 <seleccion_menu_luces+0x118>)
 800152e:	f001 fffa 	bl	8003526 <HAL_UART_Receive>
	if (rx_buffer[0]=='r'&&rx_buffer[1]=='i'&&rx_buffer[2]=='g'&&rx_buffer[3]=='h'&&rx_buffer[4]=='t') {
 8001532:	4b40      	ldr	r3, [pc, #256]	; (8001634 <seleccion_menu_luces+0x114>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b72      	cmp	r3, #114	; 0x72
 8001538:	d12a      	bne.n	8001590 <seleccion_menu_luces+0x70>
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <seleccion_menu_luces+0x114>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	2b69      	cmp	r3, #105	; 0x69
 8001540:	d126      	bne.n	8001590 <seleccion_menu_luces+0x70>
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <seleccion_menu_luces+0x114>)
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	2b67      	cmp	r3, #103	; 0x67
 8001548:	d122      	bne.n	8001590 <seleccion_menu_luces+0x70>
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <seleccion_menu_luces+0x114>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	2b68      	cmp	r3, #104	; 0x68
 8001550:	d11e      	bne.n	8001590 <seleccion_menu_luces+0x70>
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <seleccion_menu_luces+0x114>)
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	2b74      	cmp	r3, #116	; 0x74
 8001558:	d11a      	bne.n	8001590 <seleccion_menu_luces+0x70>
			if (opcion_luces == 2) {
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <seleccion_menu_luces+0x11c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <seleccion_menu_luces+0x4a>
				opcion_luces = 1;
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <seleccion_menu_luces+0x11c>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e004      	b.n	8001574 <seleccion_menu_luces+0x54>
			}else{
				opcion_luces++;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <seleccion_menu_luces+0x11c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a32      	ldr	r2, [pc, #200]	; (800163c <seleccion_menu_luces+0x11c>)
 8001572:	6013      	str	r3, [r2, #0]
			}
			resaltar_boton(opcion_luces);
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <seleccion_menu_luces+0x11c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fa7d 	bl	8000a78 <resaltar_boton>
			setFont(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff f928 	bl	80007d4 <setFont>
			rellenar_botones(t_menu_luces);
 8001584:	482e      	ldr	r0, [pc, #184]	; (8001640 <seleccion_menu_luces+0x120>)
 8001586:	f7ff fb9f 	bl	8000cc8 <rellenar_botones>
			reset_buffer();
 800158a:	f7ff fe87 	bl	800129c <reset_buffer>
 800158e:	e04e      	b.n	800162e <seleccion_menu_luces+0x10e>
		} else if (rx_buffer[0]=='l'&&rx_buffer[1]=='e'&&rx_buffer[2]=='f'&&rx_buffer[3]=='t') {
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <seleccion_menu_luces+0x114>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b6c      	cmp	r3, #108	; 0x6c
 8001596:	d12e      	bne.n	80015f6 <seleccion_menu_luces+0xd6>
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <seleccion_menu_luces+0x114>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b65      	cmp	r3, #101	; 0x65
 800159e:	d12a      	bne.n	80015f6 <seleccion_menu_luces+0xd6>
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <seleccion_menu_luces+0x114>)
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	2b66      	cmp	r3, #102	; 0x66
 80015a6:	d126      	bne.n	80015f6 <seleccion_menu_luces+0xd6>
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <seleccion_menu_luces+0x114>)
 80015aa:	78db      	ldrb	r3, [r3, #3]
 80015ac:	2b74      	cmp	r3, #116	; 0x74
 80015ae:	d122      	bne.n	80015f6 <seleccion_menu_luces+0xd6>
			if (opcion_luces == 1) {
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <seleccion_menu_luces+0x11c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d103      	bne.n	80015c0 <seleccion_menu_luces+0xa0>
				opcion_luces = 2;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <seleccion_menu_luces+0x11c>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e00c      	b.n	80015da <seleccion_menu_luces+0xba>
			}else if (opcion_luces == 0) {
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <seleccion_menu_luces+0x11c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <seleccion_menu_luces+0xb0>
				opcion_luces = 1;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <seleccion_menu_luces+0x11c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e004      	b.n	80015da <seleccion_menu_luces+0xba>
			}else{
				opcion_luces--;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <seleccion_menu_luces+0x11c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <seleccion_menu_luces+0x11c>)
 80015d8:	6013      	str	r3, [r2, #0]
			}
			resaltar_boton(opcion_luces);
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <seleccion_menu_luces+0x11c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa4a 	bl	8000a78 <resaltar_boton>
			setFont(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff f8f5 	bl	80007d4 <setFont>
			rellenar_botones(t_menu_luces);
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <seleccion_menu_luces+0x120>)
 80015ec:	f7ff fb6c 	bl	8000cc8 <rellenar_botones>
			reset_buffer();
 80015f0:	f7ff fe54 	bl	800129c <reset_buffer>
 80015f4:	e01b      	b.n	800162e <seleccion_menu_luces+0x10e>
		}else if (rx_buffer[0]=='s'&&rx_buffer[1]=='e'&&rx_buffer[2]=='l'&&rx_buffer[3]=='e'&&rx_buffer[4]=='c'&&rx_buffer[5]=='t') {
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <seleccion_menu_luces+0x114>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b73      	cmp	r3, #115	; 0x73
 80015fc:	d117      	bne.n	800162e <seleccion_menu_luces+0x10e>
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <seleccion_menu_luces+0x114>)
 8001600:	785b      	ldrb	r3, [r3, #1]
 8001602:	2b65      	cmp	r3, #101	; 0x65
 8001604:	d113      	bne.n	800162e <seleccion_menu_luces+0x10e>
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <seleccion_menu_luces+0x114>)
 8001608:	789b      	ldrb	r3, [r3, #2]
 800160a:	2b6c      	cmp	r3, #108	; 0x6c
 800160c:	d10f      	bne.n	800162e <seleccion_menu_luces+0x10e>
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <seleccion_menu_luces+0x114>)
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	2b65      	cmp	r3, #101	; 0x65
 8001614:	d10b      	bne.n	800162e <seleccion_menu_luces+0x10e>
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <seleccion_menu_luces+0x114>)
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	2b63      	cmp	r3, #99	; 0x63
 800161c:	d107      	bne.n	800162e <seleccion_menu_luces+0x10e>
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <seleccion_menu_luces+0x114>)
 8001620:	795b      	ldrb	r3, [r3, #5]
 8001622:	2b74      	cmp	r3, #116	; 0x74
 8001624:	d103      	bne.n	800162e <seleccion_menu_luces+0x10e>
			reset_buffer();
 8001626:	f7ff fe39 	bl	800129c <reset_buffer>
			return 0;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <seleccion_menu_luces+0x110>
					}
	return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000130 	.word	0x20000130
 8001638:	2000019c 	.word	0x2000019c
 800163c:	200000b0 	.word	0x200000b0
 8001640:	20000068 	.word	0x20000068

08001644 <rellbotones.8953>:
/* USER CODE BEGIN 0 */

//Interrupciones botones:
volatile int button[10];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	void rellbotones(int n) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	f8c7 c000 	str.w	ip, [r7]
		for (int i = 0; i < 10; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e00b      	b.n	800166e <rellbotones.8953+0x2a>
			if (i != n)
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	d004      	beq.n	8001668 <rellbotones.8953+0x24>
				button[i] = 0;
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <rellbotones.8953+0x48>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2100      	movs	r1, #0
 8001664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b09      	cmp	r3, #9
 8001672:	ddf0      	ble.n	8001656 <rellbotones.8953+0x12>
		}
		button[n] = 1;
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <rellbotones.8953+0x48>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2101      	movs	r1, #1
 800167a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000108 	.word	0x20000108

08001690 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_0) {
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <HAL_GPIO_EXTI_Callback+0x24>
		rellbotones(0);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	469c      	mov	ip, r3
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff ffc9 	bl	8001644 <rellbotones.8953>
	} else if (GPIO_Pin == GPIO_PIN_1) {
		rellbotones(1);
	}

}
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d105      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x36>
		rellbotones(1);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	469c      	mov	ip, r3
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff ffbf 	bl	8001644 <rellbotones.8953>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fac8 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f852 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f000 f912 	bl	8001904 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016e0:	f000 f8b8 	bl	8001854 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80016e4:	f000 f8e4 	bl	80018b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
int menu_actual=0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]

	int retorno=0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(menu_actual==0){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d111      	bne.n	800171a <main+0x4c>
			if(retorno==0){
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d104      	bne.n	8001706 <main+0x38>
				pantalla_principal();
 80016fc:	f7ff fc36 	bl	8000f6c <pantalla_principal>
				retorno++;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	603b      	str	r3, [r7, #0]
			}
			menu_actual=seleccion_menu_principal();
 8001706:	f7ff fde1 	bl	80012cc <seleccion_menu_principal>
 800170a:	6078      	str	r0, [r7, #4]
			if(menu_actual!=0){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ee      	beq.n	80016f0 <main+0x22>
				retorno--;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3b01      	subs	r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	e7ea      	b.n	80016f0 <main+0x22>
			}
		}else if(menu_actual==1){
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d111      	bne.n	8001744 <main+0x76>
			if(retorno==0){
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d104      	bne.n	8001730 <main+0x62>
				pantalla_luces();
 8001726:	f7ff fceb 	bl	8001100 <pantalla_luces>
				retorno++;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	603b      	str	r3, [r7, #0]
			}
			menu_actual=seleccion_menu_luces();
 8001730:	f7ff fef6 	bl	8001520 <seleccion_menu_luces>
 8001734:	6078      	str	r0, [r7, #4]
		if(menu_actual!=1){
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d0d9      	beq.n	80016f0 <main+0x22>
			retorno--;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	e7d5      	b.n	80016f0 <main+0x22>
		}

		}else if(menu_actual==2){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d102      	bne.n	8001750 <main+0x82>
			clrScr();
 800174a:	f7fe fec1 	bl	80004d0 <clrScr>
 800174e:	e7cf      	b.n	80016f0 <main+0x22>
		}else if(menu_actual==3){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d102      	bne.n	800175c <main+0x8e>
			clrScr();
 8001756:	f7fe febb 	bl	80004d0 <clrScr>
 800175a:	e7c9      	b.n	80016f0 <main+0x22>
		}else if(menu_actual==4){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d102      	bne.n	8001768 <main+0x9a>
			clrScr();
 8001762:	f7fe feb5 	bl	80004d0 <clrScr>
 8001766:	e7c3      	b.n	80016f0 <main+0x22>
		}else if(menu_actual==5){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d102      	bne.n	8001774 <main+0xa6>
			clrScr();
 800176e:	f7fe feaf 	bl	80004d0 <clrScr>
 8001772:	e7bd      	b.n	80016f0 <main+0x22>
		}else if(menu_actual==6){
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d1ba      	bne.n	80016f0 <main+0x22>
			clrScr();
 800177a:	f7fe fea9 	bl	80004d0 <clrScr>
		if(menu_actual==0){
 800177e:	e7b7      	b.n	80016f0 <main+0x22>

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	; 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f9c6 	bl	8003b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <SystemClock_Config+0xcc>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <SystemClock_Config+0xcc>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <SystemClock_Config+0xcc>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <SystemClock_Config+0xd0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <SystemClock_Config+0xd0>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <SystemClock_Config+0xd0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2310      	movs	r3, #16
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f0:	2308      	movs	r3, #8
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80017f4:	2332      	movs	r3, #50	; 0x32
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4618      	mov	r0, r3
 8001806:	f001 f9cd 	bl	8002ba4 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001810:	f000 f8f8 	bl	8001a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fc2e 	bl	8003094 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800183e:	f000 f8e1 	bl	8001a04 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	; 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x50>)
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <MX_I2C1_Init+0x54>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_I2C1_Init+0x58>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_I2C1_Init+0x50>)
 8001892:	f000 fd3b 	bl	800230c <HAL_I2C_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800189c:	f000 f8b2 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200000b4 	.word	0x200000b4
 80018a8:	40005400 	.word	0x40005400
 80018ac:	00061a80 	.word	0x00061a80

080018b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_USART6_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USART6_UART_Init+0x4c>)
 80018e8:	f001 fdd0 	bl	800348c <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f887 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000019c 	.word	0x2000019c
 8001900:	40011400 	.word	0x40011400

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_GPIO_Init+0xf4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <MX_GPIO_Init+0xf4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <MX_GPIO_Init+0xf4>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_GPIO_Init+0xf4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_GPIO_Init+0xf8>)
 8001992:	f000 fc89 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001996:	2303      	movs	r3, #3
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4815      	ldr	r0, [pc, #84]	; (8001a00 <MX_GPIO_Init+0xfc>)
 80019ac:	f000 fae0 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_GPIO_Init+0xf8>)
 80019ca:	f000 fad1 	bl	8001f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2006      	movs	r0, #6
 80019d4:	f000 fa95 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019d8:	2006      	movs	r0, #6
 80019da:	f000 faae 	bl	8001f3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2007      	movs	r0, #7
 80019e4:	f000 fa8d 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019e8:	2007      	movs	r0, #7
 80019ea:	f000 faa6 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40020000 	.word	0x40020000

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f000 fa4c 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0x84>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12b      	bne.n	8001ada <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9e:	23c0      	movs	r3, #192	; 0xc0
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa2:	2312      	movs	r3, #18
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_I2C_MspInit+0x8c>)
 8001aba:	f000 fa59 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020400 	.word	0x40020400

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b66:	f000 fa03 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40011400 	.word	0x40011400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 f89e 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 fb7f 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f000 fb78 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff ffd7 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f001 ff49 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff fd42 	bl	80016ce <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c58:	08003cb4 	.word	0x08003cb4
  ldr r2, =_sbss
 8001c5c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c60:	200001e8 	.word	0x200001e8

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f92b 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff feb8 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f943 	bl	8001f56 <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 f90b 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000080 	.word	0x20000080
 8001d04:	20000088 	.word	0x20000088
 8001d08:	20000084 	.word	0x20000084

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000088 	.word	0x20000088
 8001d30:	200001e4 	.word	0x200001e4

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200001e4 	.word	0x200001e4

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e16b      	b.n	8002264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 815a 	bne.w	800225e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80b4 	beq.w	800225e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b60      	ldr	r3, [pc, #384]	; (800227c <HAL_GPIO_Init+0x30c>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a5f      	ldr	r2, [pc, #380]	; (800227c <HAL_GPIO_Init+0x30c>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_GPIO_Init+0x30c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002112:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_GPIO_Init+0x310>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_GPIO_Init+0x314>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <HAL_GPIO_Init+0x318>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_GPIO_Init+0x31c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_GPIO_Init+0x320>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x21a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_GPIO_Init+0x324>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x216>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_GPIO_Init+0x328>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x212>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x32c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x20e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x20a>
 8002176:	2307      	movs	r3, #7
 8002178:	e00e      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217a:	2308      	movs	r3, #8
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217e:	2306      	movs	r3, #6
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	; (8002280 <HAL_GPIO_Init+0x310>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021da:	4a32      	ldr	r2, [pc, #200]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_GPIO_Init+0x334>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae90 	bls.w	8001f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40021c00 	.word	0x40021c00
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f9c8 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e12b      	b.n	8002576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fb94 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002370:	f001 f864 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a81      	ldr	r2, [pc, #516]	; (8002580 <HAL_I2C_Init+0x274>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d807      	bhi.n	8002390 <HAL_I2C_Init+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_I2C_Init+0x278>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e006      	b.n	800239e <HAL_I2C_Init+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_I2C_Init+0x27c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0e7      	b.n	8002576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a78      	ldr	r2, [pc, #480]	; (800258c <HAL_I2C_Init+0x280>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <HAL_I2C_Init+0x274>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d802      	bhi.n	80023e0 <HAL_I2C_Init+0xd4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_I2C_Init+0xe8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_I2C_Init+0x284>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	495c      	ldr	r1, [pc, #368]	; (8002580 <HAL_I2C_Init+0x274>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d819      	bhi.n	8002448 <HAL_I2C_Init+0x13c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002422:	1c59      	adds	r1, r3, #1
 8002424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002428:	400b      	ands	r3, r1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_I2C_Init+0x138>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e59      	subs	r1, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fbb1 f3f3 	udiv	r3, r1, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	e051      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002444:	2304      	movs	r3, #4
 8002446:	e04f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_I2C_Init+0x168>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e012      	b.n	800249a <HAL_I2C_Init+0x18e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x196>
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_I2C_Init+0x1bc>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e58      	subs	r0, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	440b      	add	r3, r1
 80024b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	e00f      	b.n	80024e8 <HAL_I2C_Init+0x1dc>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6911      	ldr	r1, [r2, #16]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	000186a0 	.word	0x000186a0
 8002584:	001e847f 	.word	0x001e847f
 8002588:	003d08ff 	.word	0x003d08ff
 800258c:	431bde83 	.word	0x431bde83
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff fbc4 	bl	8001d34 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 80e0 	bne.w	800277c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f964 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0d3      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0cc      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2210      	movs	r2, #16
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a50      	ldr	r2, [pc, #320]	; (800278c <HAL_I2C_Master_Transmit+0x1f8>)
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f89c 	bl	8002790 <I2C_MasterRequestWrite>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e08d      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002678:	e066      	b.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f9de 	bl	8002a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_I2C_Master_Transmit+0x188>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	6a39      	ldr	r1, [r7, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9ce 	bl	8002ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b04      	cmp	r3, #4
 8002732:	d107      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01a      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d194      	bne.n	800267a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000

08002790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d006      	beq.n	80027ba <I2C_MasterRequestWrite+0x2a>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d003      	beq.n	80027ba <I2C_MasterRequestWrite+0x2a>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e00b      	b.n	80027e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d107      	bne.n	80027e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f84f 	bl	8002894 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d103      	bne.n	8002814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e035      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002820:	d108      	bne.n	8002834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e01b      	b.n	800286c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	11db      	asrs	r3, r3, #7
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0306 	and.w	r3, r3, #6
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f063 030f 	orn	r3, r3, #15
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <I2C_MasterRequestWrite+0xfc>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f875 	bl	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e010      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <I2C_MasterRequestWrite+0x100>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f865 	bl	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	00010008 	.word	0x00010008
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	e025      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d021      	beq.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff fa41 	bl	8001d34 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d116      	bne.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e023      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10d      	bne.n	8002918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	e00c      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	429a      	cmp	r2, r3
 8002936:	d0b6      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002950:	e051      	b.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d123      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800297a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e046      	b.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d021      	beq.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f9bf 	bl	8001d34 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d116      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e020      	b.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e00b      	b.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d18d      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a4c:	e02d      	b.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f878 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e02d      	b.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d021      	beq.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7ff f965 	bl	8001d34 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e007      	b.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d1ca      	bne.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ace:	e02d      	b.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f837 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e02d      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d021      	beq.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7ff f924 	bl	8001d34 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d1ca      	bne.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d11b      	bne.n	8002b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e264      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d075      	beq.n	8002cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc2:	4ba3      	ldr	r3, [pc, #652]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d00c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4ba0      	ldr	r3, [pc, #640]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b9d      	ldr	r3, [pc, #628]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b99      	ldr	r3, [pc, #612]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05b      	beq.n	8002cac <HAL_RCC_OscConfig+0x108>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d157      	bne.n	8002cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e23f      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x74>
 8002c0a:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a90      	ldr	r2, [pc, #576]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b8b      	ldr	r3, [pc, #556]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a8a      	ldr	r2, [pc, #552]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a87      	ldr	r2, [pc, #540]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a83      	ldr	r2, [pc, #524]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a80      	ldr	r2, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f86a 	bl	8001d34 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff f866 	bl	8001d34 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e204      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f856 	bl	8001d34 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f852 	bl	8001d34 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1f0      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0xe8>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1c4      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4952      	ldr	r1, [pc, #328]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_RCC_OscConfig+0x2b0>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f80b 	bl	8001d34 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d22:	f7ff f807 	bl	8001d34 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1a5      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4940      	ldr	r1, [pc, #256]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_OscConfig+0x2b0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ffea 	bl	8001d34 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe ffe6 	bl	8001d34 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e184      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d030      	beq.n	8002df0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_OscConfig+0x2b4>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe ffca 	bl	8001d34 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fe ffc6 	bl	8001d34 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e164      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x200>
 8002dc2:	e015      	b.n	8002df0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x2b4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe ffb3 	bl	8001d34 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe ffaf 	bl	8001d34 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e14d      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a0 	beq.w	8002f3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x2b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_OscConfig+0x2b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_RCC_OscConfig+0x2b8>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe ff75 	bl	8001d34 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	e011      	b.n	8002e72 <HAL_RCC_OscConfig+0x2ce>
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000
 8002e58:	42470e80 	.word	0x42470e80
 8002e5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe ff68 	bl	8001d34 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e106      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b85      	ldr	r3, [pc, #532]	; (8003088 <HAL_RCC_OscConfig+0x4e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
 8002e86:	4b81      	ldr	r3, [pc, #516]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a80      	ldr	r2, [pc, #512]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e01c      	b.n	8002ece <HAL_RCC_OscConfig+0x32a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b7b      	ldr	r3, [pc, #492]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b78      	ldr	r3, [pc, #480]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a77      	ldr	r2, [pc, #476]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x32a>
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a74      	ldr	r2, [pc, #464]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b72      	ldr	r3, [pc, #456]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a71      	ldr	r2, [pc, #452]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe ff2d 	bl	8001d34 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe ff29 	bl	8001d34 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0c5      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RCC_OscConfig+0x33a>
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe ff17 	bl	8001d34 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe ff13 	bl	8001d34 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0af      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a55      	ldr	r2, [pc, #340]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 809b 	beq.w	800307e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d05c      	beq.n	800300e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d141      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fee7 	bl	8001d34 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe fee3 	bl	8001d34 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e081      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	019b      	lsls	r3, r3, #6
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	4937      	ldr	r1, [pc, #220]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe febc 	bl	8001d34 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe feb8 	bl	8001d34 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e056      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
 8002fde:	e04e      	b.n	800307e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fea5 	bl	8001d34 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fea1 	bl	8001d34 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e03f      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x44a>
 800300c:	e037      	b.n	800307e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e032      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_RCC_OscConfig+0x4e8>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d028      	beq.n	800307a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d121      	bne.n	800307a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d11a      	bne.n	800307a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800304a:	4013      	ands	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003050:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d107      	bne.n	800307a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40007000 	.word	0x40007000
 800308c:	40023800 	.word	0x40023800
 8003090:	42470060 	.word	0x42470060

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cc      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d119      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b3f      	ldr	r3, [pc, #252]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e067      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4934      	ldr	r1, [pc, #208]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7fe fdd6 	bl	8001d34 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe fdd2 	bl	8001d34 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d20c      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fd36 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	08003c8c 	.word	0x08003c8c
 8003258:	20000080 	.word	0x20000080
 800325c:	20000084 	.word	0x20000084

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	2300      	movs	r3, #0
 8003272:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80bd 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x1a4>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e0b7      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003296:	60bb      	str	r3, [r7, #8]
       break;
 8003298:	e0b7      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800329c:	60bb      	str	r3, [r7, #8]
      break;
 800329e:	e0b4      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04d      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b58      	ldr	r3, [pc, #352]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	461a      	mov	r2, r3
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	ea02 0800 	and.w	r8, r2, r0
 80032ce:	ea03 0901 	and.w	r9, r3, r1
 80032d2:	4640      	mov	r0, r8
 80032d4:	4649      	mov	r1, r9
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	014b      	lsls	r3, r1, #5
 80032e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e4:	0142      	lsls	r2, r0, #5
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	ebb0 0008 	subs.w	r0, r0, r8
 80032ee:	eb61 0109 	sbc.w	r1, r1, r9
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	018b      	lsls	r3, r1, #6
 80032fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003300:	0182      	lsls	r2, r0, #6
 8003302:	1a12      	subs	r2, r2, r0
 8003304:	eb63 0301 	sbc.w	r3, r3, r1
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	00d9      	lsls	r1, r3, #3
 8003312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003316:	00d0      	lsls	r0, r2, #3
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	eb12 0208 	adds.w	r2, r2, r8
 8003320:	eb43 0309 	adc.w	r3, r3, r9
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0259      	lsls	r1, r3, #9
 800332e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003332:	0250      	lsls	r0, r2, #9
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f7fc ff48 	bl	80001d8 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e04a      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	ea02 0400 	and.w	r4, r2, r0
 800336a:	ea03 0501 	and.w	r5, r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	014b      	lsls	r3, r1, #5
 800337c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003380:	0142      	lsls	r2, r0, #5
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	1b00      	subs	r0, r0, r4
 8003388:	eb61 0105 	sbc.w	r1, r1, r5
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	018b      	lsls	r3, r1, #6
 8003396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800339a:	0182      	lsls	r2, r0, #6
 800339c:	1a12      	subs	r2, r2, r0
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b0:	00d0      	lsls	r0, r2, #3
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	1912      	adds	r2, r2, r4
 80033b8:	eb45 0303 	adc.w	r3, r5, r3
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0299      	lsls	r1, r3, #10
 80033c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ca:	0290      	lsls	r0, r2, #10
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f7fc fefc 	bl	80001d8 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	60bb      	str	r3, [r7, #8]
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003406:	60bb      	str	r3, [r7, #8]
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	68bb      	ldr	r3, [r7, #8]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000080 	.word	0x20000080

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08003c9c 	.word	0x08003c9c

08003464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08003c9c 	.word	0x08003c9c

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e03f      	b.n	800351e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fb1c 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f939 	bl	8003748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	; 0x28
 800352a:	af02      	add	r7, sp, #8
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	f040 808c 	bne.w	8003660 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Receive+0x2e>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e084      	b.n	8003662 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_UART_Receive+0x40>
 8003562:	2302      	movs	r3, #2
 8003564:	e07d      	b.n	8003662 <HAL_UART_Receive+0x13c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2222      	movs	r2, #34	; 0x22
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003582:	f7fe fbd7 	bl	8001d34 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d108      	bne.n	80035b0 <HAL_UART_Receive+0x8a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e003      	b.n	80035b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035c0:	e043      	b.n	800364a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2120      	movs	r1, #32
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f84c 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e042      	b.n	8003662 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3302      	adds	r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e01f      	b.n	800363c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003604:	d007      	beq.n	8003616 <HAL_UART_Receive+0xf0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_UART_Receive+0xfe>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e008      	b.n	8003636 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	b2da      	uxtb	r2, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1b6      	bne.n	80035c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b090      	sub	sp, #64	; 0x40
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367a:	e050      	b.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d04c      	beq.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0x30>
 800368a:	f7fe fb53 	bl	8001d34 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003696:	429a      	cmp	r2, r3
 8003698:	d241      	bcs.n	800371e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ba:	637a      	str	r2, [r7, #52]	; 0x34
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	613b      	str	r3, [r7, #16]
   return(result);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ee:	623a      	str	r2, [r7, #32]
 80036f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	69f9      	ldr	r1, [r7, #28]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d09f      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3740      	adds	r7, #64	; 0x40
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374c:	b09f      	sub	sp, #124	; 0x7c
 800374e:	af00      	add	r7, sp, #0
 8003750:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375e:	68d9      	ldr	r1, [r3, #12]
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	ea40 0301 	orr.w	r3, r0, r1
 8003768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800376a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	431a      	orrs	r2, r3
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4313      	orrs	r3, r2
 8003780:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800378c:	f021 010c 	bic.w	r1, r1, #12
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003796:	430b      	orrs	r3, r1
 8003798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	6999      	ldr	r1, [r3, #24]
 80037a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	ea40 0301 	orr.w	r3, r0, r1
 80037b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4bc5      	ldr	r3, [pc, #788]	; (8003acc <UART_SetConfig+0x384>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d004      	beq.n	80037c6 <UART_SetConfig+0x7e>
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4bc3      	ldr	r3, [pc, #780]	; (8003ad0 <UART_SetConfig+0x388>)
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d103      	bne.n	80037ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c6:	f7ff fe4d 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 80037ca:	6778      	str	r0, [r7, #116]	; 0x74
 80037cc:	e002      	b.n	80037d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ce:	f7ff fe35 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80037d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037dc:	f040 80b6 	bne.w	800394c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e2:	461c      	mov	r4, r3
 80037e4:	f04f 0500 	mov.w	r5, #0
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	6439      	str	r1, [r7, #64]	; 0x40
 80037f0:	415b      	adcs	r3, r3
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037f8:	1912      	adds	r2, r2, r4
 80037fa:	eb45 0303 	adc.w	r3, r5, r3
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	00d9      	lsls	r1, r3, #3
 8003808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380c:	00d0      	lsls	r0, r2, #3
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	1911      	adds	r1, r2, r4
 8003814:	6639      	str	r1, [r7, #96]	; 0x60
 8003816:	416b      	adcs	r3, r5
 8003818:	667b      	str	r3, [r7, #100]	; 0x64
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	1891      	adds	r1, r2, r2
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	415b      	adcs	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003830:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003834:	f7fc fcd0 	bl	80001d8 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4ba5      	ldr	r3, [pc, #660]	; (8003ad4 <UART_SetConfig+0x38c>)
 800383e:	fba3 2302 	umull	r2, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	011e      	lsls	r6, r3, #4
 8003846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003848:	461c      	mov	r4, r3
 800384a:	f04f 0500 	mov.w	r5, #0
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	1891      	adds	r1, r2, r2
 8003854:	6339      	str	r1, [r7, #48]	; 0x30
 8003856:	415b      	adcs	r3, r3
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
 800385a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800385e:	1912      	adds	r2, r2, r4
 8003860:	eb45 0303 	adc.w	r3, r5, r3
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	00d9      	lsls	r1, r3, #3
 800386e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003872:	00d0      	lsls	r0, r2, #3
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	1911      	adds	r1, r2, r4
 800387a:	65b9      	str	r1, [r7, #88]	; 0x58
 800387c:	416b      	adcs	r3, r5
 800387e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	1891      	adds	r1, r2, r2
 800388c:	62b9      	str	r1, [r7, #40]	; 0x28
 800388e:	415b      	adcs	r3, r3
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003896:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800389a:	f7fc fc9d 	bl	80001d8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <UART_SetConfig+0x38c>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a87      	ldr	r2, [pc, #540]	; (8003ad4 <UART_SetConfig+0x38c>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c4:	441e      	add	r6, r3
 80038c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c8:	4618      	mov	r0, r3
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	1894      	adds	r4, r2, r2
 80038d4:	623c      	str	r4, [r7, #32]
 80038d6:	415b      	adcs	r3, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038de:	1812      	adds	r2, r2, r0
 80038e0:	eb41 0303 	adc.w	r3, r1, r3
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	f04f 0500 	mov.w	r5, #0
 80038ec:	00dd      	lsls	r5, r3, #3
 80038ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038f2:	00d4      	lsls	r4, r2, #3
 80038f4:	4622      	mov	r2, r4
 80038f6:	462b      	mov	r3, r5
 80038f8:	1814      	adds	r4, r2, r0
 80038fa:	653c      	str	r4, [r7, #80]	; 0x50
 80038fc:	414b      	adcs	r3, r1
 80038fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	461a      	mov	r2, r3
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	1891      	adds	r1, r2, r2
 800390c:	61b9      	str	r1, [r7, #24]
 800390e:	415b      	adcs	r3, r3
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003916:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800391a:	f7fc fc5d 	bl	80001d8 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4b6c      	ldr	r3, [pc, #432]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a67      	ldr	r2, [pc, #412]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4432      	add	r2, r6
 8003948:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800394a:	e0b9      	b.n	8003ac0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394e:	461c      	mov	r4, r3
 8003950:	f04f 0500 	mov.w	r5, #0
 8003954:	4622      	mov	r2, r4
 8003956:	462b      	mov	r3, r5
 8003958:	1891      	adds	r1, r2, r2
 800395a:	6139      	str	r1, [r7, #16]
 800395c:	415b      	adcs	r3, r3
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003964:	1912      	adds	r2, r2, r4
 8003966:	eb45 0303 	adc.w	r3, r5, r3
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	00d9      	lsls	r1, r3, #3
 8003974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003978:	00d0      	lsls	r0, r2, #3
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	eb12 0804 	adds.w	r8, r2, r4
 8003982:	eb43 0905 	adc.w	r9, r3, r5
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800399e:	0082      	lsls	r2, r0, #2
 80039a0:	4640      	mov	r0, r8
 80039a2:	4649      	mov	r1, r9
 80039a4:	f7fc fc18 	bl	80001d8 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <UART_SetConfig+0x38c>)
 80039ae:	fba3 2302 	umull	r2, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	011e      	lsls	r6, r3, #4
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	4618      	mov	r0, r3
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	1894      	adds	r4, r2, r2
 80039c4:	60bc      	str	r4, [r7, #8]
 80039c6:	415b      	adcs	r3, r3
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ce:	1812      	adds	r2, r2, r0
 80039d0:	eb41 0303 	adc.w	r3, r1, r3
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	f04f 0500 	mov.w	r5, #0
 80039dc:	00dd      	lsls	r5, r3, #3
 80039de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039e2:	00d4      	lsls	r4, r2, #3
 80039e4:	4622      	mov	r2, r4
 80039e6:	462b      	mov	r3, r5
 80039e8:	1814      	adds	r4, r2, r0
 80039ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80039ec:	414b      	adcs	r3, r1
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	008b      	lsls	r3, r1, #2
 8003a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a08:	0082      	lsls	r2, r0, #2
 8003a0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a0e:	f7fc fbe3 	bl	80001d8 <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003a18:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a2a      	ldr	r2, [pc, #168]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a36:	441e      	add	r6, r3
 8003a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	1894      	adds	r4, r2, r2
 8003a46:	603c      	str	r4, [r7, #0]
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a50:	1812      	adds	r2, r2, r0
 8003a52:	eb41 0303 	adc.w	r3, r1, r3
 8003a56:	f04f 0400 	mov.w	r4, #0
 8003a5a:	f04f 0500 	mov.w	r5, #0
 8003a5e:	00dd      	lsls	r5, r3, #3
 8003a60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a64:	00d4      	lsls	r4, r2, #3
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a6e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	008b      	lsls	r3, r1, #2
 8003a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a8a:	0082      	lsls	r2, r0, #2
 8003a8c:	4650      	mov	r0, sl
 8003a8e:	4659      	mov	r1, fp
 8003a90:	f7fc fba2 	bl	80001d8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2164      	movs	r1, #100	; 0x64
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	3332      	adds	r3, #50	; 0x32
 8003aac:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <UART_SetConfig+0x38c>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4432      	add	r2, r6
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	377c      	adds	r7, #124	; 0x7c
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	40011000 	.word	0x40011000
 8003ad0:	40011400 	.word	0x40011400
 8003ad4:	51eb851f 	.word	0x51eb851f

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	; (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	; (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	; (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	; (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 f820 	bl	8003b30 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003cac 	.word	0x08003cac
 8003b14:	08003cac 	.word	0x08003cac
 8003b18:	08003cac 	.word	0x08003cac
 8003b1c:	08003cb0 	.word	0x08003cb0

08003b20 <memset>:
 8003b20:	4402      	add	r2, r0
 8003b22:	4603      	mov	r3, r0
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d100      	bne.n	8003b2a <memset+0xa>
 8003b28:	4770      	bx	lr
 8003b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2e:	e7f9      	b.n	8003b24 <memset+0x4>

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
