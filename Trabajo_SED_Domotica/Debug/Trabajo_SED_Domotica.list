
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ffc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004304  08004304  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800430c  0800430c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000144  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be5d  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c9  00000000  00000000  0002bf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000968  00000000  00000000  0002dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002000a  00000000  00000000  0002e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf25  00000000  00000000  0004e912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c415b  00000000  00000000  0005a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e992  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028bc  00000000  00000000  0011e9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800416c 	.word	0x0800416c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800416c 	.word	0x0800416c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <setLuces>:

int estado=0;
int manual=0;
int automatico=0;

void setLuces(int n){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(n==0){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d106      	bne.n	80004ec <setLuces+0x1c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <setLuces+0x38>)
 80004e6:	f002 f9fd 	bl	80028e4 <HAL_GPIO_WritePin>
 80004ea:	e005      	b.n	80004f8 <setLuces+0x28>

	}else{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <setLuces+0x38>)
 80004f4:	f002 f9f6 	bl	80028e4 <HAL_GPIO_WritePin>
	}
	  estado=n;
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <setLuces+0x3c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020c00 	.word	0x40020c00
 800050c:	200000a8 	.word	0x200000a8

08000510 <getEstadoLuces>:

int getEstadoLuces(){
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	return estado;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <getEstadoLuces+0x14>)
 8000516:	681b      	ldr	r3, [r3, #0]
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200000a8 	.word	0x200000a8

08000528 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	if(estado==0){
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <cambiarEstadoLuces+0x20>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <cambiarEstadoLuces+0x14>
		setLuces(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ffcb 	bl	80004d0 <setLuces>
	}else{
		setLuces(0);
	}
}
 800053a:	e002      	b.n	8000542 <cambiarEstadoLuces+0x1a>
		setLuces(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ffc7 	bl	80004d0 <setLuces>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000a8 	.word	0x200000a8

0800054c <clrScr>:
#include "control_luces.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <clrScr+0x24>)
 8000564:	f002 fb34 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000c0 	.word	0x200000c0

08000574 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af02      	add	r7, sp, #8
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 8000580:	2302      	movs	r3, #2
 8000582:	753b      	strb	r3, [r7, #20]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	757b      	strb	r3, [r7, #21]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	75bb      	strb	r3, [r7, #22]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 8000596:	f107 0214 	add.w	r2, r7, #20
 800059a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	2110      	movs	r1, #16
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <setColor+0x40>)
 80005a6:	f002 fb13 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000c0 	.word	0x200000c0

080005b8 <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af02      	add	r7, sp, #8
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 80005c4:	2303      	movs	r3, #3
 80005c6:	753b      	strb	r3, [r7, #20]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	757b      	strb	r3, [r7, #21]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	75bb      	strb	r3, [r7, #22]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 80005da:	f107 0214 	add.w	r2, r7, #20
 80005de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2304      	movs	r3, #4
 80005e6:	2110      	movs	r1, #16
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <setBackColor+0x40>)
 80005ea:	f002 faf1 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000c0 	.word	0x200000c0

080005fc <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2bff      	cmp	r3, #255	; 0xff
 800061c:	dd01      	ble.n	8000622 <drawRect+0x26>
		desb[0] = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	dd01      	ble.n	800062c <drawRect+0x30>
		desb[1] = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2bff      	cmp	r3, #255	; 0xff
 8000630:	dd01      	ble.n	8000636 <drawRect+0x3a>
		desb[2] = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2bff      	cmp	r3, #255	; 0xff
 800063a:	dd01      	ble.n	8000640 <drawRect+0x44>
		desb[3] = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8000640:	2304      	movs	r3, #4
 8000642:	753b      	strb	r3, [r7, #20]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	757b      	strb	r3, [r7, #21]
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	75bb      	strb	r3, [r7, #22]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	75fb      	strb	r3, [r7, #23]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	763b      	strb	r3, [r7, #24]
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	767b      	strb	r3, [r7, #25]
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	b2db      	uxtb	r3, r3
 8000666:	76bb      	strb	r3, [r7, #26]
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	b2db      	uxtb	r3, r3
 800066c:	76fb      	strb	r3, [r7, #27]
 800066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000670:	b2db      	uxtb	r3, r3
 8000672:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 8000674:	f107 0214 	add.w	r2, r7, #20
 8000678:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2309      	movs	r3, #9
 8000680:	2110      	movs	r1, #16
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <drawRect+0x94>)
 8000684:	f002 faa4 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 8000688:	bf00      	nop
 800068a:	3730      	adds	r7, #48	; 0x30
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000c0 	.word	0x200000c0

08000694 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	; 0x38
 8000698:	af02      	add	r7, sp, #8
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2bff      	cmp	r3, #255	; 0xff
 80006b4:	dd01      	ble.n	80006ba <fillRect+0x26>
		desb[0] = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2bff      	cmp	r3, #255	; 0xff
 80006be:	dd01      	ble.n	80006c4 <fillRect+0x30>
		desb[1] = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	dd01      	ble.n	80006ce <fillRect+0x3a>
		desb[2] = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2bff      	cmp	r3, #255	; 0xff
 80006d2:	dd01      	ble.n	80006d8 <fillRect+0x44>
		desb[3] = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80006d8:	2305      	movs	r3, #5
 80006da:	753b      	strb	r3, [r7, #20]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	757b      	strb	r3, [r7, #21]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	75fb      	strb	r3, [r7, #23]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	763b      	strb	r3, [r7, #24]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	767b      	strb	r3, [r7, #25]
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	76bb      	strb	r3, [r7, #26]
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	b2db      	uxtb	r3, r3
 8000704:	76fb      	strb	r3, [r7, #27]
 8000706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000708:	b2db      	uxtb	r3, r3
 800070a:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 800070c:	f107 0214 	add.w	r2, r7, #20
 8000710:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2309      	movs	r3, #9
 8000718:	2110      	movs	r1, #16
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <fillRect+0x94>)
 800071c:	f002 fa58 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	; 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000c0 	.word	0x200000c0

0800072c <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b098      	sub	sp, #96	; 0x60
 8000730:	af02      	add	r7, sp, #8
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 8000738:	2300      	movs	r3, #0
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2bff      	cmp	r3, #255	; 0xff
 8000744:	dd01      	ble.n	800074a <print+0x1e>
		desb[0] = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2bff      	cmp	r3, #255	; 0xff
 800074e:	dd01      	ble.n	8000754 <print+0x28>
		desb[1] = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 8000754:	2306      	movs	r3, #6
 8000756:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff fd35 	bl	80001c8 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 8000762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000764:	b2db      	uxtb	r3, r3
 8000766:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 8000768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800076a:	b2db      	uxtb	r3, r3
 800076c:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 800076e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000770:	b2db      	uxtb	r3, r3
 8000772:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 8000774:	2304      	movs	r3, #4
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
 8000778:	e00d      	b.n	8000796 <print+0x6a>
		cadena[i] = t[i - 4];
 800077a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800077c:	3b04      	subs	r3, #4
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	7819      	ldrb	r1, [r3, #0]
 8000784:	f107 0214 	add.w	r2, r7, #20
 8000788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800078a:	4413      	add	r3, r2
 800078c:	460a      	mov	r2, r1
 800078e:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 8000790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000792:	3301      	adds	r3, #1
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
 8000796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000798:	3303      	adds	r3, #3
 800079a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800079c:	429a      	cmp	r2, r3
 800079e:	ddec      	ble.n	800077a <print+0x4e>
	}
	cadena[longitud + 4] = x;
 80007a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007a2:	3304      	adds	r3, #4
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80007ac:	440b      	add	r3, r1
 80007ae:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	3305      	adds	r3, #5
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80007be:	440b      	add	r3, r1
 80007c0:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 80007c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3306      	adds	r3, #6
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	f107 0214 	add.w	r2, r7, #20
 80007d0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80007d4:	9100      	str	r1, [sp, #0]
 80007d6:	2110      	movs	r1, #16
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <print+0xbc>)
 80007da:	f002 f9f9 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	; 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000c0 	.word	0x200000c0

080007ec <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	e01b      	b.n	800083c <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4413      	add	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	f7ff ff88 	bl	800072c <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fcce 	bl	80001c8 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	00da      	lsls	r2, r3, #3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbdf      	blt.n	8000804 <printfrase+0x18>
	}
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 8000858:	2307      	movs	r3, #7
 800085a:	733b      	strb	r3, [r7, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 8000862:	f107 020c 	add.w	r2, r7, #12
 8000866:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2302      	movs	r3, #2
 800086e:	2110      	movs	r1, #16
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <setFont+0x30>)
 8000872:	f002 f9ad 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000c0 	.word	0x200000c0

08000884 <fillCircle>:
	}
	uint8_t coord[7] = { 8, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
}
//Imprime circulos rellenos
void fillCircle(int x, int y, int r) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
	int desb[3] = { 0, 0, 0 };
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
	if (x > 255) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	dd01      	ble.n	80008a6 <fillCircle+0x22>
		desb[0] = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
	}
	if (y > 255) {
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	dd01      	ble.n	80008b0 <fillCircle+0x2c>
		desb[1] = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
	}
	if (r > 255) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	dd01      	ble.n	80008ba <fillCircle+0x36>
		desb[2] = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
	}
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
 80008ba:	2309      	movs	r3, #9
 80008bc:	753b      	strb	r3, [r7, #20]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	757b      	strb	r3, [r7, #21]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	75bb      	strb	r3, [r7, #22]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	763b      	strb	r3, [r7, #24]
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	767b      	strb	r3, [r7, #25]
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
 80008e2:	f107 0214 	add.w	r2, r7, #20
 80008e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2307      	movs	r3, #7
 80008ee:	2110      	movs	r1, #16
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <fillCircle+0x7c>)
 80008f2:	f002 f96d 	bl	8002bd0 <HAL_I2C_Master_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000c0 	.word	0x200000c0

08000904 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 8000904:	b490      	push	{r4, r7}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 8000912:	4a48      	ldr	r2, [pc, #288]	; (8000a34 <botones+0x130>)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 8000918:	4a47      	ldr	r2, [pc, #284]	; (8000a38 <botones+0x134>)
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 800091e:	4a47      	ldr	r2, [pc, #284]	; (8000a3c <botones+0x138>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000924:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <botones+0x13c>)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 800092a:	4a46      	ldr	r2, [pc, #280]	; (8000a44 <botones+0x140>)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 8000930:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <botones+0x144>)
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 8000936:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <botones+0x148>)
 8000938:	461c      	mov	r4, r3
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 8000946:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <botones+0x14c>)
 8000948:	461c      	mov	r4, r3
 800094a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 8000956:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <botones+0x150>)
 8000958:	461c      	mov	r4, r3
 800095a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <botones+0x154>)
 8000968:	461c      	mov	r4, r3
 800096a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800096e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <botones+0x158>)
 8000978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800097a:	6013      	str	r3, [r2, #0]
	columnas = c;
 800097c:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <botones+0x15c>)
 800097e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000980:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <botones+0x15c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d013      	beq.n	80009b2 <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <botones+0x138>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <botones+0x15c>)
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <botones+0x130>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <botones+0x15c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009ac:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <botones+0x160>)
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e011      	b.n	80009d6 <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <botones+0x138>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <botones+0x15c>)
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <botones+0x130>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	1ad2      	subs	r2, r2, r3
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <botones+0x15c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <botones+0x160>)
 80009d4:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <botones+0x158>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d013      	beq.n	8000a06 <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <botones+0x13c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <botones+0x158>)
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <botones+0x134>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <botones+0x158>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <botones+0x164>)
 8000a02:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 8000a04:	e011      	b.n	8000a2a <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <botones+0x13c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <botones+0x158>)
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <botones+0x134>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad2      	subs	r2, r2, r3
				/ filas;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <botones+0x158>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <botones+0x164>)
 8000a28:	6013      	str	r3, [r2, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc90      	pop	{r4, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	20000010 	.word	0x20000010
 8000a48:	20000014 	.word	0x20000014
 8000a4c:	20000018 	.word	0x20000018
 8000a50:	20000024 	.word	0x20000024
 8000a54:	20000030 	.word	0x20000030
 8000a58:	2000003c 	.word	0x2000003c
 8000a5c:	20000048 	.word	0x20000048
 8000a60:	2000004c 	.word	0x2000004c
 8000a64:	20000180 	.word	0x20000180
 8000a68:	200001c8 	.word	0x200001c8

08000a6c <crear_botonera>:

void crear_botonera() {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e05d      	b.n	8000b34 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	e052      	b.n	8000b24 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <crear_botonera+0xdc>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <crear_botonera+0xe0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	fb02 f203 	mul.w	r2, r2, r3
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <crear_botonera+0xe4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000a92:	4413      	add	r3, r2
 8000a94:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <crear_botonera+0xe8>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <crear_botonera+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	fb02 f203 	mul.w	r2, r2, r3
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <crear_botonera+0xf0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <crear_botonera+0xf4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <crear_botonera+0xf4>)
 8000ab4:	6851      	ldr	r1, [r2, #4]
 8000ab6:	4a2a      	ldr	r2, [pc, #168]	; (8000b60 <crear_botonera+0xf4>)
 8000ab8:	6892      	ldr	r2, [r2, #8]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fd5a 	bl	8000574 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <crear_botonera+0xf8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	1ad0      	subs	r0, r2, r3
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <crear_botonera+0xf8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <crear_botonera+0xe0>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <crear_botonera+0xf8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <crear_botonera+0xec>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <crear_botonera+0xf8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4622      	mov	r2, r4
 8000aee:	f7ff fdd1 	bl	8000694 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <crear_botonera+0xfc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <crear_botonera+0xfc>)
 8000af8:	6851      	ldr	r1, [r2, #4]
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <crear_botonera+0xfc>)
 8000afc:	6892      	ldr	r2, [r2, #8]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fd38 	bl	8000574 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <crear_botonera+0xe0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	18d1      	adds	r1, r2, r3
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <crear_botonera+0xec>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	460a      	mov	r2, r1
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fdbb 	bl	8000694 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <crear_botonera+0x100>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dba7      	blt.n	8000a7e <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <crear_botonera+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	db9c      	blt.n	8000a78 <crear_botonera+0xc>
		}
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	20000180 	.word	0x20000180
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001c8 	.word	0x200001c8
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	20000024 	.word	0x20000024
 8000b64:	20000010 	.word	0x20000010
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	2000004c 	.word	0x2000004c
 8000b70:	20000048 	.word	0x20000048

08000b74 <resaltar_boton>:

void resaltar_boton(int b) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b08d      	sub	sp, #52	; 0x34
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int j = 0; j < filas; j++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b84:	e083      	b.n	8000c8e <resaltar_boton+0x11a>
		for (int i = 0; i < columnas; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	e078      	b.n	8000c7e <resaltar_boton+0x10a>
			if (boton_resaltado == k) {
 8000b8c:	4b7f      	ldr	r3, [pc, #508]	; (8000d8c <resaltar_boton+0x218>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d16d      	bne.n	8000c72 <resaltar_boton+0xfe>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000b96:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <resaltar_boton+0x21c>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b7e      	ldr	r3, [pc, #504]	; (8000d94 <resaltar_boton+0x220>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba2:	fb02 f203 	mul.w	r2, r2, r3
 8000ba6:	4b7c      	ldr	r3, [pc, #496]	; (8000d98 <resaltar_boton+0x224>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000baa:	4413      	add	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <resaltar_boton+0x228>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4b7b      	ldr	r3, [pc, #492]	; (8000da0 <resaltar_boton+0x22c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bba:	fb02 f203 	mul.w	r2, r2, r3
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <resaltar_boton+0x230>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
				setColor(0, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fcd2 	bl	8000574 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000bd0:	4b75      	ldr	r3, [pc, #468]	; (8000da8 <resaltar_boton+0x234>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	1ad0      	subs	r0, r2, r3
 8000bd8:	4b73      	ldr	r3, [pc, #460]	; (8000da8 <resaltar_boton+0x234>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000be0:	4b6c      	ldr	r3, [pc, #432]	; (8000d94 <resaltar_boton+0x220>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000be8:	4b6f      	ldr	r3, [pc, #444]	; (8000da8 <resaltar_boton+0x234>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000bee:	4b6c      	ldr	r3, [pc, #432]	; (8000da0 <resaltar_boton+0x22c>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <resaltar_boton+0x234>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	f7ff fd49 	bl	8000694 <fillRect>
				setColor(cmarco.r, cmarco.g, cmarco.b);
 8000c02:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <resaltar_boton+0x238>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a69      	ldr	r2, [pc, #420]	; (8000dac <resaltar_boton+0x238>)
 8000c08:	6851      	ldr	r1, [r2, #4]
 8000c0a:	4a68      	ldr	r2, [pc, #416]	; (8000dac <resaltar_boton+0x238>)
 8000c0c:	6892      	ldr	r2, [r2, #8]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fcb0 	bl	8000574 <setColor>
				fillRect(x - marco_boton, y - marco_boton,
 8000c14:	4b66      	ldr	r3, [pc, #408]	; (8000db0 <resaltar_boton+0x23c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	1ad0      	subs	r0, r2, r3
 8000c1c:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <resaltar_boton+0x23c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + marco_boton,
 8000c24:	4b5b      	ldr	r3, [pc, #364]	; (8000d94 <resaltar_boton+0x220>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c2c:	4b60      	ldr	r3, [pc, #384]	; (8000db0 <resaltar_boton+0x23c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	18d4      	adds	r4, r2, r3
						y + alto_boton + marco_boton);
 8000c32:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <resaltar_boton+0x22c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c3a:	4b5d      	ldr	r3, [pc, #372]	; (8000db0 <resaltar_boton+0x23c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4622      	mov	r2, r4
 8000c42:	f7ff fd27 	bl	8000694 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000c46:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <resaltar_boton+0x240>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <resaltar_boton+0x240>)
 8000c4c:	6851      	ldr	r1, [r2, #4]
 8000c4e:	4a59      	ldr	r2, [pc, #356]	; (8000db4 <resaltar_boton+0x240>)
 8000c50:	6892      	ldr	r2, [r2, #8]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fc8e 	bl	8000574 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000c58:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <resaltar_boton+0x220>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	18d1      	adds	r1, r2, r3
 8000c60:	4b4f      	ldr	r3, [pc, #316]	; (8000da0 <resaltar_boton+0x22c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	460a      	mov	r2, r1
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	6938      	ldr	r0, [r7, #16]
 8000c6e:	f7ff fd11 	bl	8000694 <fillRect>
			}
			k++;
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	3301      	adds	r3, #1
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <resaltar_boton+0x244>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	429a      	cmp	r2, r3
 8000c86:	db81      	blt.n	8000b8c <resaltar_boton+0x18>
	for (int j = 0; j < filas; j++) {
 8000c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <resaltar_boton+0x248>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f6ff af76 	blt.w	8000b86 <resaltar_boton+0x12>
		}
	}
	k = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	boton_resaltado = b;
 8000c9e:	4a3b      	ldr	r2, [pc, #236]	; (8000d8c <resaltar_boton+0x218>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < filas; j++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	e065      	b.n	8000d76 <resaltar_boton+0x202>
		for (int i = 0; i < columnas; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e05a      	b.n	8000d66 <resaltar_boton+0x1f2>
			if (boton_resaltado == k) {
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <resaltar_boton+0x218>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d14f      	bne.n	8000d5a <resaltar_boton+0x1e6>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <resaltar_boton+0x21c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <resaltar_boton+0x220>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	fb02 f203 	mul.w	r2, r2, r3
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <resaltar_boton+0x224>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000cce:	4413      	add	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <resaltar_boton+0x228>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <resaltar_boton+0x22c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	fb02 f203 	mul.w	r2, r2, r3
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <resaltar_boton+0x230>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000ce6:	4413      	add	r3, r2
 8000ce8:	617b      	str	r3, [r7, #20]
				setColor(cmarcon.r, cmarcon.g, cmarcon.b);
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <resaltar_boton+0x24c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <resaltar_boton+0x24c>)
 8000cf0:	6851      	ldr	r1, [r2, #4]
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <resaltar_boton+0x24c>)
 8000cf4:	6892      	ldr	r2, [r2, #8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc3c 	bl	8000574 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <resaltar_boton+0x234>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	1ad0      	subs	r0, r2, r3
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <resaltar_boton+0x234>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <resaltar_boton+0x220>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <resaltar_boton+0x234>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <resaltar_boton+0x22c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <resaltar_boton+0x234>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4622      	mov	r2, r4
 8000d2a:	f7ff fcb3 	bl	8000694 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <resaltar_boton+0x240>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <resaltar_boton+0x240>)
 8000d34:	6851      	ldr	r1, [r2, #4]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <resaltar_boton+0x240>)
 8000d38:	6892      	ldr	r2, [r2, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fc1a 	bl	8000574 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <resaltar_boton+0x220>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	18d1      	adds	r1, r2, r3
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <resaltar_boton+0x22c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	460a      	mov	r2, r1
 8000d52:	6979      	ldr	r1, [r7, #20]
 8000d54:	69b8      	ldr	r0, [r7, #24]
 8000d56:	f7ff fc9d 	bl	8000694 <fillRect>
			}
			k++;
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <resaltar_boton+0x244>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	db9f      	blt.n	8000cb0 <resaltar_boton+0x13c>
	for (int j = 0; j < filas; j++) {
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	3301      	adds	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <resaltar_boton+0x248>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6a3a      	ldr	r2, [r7, #32]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	db94      	blt.n	8000caa <resaltar_boton+0x136>
		}
	}
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3734      	adds	r7, #52	; 0x34
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000ac 	.word	0x200000ac
 8000d90:	20000180 	.word	0x20000180
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	200001c8 	.word	0x200001c8
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000004 	.word	0x20000004
 8000da8:	20000014 	.word	0x20000014
 8000dac:	20000024 	.word	0x20000024
 8000db0:	20000010 	.word	0x20000010
 8000db4:	20000018 	.word	0x20000018
 8000db8:	2000004c 	.word	0x2000004c
 8000dbc:	20000048 	.word	0x20000048
 8000dc0:	20000030 	.word	0x20000030

08000dc4 <rellenar_botones>:

void rellenar_botones(const char *t[]) {
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b096      	sub	sp, #88	; 0x58
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000dd8:	4b99      	ldr	r3, [pc, #612]	; (8001040 <rellenar_botones+0x27c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a98      	ldr	r2, [pc, #608]	; (8001040 <rellenar_botones+0x27c>)
 8000dde:	6851      	ldr	r1, [r2, #4]
 8000de0:	4a97      	ldr	r2, [pc, #604]	; (8001040 <rellenar_botones+0x27c>)
 8000de2:	6892      	ldr	r2, [r2, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fbc5 	bl	8000574 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000dea:	4b96      	ldr	r3, [pc, #600]	; (8001044 <rellenar_botones+0x280>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a95      	ldr	r2, [pc, #596]	; (8001044 <rellenar_botones+0x280>)
 8000df0:	6851      	ldr	r1, [r2, #4]
 8000df2:	4a94      	ldr	r2, [pc, #592]	; (8001044 <rellenar_botones+0x280>)
 8000df4:	6892      	ldr	r2, [r2, #8]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbde 	bl	80005b8 <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8000e00:	e112      	b.n	8001028 <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e06:	e106      	b.n	8001016 <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000e08:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <rellenar_botones+0x284>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b8f      	ldr	r3, [pc, #572]	; (800104c <rellenar_botones+0x288>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e14:	fb02 f203 	mul.w	r2, r2, r3
 8000e18:	4b8d      	ldr	r3, [pc, #564]	; (8001050 <rellenar_botones+0x28c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000e1c:	4413      	add	r3, r2
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000e20:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <rellenar_botones+0x290>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b8c      	ldr	r3, [pc, #560]	; (8001058 <rellenar_botones+0x294>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e2c:	fb02 f203 	mul.w	r2, r2, r3
 8000e30:	4b8a      	ldr	r3, [pc, #552]	; (800105c <rellenar_botones+0x298>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff f9bd 	bl	80001c8 <strlen>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e52:	fb03 f302 	mul.w	r3, r3, r2
 8000e56:	4a7d      	ldr	r2, [pc, #500]	; (800104c <rellenar_botones+0x288>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d82d      	bhi.n	8000eba <rellenar_botones+0xf6>
				print(t[k - 1],
 8000e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e64:	3b01      	subs	r3, #1
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000e6e:	4b77      	ldr	r3, [pc, #476]	; (800104c <rellenar_botones+0x288>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	461d      	mov	r5, r3
 8000e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f99f 	bl	80001c8 <strlen>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8e:	fb03 f302 	mul.w	r3, r3, r2
 8000e92:	1aeb      	subs	r3, r5, r3
 8000e94:	085a      	lsrs	r2, r3, #1
 8000e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e98:	4413      	add	r3, r2
				print(t[k - 1],
 8000e9a:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <rellenar_botones+0x294>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	0fda      	lsrs	r2, r3, #31
 8000ea6:	4413      	add	r3, r2
 8000ea8:	105b      	asrs	r3, r3, #1
 8000eaa:	461a      	mov	r2, r3
				print(t[k - 1],
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	4413      	add	r3, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fc3a 	bl	800072c <print>
 8000eb8:	e0a7      	b.n	800100a <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ebe:	e00e      	b.n	8000ede <rellenar_botones+0x11a>
					t1[i] = 0;
 8000ec0:	f107 021c 	add.w	r2, r7, #28
 8000ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000ecc:	f107 0208 	add.w	r2, r7, #8
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eda:	3301      	adds	r3, #1
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee0:	2b13      	cmp	r3, #19
 8000ee2:	dded      	ble.n	8000ec0 <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee8:	e013      	b.n	8000f12 <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000efc:	4413      	add	r3, r2
 8000efe:	7819      	ldrb	r1, [r3, #0]
 8000f00:	f107 021c 	add.w	r2, r7, #28
 8000f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f06:	4413      	add	r3, r2
 8000f08:	460a      	mov	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0e:	3301      	adds	r3, #1
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <rellenar_botones+0x288>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbe3      	blt.n	8000eea <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <rellenar_botones+0x288>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f2e:	e019      	b.n	8000f64 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8000f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f36:	3b01      	subs	r3, #1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f42:	441a      	add	r2, r3
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <rellenar_botones+0x288>)
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4a:	fb91 f3f3 	sdiv	r3, r1, r3
 8000f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000f50:	1acb      	subs	r3, r1, r3
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000f58:	440b      	add	r3, r1
 8000f5a:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8000f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f60:	3301      	adds	r3, #1
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f927 	bl	80001c8 <strlen>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d2d6      	bcs.n	8000f30 <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <rellenar_botones+0x288>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461c      	mov	r4, r3
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f91b 	bl	80001c8 <strlen>
 8000f92:	4602      	mov	r2, r0
 8000f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f96:	fb03 f302 	mul.w	r3, r3, r2
 8000f9a:	1ae3      	subs	r3, r4, r3
 8000f9c:	085a      	lsrs	r2, r3, #1
 8000f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <rellenar_botones+0x294>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	0fda      	lsrs	r2, r3, #31
 8000fb0:	4413      	add	r3, r2
 8000fb2:	105b      	asrs	r3, r3, #1
 8000fb4:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb8:	441a      	add	r2, r3
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fbb4 	bl	800072c <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <rellenar_botones+0x288>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461c      	mov	r4, r3
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f8fa 	bl	80001c8 <strlen>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd8:	fb03 f302 	mul.w	r3, r3, r2
 8000fdc:	1ae3      	subs	r3, r4, r3
 8000fde:	085a      	lsrs	r2, r3, #1
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <rellenar_botones+0x294>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	0fda      	lsrs	r2, r3, #31
 8000ff2:	4413      	add	r3, r2
 8000ff4:	105b      	asrs	r3, r3, #1
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffe:	441a      	add	r2, r3
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fb91 	bl	800072c <print>
			}

			k++;
 800100a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100c:	3301      	adds	r3, #1
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 8001010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001012:	3301      	adds	r3, #1
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <rellenar_botones+0x29c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	f6ff aef3 	blt.w	8000e08 <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8001022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001024:	3301      	adds	r3, #1
 8001026:	653b      	str	r3, [r7, #80]	; 0x50
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <rellenar_botones+0x2a0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800102e:	429a      	cmp	r2, r3
 8001030:	f6ff aee7 	blt.w	8000e02 <rellenar_botones+0x3e>
		}
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3758      	adds	r7, #88	; 0x58
 800103a:	46bd      	mov	sp, r7
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	bf00      	nop
 8001040:	2000003c 	.word	0x2000003c
 8001044:	20000018 	.word	0x20000018
 8001048:	20000180 	.word	0x20000180
 800104c:	20000008 	.word	0x20000008
 8001050:	20000000 	.word	0x20000000
 8001054:	200001c8 	.word	0x200001c8
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000004 	.word	0x20000004
 8001060:	2000004c 	.word	0x2000004c
 8001064:	20000048 	.word	0x20000048

08001068 <pantalla_principal>:

//-------------------------------------------------------------------------------//

void pantalla_principal() {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b0a8      	sub	sp, #160	; 0xa0
 800106c:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
 800106e:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <pantalla_principal+0x180>)
 8001070:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800107e:	e884 0003 	stmia.w	r4, {r0, r1}
			"SEGURIDAD" };
	rgb boton = { 0, 0, 255 };
 8001082:	2300      	movs	r3, #0
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001086:	2300      	movs	r3, #0
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 800108e:	4a57      	ldr	r2, [pc, #348]	; (80011ec <pantalla_principal+0x184>)
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	ca07      	ldmia	r2, {r0, r1, r2}
 8001096:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 80010a6:	4a51      	ldr	r2, [pc, #324]	; (80011ec <pantalla_principal+0x184>)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 80010b2:	f7ff fa4b 	bl	800054c <clrScr>
	setColor(255, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	20ff      	movs	r0, #255	; 0xff
 80010bc:	f7ff fa5a 	bl	8000574 <setColor>
	fillRect(1, 1, 478, 40);
 80010c0:	2328      	movs	r3, #40	; 0x28
 80010c2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fae3 	bl	8000694 <fillRect>
	setColor(64, 64, 64);
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	2040      	movs	r0, #64	; 0x40
 80010d4:	f7ff fa4e 	bl	8000574 <setColor>
	fillRect(1, 318, 478, 280);
 80010d8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80010dc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80010e0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fad5 	bl	8000694 <fillRect>
	setColor(255, 255, 255);
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	21ff      	movs	r1, #255	; 0xff
 80010ee:	20ff      	movs	r0, #255	; 0xff
 80010f0:	f7ff fa40 	bl	8000574 <setColor>
	setBackColor(255, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	20ff      	movs	r0, #255	; 0xff
 80010fa:	f7ff fa5d 	bl	80005b8 <setBackColor>
	setFont(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fba6 	bl	8000850 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001104:	220c      	movs	r2, #12
 8001106:	2132      	movs	r1, #50	; 0x32
 8001108:	4839      	ldr	r0, [pc, #228]	; (80011f0 <pantalla_principal+0x188>)
 800110a:	f7ff fb0f 	bl	800072c <print>
	setBackColor(64, 64, 64);
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	2040      	movs	r0, #64	; 0x40
 8001114:	f7ff fa50 	bl	80005b8 <setBackColor>
	setColor(255, 255, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	21ff      	movs	r1, #255	; 0xff
 800111c:	20ff      	movs	r0, #255	; 0xff
 800111e:	f7ff fa29 	bl	8000574 <setColor>
	setFont(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fb94 	bl	8000850 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001128:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <pantalla_principal+0x18c>)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001134:	f107 000c 	add.w	r0, r7, #12
 8001138:	2303      	movs	r3, #3
 800113a:	f240 1219 	movw	r2, #281	; 0x119
 800113e:	2114      	movs	r1, #20
 8001140:	f7ff fb54 	bl	80007ec <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001144:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <pantalla_principal+0x190>)
 8001146:	463b      	mov	r3, r7
 8001148:	ca07      	ldmia	r2, {r0, r1, r2}
 800114a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800114e:	4638      	mov	r0, r7
 8001150:	2303      	movs	r3, #3
 8001152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001156:	2114      	movs	r1, #20
 8001158:	f7ff fb48 	bl	80007ec <printfrase>
	setColor(0, 0, 255);
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fa07 	bl	8000574 <setColor>
	drawRect(0, 0, 479, 319);
 8001166:	f240 133f 	movw	r3, #319	; 0x13f
 800116a:	f240 12df 	movw	r2, #479	; 0x1df
 800116e:	2100      	movs	r1, #0
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fa43 	bl	80005fc <drawRect>
	botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 8001176:	2303      	movs	r3, #3
 8001178:	930f      	str	r3, [sp, #60]	; 0x3c
 800117a:	2302      	movs	r3, #2
 800117c:	930e      	str	r3, [sp, #56]	; 0x38
 800117e:	ac0b      	add	r4, sp, #44	; 0x2c
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800118c:	ac08      	add	r4, sp, #32
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800119a:	ac05      	add	r4, sp, #20
 800119c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011a8:	ac02      	add	r4, sp, #8
 80011aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011b6:	2305      	movs	r3, #5
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2346      	movs	r3, #70	; 0x46
 80011c0:	2264      	movs	r2, #100	; 0x64
 80011c2:	2146      	movs	r1, #70	; 0x46
 80011c4:	201e      	movs	r0, #30
 80011c6:	f7ff fb9d 	bl	8000904 <botones>
	crear_botonera();
 80011ca:	f7ff fc4f 	bl	8000a6c <crear_botonera>
	setFont(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff fb3e 	bl	8000850 <setFont>
	rellenar_botones(t_menu);
 80011d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fdf3 	bl	8000dc4 <rellenar_botones>
}
 80011de:	bf00      	nop
 80011e0:	3760      	adds	r7, #96	; 0x60
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdb0      	pop	{r4, r5, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800425c 	.word	0x0800425c
 80011ec:	08004274 	.word	0x08004274
 80011f0:	08004248 	.word	0x08004248
 80011f4:	08004280 	.word	0x08004280
 80011f8:	0800428c 	.word	0x0800428c

080011fc <pantalla_luces>:

void pantalla_luces() {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b0a9      	sub	sp, #164	; 0xa4
 8001200:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
 8001202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <pantalla_luces+0x184>)
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
 8001218:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <pantalla_luces+0x188>)
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
	rgb boton = { 0, 0, 255 };
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001220:	2300      	movs	r3, #0
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
 8001224:	23ff      	movs	r3, #255	; 0xff
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 8001228:	4a57      	ldr	r2, [pc, #348]	; (8001388 <pantalla_luces+0x18c>)
 800122a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <pantalla_luces+0x18c>)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	ca07      	ldmia	r2, {r0, r1, r2}
 8001248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 800124c:	f7ff f97e 	bl	800054c <clrScr>
	setColor(255, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	20ff      	movs	r0, #255	; 0xff
 8001256:	f7ff f98d 	bl	8000574 <setColor>
	fillRect(1, 1, 478, 40);
 800125a:	2328      	movs	r3, #40	; 0x28
 800125c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001260:	2101      	movs	r1, #1
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fa16 	bl	8000694 <fillRect>
	setColor(64, 64, 64);
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	2040      	movs	r0, #64	; 0x40
 800126e:	f7ff f981 	bl	8000574 <setColor>
	fillRect(1, 318, 478, 280);
 8001272:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001276:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800127a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fa08 	bl	8000694 <fillRect>
	setColor(255, 255, 255);
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	20ff      	movs	r0, #255	; 0xff
 800128a:	f7ff f973 	bl	8000574 <setColor>
	setBackColor(255, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	20ff      	movs	r0, #255	; 0xff
 8001294:	f7ff f990 	bl	80005b8 <setBackColor>
	setFont(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fad9 	bl	8000850 <setFont>
	print("* MENU LUCES *", 100, 12);
 800129e:	220c      	movs	r2, #12
 80012a0:	2164      	movs	r1, #100	; 0x64
 80012a2:	483a      	ldr	r0, [pc, #232]	; (800138c <pantalla_luces+0x190>)
 80012a4:	f7ff fa42 	bl	800072c <print>
	setBackColor(64, 64, 64);
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	2040      	movs	r0, #64	; 0x40
 80012ae:	f7ff f983 	bl	80005b8 <setBackColor>
	setColor(255, 255, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	21ff      	movs	r1, #255	; 0xff
 80012b6:	20ff      	movs	r0, #255	; 0xff
 80012b8:	f7ff f95c 	bl	8000574 <setColor>
	setFont(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fac7 	bl	8000850 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 80012c2:	4a33      	ldr	r2, [pc, #204]	; (8001390 <pantalla_luces+0x194>)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 80012ce:	f107 000c 	add.w	r0, r7, #12
 80012d2:	2303      	movs	r3, #3
 80012d4:	f240 1219 	movw	r2, #281	; 0x119
 80012d8:	2114      	movs	r1, #20
 80012da:	f7ff fa87 	bl	80007ec <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <pantalla_luces+0x198>)
 80012e0:	463b      	mov	r3, r7
 80012e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 80012e8:	4638      	mov	r0, r7
 80012ea:	2303      	movs	r3, #3
 80012ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f0:	2114      	movs	r1, #20
 80012f2:	f7ff fa7b 	bl	80007ec <printfrase>
	setColor(0, 0, 255);
 80012f6:	22ff      	movs	r2, #255	; 0xff
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff f93a 	bl	8000574 <setColor>
	drawRect(0, 0, 479, 319);
 8001300:	f240 133f 	movw	r3, #319	; 0x13f
 8001304:	f240 12df 	movw	r2, #479	; 0x1df
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff f976 	bl	80005fc <drawRect>
	botones(40, 85, 180, 150, 2, 5, boton, marco, nmarco, texto, 1, 2);
 8001310:	2302      	movs	r3, #2
 8001312:	930f      	str	r3, [sp, #60]	; 0x3c
 8001314:	2301      	movs	r3, #1
 8001316:	930e      	str	r3, [sp, #56]	; 0x38
 8001318:	ac0b      	add	r4, sp, #44	; 0x2c
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001326:	ac08      	add	r4, sp, #32
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001334:	ac05      	add	r4, sp, #20
 8001336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001342:	ac02      	add	r4, sp, #8
 8001344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001348:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800134c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001350:	2305      	movs	r3, #5
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	2302      	movs	r3, #2
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2396      	movs	r3, #150	; 0x96
 800135a:	22b4      	movs	r2, #180	; 0xb4
 800135c:	2155      	movs	r1, #85	; 0x55
 800135e:	2028      	movs	r0, #40	; 0x28
 8001360:	f7ff fad0 	bl	8000904 <botones>
	crear_botonera();
 8001364:	f7ff fb82 	bl	8000a6c <crear_botonera>
	setFont(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fa71 	bl	8000850 <setFont>
	rellenar_botones(t_menu_luces);
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fd26 	bl	8000dc4 <rellenar_botones>
}
 8001378:	bf00      	nop
 800137a:	3764      	adds	r7, #100	; 0x64
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	08004298 	.word	0x08004298
 8001384:	080042a4 	.word	0x080042a4
 8001388:	08004274 	.word	0x08004274
 800138c:	080042ac 	.word	0x080042ac
 8001390:	08004280 	.word	0x08004280
 8001394:	080042bc 	.word	0x080042bc

08001398 <pantalla_luces_manual>:
void pantalla_luces_manual() {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
	clrScr();
 800139e:	f7ff f8d5 	bl	800054c <clrScr>
	setColor(255, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	20ff      	movs	r0, #255	; 0xff
 80013a8:	f7ff f8e4 	bl	8000574 <setColor>
	fillRect(1, 1, 478, 40);
 80013ac:	2328      	movs	r3, #40	; 0x28
 80013ae:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80013b2:	2101      	movs	r1, #1
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff f96d 	bl	8000694 <fillRect>
	setColor(64, 64, 64);
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	2040      	movs	r0, #64	; 0x40
 80013c0:	f7ff f8d8 	bl	8000574 <setColor>
	fillRect(1, 318, 478, 280);
 80013c4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013c8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80013cc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff f95f 	bl	8000694 <fillRect>
	setColor(255, 255, 255);
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	21ff      	movs	r1, #255	; 0xff
 80013da:	20ff      	movs	r0, #255	; 0xff
 80013dc:	f7ff f8ca 	bl	8000574 <setColor>
	setBackColor(255, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	20ff      	movs	r0, #255	; 0xff
 80013e6:	f7ff f8e7 	bl	80005b8 <setBackColor>
	setFont(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fa30 	bl	8000850 <setFont>
	print("* CONTROL MANUAL DE LUCES *", 30, 12);
 80013f0:	220c      	movs	r2, #12
 80013f2:	211e      	movs	r1, #30
 80013f4:	4860      	ldr	r0, [pc, #384]	; (8001578 <pantalla_luces_manual+0x1e0>)
 80013f6:	f7ff f999 	bl	800072c <print>
	setBackColor(64, 64, 64);
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	2040      	movs	r0, #64	; 0x40
 8001400:	f7ff f8da 	bl	80005b8 <setBackColor>
	setColor(255, 255, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	21ff      	movs	r1, #255	; 0xff
 8001408:	20ff      	movs	r0, #255	; 0xff
 800140a:	f7ff f8b3 	bl	8000574 <setColor>
	setFont(0);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fa1e 	bl	8000850 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001414:	4a59      	ldr	r2, [pc, #356]	; (800157c <pantalla_luces_manual+0x1e4>)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	ca07      	ldmia	r2, {r0, r1, r2}
 800141c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001420:	f107 000c 	add.w	r0, r7, #12
 8001424:	2303      	movs	r3, #3
 8001426:	f240 1219 	movw	r2, #281	; 0x119
 800142a:	2114      	movs	r1, #20
 800142c:	f7ff f9de 	bl	80007ec <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 8001430:	4a53      	ldr	r2, [pc, #332]	; (8001580 <pantalla_luces_manual+0x1e8>)
 8001432:	463b      	mov	r3, r7
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800143a:	4638      	mov	r0, r7
 800143c:	2303      	movs	r3, #3
 800143e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001442:	2114      	movs	r1, #20
 8001444:	f7ff f9d2 	bl	80007ec <printfrase>
	setColor(0, 0, 255);
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	2100      	movs	r1, #0
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff f891 	bl	8000574 <setColor>
	drawRect(0, 0, 479, 319);
 8001452:	f240 133f 	movw	r3, #319	; 0x13f
 8001456:	f240 12df 	movw	r2, #479	; 0x1df
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff f8cd 	bl	80005fc <drawRect>

	setColor(0, 255, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	21ff      	movs	r1, #255	; 0xff
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff f884 	bl	8000574 <setColor>
	fillCircle(118, 130, 25);
 800146c:	2219      	movs	r2, #25
 800146e:	2182      	movs	r1, #130	; 0x82
 8001470:	2076      	movs	r0, #118	; 0x76
 8001472:	f7ff fa07 	bl	8000884 <fillCircle>
	setColor(255, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff f87a 	bl	8000574 <setColor>
	fillCircle(358, 130, 25);
 8001480:	2219      	movs	r2, #25
 8001482:	2182      	movs	r1, #130	; 0x82
 8001484:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001488:	f7ff f9fc 	bl	8000884 <fillCircle>
	setColor(255, 255, 255);
 800148c:	22ff      	movs	r2, #255	; 0xff
 800148e:	21ff      	movs	r1, #255	; 0xff
 8001490:	20ff      	movs	r0, #255	; 0xff
 8001492:	f7ff f86f 	bl	8000574 <setColor>
	setBackColor(0, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff f88c 	bl	80005b8 <setBackColor>
	setFont(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff f9d5 	bl	8000850 <setFont>
	print("ON", 102, 170);
 80014a6:	22aa      	movs	r2, #170	; 0xaa
 80014a8:	2166      	movs	r1, #102	; 0x66
 80014aa:	4836      	ldr	r0, [pc, #216]	; (8001584 <pantalla_luces_manual+0x1ec>)
 80014ac:	f7ff f93e 	bl	800072c <print>
	print("OFF", 334, 170);
 80014b0:	22aa      	movs	r2, #170	; 0xaa
 80014b2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80014b6:	4834      	ldr	r0, [pc, #208]	; (8001588 <pantalla_luces_manual+0x1f0>)
 80014b8:	f7ff f938 	bl	800072c <print>

	if (getEstadoLuces() == 0) {
 80014bc:	f7ff f828 	bl	8000510 <getEstadoLuces>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d12a      	bne.n	800151c <pantalla_luces_manual+0x184>
		setColor(0, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff f852 	bl	8000574 <setColor>
		fillCircle(118, 130, 30);
 80014d0:	221e      	movs	r2, #30
 80014d2:	2182      	movs	r1, #130	; 0x82
 80014d4:	2076      	movs	r0, #118	; 0x76
 80014d6:	f7ff f9d5 	bl	8000884 <fillCircle>
		setColor(0, 0, 255);
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	2100      	movs	r1, #0
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff f848 	bl	8000574 <setColor>
		fillCircle(358, 130, 30);
 80014e4:	221e      	movs	r2, #30
 80014e6:	2182      	movs	r1, #130	; 0x82
 80014e8:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80014ec:	f7ff f9ca 	bl	8000884 <fillCircle>
		setColor(0, 255, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	21ff      	movs	r1, #255	; 0xff
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff f83d 	bl	8000574 <setColor>
		fillCircle(118, 130, 25);
 80014fa:	2219      	movs	r2, #25
 80014fc:	2182      	movs	r1, #130	; 0x82
 80014fe:	2076      	movs	r0, #118	; 0x76
 8001500:	f7ff f9c0 	bl	8000884 <fillCircle>
		setColor(255, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	20ff      	movs	r0, #255	; 0xff
 800150a:	f7ff f833 	bl	8000574 <setColor>
		fillCircle(358, 130, 25);
 800150e:	2219      	movs	r2, #25
 8001510:	2182      	movs	r1, #130	; 0x82
 8001512:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001516:	f7ff f9b5 	bl	8000884 <fillCircle>
		fillCircle(118, 130, 25);
		setColor(255, 0, 0);
		fillCircle(358, 130, 25);
	}

}
 800151a:	e029      	b.n	8001570 <pantalla_luces_manual+0x1d8>
		setColor(0, 0, 255);
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	2100      	movs	r1, #0
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff f827 	bl	8000574 <setColor>
		fillCircle(118, 130, 30);
 8001526:	221e      	movs	r2, #30
 8001528:	2182      	movs	r1, #130	; 0x82
 800152a:	2076      	movs	r0, #118	; 0x76
 800152c:	f7ff f9aa 	bl	8000884 <fillCircle>
		setColor(0, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff f81d 	bl	8000574 <setColor>
		fillCircle(358, 130, 30);
 800153a:	221e      	movs	r2, #30
 800153c:	2182      	movs	r1, #130	; 0x82
 800153e:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001542:	f7ff f99f 	bl	8000884 <fillCircle>
		setColor(0, 255, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	21ff      	movs	r1, #255	; 0xff
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff f812 	bl	8000574 <setColor>
		fillCircle(118, 130, 25);
 8001550:	2219      	movs	r2, #25
 8001552:	2182      	movs	r1, #130	; 0x82
 8001554:	2076      	movs	r0, #118	; 0x76
 8001556:	f7ff f995 	bl	8000884 <fillCircle>
		setColor(255, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	20ff      	movs	r0, #255	; 0xff
 8001560:	f7ff f808 	bl	8000574 <setColor>
		fillCircle(358, 130, 25);
 8001564:	2219      	movs	r2, #25
 8001566:	2182      	movs	r1, #130	; 0x82
 8001568:	f44f 70b3 	mov.w	r0, #358	; 0x166
 800156c:	f7ff f98a 	bl	8000884 <fillCircle>
}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	080042c8 	.word	0x080042c8
 800157c:	08004280 	.word	0x08004280
 8001580:	080042bc 	.word	0x080042bc
 8001584:	080042e4 	.word	0x080042e4
 8001588:	080042e8 	.word	0x080042e8

0800158c <reset_buffer>:
#include "string.h"
#include "TFT.h"

UART_HandleTypeDef huart6;
char rx_buffer[50], tx_buffer[50];
void reset_buffer() {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50; i++) {
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e005      	b.n	80015a4 <reset_buffer+0x18>
		rx_buffer[0] = '\0';
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <reset_buffer+0x2c>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b31      	cmp	r3, #49	; 0x31
 80015a8:	ddf6      	ble.n	8001598 <reset_buffer+0xc>
	}
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000118 	.word	0x20000118

080015bc <seleccion_menu_principal>:

const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
		"SEGURIDAD" };
const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
int opcion = 0;
int seleccion_menu_principal() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 80015c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	498b      	ldr	r1, [pc, #556]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015ca:	488c      	ldr	r0, [pc, #560]	; (80017fc <seleccion_menu_principal+0x240>)
 80015cc:	f002 fac9 	bl	8003b62 <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 80015d0:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b72      	cmp	r3, #114	; 0x72
 80015d6:	d132      	bne.n	800163e <seleccion_menu_principal+0x82>
 80015d8:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	2b69      	cmp	r3, #105	; 0x69
 80015de:	d12e      	bne.n	800163e <seleccion_menu_principal+0x82>
 80015e0:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	2b67      	cmp	r3, #103	; 0x67
 80015e6:	d12a      	bne.n	800163e <seleccion_menu_principal+0x82>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 80015e8:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	2b68      	cmp	r3, #104	; 0x68
 80015ee:	d126      	bne.n	800163e <seleccion_menu_principal+0x82>
 80015f0:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	2b74      	cmp	r3, #116	; 0x74
 80015f6:	d122      	bne.n	800163e <seleccion_menu_principal+0x82>
		if (opcion == 3) {
 80015f8:	4b81      	ldr	r3, [pc, #516]	; (8001800 <seleccion_menu_principal+0x244>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d103      	bne.n	8001608 <seleccion_menu_principal+0x4c>
			opcion = 1;
 8001600:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <seleccion_menu_principal+0x244>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00c      	b.n	8001622 <seleccion_menu_principal+0x66>
		} else if (opcion == 6) {
 8001608:	4b7d      	ldr	r3, [pc, #500]	; (8001800 <seleccion_menu_principal+0x244>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d103      	bne.n	8001618 <seleccion_menu_principal+0x5c>
			opcion = 4;
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <seleccion_menu_principal+0x244>)
 8001612:	2204      	movs	r2, #4
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e004      	b.n	8001622 <seleccion_menu_principal+0x66>
		} else {
			opcion++;
 8001618:	4b79      	ldr	r3, [pc, #484]	; (8001800 <seleccion_menu_principal+0x244>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	4a78      	ldr	r2, [pc, #480]	; (8001800 <seleccion_menu_principal+0x244>)
 8001620:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <seleccion_menu_principal+0x244>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff faa4 	bl	8000b74 <resaltar_boton>
		setFont(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff f90f 	bl	8000850 <setFont>
		rellenar_botones(t_menu);
 8001632:	4874      	ldr	r0, [pc, #464]	; (8001804 <seleccion_menu_principal+0x248>)
 8001634:	f7ff fbc6 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 8001638:	f7ff ffa8 	bl	800158c <reset_buffer>
 800163c:	e0d6      	b.n	80017ec <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 800163e:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b6c      	cmp	r3, #108	; 0x6c
 8001644:	d136      	bne.n	80016b4 <seleccion_menu_principal+0xf8>
 8001646:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	2b65      	cmp	r3, #101	; 0x65
 800164c:	d132      	bne.n	80016b4 <seleccion_menu_principal+0xf8>
 800164e:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001650:	789b      	ldrb	r3, [r3, #2]
 8001652:	2b66      	cmp	r3, #102	; 0x66
 8001654:	d12e      	bne.n	80016b4 <seleccion_menu_principal+0xf8>
			&& rx_buffer[3] == 't') {
 8001656:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	2b74      	cmp	r3, #116	; 0x74
 800165c:	d12a      	bne.n	80016b4 <seleccion_menu_principal+0xf8>
		if (opcion == 1) {
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <seleccion_menu_principal+0x244>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d103      	bne.n	800166e <seleccion_menu_principal+0xb2>
			opcion = 3;
 8001666:	4b66      	ldr	r3, [pc, #408]	; (8001800 <seleccion_menu_principal+0x244>)
 8001668:	2203      	movs	r2, #3
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e014      	b.n	8001698 <seleccion_menu_principal+0xdc>
		} else if (opcion == 4) {
 800166e:	4b64      	ldr	r3, [pc, #400]	; (8001800 <seleccion_menu_principal+0x244>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b04      	cmp	r3, #4
 8001674:	d103      	bne.n	800167e <seleccion_menu_principal+0xc2>
			opcion = 6;
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <seleccion_menu_principal+0x244>)
 8001678:	2206      	movs	r2, #6
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e00c      	b.n	8001698 <seleccion_menu_principal+0xdc>
		} else if (opcion == 0) {
 800167e:	4b60      	ldr	r3, [pc, #384]	; (8001800 <seleccion_menu_principal+0x244>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <seleccion_menu_principal+0xd2>
			opcion = 1;
 8001686:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <seleccion_menu_principal+0x244>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e004      	b.n	8001698 <seleccion_menu_principal+0xdc>
		} else {
			opcion--;
 800168e:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <seleccion_menu_principal+0x244>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <seleccion_menu_principal+0x244>)
 8001696:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001698:	4b59      	ldr	r3, [pc, #356]	; (8001800 <seleccion_menu_principal+0x244>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa69 	bl	8000b74 <resaltar_boton>
		setFont(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff f8d4 	bl	8000850 <setFont>
		rellenar_botones(t_menu);
 80016a8:	4856      	ldr	r0, [pc, #344]	; (8001804 <seleccion_menu_principal+0x248>)
 80016aa:	f7ff fb8b 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 80016ae:	f7ff ff6d 	bl	800158c <reset_buffer>
 80016b2:	e09b      	b.n	80017ec <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'u' && rx_buffer[1] == 'p') {
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b75      	cmp	r3, #117	; 0x75
 80016ba:	d136      	bne.n	800172a <seleccion_menu_principal+0x16e>
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80016be:	785b      	ldrb	r3, [r3, #1]
 80016c0:	2b70      	cmp	r3, #112	; 0x70
 80016c2:	d132      	bne.n	800172a <seleccion_menu_principal+0x16e>
		if (opcion == 1) {
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <seleccion_menu_principal+0x244>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d103      	bne.n	80016d4 <seleccion_menu_principal+0x118>
			opcion = 4;
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <seleccion_menu_principal+0x244>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e01c      	b.n	800170e <seleccion_menu_principal+0x152>
		} else if (opcion == 2) {
 80016d4:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <seleccion_menu_principal+0x244>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d103      	bne.n	80016e4 <seleccion_menu_principal+0x128>
			opcion = 5;
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <seleccion_menu_principal+0x244>)
 80016de:	2205      	movs	r2, #5
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e014      	b.n	800170e <seleccion_menu_principal+0x152>
		} else if (opcion == 3) {
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <seleccion_menu_principal+0x244>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d103      	bne.n	80016f4 <seleccion_menu_principal+0x138>
			opcion = 6;
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <seleccion_menu_principal+0x244>)
 80016ee:	2206      	movs	r2, #6
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e00c      	b.n	800170e <seleccion_menu_principal+0x152>
		} else if (opcion == 0) {
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <seleccion_menu_principal+0x244>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <seleccion_menu_principal+0x148>
			opcion = 1;
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <seleccion_menu_principal+0x244>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e004      	b.n	800170e <seleccion_menu_principal+0x152>
		} else {
			opcion -= 3;
 8001704:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <seleccion_menu_principal+0x244>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b03      	subs	r3, #3
 800170a:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <seleccion_menu_principal+0x244>)
 800170c:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <seleccion_menu_principal+0x244>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa2e 	bl	8000b74 <resaltar_boton>
		setFont(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff f899 	bl	8000850 <setFont>
		rellenar_botones(t_menu);
 800171e:	4839      	ldr	r0, [pc, #228]	; (8001804 <seleccion_menu_principal+0x248>)
 8001720:	f7ff fb50 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 8001724:	f7ff ff32 	bl	800158c <reset_buffer>
 8001728:	e060      	b.n	80017ec <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'd' && rx_buffer[1] == 'o' && rx_buffer[2] == 'w'
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <seleccion_menu_principal+0x23c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d13e      	bne.n	80017b0 <seleccion_menu_principal+0x1f4>
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	2b6f      	cmp	r3, #111	; 0x6f
 8001738:	d13a      	bne.n	80017b0 <seleccion_menu_principal+0x1f4>
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <seleccion_menu_principal+0x23c>)
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	2b77      	cmp	r3, #119	; 0x77
 8001740:	d136      	bne.n	80017b0 <seleccion_menu_principal+0x1f4>
			&& rx_buffer[3] == 'n') {
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <seleccion_menu_principal+0x23c>)
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b6e      	cmp	r3, #110	; 0x6e
 8001748:	d132      	bne.n	80017b0 <seleccion_menu_principal+0x1f4>
		if (opcion == 4) {
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <seleccion_menu_principal+0x244>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d103      	bne.n	800175a <seleccion_menu_principal+0x19e>
			opcion = 1;
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <seleccion_menu_principal+0x244>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e01c      	b.n	8001794 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 5) {
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <seleccion_menu_principal+0x244>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d103      	bne.n	800176a <seleccion_menu_principal+0x1ae>
			opcion = 2;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <seleccion_menu_principal+0x244>)
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e014      	b.n	8001794 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 0) {
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <seleccion_menu_principal+0x244>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <seleccion_menu_principal+0x1be>
			opcion = 1;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <seleccion_menu_principal+0x244>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e00c      	b.n	8001794 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 6) {
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <seleccion_menu_principal+0x244>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d103      	bne.n	800178a <seleccion_menu_principal+0x1ce>
			opcion = 3;
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <seleccion_menu_principal+0x244>)
 8001784:	2203      	movs	r2, #3
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e004      	b.n	8001794 <seleccion_menu_principal+0x1d8>
		} else {
			opcion += 3;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <seleccion_menu_principal+0x244>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3303      	adds	r3, #3
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <seleccion_menu_principal+0x244>)
 8001792:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <seleccion_menu_principal+0x244>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f9eb 	bl	8000b74 <resaltar_boton>
		setFont(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff f856 	bl	8000850 <setFont>
		rellenar_botones(t_menu);
 80017a4:	4817      	ldr	r0, [pc, #92]	; (8001804 <seleccion_menu_principal+0x248>)
 80017a6:	f7ff fb0d 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 80017aa:	f7ff feef 	bl	800158c <reset_buffer>
 80017ae:	e01d      	b.n	80017ec <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b73      	cmp	r3, #115	; 0x73
 80017b6:	d119      	bne.n	80017ec <seleccion_menu_principal+0x230>
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	2b74      	cmp	r3, #116	; 0x74
 80017be:	d115      	bne.n	80017ec <seleccion_menu_principal+0x230>
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b61      	cmp	r3, #97	; 0x61
 80017c6:	d111      	bne.n	80017ec <seleccion_menu_principal+0x230>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	2b72      	cmp	r3, #114	; 0x72
 80017ce:	d10d      	bne.n	80017ec <seleccion_menu_principal+0x230>
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <seleccion_menu_principal+0x23c>)
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	2b74      	cmp	r3, #116	; 0x74
 80017d6:	d109      	bne.n	80017ec <seleccion_menu_principal+0x230>
		reset_buffer();
 80017d8:	f7ff fed8 	bl	800158c <reset_buffer>
		int op = opcion;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <seleccion_menu_principal+0x244>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	607b      	str	r3, [r7, #4]
		opcion = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <seleccion_menu_principal+0x244>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
		return op;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	e000      	b.n	80017ee <seleccion_menu_principal+0x232>
	}
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000118 	.word	0x20000118
 80017fc:	20000184 	.word	0x20000184
 8001800:	200000b0 	.word	0x200000b0
 8001804:	20000050 	.word	0x20000050

08001808 <seleccion_menu_luces>:

int opcion_luces = 0;
int seleccion_menu_luces() {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 800180e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001812:	2232      	movs	r2, #50	; 0x32
 8001814:	4954      	ldr	r1, [pc, #336]	; (8001968 <seleccion_menu_luces+0x160>)
 8001816:	4855      	ldr	r0, [pc, #340]	; (800196c <seleccion_menu_luces+0x164>)
 8001818:	f002 f9a3 	bl	8003b62 <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <seleccion_menu_luces+0x160>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b72      	cmp	r3, #114	; 0x72
 8001822:	d12a      	bne.n	800187a <seleccion_menu_luces+0x72>
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <seleccion_menu_luces+0x160>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	2b69      	cmp	r3, #105	; 0x69
 800182a:	d126      	bne.n	800187a <seleccion_menu_luces+0x72>
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <seleccion_menu_luces+0x160>)
 800182e:	789b      	ldrb	r3, [r3, #2]
 8001830:	2b67      	cmp	r3, #103	; 0x67
 8001832:	d122      	bne.n	800187a <seleccion_menu_luces+0x72>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 8001834:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <seleccion_menu_luces+0x160>)
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	2b68      	cmp	r3, #104	; 0x68
 800183a:	d11e      	bne.n	800187a <seleccion_menu_luces+0x72>
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <seleccion_menu_luces+0x160>)
 800183e:	791b      	ldrb	r3, [r3, #4]
 8001840:	2b74      	cmp	r3, #116	; 0x74
 8001842:	d11a      	bne.n	800187a <seleccion_menu_luces+0x72>
		if (opcion_luces == 2) {
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <seleccion_menu_luces+0x168>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d103      	bne.n	8001854 <seleccion_menu_luces+0x4c>
			opcion_luces = 1;
 800184c:	4b48      	ldr	r3, [pc, #288]	; (8001970 <seleccion_menu_luces+0x168>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e004      	b.n	800185e <seleccion_menu_luces+0x56>
		} else {
			opcion_luces++;
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <seleccion_menu_luces+0x168>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a45      	ldr	r2, [pc, #276]	; (8001970 <seleccion_menu_luces+0x168>)
 800185c:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <seleccion_menu_luces+0x168>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f986 	bl	8000b74 <resaltar_boton>
		setFont(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f7fe fff1 	bl	8000850 <setFont>
		rellenar_botones(t_menu_luces);
 800186e:	4841      	ldr	r0, [pc, #260]	; (8001974 <seleccion_menu_luces+0x16c>)
 8001870:	f7ff faa8 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 8001874:	f7ff fe8a 	bl	800158c <reset_buffer>
 8001878:	e070      	b.n	800195c <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <seleccion_menu_luces+0x160>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b6c      	cmp	r3, #108	; 0x6c
 8001880:	d12e      	bne.n	80018e0 <seleccion_menu_luces+0xd8>
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <seleccion_menu_luces+0x160>)
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	2b65      	cmp	r3, #101	; 0x65
 8001888:	d12a      	bne.n	80018e0 <seleccion_menu_luces+0xd8>
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <seleccion_menu_luces+0x160>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	2b66      	cmp	r3, #102	; 0x66
 8001890:	d126      	bne.n	80018e0 <seleccion_menu_luces+0xd8>
			&& rx_buffer[3] == 't') {
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <seleccion_menu_luces+0x160>)
 8001894:	78db      	ldrb	r3, [r3, #3]
 8001896:	2b74      	cmp	r3, #116	; 0x74
 8001898:	d122      	bne.n	80018e0 <seleccion_menu_luces+0xd8>
		if (opcion_luces == 1) {
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <seleccion_menu_luces+0x168>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d103      	bne.n	80018aa <seleccion_menu_luces+0xa2>
			opcion_luces = 2;
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <seleccion_menu_luces+0x168>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e00c      	b.n	80018c4 <seleccion_menu_luces+0xbc>
		} else if (opcion_luces == 0) {
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <seleccion_menu_luces+0x168>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <seleccion_menu_luces+0xb2>
			opcion_luces = 1;
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <seleccion_menu_luces+0x168>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e004      	b.n	80018c4 <seleccion_menu_luces+0xbc>
		} else {
			opcion_luces--;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <seleccion_menu_luces+0x168>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <seleccion_menu_luces+0x168>)
 80018c2:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <seleccion_menu_luces+0x168>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff f953 	bl	8000b74 <resaltar_boton>
		setFont(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7fe ffbe 	bl	8000850 <setFont>
		rellenar_botones(t_menu_luces);
 80018d4:	4827      	ldr	r0, [pc, #156]	; (8001974 <seleccion_menu_luces+0x16c>)
 80018d6:	f7ff fa75 	bl	8000dc4 <rellenar_botones>
		reset_buffer();
 80018da:	f7ff fe57 	bl	800158c <reset_buffer>
 80018de:	e03d      	b.n	800195c <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <seleccion_menu_luces+0x160>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b73      	cmp	r3, #115	; 0x73
 80018e6:	d11a      	bne.n	800191e <seleccion_menu_luces+0x116>
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <seleccion_menu_luces+0x160>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	2b65      	cmp	r3, #101	; 0x65
 80018ee:	d116      	bne.n	800191e <seleccion_menu_luces+0x116>
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <seleccion_menu_luces+0x160>)
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	2b6c      	cmp	r3, #108	; 0x6c
 80018f6:	d112      	bne.n	800191e <seleccion_menu_luces+0x116>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <seleccion_menu_luces+0x160>)
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	2b65      	cmp	r3, #101	; 0x65
 80018fe:	d10e      	bne.n	800191e <seleccion_menu_luces+0x116>
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <seleccion_menu_luces+0x160>)
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	2b63      	cmp	r3, #99	; 0x63
 8001906:	d10a      	bne.n	800191e <seleccion_menu_luces+0x116>
			&& rx_buffer[5] == 't') {
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <seleccion_menu_luces+0x160>)
 800190a:	795b      	ldrb	r3, [r3, #5]
 800190c:	2b74      	cmp	r3, #116	; 0x74
 800190e:	d106      	bne.n	800191e <seleccion_menu_luces+0x116>
		reset_buffer();
 8001910:	f7ff fe3c 	bl	800158c <reset_buffer>
		opcion_luces = 0;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <seleccion_menu_luces+0x168>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
		return 0;
 800191a:	2300      	movs	r3, #0
 800191c:	e01f      	b.n	800195e <seleccion_menu_luces+0x156>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <seleccion_menu_luces+0x160>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b73      	cmp	r3, #115	; 0x73
 8001924:	d11a      	bne.n	800195c <seleccion_menu_luces+0x154>
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <seleccion_menu_luces+0x160>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	2b74      	cmp	r3, #116	; 0x74
 800192c:	d116      	bne.n	800195c <seleccion_menu_luces+0x154>
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <seleccion_menu_luces+0x160>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	2b61      	cmp	r3, #97	; 0x61
 8001934:	d112      	bne.n	800195c <seleccion_menu_luces+0x154>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <seleccion_menu_luces+0x160>)
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	2b72      	cmp	r3, #114	; 0x72
 800193c:	d10e      	bne.n	800195c <seleccion_menu_luces+0x154>
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <seleccion_menu_luces+0x160>)
 8001940:	791b      	ldrb	r3, [r3, #4]
 8001942:	2b74      	cmp	r3, #116	; 0x74
 8001944:	d10a      	bne.n	800195c <seleccion_menu_luces+0x154>
		reset_buffer();
 8001946:	f7ff fe21 	bl	800158c <reset_buffer>
		int op = opcion_luces;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <seleccion_menu_luces+0x168>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	607b      	str	r3, [r7, #4]
		opcion_luces = 0;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <seleccion_menu_luces+0x168>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		return op + 6;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3306      	adds	r3, #6
 800195a:	e000      	b.n	800195e <seleccion_menu_luces+0x156>
	}
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000118 	.word	0x20000118
 800196c:	20000184 	.word	0x20000184
 8001970:	200000b4 	.word	0x200000b4
 8001974:	20000068 	.word	0x20000068

08001978 <menu_luces_manual>:
int menu_luces_manual() {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 800197c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001980:	2232      	movs	r2, #50	; 0x32
 8001982:	495c      	ldr	r1, [pc, #368]	; (8001af4 <menu_luces_manual+0x17c>)
 8001984:	485c      	ldr	r0, [pc, #368]	; (8001af8 <menu_luces_manual+0x180>)
 8001986:	f002 f8ec 	bl	8003b62 <HAL_UART_Receive>
	if (rx_buffer[0] == 's' && rx_buffer[1] == 'q' && rx_buffer[2] == 'u'
 800198a:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <menu_luces_manual+0x17c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b73      	cmp	r3, #115	; 0x73
 8001990:	d148      	bne.n	8001a24 <menu_luces_manual+0xac>
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <menu_luces_manual+0x17c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	2b71      	cmp	r3, #113	; 0x71
 8001998:	d144      	bne.n	8001a24 <menu_luces_manual+0xac>
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <menu_luces_manual+0x17c>)
 800199c:	789b      	ldrb	r3, [r3, #2]
 800199e:	2b75      	cmp	r3, #117	; 0x75
 80019a0:	d140      	bne.n	8001a24 <menu_luces_manual+0xac>
			&& rx_buffer[3] == 'a' && rx_buffer[4] == 'r'
 80019a2:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <menu_luces_manual+0x17c>)
 80019a4:	78db      	ldrb	r3, [r3, #3]
 80019a6:	2b61      	cmp	r3, #97	; 0x61
 80019a8:	d13c      	bne.n	8001a24 <menu_luces_manual+0xac>
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <menu_luces_manual+0x17c>)
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	2b72      	cmp	r3, #114	; 0x72
 80019b0:	d138      	bne.n	8001a24 <menu_luces_manual+0xac>
			&& rx_buffer[5] == 'e') {
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <menu_luces_manual+0x17c>)
 80019b4:	795b      	ldrb	r3, [r3, #5]
 80019b6:	2b65      	cmp	r3, #101	; 0x65
 80019b8:	d134      	bne.n	8001a24 <menu_luces_manual+0xac>
		if (getEstadoLuces() == 0) {
 80019ba:	f7fe fda9 	bl	8000510 <getEstadoLuces>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12c      	bne.n	8001a1e <menu_luces_manual+0xa6>
			setLuces(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7fe fd83 	bl	80004d0 <setLuces>
			setColor(0, 0, 255);
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7fe fdd0 	bl	8000574 <setColor>
			fillCircle(118, 130, 30);
 80019d4:	221e      	movs	r2, #30
 80019d6:	2182      	movs	r1, #130	; 0x82
 80019d8:	2076      	movs	r0, #118	; 0x76
 80019da:	f7fe ff53 	bl	8000884 <fillCircle>
			setColor(0, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7fe fdc6 	bl	8000574 <setColor>
			fillCircle(358, 130, 30);
 80019e8:	221e      	movs	r2, #30
 80019ea:	2182      	movs	r1, #130	; 0x82
 80019ec:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80019f0:	f7fe ff48 	bl	8000884 <fillCircle>
			setColor(0, 255, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	21ff      	movs	r1, #255	; 0xff
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7fe fdbb 	bl	8000574 <setColor>
			fillCircle(118, 130, 25);
 80019fe:	2219      	movs	r2, #25
 8001a00:	2182      	movs	r1, #130	; 0x82
 8001a02:	2076      	movs	r0, #118	; 0x76
 8001a04:	f7fe ff3e 	bl	8000884 <fillCircle>
			setColor(255, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	20ff      	movs	r0, #255	; 0xff
 8001a0e:	f7fe fdb1 	bl	8000574 <setColor>
			fillCircle(358, 130, 25);
 8001a12:	2219      	movs	r2, #25
 8001a14:	2182      	movs	r1, #130	; 0x82
 8001a16:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a1a:	f7fe ff33 	bl	8000884 <fillCircle>
		}
		reset_buffer();
 8001a1e:	f7ff fdb5 	bl	800158c <reset_buffer>
 8001a22:	e064      	b.n	8001aee <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 'c' && rx_buffer[1] == 'r' && rx_buffer[2] == 'o'
 8001a24:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <menu_luces_manual+0x17c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b63      	cmp	r3, #99	; 0x63
 8001a2a:	d144      	bne.n	8001ab6 <menu_luces_manual+0x13e>
 8001a2c:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <menu_luces_manual+0x17c>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b72      	cmp	r3, #114	; 0x72
 8001a32:	d140      	bne.n	8001ab6 <menu_luces_manual+0x13e>
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <menu_luces_manual+0x17c>)
 8001a36:	789b      	ldrb	r3, [r3, #2]
 8001a38:	2b6f      	cmp	r3, #111	; 0x6f
 8001a3a:	d13c      	bne.n	8001ab6 <menu_luces_manual+0x13e>
			&& rx_buffer[3] == 's' && rx_buffer[4] == 's') {
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <menu_luces_manual+0x17c>)
 8001a3e:	78db      	ldrb	r3, [r3, #3]
 8001a40:	2b73      	cmp	r3, #115	; 0x73
 8001a42:	d138      	bne.n	8001ab6 <menu_luces_manual+0x13e>
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <menu_luces_manual+0x17c>)
 8001a46:	791b      	ldrb	r3, [r3, #4]
 8001a48:	2b73      	cmp	r3, #115	; 0x73
 8001a4a:	d134      	bne.n	8001ab6 <menu_luces_manual+0x13e>
		if (getEstadoLuces() == 1) {
 8001a4c:	f7fe fd60 	bl	8000510 <getEstadoLuces>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d12c      	bne.n	8001ab0 <menu_luces_manual+0x138>
			setLuces(0);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7fe fd3a 	bl	80004d0 <setLuces>
			setColor(0, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7fe fd87 	bl	8000574 <setColor>
			fillCircle(118, 130, 30);
 8001a66:	221e      	movs	r2, #30
 8001a68:	2182      	movs	r1, #130	; 0x82
 8001a6a:	2076      	movs	r0, #118	; 0x76
 8001a6c:	f7fe ff0a 	bl	8000884 <fillCircle>
			setColor(0, 0, 255);
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	2100      	movs	r1, #0
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7fe fd7d 	bl	8000574 <setColor>
			fillCircle(358, 130, 30);
 8001a7a:	221e      	movs	r2, #30
 8001a7c:	2182      	movs	r1, #130	; 0x82
 8001a7e:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a82:	f7fe feff 	bl	8000884 <fillCircle>
			setColor(0, 255, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	21ff      	movs	r1, #255	; 0xff
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7fe fd72 	bl	8000574 <setColor>
			fillCircle(118, 130, 25);
 8001a90:	2219      	movs	r2, #25
 8001a92:	2182      	movs	r1, #130	; 0x82
 8001a94:	2076      	movs	r0, #118	; 0x76
 8001a96:	f7fe fef5 	bl	8000884 <fillCircle>
			setColor(255, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	20ff      	movs	r0, #255	; 0xff
 8001aa0:	f7fe fd68 	bl	8000574 <setColor>
			fillCircle(358, 130, 25);
 8001aa4:	2219      	movs	r2, #25
 8001aa6:	2182      	movs	r1, #130	; 0x82
 8001aa8:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001aac:	f7fe feea 	bl	8000884 <fillCircle>
		}
		reset_buffer();
 8001ab0:	f7ff fd6c 	bl	800158c <reset_buffer>
 8001ab4:	e01b      	b.n	8001aee <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b73      	cmp	r3, #115	; 0x73
 8001abc:	d117      	bne.n	8001aee <menu_luces_manual+0x176>
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	2b65      	cmp	r3, #101	; 0x65
 8001ac4:	d113      	bne.n	8001aee <menu_luces_manual+0x176>
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ac8:	789b      	ldrb	r3, [r3, #2]
 8001aca:	2b6c      	cmp	r3, #108	; 0x6c
 8001acc:	d10f      	bne.n	8001aee <menu_luces_manual+0x176>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ad0:	78db      	ldrb	r3, [r3, #3]
 8001ad2:	2b65      	cmp	r3, #101	; 0x65
 8001ad4:	d10b      	bne.n	8001aee <menu_luces_manual+0x176>
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ad8:	791b      	ldrb	r3, [r3, #4]
 8001ada:	2b63      	cmp	r3, #99	; 0x63
 8001adc:	d107      	bne.n	8001aee <menu_luces_manual+0x176>
			&& rx_buffer[5] == 't') {
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <menu_luces_manual+0x17c>)
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	2b74      	cmp	r3, #116	; 0x74
 8001ae4:	d103      	bne.n	8001aee <menu_luces_manual+0x176>
		reset_buffer();
 8001ae6:	f7ff fd51 	bl	800158c <reset_buffer>
		return 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <menu_luces_manual+0x178>
	}
return 8;
 8001aee:	2308      	movs	r3, #8
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000118 	.word	0x20000118
 8001af8:	20000184 	.word	0x20000184

08001afc <debouncer>:
//Interrupciones botones:
volatile int button_int;

//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d13b      	bne.n	8001b8a <debouncer+0x8e>
		if (button_count == 0) {
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <debouncer+0x98>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10b      	bne.n	8001b32 <debouncer+0x36>
			counter = HAL_GetTick();
 8001b1a:	f000 fc11 	bl	8002340 <HAL_GetTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <debouncer+0x9c>)
 8001b24:	601a      	str	r2, [r3, #0]
			button_count++;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <debouncer+0x98>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <debouncer+0x98>)
 8001b30:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8001b32:	f000 fc05 	bl	8002340 <HAL_GetTick>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <debouncer+0x9c>)
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	2b13      	cmp	r3, #19
 8001b40:	d923      	bls.n	8001b8a <debouncer+0x8e>
			counter = HAL_GetTick();
 8001b42:	f000 fbfd 	bl	8002340 <HAL_GetTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <debouncer+0x9c>)
 8001b4c:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4619      	mov	r1, r3
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f000 feae 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d003      	beq.n	8001b66 <debouncer+0x6a>
				button_count = 1;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <debouncer+0x98>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e005      	b.n	8001b72 <debouncer+0x76>
			} else {
				button_count++;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <debouncer+0x98>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <debouncer+0x98>)
 8001b70:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <debouncer+0x98>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d107      	bne.n	8001b8a <debouncer+0x8e>
				button_count = 0;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <debouncer+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
				return 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <debouncer+0x90>
			}
		}
	}
	return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200000b8 	.word	0x200000b8
 8001b98:	200000bc 	.word	0x200000bc

08001b9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
				button[i] = 0;
		}
		button[n] = 1;
	}
*/
	if (GPIO_Pin == GPIO_PIN_3) {
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d109      	bne.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x24>
		if (debouncer(&button_int, GPIOA, GPIO_PIN_3)){
 8001bac:	2208      	movs	r2, #8
 8001bae:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x30>)
 8001bb2:	f7ff ffa3 	bl	8001afc <debouncer>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x24>
					cambiarEstadoLuces();
 8001bbc:	f7fe fcb4 	bl	8000528 <cambiarEstadoLuces>
				}
	} else if (GPIO_Pin == GPIO_PIN_1) {
	}

}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	20000114 	.word	0x20000114

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd6:	f000 fb4d 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bda:	f000 f86b 	bl	8001cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bde:	f000 f92b 	bl	8001e38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001be2:	f000 f8d1 	bl	8001d88 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001be6:	f000 f8fd 	bl	8001de4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	int menu_actual = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//MENU PRINCIPAL
		if (menu_actual == 0) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <main+0x4c>
			if (retorno == 0) {
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <main+0x38>
				pantalla_principal();
 8001bfe:	f7ff fa33 	bl	8001068 <pantalla_principal>
				retorno++;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_principal();
 8001c08:	f7ff fcd8 	bl	80015bc <seleccion_menu_principal>
 8001c0c:	6078      	str	r0, [r7, #4]
			if (menu_actual != 0) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <main+0x22>
				retorno--;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	e7ea      	b.n	8001bf2 <main+0x22>
			}
//MENU SELECCION MODO LUCES
		} else if (menu_actual == 1) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d111      	bne.n	8001c46 <main+0x76>
			if (retorno == 0) {
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <main+0x62>
				pantalla_luces();
 8001c28:	f7ff fae8 	bl	80011fc <pantalla_luces>
				retorno++;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_luces();
 8001c32:	f7ff fde9 	bl	8001808 <seleccion_menu_luces>
 8001c36:	6078      	str	r0, [r7, #4]
			if (menu_actual != 1) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d0d9      	beq.n	8001bf2 <main+0x22>
				retorno--;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	e7d5      	b.n	8001bf2 <main+0x22>
			}
//MENU SELECCION MODO PERSIANAS
		} else if (menu_actual == 2) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d102      	bne.n	8001c52 <main+0x82>
			clrScr();
 8001c4c:	f7fe fc7e 	bl	800054c <clrScr>
 8001c50:	e7cf      	b.n	8001bf2 <main+0x22>
		}
//MENU SELECCION MODO RIEGO
		else if (menu_actual == 3) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d102      	bne.n	8001c5e <main+0x8e>
			clrScr();
 8001c58:	f7fe fc78 	bl	800054c <clrScr>
 8001c5c:	e7c9      	b.n	8001bf2 <main+0x22>
		}
//MENU SELECCION MODO CLIMA
		else if (menu_actual == 4) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d102      	bne.n	8001c6a <main+0x9a>
			clrScr();
 8001c64:	f7fe fc72 	bl	800054c <clrScr>
 8001c68:	e7c3      	b.n	8001bf2 <main+0x22>
		}
//MENU SELECCION AUDIO
		else if (menu_actual == 5) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d102      	bne.n	8001c76 <main+0xa6>
			clrScr();
 8001c70:	f7fe fc6c 	bl	800054c <clrScr>
 8001c74:	e7bd      	b.n	8001bf2 <main+0x22>
		}
//MENU SEGURIDAD
		else if (menu_actual == 6) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d102      	bne.n	8001c82 <main+0xb2>
			clrScr();
 8001c7c:	f7fe fc66 	bl	800054c <clrScr>
 8001c80:	e7b7      	b.n	8001bf2 <main+0x22>
		}
//MENU LUCES AUTOMATICO (7)
		else if (menu_actual == 7) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d0b4      	beq.n	8001bf2 <main+0x22>

		}
//MENU LUCES MANUAL (8)
		else if (menu_actual == 8) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d1b1      	bne.n	8001bf2 <main+0x22>
			if (retorno == 0) {
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <main+0xce>
				pantalla_luces_manual();
 8001c94:	f7ff fb80 	bl	8001398 <pantalla_luces_manual>
				retorno++;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	603b      	str	r3, [r7, #0]
			}
			menu_actual = menu_luces_manual();
 8001c9e:	f7ff fe6b 	bl	8001978 <menu_luces_manual>
 8001ca2:	6078      	str	r0, [r7, #4]
			if (menu_actual != 8) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d0a3      	beq.n	8001bf2 <main+0x22>
				retorno--;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	603b      	str	r3, [r7, #0]
		if (menu_actual == 0) {
 8001cb0:	e79f      	b.n	8001bf2 <main+0x22>
	...

08001cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b094      	sub	sp, #80	; 0x50
 8001cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fa4a 	bl	800415c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <SystemClock_Config+0xcc>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d24:	2308      	movs	r3, #8
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d28:	2332      	movs	r3, #50	; 0x32
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d30:	2307      	movs	r3, #7
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fa51 	bl	80031e0 <HAL_RCC_OscConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d44:	f000 f936 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	230f      	movs	r3, #15
 8001d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fcb2 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d72:	f000 f91f 	bl	8001fb4 <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <MX_I2C1_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_I2C1_Init+0x58>)
 8001d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001daa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc6:	f000 fdbf 	bl	8002948 <HAL_I2C_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dd0:	f000 f8f0 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200000c0 	.word	0x200000c0
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00061a80 	.word	0x00061a80

08001de4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <MX_USART6_UART_Init+0x50>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001df4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART6_UART_Init+0x4c>)
 8001e1c:	f001 fe54 	bl	8003ac8 <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e26:	f000 f8c5 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000184 	.word	0x20000184
 8001e34:	40011400 	.word	0x40011400

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <MX_GPIO_Init+0x16c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001ec4:	4838      	ldr	r0, [pc, #224]	; (8001fa8 <MX_GPIO_Init+0x170>)
 8001ec6:	f000 fd0d 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8001ed0:	4836      	ldr	r0, [pc, #216]	; (8001fac <MX_GPIO_Init+0x174>)
 8001ed2:	f000 fd07 	bl	80028e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA3 PA7
                           PA9 PA10 PA11 PA12
                           PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7
 8001ed6:	f643 638b 	movw	r3, #16011	; 0x3e8b
 8001eda:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001edc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	482e      	ldr	r0, [pc, #184]	; (8001fa8 <MX_GPIO_Init+0x170>)
 8001eee:	f000 fb45 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001ef2:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4827      	ldr	r0, [pc, #156]	; (8001fa8 <MX_GPIO_Init+0x170>)
 8001f0c:	f000 fb36 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <MX_GPIO_Init+0x178>)
 8001f28:	f000 fb28 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001f2c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001f30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4819      	ldr	r0, [pc, #100]	; (8001fac <MX_GPIO_Init+0x174>)
 8001f46:	f000 fb19 	bl	800257c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2006      	movs	r0, #6
 8001f50:	f000 fadd 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f54:	2006      	movs	r0, #6
 8001f56:	f000 faf6 	bl	8002546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2007      	movs	r0, #7
 8001f60:	f000 fad5 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f64:	2007      	movs	r0, #7
 8001f66:	f000 faee 	bl	8002546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2009      	movs	r0, #9
 8001f70:	f000 facd 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f74:	2009      	movs	r0, #9
 8001f76:	f000 fae6 	bl	8002546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2017      	movs	r0, #23
 8001f80:	f000 fac5 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f84:	2017      	movs	r0, #23
 8001f86:	f000 fade 	bl	8002546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2028      	movs	r0, #40	; 0x28
 8001f90:	f000 fabd 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f94:	2028      	movs	r0, #40	; 0x28
 8001f96:	f000 fad6 	bl	8002546 <HAL_NVIC_EnableIRQ>

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_MspInit+0x4c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x4c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffe:	2007      	movs	r0, #7
 8002000:	f000 fa7a 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_I2C_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12b      	bne.n	800208a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_I2C_MspInit+0x88>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002052:	2312      	movs	r3, #18
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205e:	2304      	movs	r3, #4
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <HAL_I2C_MspInit+0x8c>)
 800206a:	f000 fa87 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_I2C_MspInit+0x88>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40005400 	.word	0x40005400
 8002098:	40023800 	.word	0x40023800
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_UART_MspInit+0x84>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12b      	bne.n	800211a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a17      	ldr	r2, [pc, #92]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020cc:	f043 0320 	orr.w	r3, r3, #32
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_UART_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23c0      	movs	r3, #192	; 0xc0
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800210a:	2308      	movs	r3, #8
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_UART_MspInit+0x8c>)
 8002116:	f000 fa31 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	; 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40011400 	.word	0x40011400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020800 	.word	0x40020800

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 f8cc 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002188:	2001      	movs	r0, #1
 800218a:	f000 fbc5 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}

08002192 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002196:	2002      	movs	r0, #2
 8002198:	f000 fbbe 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021a4:	2008      	movs	r0, #8
 80021a6:	f000 fbb7 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}

080021ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021b2:	2080      	movs	r0, #128	; 0x80
 80021b4:	f000 fbb0 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021bc:	f000 fbac 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021cc:	f000 fba4 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80021d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021d4:	f000 fba0 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021dc:	f000 fb9c 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e4:	f000 fb98 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021ec:	f000 fb94 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021f4:	f000 fb90 	bl	8002918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffd7 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f001 ff61 	bl	8004114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff fcbd 	bl	8001bd0 <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002264:	08004314 	.word	0x08004314
  ldr r2, =_sbss
 8002268:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800226c:	200001d0 	.word	0x200001d0

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f92b 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fe8a 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f943 	bl	8002562 <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f90b 	bl	800250e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000080 	.word	0x20000080
 8002310:	20000088 	.word	0x20000088
 8002314:	20000084 	.word	0x20000084

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000088 	.word	0x20000088
 800233c:	200001cc 	.word	0x200001cc

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	200001cc 	.word	0x200001cc

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff3e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff31 	bl	80023bc <__NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffa2 	bl	80024b4 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e16b      	b.n	8002870 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 815a 	bne.w	800286a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d130      	bne.n	8002630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80b4 	beq.w	800286a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_GPIO_Init+0x30c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <HAL_GPIO_Init+0x30c>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_GPIO_Init+0x30c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_GPIO_Init+0x310>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_GPIO_Init+0x314>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_Init+0x226>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_GPIO_Init+0x318>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <HAL_GPIO_Init+0x31c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x320>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x324>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0x216>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x328>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_Init+0x212>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x32c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x330>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_Init+0x20a>
 8002782:	2307      	movs	r3, #7
 8002784:	e00e      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 8002786:	2308      	movs	r3, #8
 8002788:	e00c      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 800278a:	2306      	movs	r3, #6
 800278c:	e00a      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 800278e:	2305      	movs	r3, #5
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 8002792:	2304      	movs	r3, #4
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x228>
 80027a2:	2300      	movs	r3, #0
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f002 0203 	and.w	r2, r2, #3
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	4093      	lsls	r3, r2
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b4:	4935      	ldr	r1, [pc, #212]	; (800288c <HAL_GPIO_Init+0x310>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_GPIO_Init+0x334>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e6:	4a32      	ldr	r2, [pc, #200]	; (80028b0 <HAL_GPIO_Init+0x334>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_GPIO_Init+0x334>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002810:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_GPIO_Init+0x334>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_GPIO_Init+0x334>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_GPIO_Init+0x334>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_GPIO_Init+0x334>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_GPIO_Init+0x334>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3301      	adds	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	f67f ae90 	bls.w	8002598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40021800 	.word	0x40021800
 80028ac:	40021c00 	.word	0x40021c00
 80028b0:	40013c00 	.word	0x40013c00

080028b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f930 	bl	8001b9c <HAL_GPIO_EXTI_Callback>
  }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40013c00 	.word	0x40013c00

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e12b      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fb4e 	bl	8002010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ac:	f001 f864 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 80029b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a81      	ldr	r2, [pc, #516]	; (8002bbc <HAL_I2C_Init+0x274>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d807      	bhi.n	80029cc <HAL_I2C_Init+0x84>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a80      	ldr	r2, [pc, #512]	; (8002bc0 <HAL_I2C_Init+0x278>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf94      	ite	ls
 80029c4:	2301      	movls	r3, #1
 80029c6:	2300      	movhi	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e006      	b.n	80029da <HAL_I2C_Init+0x92>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a7d      	ldr	r2, [pc, #500]	; (8002bc4 <HAL_I2C_Init+0x27c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0e7      	b.n	8002bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a78      	ldr	r2, [pc, #480]	; (8002bc8 <HAL_I2C_Init+0x280>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_I2C_Init+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d802      	bhi.n	8002a1c <HAL_I2C_Init+0xd4>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	e009      	b.n	8002a30 <HAL_I2C_Init+0xe8>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_I2C_Init+0x284>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	495c      	ldr	r1, [pc, #368]	; (8002bbc <HAL_I2C_Init+0x274>)
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d819      	bhi.n	8002a84 <HAL_I2C_Init+0x13c>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e59      	subs	r1, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a64:	400b      	ands	r3, r1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_I2C_Init+0x138>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e59      	subs	r1, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	e051      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e04f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d111      	bne.n	8002ab0 <HAL_I2C_Init+0x168>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e012      	b.n	8002ad6 <HAL_I2C_Init+0x18e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	0099      	lsls	r1, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Init+0x196>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e022      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <HAL_I2C_Init+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e58      	subs	r0, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Init+0x1dc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6809      	ldr	r1, [r1, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6911      	ldr	r1, [r2, #16]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	000186a0 	.word	0x000186a0
 8002bc0:	001e847f 	.word	0x001e847f
 8002bc4:	003d08ff 	.word	0x003d08ff
 8002bc8:	431bde83 	.word	0x431bde83
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
 8002be0:	4613      	mov	r3, r2
 8002be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff fbac 	bl	8002340 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f040 80e0 	bne.w	8002db8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4970      	ldr	r1, [pc, #448]	; (8002dc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f964 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0d3      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2C_Master_Transmit+0x50>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e0cc      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d007      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f89c 	bl	8002dcc <I2C_MasterRequestWrite>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e08d      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cb4:	e066      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f9de 	bl	800307c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06b      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d11b      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x188>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	6a39      	ldr	r1, [r7, #32]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9ce 	bl	80030fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d107      	bne.n	8002d80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e01a      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d194      	bne.n	8002cb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	00100002 	.word	0x00100002
 8002dc8:	ffff0000 	.word	0xffff0000

08002dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d006      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d003      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d108      	bne.n	8002e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e00b      	b.n	8002e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	2b12      	cmp	r3, #18
 8002e0e:	d107      	bne.n	8002e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f84f 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d103      	bne.n	8002e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e035      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	e01b      	b.n	8002ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	11db      	asrs	r3, r3, #7
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f063 030f 	orn	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <I2C_MasterRequestWrite+0xfc>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f875 	bl	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e010      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <I2C_MasterRequestWrite+0x100>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f865 	bl	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010008 	.word	0x00010008
 8002ecc:	00010002 	.word	0x00010002

08002ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee0:	e025      	b.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff fa29 	bl	8002340 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e023      	b.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10d      	bne.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	e00c      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d0b6      	beq.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8c:	e051      	b.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d123      	bne.n	8002fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e046      	b.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d021      	beq.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff f9a7 	bl	8002340 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e020      	b.n	8003074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d10c      	bne.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e00b      	b.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d18d      	bne.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003088:	e02d      	b.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f878 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e02d      	b.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d021      	beq.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7ff f94d 	bl	8002340 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d116      	bne.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e007      	b.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d1ca      	bne.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310a:	e02d      	b.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f837 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e02d      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d021      	beq.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7ff f90c 	bl	8002340 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d1ca      	bne.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d11b      	bne.n	80031d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e264      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4ba3      	ldr	r3, [pc, #652]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b9d      	ldr	r3, [pc, #628]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b99      	ldr	r3, [pc, #612]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e23f      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b91      	ldr	r3, [pc, #580]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a90      	ldr	r2, [pc, #576]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a87      	ldr	r2, [pc, #540]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b84      	ldr	r3, [pc, #528]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a83      	ldr	r2, [pc, #524]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7ff f852 	bl	8002340 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7ff f84e 	bl	8002340 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e204      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff f83e 	bl	8002340 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff f83a 	bl	8002340 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f0      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b62      	ldr	r3, [pc, #392]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c4      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4952      	ldr	r1, [pc, #328]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCC_OscConfig+0x2b0>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fff3 	bl	8002340 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe ffef 	bl	8002340 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a5      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4940      	ldr	r1, [pc, #256]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_OscConfig+0x2b0>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe ffd2 	bl	8002340 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe ffce 	bl	8002340 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e184      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d030      	beq.n	800342c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x2b4>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe ffb2 	bl	8002340 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe ffae 	bl	8002340 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e164      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e015      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x2b4>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe ff9b 	bl	8002340 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7fe ff97 	bl	8002340 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e14d      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a0 	beq.w	800357a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a0e      	ldr	r2, [pc, #56]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_OscConfig+0x2ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d121      	bne.n	80034ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_RCC_OscConfig+0x2b8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fe ff5d 	bl	8002340 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e011      	b.n	80034ae <HAL_RCC_OscConfig+0x2ce>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
 8003498:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fe ff50 	bl	8002340 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e106      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_RCC_OscConfig+0x4e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a80      	ldr	r2, [pc, #512]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e01c      	b.n	800350a <HAL_RCC_OscConfig+0x32a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x312>
 80034d8:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a7a      	ldr	r2, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x32a>
 80034f2:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a74      	ldr	r2, [pc, #464]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	4b72      	ldr	r3, [pc, #456]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a71      	ldr	r2, [pc, #452]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe ff15 	bl	8002340 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe ff11 	bl	8002340 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0c5      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCC_OscConfig+0x33a>
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe feff 	bl	8002340 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fefb 	bl	8002340 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0af      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355c:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 809b 	beq.w	80036ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d05c      	beq.n	800364a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d141      	bne.n	800361c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fecf 	bl	8002340 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe fecb 	bl	8002340 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e081      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	019b      	lsls	r3, r3, #6
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fea4 	bl	8002340 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fea0 	bl	8002340 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e056      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x41c>
 800361a:	e04e      	b.n	80036ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fe8d 	bl	8002340 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe fe89 	bl	8002340 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03f      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x44a>
 8003648:	e037      	b.n	80036ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e032      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCC_OscConfig+0x4e8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d028      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d11a      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003686:	4013      	ands	r3, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800368c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40007000 	.word	0x40007000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	42470060 	.word	0x42470060

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fdbe 	bl	8002340 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fdba 	bl	8002340 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fd1e 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	080042ec 	.word	0x080042ec
 8003894:	20000080 	.word	0x20000080
 8003898:	20000084 	.word	0x20000084

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	2300      	movs	r3, #0
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80bd 	bhi.w	8003a40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e0b7      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038d2:	60bb      	str	r3, [r7, #8]
       break;
 80038d4:	e0b7      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038d8:	60bb      	str	r3, [r7, #8]
      break;
 80038da:	e0b4      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04d      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	461a      	mov	r2, r3
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	ea02 0800 	and.w	r8, r2, r0
 800390a:	ea03 0901 	and.w	r9, r3, r1
 800390e:	4640      	mov	r0, r8
 8003910:	4649      	mov	r1, r9
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	014b      	lsls	r3, r1, #5
 800391c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003920:	0142      	lsls	r2, r0, #5
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	ebb0 0008 	subs.w	r0, r0, r8
 800392a:	eb61 0109 	sbc.w	r1, r1, r9
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	018b      	lsls	r3, r1, #6
 8003938:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800393c:	0182      	lsls	r2, r0, #6
 800393e:	1a12      	subs	r2, r2, r0
 8003940:	eb63 0301 	sbc.w	r3, r3, r1
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	00d9      	lsls	r1, r3, #3
 800394e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003952:	00d0      	lsls	r0, r2, #3
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	eb12 0208 	adds.w	r2, r2, r8
 800395c:	eb43 0309 	adc.w	r3, r3, r9
 8003960:	f04f 0000 	mov.w	r0, #0
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	0259      	lsls	r1, r3, #9
 800396a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800396e:	0250      	lsls	r0, r2, #9
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	f7fc fc2a 	bl	80001d8 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e04a      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	ea02 0400 	and.w	r4, r2, r0
 80039a6:	ea03 0501 	and.w	r5, r3, r1
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	014b      	lsls	r3, r1, #5
 80039b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039bc:	0142      	lsls	r2, r0, #5
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	1b00      	subs	r0, r0, r4
 80039c4:	eb61 0105 	sbc.w	r1, r1, r5
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	018b      	lsls	r3, r1, #6
 80039d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039d6:	0182      	lsls	r2, r0, #6
 80039d8:	1a12      	subs	r2, r2, r0
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	00d9      	lsls	r1, r3, #3
 80039e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ec:	00d0      	lsls	r0, r2, #3
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	1912      	adds	r2, r2, r4
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	0299      	lsls	r1, r3, #10
 8003a02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a06:	0290      	lsls	r0, r2, #10
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	f7fc fbde 	bl	80001d8 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a42:	60bb      	str	r3, [r7, #8]
      break;
 8003a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a46:	68bb      	ldr	r3, [r7, #8]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000080 	.word	0x20000080

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	080042fc 	.word	0x080042fc

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	080042fc 	.word	0x080042fc

08003ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e03f      	b.n	8003b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe fad6 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f939 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08a      	sub	sp, #40	; 0x28
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f040 808c 	bne.w	8003c9c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_Receive+0x2e>
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e084      	b.n	8003c9e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Receive+0x40>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e07d      	b.n	8003c9e <HAL_UART_Receive+0x13c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2222      	movs	r2, #34	; 0x22
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fe fbbf 	bl	8002340 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d108      	bne.n	8003bec <HAL_UART_Receive+0x8a>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e003      	b.n	8003bf4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bfc:	e043      	b.n	8003c86 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2120      	movs	r1, #32
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f84c 	bl	8003ca6 <UART_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e042      	b.n	8003c9e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3302      	adds	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e01f      	b.n	8003c78 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d007      	beq.n	8003c52 <HAL_UART_Receive+0xf0>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_UART_Receive+0xfe>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e008      	b.n	8003c72 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1b6      	bne.n	8003bfe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b090      	sub	sp, #64	; 0x40
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	e050      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d04c      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	f7fe fb3b 	bl	8002340 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d241      	bcs.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2a:	623a      	str	r2, [r7, #32]
 8003d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	69f9      	ldr	r1, [r7, #28]
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e5      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d09f      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3740      	adds	r7, #64	; 0x40
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d88:	b09f      	sub	sp, #124	; 0x7c
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dc8:	f021 010c 	bic.w	r1, r1, #12
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	6999      	ldr	r1, [r3, #24]
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	ea40 0301 	orr.w	r3, r0, r1
 8003dec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4bc5      	ldr	r3, [pc, #788]	; (8004108 <UART_SetConfig+0x384>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d004      	beq.n	8003e02 <UART_SetConfig+0x7e>
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4bc3      	ldr	r3, [pc, #780]	; (800410c <UART_SetConfig+0x388>)
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d103      	bne.n	8003e0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e02:	f7ff fe4d 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 8003e06:	6778      	str	r0, [r7, #116]	; 0x74
 8003e08:	e002      	b.n	8003e10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0a:	f7ff fe35 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8003e0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	f040 80b6 	bne.w	8003f88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1e:	461c      	mov	r4, r3
 8003e20:	f04f 0500 	mov.w	r5, #0
 8003e24:	4622      	mov	r2, r4
 8003e26:	462b      	mov	r3, r5
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e34:	1912      	adds	r2, r2, r4
 8003e36:	eb45 0303 	adc.w	r3, r5, r3
 8003e3a:	f04f 0000 	mov.w	r0, #0
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	00d9      	lsls	r1, r3, #3
 8003e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e48:	00d0      	lsls	r0, r2, #3
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	1911      	adds	r1, r2, r4
 8003e50:	6639      	str	r1, [r7, #96]	; 0x60
 8003e52:	416b      	adcs	r3, r5
 8003e54:	667b      	str	r3, [r7, #100]	; 0x64
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e64:	415b      	adcs	r3, r3
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e70:	f7fc f9b2 	bl	80001d8 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4ba5      	ldr	r3, [pc, #660]	; (8004110 <UART_SetConfig+0x38c>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011e      	lsls	r6, r3, #4
 8003e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e84:	461c      	mov	r4, r3
 8003e86:	f04f 0500 	mov.w	r5, #0
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	6339      	str	r1, [r7, #48]	; 0x30
 8003e92:	415b      	adcs	r3, r3
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
 8003e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e9a:	1912      	adds	r2, r2, r4
 8003e9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	00d9      	lsls	r1, r3, #3
 8003eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eae:	00d0      	lsls	r0, r2, #3
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	1911      	adds	r1, r2, r4
 8003eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eb8:	416b      	adcs	r3, r5
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ed6:	f7fc f97f 	bl	80001d8 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4b8c      	ldr	r3, [pc, #560]	; (8004110 <UART_SetConfig+0x38c>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a87      	ldr	r2, [pc, #540]	; (8004110 <UART_SetConfig+0x38c>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f00:	441e      	add	r6, r3
 8003f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f04:	4618      	mov	r0, r3
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	1894      	adds	r4, r2, r2
 8003f10:	623c      	str	r4, [r7, #32]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f1a:	1812      	adds	r2, r2, r0
 8003f1c:	eb41 0303 	adc.w	r3, r1, r3
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	f04f 0500 	mov.w	r5, #0
 8003f28:	00dd      	lsls	r5, r3, #3
 8003f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f2e:	00d4      	lsls	r4, r2, #3
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	1814      	adds	r4, r2, r0
 8003f36:	653c      	str	r4, [r7, #80]	; 0x50
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	61b9      	str	r1, [r7, #24]
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f56:	f7fc f93f 	bl	80001d8 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <UART_SetConfig+0x38c>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a67      	ldr	r2, [pc, #412]	; (8004110 <UART_SetConfig+0x38c>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4432      	add	r2, r6
 8003f84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f86:	e0b9      	b.n	80040fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	f04f 0500 	mov.w	r5, #0
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	1891      	adds	r1, r2, r2
 8003f96:	6139      	str	r1, [r7, #16]
 8003f98:	415b      	adcs	r3, r3
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fa0:	1912      	adds	r2, r2, r4
 8003fa2:	eb45 0303 	adc.w	r3, r5, r3
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb4:	00d0      	lsls	r0, r2, #3
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	eb12 0804 	adds.w	r8, r2, r4
 8003fbe:	eb43 0905 	adc.w	r9, r3, r5
 8003fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	008b      	lsls	r3, r1, #2
 8003fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fda:	0082      	lsls	r2, r0, #2
 8003fdc:	4640      	mov	r0, r8
 8003fde:	4649      	mov	r1, r9
 8003fe0:	f7fc f8fa 	bl	80001d8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b49      	ldr	r3, [pc, #292]	; (8004110 <UART_SetConfig+0x38c>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011e      	lsls	r6, r3, #4
 8003ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	1894      	adds	r4, r2, r2
 8004000:	60bc      	str	r4, [r7, #8]
 8004002:	415b      	adcs	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400a:	1812      	adds	r2, r2, r0
 800400c:	eb41 0303 	adc.w	r3, r1, r3
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	f04f 0500 	mov.w	r5, #0
 8004018:	00dd      	lsls	r5, r3, #3
 800401a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800401e:	00d4      	lsls	r4, r2, #3
 8004020:	4622      	mov	r2, r4
 8004022:	462b      	mov	r3, r5
 8004024:	1814      	adds	r4, r2, r0
 8004026:	64bc      	str	r4, [r7, #72]	; 0x48
 8004028:	414b      	adcs	r3, r1
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	008b      	lsls	r3, r1, #2
 8004040:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004044:	0082      	lsls	r2, r0, #2
 8004046:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800404a:	f7fc f8c5 	bl	80001d8 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <UART_SetConfig+0x38c>)
 8004054:	fba3 1302 	umull	r1, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2164      	movs	r1, #100	; 0x64
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <UART_SetConfig+0x38c>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004072:	441e      	add	r6, r3
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	4618      	mov	r0, r3
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	1894      	adds	r4, r2, r2
 8004082:	603c      	str	r4, [r7, #0]
 8004084:	415b      	adcs	r3, r3
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408c:	1812      	adds	r2, r2, r0
 800408e:	eb41 0303 	adc.w	r3, r1, r3
 8004092:	f04f 0400 	mov.w	r4, #0
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	00dd      	lsls	r5, r3, #3
 800409c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040a0:	00d4      	lsls	r4, r2, #3
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb12 0a00 	adds.w	sl, r2, r0
 80040aa:	eb43 0b01 	adc.w	fp, r3, r1
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	008b      	lsls	r3, r1, #2
 80040c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040c6:	0082      	lsls	r2, r0, #2
 80040c8:	4650      	mov	r0, sl
 80040ca:	4659      	mov	r1, fp
 80040cc:	f7fc f884 	bl	80001d8 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <UART_SetConfig+0x38c>)
 80040d6:	fba3 1302 	umull	r1, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2164      	movs	r1, #100	; 0x64
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	3332      	adds	r3, #50	; 0x32
 80040e8:	4a09      	ldr	r2, [pc, #36]	; (8004110 <UART_SetConfig+0x38c>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4432      	add	r2, r6
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	377c      	adds	r7, #124	; 0x7c
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	bf00      	nop
 8004108:	40011000 	.word	0x40011000
 800410c:	40011400 	.word	0x40011400
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <__libc_init_array>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	4d0d      	ldr	r5, [pc, #52]	; (800414c <__libc_init_array+0x38>)
 8004118:	4c0d      	ldr	r4, [pc, #52]	; (8004150 <__libc_init_array+0x3c>)
 800411a:	1b64      	subs	r4, r4, r5
 800411c:	10a4      	asrs	r4, r4, #2
 800411e:	2600      	movs	r6, #0
 8004120:	42a6      	cmp	r6, r4
 8004122:	d109      	bne.n	8004138 <__libc_init_array+0x24>
 8004124:	4d0b      	ldr	r5, [pc, #44]	; (8004154 <__libc_init_array+0x40>)
 8004126:	4c0c      	ldr	r4, [pc, #48]	; (8004158 <__libc_init_array+0x44>)
 8004128:	f000 f820 	bl	800416c <_init>
 800412c:	1b64      	subs	r4, r4, r5
 800412e:	10a4      	asrs	r4, r4, #2
 8004130:	2600      	movs	r6, #0
 8004132:	42a6      	cmp	r6, r4
 8004134:	d105      	bne.n	8004142 <__libc_init_array+0x2e>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	f855 3b04 	ldr.w	r3, [r5], #4
 800413c:	4798      	blx	r3
 800413e:	3601      	adds	r6, #1
 8004140:	e7ee      	b.n	8004120 <__libc_init_array+0xc>
 8004142:	f855 3b04 	ldr.w	r3, [r5], #4
 8004146:	4798      	blx	r3
 8004148:	3601      	adds	r6, #1
 800414a:	e7f2      	b.n	8004132 <__libc_init_array+0x1e>
 800414c:	0800430c 	.word	0x0800430c
 8004150:	0800430c 	.word	0x0800430c
 8004154:	0800430c 	.word	0x0800430c
 8004158:	08004310 	.word	0x08004310

0800415c <memset>:
 800415c:	4402      	add	r2, r0
 800415e:	4603      	mov	r3, r0
 8004160:	4293      	cmp	r3, r2
 8004162:	d100      	bne.n	8004166 <memset+0xa>
 8004164:	4770      	bx	lr
 8004166:	f803 1b01 	strb.w	r1, [r3], #1
 800416a:	e7f9      	b.n	8004160 <memset+0x4>

0800416c <_init>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr

08004178 <_fini>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr
