
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b0  080046b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b8  080046b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080046c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000274  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122a1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea6  00000000  00000000  000322e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00034190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002234a  00000000  00000000  00036318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013112  00000000  00000000  00058662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d93b0  00000000  00000000  0006b774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144b24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000495c  00000000  00000000  00144b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004680 	.word	0x08004680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004680 	.word	0x08004680

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <setLuces>:
ADC_HandleTypeDef hadc1;
int estado_luces=0;//0 off 1 on 2 auto
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;

void setLuces(int n){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(n==0){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d110      	bne.n	80004f0 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d4:	481c      	ldr	r0, [pc, #112]	; (8000548 <setLuces+0x88>)
 80004d6:	f002 fa53 	bl	8002980 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2110      	movs	r1, #16
 80004de:	481b      	ldr	r0, [pc, #108]	; (800054c <setLuces+0x8c>)
 80004e0:	f002 fa4e 	bl	8002980 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	4818      	ldr	r0, [pc, #96]	; (800054c <setLuces+0x8c>)
 80004ea:	f002 fa49 	bl	8002980 <HAL_GPIO_WritePin>
 80004ee:	e023      	b.n	8000538 <setLuces+0x78>
	}else if(n==1){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d110      	bne.n	8000518 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <setLuces+0x88>)
 80004fe:	f002 fa3f 	bl	8002980 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	4811      	ldr	r0, [pc, #68]	; (800054c <setLuces+0x8c>)
 8000508:	f002 fa3a 	bl	8002980 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <setLuces+0x8c>)
 8000512:	f002 fa35 	bl	8002980 <HAL_GPIO_WritePin>
 8000516:	e00f      	b.n	8000538 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051e:	480a      	ldr	r0, [pc, #40]	; (8000548 <setLuces+0x88>)
 8000520:	f002 fa2e 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2110      	movs	r1, #16
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <setLuces+0x8c>)
 800052a:	f002 fa29 	bl	8002980 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <setLuces+0x8c>)
 8000534:	f002 fa24 	bl	8002980 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <setLuces+0x90>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020c00 	.word	0x40020c00
 800054c:	40020000 	.word	0x40020000
 8000550:	20000030 	.word	0x20000030

08000554 <cambiarEstadoLuces>:

int getEstadoLuces(){
	return estado_luces;
}

void cambiarEstadoLuces(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <cambiarEstadoLuces+0x38>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff ffad 	bl	80004c0 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 8000566:	e00e      	b.n	8000586 <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <cambiarEstadoLuces+0x38>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d103      	bne.n	8000578 <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff ffa5 	bl	80004c0 <setLuces>
}
 8000576:	e006      	b.n	8000586 <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <cambiarEstadoLuces+0x38>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d102      	bne.n	8000586 <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ff9d 	bl	80004c0 <setLuces>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000030 	.word	0x20000030

08000590 <medirLDR>:

void medirLDR(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>300){
 8000596:	4b30      	ldr	r3, [pc, #192]	; (8000658 <medirLDR+0xc8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d14f      	bne.n	800063e <medirLDR+0xae>
 800059e:	4b2f      	ldr	r3, [pc, #188]	; (800065c <medirLDR+0xcc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005a6:	d94a      	bls.n	800063e <medirLDR+0xae>
		counter_luces=0;
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <medirLDR+0xcc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
		int media=0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
		tickstart_luces=HAL_GetTick();
 80005b2:	f001 fb13 	bl	8001bdc <HAL_GetTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a29      	ldr	r2, [pc, #164]	; (8000660 <medirLDR+0xd0>)
 80005ba:	6013      	str	r3, [r2, #0]
		int i=0;
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
		for(i=0;i<10;i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	e01f      	b.n	8000606 <medirLDR+0x76>
			HAL_ADC_Start(&hadc1);
 80005c6:	4827      	ldr	r0, [pc, #156]	; (8000664 <medirLDR+0xd4>)
 80005c8:	f001 fb58 	bl	8001c7c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80005cc:	2164      	movs	r1, #100	; 0x64
 80005ce:	4825      	ldr	r0, [pc, #148]	; (8000664 <medirLDR+0xd4>)
 80005d0:	f001 fc59 	bl	8001e86 <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 80005d4:	4823      	ldr	r0, [pc, #140]	; (8000664 <medirLDR+0xd4>)
 80005d6:	f001 fce1 	bl	8001f9c <HAL_ADC_GetValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	b259      	sxtb	r1, r3
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <medirLDR+0xd8>)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	460a      	mov	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <medirLDR+0xd4>)
 80005ea:	f001 fc19 	bl	8001e20 <HAL_ADC_Stop>
			media+=adcval[i];
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <medirLDR+0xd8>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	f993 3000 	ldrsb.w	r3, [r3]
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
		for(i=0;i<10;i++){
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b09      	cmp	r3, #9
 800060a:	dddc      	ble.n	80005c6 <medirLDR+0x36>
		}
		media=media/10;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <medirLDR+0xdc>)
 8000610:	fb82 1203 	smull	r1, r2, r2, r3
 8000614:	1092      	asrs	r2, r2, #2
 8000616:	17db      	asrs	r3, r3, #31
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	607b      	str	r3, [r7, #4]
			if(media>80){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b50      	cmp	r3, #80	; 0x50
 8000620:	dd06      	ble.n	8000630 <medirLDR+0xa0>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <medirLDR+0xe0>)
 800062a:	f002 f9a9 	bl	8002980 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 800062e:	e00f      	b.n	8000650 <medirLDR+0xc0>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <medirLDR+0xe0>)
 8000638:	f002 f9a2 	bl	8002980 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 800063c:	e008      	b.n	8000650 <medirLDR+0xc0>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 800063e:	f001 facd 	bl	8001bdc <HAL_GetTick>
 8000642:	4602      	mov	r2, r0
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <medirLDR+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <medirLDR+0xcc>)
 800064c:	6013      	str	r3, [r2, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000030 	.word	0x20000030
 800065c:	20000034 	.word	0x20000034
 8000660:	20000038 	.word	0x20000038
 8000664:	20000148 	.word	0x20000148
 8000668:	20000278 	.word	0x20000278
 800066c:	66666667 	.word	0x66666667
 8000670:	40020c00 	.word	0x40020c00

08000674 <luces>:

void luces(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	medirLDR();
 8000678:	f7ff ff8a 	bl	8000590 <medirLDR>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <setEstadoPersianas+0x84>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <setEstadoPersianas+0x88>)
 800068e:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <setEstadoPersianas+0x84>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <setEstadoPersianas+0x84>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10c      	bne.n	80006b8 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	4819      	ldr	r0, [pc, #100]	; (800070c <setEstadoPersianas+0x8c>)
 80006a6:	f002 f96b 	bl	8002980 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b0:	4816      	ldr	r0, [pc, #88]	; (800070c <setEstadoPersianas+0x8c>)
 80006b2:	f002 f965 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}else if(estado_persianas==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 80006b6:	e020      	b.n	80006fa <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <setEstadoPersianas+0x84>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d10c      	bne.n	80006da <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4811      	ldr	r0, [pc, #68]	; (800070c <setEstadoPersianas+0x8c>)
 80006c8:	f002 f95a 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <setEstadoPersianas+0x8c>)
 80006d4:	f002 f954 	bl	8002980 <HAL_GPIO_WritePin>
}
 80006d8:	e00f      	b.n	80006fa <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <setEstadoPersianas+0x84>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d10b      	bne.n	80006fa <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <setEstadoPersianas+0x8c>)
 80006ea:	f002 f949 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <setEstadoPersianas+0x8c>)
 80006f6:	f002 f943 	bl	8002980 <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000003c 	.word	0x2000003c
 8000708:	20000040 	.word	0x20000040
 800070c:	40020c00 	.word	0x40020c00

08000710 <getEstadoPersianas>:

int getEstadoPersianas(){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	return estado_persianas;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <getEstadoPersianas+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	2000003c 	.word	0x2000003c

08000728 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <getEstadoAnteriorPersianas+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000040 	.word	0x20000040

08000740 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 8000744:	f7ff ffe4 	bl	8000710 <getEstadoPersianas>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d108      	bne.n	8000760 <cambiarEstadoPersianas+0x20>
 800074e:	f7ff ffeb 	bl	8000728 <getEstadoAnteriorPersianas>
 8000752:	4603      	mov	r3, r0
 8000754:	2b02      	cmp	r3, #2
 8000756:	d103      	bne.n	8000760 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff ff91 	bl	8000680 <setEstadoPersianas>
 800075e:	e02d      	b.n	80007bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8000760:	f7ff ffd6 	bl	8000710 <getEstadoPersianas>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d108      	bne.n	800077c <cambiarEstadoPersianas+0x3c>
 800076a:	f7ff ffdd 	bl	8000728 <getEstadoAnteriorPersianas>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d103      	bne.n	800077c <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff ff83 	bl	8000680 <setEstadoPersianas>
 800077a:	e01f      	b.n	80007bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 800077c:	f7ff ffc8 	bl	8000710 <getEstadoPersianas>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d108      	bne.n	8000798 <cambiarEstadoPersianas+0x58>
 8000786:	f7ff ffcf 	bl	8000728 <getEstadoAnteriorPersianas>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d103      	bne.n	8000798 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff ff75 	bl	8000680 <setEstadoPersianas>
 8000796:	e011      	b.n	80007bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 8000798:	f7ff ffba 	bl	8000710 <getEstadoPersianas>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d103      	bne.n	80007aa <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff6c 	bl	8000680 <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 80007a8:	e008      	b.n	80007bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 80007aa:	f7ff ffb1 	bl	8000710 <getEstadoPersianas>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d103      	bne.n	80007bc <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff ff63 	bl	8000680 <setEstadoPersianas>
}
 80007ba:	e7ff      	b.n	80007bc <cambiarEstadoPersianas+0x7c>
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <setEstadoRiego+0x8c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a20      	ldr	r2, [pc, #128]	; (8000850 <setEstadoRiego+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <setEstadoRiego+0x8c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 80007d6:	f001 fa01 	bl	8001bdc <HAL_GetTick>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <setEstadoRiego+0x94>)
 80007de:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <setEstadoRiego+0x8c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10c      	bne.n	8000802 <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <setEstadoRiego+0x98>)
 80007f0:	f002 f8c6 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <setEstadoRiego+0x98>)
 80007fc:	f002 f8c0 	bl	8002980 <HAL_GPIO_WritePin>
	}
	else if(estado_riego==2){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
}
 8000800:	e020      	b.n	8000844 <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <setEstadoRiego+0x8c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10c      	bne.n	8000824 <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <setEstadoRiego+0x98>)
 8000812:	f002 f8b5 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	480e      	ldr	r0, [pc, #56]	; (8000858 <setEstadoRiego+0x98>)
 800081e:	f002 f8af 	bl	8002980 <HAL_GPIO_WritePin>
}
 8000822:	e00f      	b.n	8000844 <setEstadoRiego+0x84>
	else if(estado_riego==2){
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <setEstadoRiego+0x8c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d10b      	bne.n	8000844 <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <setEstadoRiego+0x98>)
 8000834:	f002 f8a4 	bl	8002980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <setEstadoRiego+0x98>)
 8000840:	f002 f89e 	bl	8002980 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000004 	.word	0x20000004
 8000854:	20000080 	.word	0x20000080
 8000858:	40020c00 	.word	0x40020c00

0800085c <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <cambiarEstadoRiego+0x30>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ffa9 	bl	80007c0 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 800086e:	e00a      	b.n	8000886 <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <cambiarEstadoRiego+0x30>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d103      	bne.n	8000880 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ffa1 	bl	80007c0 <setEstadoRiego>
}
 800087e:	e002      	b.n	8000886 <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff9d 	bl	80007c0 <setEstadoRiego>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000004 	.word	0x20000004

08000890 <temporizador_riego>:

void temporizador_riego(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <temporizador_riego+0x30>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <temporizador_riego+0x14>
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <temporizador_riego+0x30>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d10b      	bne.n	80008bc <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 80008a4:	f001 f99a 	bl	8001bdc <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <temporizador_riego+0x34>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b4:	d902      	bls.n	80008bc <temporizador_riego+0x2c>
			setEstadoRiego(2);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff ff82 	bl	80007c0 <setEstadoRiego>
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000080 	.word	0x20000080

080008c8 <riego>:
void riego(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	temporizador_riego();
 80008cc:	f7ff ffe0 	bl	8000890 <temporizador_riego>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <setEstadoSeguridad>:

uint32_t tickstart_seguridad=0, counter_seguridad=0;



void setEstadoSeguridad(int n){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	estado_seguridad=n;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <setEstadoSeguridad+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
	if(estado_seguridad==0){
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <setEstadoSeguridad+0x5c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d108      	bne.n	80008fc <setEstadoSeguridad+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4811      	ldr	r0, [pc, #68]	; (8000934 <setEstadoSeguridad+0x60>)
 80008f0:	f002 f846 	bl	8002980 <HAL_GPIO_WritePin>
		alarma_seguridad=0;
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <setEstadoSeguridad+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
		alarma_seguridad=0;
		tickstart_seguridad=HAL_GetTick();
	}else if(estado_seguridad==2){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 80008fa:	e015      	b.n	8000928 <setEstadoSeguridad+0x54>
	}else if(estado_seguridad==1){
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <setEstadoSeguridad+0x5c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <setEstadoSeguridad+0x42>
		alarma_seguridad=0;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <setEstadoSeguridad+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
		tickstart_seguridad=HAL_GetTick();
 800090a:	f001 f967 	bl	8001bdc <HAL_GetTick>
 800090e:	4603      	mov	r3, r0
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <setEstadoSeguridad+0x68>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	e008      	b.n	8000928 <setEstadoSeguridad+0x54>
	}else if(estado_seguridad==2){
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <setEstadoSeguridad+0x5c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d104      	bne.n	8000928 <setEstadoSeguridad+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <setEstadoSeguridad+0x60>)
 8000924:	f002 f82c 	bl	8002980 <HAL_GPIO_WritePin>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000044 	.word	0x20000044
 8000934:	40020000 	.word	0x40020000
 8000938:	20000048 	.word	0x20000048
 800093c:	2000004c 	.word	0x2000004c

08000940 <activar_sensor>:

void activar_sensor(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	if(estado_seguridad==1&&counter_seguridad>5000){
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <activar_sensor+0x44>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10c      	bne.n	8000966 <activar_sensor+0x26>
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <activar_sensor+0x48>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f241 3288 	movw	r2, #5000	; 0x1388
 8000954:	4293      	cmp	r3, r2
 8000956:	d906      	bls.n	8000966 <activar_sensor+0x26>
		counter_seguridad=0;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <activar_sensor+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff ffb8 	bl	80008d4 <setEstadoSeguridad>
	}else if(estado_seguridad==1){
		counter_seguridad=HAL_GetTick()-tickstart_seguridad;
	}
}
 8000964:	e00b      	b.n	800097e <activar_sensor+0x3e>
	}else if(estado_seguridad==1){
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <activar_sensor+0x44>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <activar_sensor+0x3e>
		counter_seguridad=HAL_GetTick()-tickstart_seguridad;
 800096e:	f001 f935 	bl	8001bdc <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <activar_sensor+0x4c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	4a03      	ldr	r2, [pc, #12]	; (8000988 <activar_sensor+0x48>)
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000044 	.word	0x20000044
 8000988:	20000050 	.word	0x20000050
 800098c:	2000004c 	.word	0x2000004c

08000990 <getEstadoSeguridad>:

int getEstadoSeguridad(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <getEstadoSeguridad+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000044 	.word	0x20000044

080009a8 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if(getEstadoSeguridad()==0){
 80009ac:	f7ff fff0 	bl	8000990 <getEstadoSeguridad>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff8c 	bl	80008d4 <setEstadoSeguridad>
	}else {
		setEstadoSeguridad(0);
	}
}
 80009bc:	e002      	b.n	80009c4 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ff88 	bl	80008d4 <setEstadoSeguridad>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <intruso_detectado>:

void intruso_detectado(){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	if(estado_seguridad==2){
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <intruso_detectado+0x1c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d102      	bne.n	80009da <intruso_detectado+0x12>
		alarma_seguridad=1;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <intruso_detectado+0x20>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
	}
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000044 	.word	0x20000044
 80009e8:	20000048 	.word	0x20000048

080009ec <sonar_alarma>:

void sonar_alarma(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
if(estado_seguridad==2&&alarma_seguridad==1){
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <sonar_alarma+0x24>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d109      	bne.n	8000a0c <sonar_alarma+0x20>
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <sonar_alarma+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <sonar_alarma+0x20>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <sonar_alarma+0x2c>)
 8000a08:	f001 ffba 	bl	8002980 <HAL_GPIO_WritePin>
}
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000044 	.word	0x20000044
 8000a14:	20000048 	.word	0x20000048
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <seguridad>:

void seguridad(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	activar_sensor();
 8000a20:	f7ff ff8e 	bl	8000940 <activar_sensor>
	sonar_alarma();
 8000a24:	f7ff ffe2 	bl	80009ec <sonar_alarma>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <setEstadoClima>:
uint8_t Presence = 0;

int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0; counter_clima=0;
void setEstadoClima(int n){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <setEstadoClima+0x7c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <setEstadoClima+0x7c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10c      	bne.n	8000a5c <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <setEstadoClima+0x80>)
 8000a4a:	f001 ff99 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <setEstadoClima+0x80>)
 8000a56:	f001 ff93 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
	}else if(estado_clima==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8000a5a:	e020      	b.n	8000a9e <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <setEstadoClima+0x7c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10c      	bne.n	8000a7e <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4810      	ldr	r0, [pc, #64]	; (8000aac <setEstadoClima+0x80>)
 8000a6c:	f001 ff88 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <setEstadoClima+0x80>)
 8000a78:	f001 ff82 	bl	8002980 <HAL_GPIO_WritePin>
}
 8000a7c:	e00f      	b.n	8000a9e <setEstadoClima+0x72>
	}else if(estado_clima==2){
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <setEstadoClima+0x7c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d10b      	bne.n	8000a9e <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <setEstadoClima+0x80>)
 8000a8e:	f001 ff77 	bl	8002980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <setEstadoClima+0x80>)
 8000a9a:	f001 ff71 	bl	8002980 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <cambiarEstadoClima>:

int getEstadoClima(){
	return estado_clima;
}

void cambiarEstadoClima(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	controldelclima=0;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <cambiarEstadoClima+0x3c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <cambiarEstadoClima+0x40>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d103      	bne.n	8000aca <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff ffb2 	bl	8000a2c <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 8000ac8:	e00e      	b.n	8000ae8 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <cambiarEstadoClima+0x40>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d103      	bne.n	8000ada <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f7ff ffaa 	bl	8000a2c <setEstadoClima>
}
 8000ad8:	e006      	b.n	8000ae8 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <cambiarEstadoClima+0x40>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d102      	bne.n	8000ae8 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ffa2 	bl	8000a2c <setEstadoClima>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000060 	.word	0x20000060
 8000af0:	2000007c 	.word	0x2000007c

08000af4 <cambiarControlClima>:

void cambiarControlClima(){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <cambiarControlClima+0x24>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d103      	bne.n	8000b08 <cambiarControlClima+0x14>
		controldelclima=1;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <cambiarControlClima+0x24>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
	}else{
		controldelclima=0;
	}
}
 8000b06:	e002      	b.n	8000b0e <cambiarControlClima+0x1a>
		controldelclima=0;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <cambiarControlClima+0x24>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	20000060 	.word	0x20000060

08000b1c <delay>:


void delay(uint16_t time) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <delay+0x30>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 8000b2e:	bf00      	nop
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <delay+0x30>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3f9      	bcc.n	8000b30 <delay+0x14>
		;
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000198 	.word	0x20000198

08000b50 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000b6c:	887b      	ldrh	r3, [r7, #2]
 8000b6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f001 fd4a 	bl	8002618 <HAL_GPIO_Init>
}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f001 fd2c 	bl	8002618 <HAL_GPIO_Init>
}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <DHT11_Start+0x3c>)
 8000bd0:	f7ff ffbe 	bl	8000b50 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <DHT11_Start+0x3c>)
 8000bda:	f001 fed1 	bl	8002980 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000bde:	f244 6050 	movw	r0, #18000	; 0x4650
 8000be2:	f7ff ff9b 	bl	8000b1c <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000be6:	2201      	movs	r2, #1
 8000be8:	2104      	movs	r1, #4
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <DHT11_Start+0x3c>)
 8000bec:	f001 fec8 	bl	8002980 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f7ff ff93 	bl	8000b1c <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DHT11_Start+0x3c>)
 8000bfa:	f7ff ffc7 	bl	8000b8c <Set_Pin_Input>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020000 	.word	0x40020000

08000c08 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f7ff ff82 	bl	8000b1c <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <DHT11_Check_Response+0x58>)
 8000c1c:	f001 fe98 	bl	8002950 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10e      	bne.n	8000c44 <DHT11_Check_Response+0x3c>
		delay(80);
 8000c26:	2050      	movs	r0, #80	; 0x50
 8000c28:	f7ff ff78 	bl	8000b1c <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <DHT11_Check_Response+0x58>)
 8000c30:	f001 fe8e 	bl	8002950 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <DHT11_Check_Response+0x38>
			Response = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	e001      	b.n	8000c44 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8000c40:	23ff      	movs	r3, #255	; 0xff
 8000c42:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000c44:	bf00      	nop
 8000c46:	2104      	movs	r1, #4
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <DHT11_Check_Response+0x58>)
 8000c4a:	f001 fe81 	bl	8002950 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f8      	bne.n	8000c46 <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020000 	.word	0x40020000

08000c64 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	e037      	b.n	8000ce0 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000c70:	bf00      	nop
 8000c72:	2104      	movs	r1, #4
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <DHT11_Read+0x8c>)
 8000c76:	f001 fe6b 	bl	8002950 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f8      	beq.n	8000c72 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f7ff ff4b 	bl	8000b1c <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000c86:	2104      	movs	r1, #4
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <DHT11_Read+0x8c>)
 8000c8a:	f001 fe61 	bl	8002950 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10e      	bne.n	8000cb2 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	4013      	ands	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	e00b      	b.n	8000cca <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	f1c3 0307 	rsb	r3, r3, #7
 8000cb8:	2201      	movs	r2, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000cca:	bf00      	nop
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <DHT11_Read+0x8c>)
 8000cd0:	f001 fe3e 	bl	8002950 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f8      	bne.n	8000ccc <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	71bb      	strb	r3, [r7, #6]
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d9c4      	bls.n	8000c70 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <lectura_dht11>:

void lectura_dht11() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000cf8:	f7ff ff66 	bl	8000bc8 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000cfc:	f7ff ff84 	bl	8000c08 <DHT11_Check_Response>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <lectura_dht11+0x8c>)
 8000d06:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 8000d08:	f7ff ffac 	bl	8000c64 <DHT11_Read>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <lectura_dht11+0x90>)
 8000d12:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8000d14:	f7ff ffa6 	bl	8000c64 <DHT11_Read>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <lectura_dht11+0x94>)
 8000d1e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8000d20:	f7ff ffa0 	bl	8000c64 <DHT11_Read>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <lectura_dht11+0x98>)
 8000d2a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8000d2c:	f7ff ff9a 	bl	8000c64 <DHT11_Read>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <lectura_dht11+0x9c>)
 8000d36:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000d38:	f7ff ff94 	bl	8000c64 <DHT11_Read>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <lectura_dht11+0xa0>)
 8000d42:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <lectura_dht11+0x98>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <lectura_dht11+0xa4>)
 8000d4c:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <lectura_dht11+0x90>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <lectura_dht11+0xa8>)
 8000d56:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <lectura_dht11+0xa4>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <lectura_dht11+0xac>)
 8000d66:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <lectura_dht11+0xa8>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <lectura_dht11+0xb0>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000005c 	.word	0x2000005c
 8000d84:	200000d8 	.word	0x200000d8
 8000d88:	20000195 	.word	0x20000195
 8000d8c:	20000194 	.word	0x20000194
 8000d90:	20000274 	.word	0x20000274
 8000d94:	2000026c 	.word	0x2000026c
 8000d98:	200000dc 	.word	0x200000dc
 8000d9c:	200000da 	.word	0x200000da
 8000da0:	20000054 	.word	0x20000054
 8000da4:	20000058 	.word	0x20000058

08000da8 <clima>:

void clima(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if(controldelclima==1 && counter_clima>1000){
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <clima+0x68>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d120      	bne.n	8000df6 <clima+0x4e>
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <clima+0x6c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dbc:	dd1b      	ble.n	8000df6 <clima+0x4e>
		counter_clima=0;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <clima+0x6c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 8000dc4:	f000 ff0a 	bl	8001bdc <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <clima+0x70>)
 8000dcc:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 8000dce:	f7ff ff91 	bl	8000cf4 <lectura_dht11>
		if(Temperature>20){
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <clima+0x74>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	dd03      	ble.n	8000dee <clima+0x46>
			setEstadoClima(2);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff fe20 	bl	8000a2c <setEstadoClima>
		if(Temperature>20){
 8000dec:	e00d      	b.n	8000e0a <clima+0x62>
		}else{
			setEstadoClima(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fe1c 	bl	8000a2c <setEstadoClima>
		if(Temperature>20){
 8000df4:	e009      	b.n	8000e0a <clima+0x62>
		}
	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
 8000df6:	f000 fef1 	bl	8001bdc <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <clima+0x70>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <clima+0x6c>)
 8000e06:	601a      	str	r2, [r3, #0]
	}

}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000060 	.word	0x20000060
 8000e14:	20000068 	.word	0x20000068
 8000e18:	20000064 	.word	0x20000064
 8000e1c:	20000054 	.word	0x20000054

08000e20 <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d13b      	bne.n	8000eae <debouncer+0x8e>
		if (button_count == 0) {
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <debouncer+0x98>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10b      	bne.n	8000e56 <debouncer+0x36>
			counter = HAL_GetTick();
 8000e3e:	f000 fecd 	bl	8001bdc <HAL_GetTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <debouncer+0x9c>)
 8000e48:	601a      	str	r2, [r3, #0]
			button_count++;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <debouncer+0x98>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <debouncer+0x98>)
 8000e54:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8000e56:	f000 fec1 	bl	8001bdc <HAL_GetTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <debouncer+0x9c>)
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	2b13      	cmp	r3, #19
 8000e64:	d923      	bls.n	8000eae <debouncer+0x8e>
			counter = HAL_GetTick();
 8000e66:	f000 feb9 	bl	8001bdc <HAL_GetTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <debouncer+0x9c>)
 8000e70:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4619      	mov	r1, r3
 8000e76:	68b8      	ldr	r0, [r7, #8]
 8000e78:	f001 fd6a 	bl	8002950 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <debouncer+0x6a>
				button_count = 1;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <debouncer+0x98>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e005      	b.n	8000e96 <debouncer+0x76>
			} else {
				button_count++;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <debouncer+0x98>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <debouncer+0x98>)
 8000e94:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <debouncer+0x98>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d107      	bne.n	8000eae <debouncer+0x8e>
				button_count = 0;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <debouncer+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
				return 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <debouncer+0x90>
			}
		}
	}
	return 0;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000074 	.word	0x20000074
 8000ebc:	20000078 	.word	0x20000078

08000ec0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	 button[i] = 0;
	 }
	 button[n] = 1;
	 }
	 */
	if (GPIO_Pin == GPIO_PIN_3) {
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d106      	bne.n	8000ede <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ed8:	2203      	movs	r2, #3
 8000eda:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8000edc:	e055      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ee4:	d106      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
		boton_presionado = 11;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000eee:	220b      	movs	r2, #11
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	e04a      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efa:	d106      	bne.n	8000f0a <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f04:	220c      	movs	r2, #12
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	e03f      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f10:	d106      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f1a:	220d      	movs	r2, #13
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	e034      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f26:	d106      	bne.n	8000f36 <HAL_GPIO_EXTI_Callback+0x76>
		button_int = 1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f30:	220a      	movs	r2, #10
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	e029      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b80      	cmp	r3, #128	; 0x80
 8000f3a:	d106      	bne.n	8000f4a <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	e01f      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f50:	d106      	bne.n	8000f60 <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	e014      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f66:	d106      	bne.n	8000f76 <HAL_GPIO_EXTI_Callback+0xb6>
		button_int = 1;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f70:	220e      	movs	r2, #14
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	e009      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7c:	d105      	bne.n	8000f8a <HAL_GPIO_EXTI_Callback+0xca>
		button_int = 1;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f86:	220f      	movs	r2, #15
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000006c 	.word	0x2000006c
 8000f9c:	20000070 	.word	0x20000070

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f000 fdb3 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f8d7 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 fabf 	bl	8001530 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb2:	f000 f98f 	bl	80012d4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000fb6:	f000 fa91 	bl	80014dc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000fba:	f000 f939 	bl	8001230 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000fbe:	f000 fa57 	bl	8001470 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000fc2:	f000 f9b5 	bl	8001330 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8000fc6:	485f      	ldr	r0, [pc, #380]	; (8001144 <main+0x1a4>)
 8000fc8:	f002 fb14 	bl	80035f4 <HAL_TIM_Base_Start>
	int menu_actual = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]

	setEstadoPersianas(0);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fb53 	bl	8000680 <setEstadoPersianas>
	setLuces(0);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fa70 	bl	80004c0 <setLuces>
	setEstadoClima(0);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fd23 	bl	8000a2c <setEstadoClima>
	setEstadoSeguridad(0);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff fc74 	bl	80008d4 <setEstadoSeguridad>
	setEstadoRiego(2);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff fbe7 	bl	80007c0 <setEstadoRiego>
		 }
		 }

		 */

		switch (boton_presionado) {
 8000ff2:	4b55      	ldr	r3, [pc, #340]	; (8001148 <main+0x1a8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b03      	subs	r3, #3
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	f200 809a 	bhi.w	8001132 <main+0x192>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <main+0x64>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	08001133 	.word	0x08001133
 800100c:	08001133 	.word	0x08001133
 8001010:	08001133 	.word	0x08001133
 8001014:	080010b3 	.word	0x080010b3
 8001018:	08001133 	.word	0x08001133
 800101c:	080010c9 	.word	0x080010c9
 8001020:	0800109b 	.word	0x0800109b
 8001024:	0800104f 	.word	0x0800104f
 8001028:	08001069 	.word	0x08001069
 800102c:	08001083 	.word	0x08001083
 8001030:	080010e1 	.word	0x080010e1
 8001034:	080010f9 	.word	0x080010f9
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 8001038:	2208      	movs	r2, #8
 800103a:	4944      	ldr	r1, [pc, #272]	; (800114c <main+0x1ac>)
 800103c:	4844      	ldr	r0, [pc, #272]	; (8001150 <main+0x1b0>)
 800103e:	f7ff feef 	bl	8000e20 <debouncer>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d063      	beq.n	8001110 <main+0x170>
				cambiarEstadoLuces();
 8001048:	f7ff fa84 	bl	8000554 <cambiarEstadoLuces>
			}
			break;
 800104c:	e060      	b.n	8001110 <main+0x170>
		case 11:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_11)) {
 800104e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001052:	4940      	ldr	r1, [pc, #256]	; (8001154 <main+0x1b4>)
 8001054:	483e      	ldr	r0, [pc, #248]	; (8001150 <main+0x1b0>)
 8001056:	f7ff fee3 	bl	8000e20 <debouncer>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d059      	beq.n	8001114 <main+0x174>
				setEstadoPersianas(0);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fb0d 	bl	8000680 <setEstadoPersianas>
			}
			break;
 8001066:	e055      	b.n	8001114 <main+0x174>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	4939      	ldr	r1, [pc, #228]	; (8001154 <main+0x1b4>)
 800106e:	4838      	ldr	r0, [pc, #224]	; (8001150 <main+0x1b0>)
 8001070:	f7ff fed6 	bl	8000e20 <debouncer>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d04e      	beq.n	8001118 <main+0x178>
				setEstadoPersianas(0);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fb00 	bl	8000680 <setEstadoPersianas>
			}
			break;
 8001080:	e04a      	b.n	8001118 <main+0x178>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	4931      	ldr	r1, [pc, #196]	; (800114c <main+0x1ac>)
 8001088:	4831      	ldr	r0, [pc, #196]	; (8001150 <main+0x1b0>)
 800108a:	f7ff fec9 	bl	8000e20 <debouncer>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d043      	beq.n	800111c <main+0x17c>
				cambiarEstadoPersianas();
 8001094:	f7ff fb54 	bl	8000740 <cambiarEstadoPersianas>
			}
			break;
 8001098:	e040      	b.n	800111c <main+0x17c>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	492b      	ldr	r1, [pc, #172]	; (800114c <main+0x1ac>)
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <main+0x1b0>)
 80010a2:	f7ff febd 	bl	8000e20 <debouncer>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d039      	beq.n	8001120 <main+0x180>
				cambiarEstadoRiego();
 80010ac:	f7ff fbd6 	bl	800085c <cambiarEstadoRiego>
			}
			break;
 80010b0:	e036      	b.n	8001120 <main+0x180>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	4925      	ldr	r1, [pc, #148]	; (800114c <main+0x1ac>)
 80010b6:	4826      	ldr	r0, [pc, #152]	; (8001150 <main+0x1b0>)
 80010b8:	f7ff feb2 	bl	8000e20 <debouncer>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d030      	beq.n	8001124 <main+0x184>
				cambiarEstadoSeguridad();
 80010c2:	f7ff fc71 	bl	80009a8 <cambiarEstadoSeguridad>
			}
			break;
 80010c6:	e02d      	b.n	8001124 <main+0x184>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	491f      	ldr	r1, [pc, #124]	; (800114c <main+0x1ac>)
 80010ce:	4820      	ldr	r0, [pc, #128]	; (8001150 <main+0x1b0>)
 80010d0:	f7ff fea6 	bl	8000e20 <debouncer>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d026      	beq.n	8001128 <main+0x188>
				intruso_detectado();
 80010da:	f7ff fc75 	bl	80009c8 <intruso_detectado>
			}
			break;
 80010de:	e023      	b.n	8001128 <main+0x188>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 80010e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e4:	491c      	ldr	r1, [pc, #112]	; (8001158 <main+0x1b8>)
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <main+0x1b0>)
 80010e8:	f7ff fe9a 	bl	8000e20 <debouncer>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d01c      	beq.n	800112c <main+0x18c>
				cambiarControlClima();
 80010f2:	f7ff fcff 	bl	8000af4 <cambiarControlClima>
			}
			break;
 80010f6:	e019      	b.n	800112c <main+0x18c>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 80010f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010fc:	4916      	ldr	r1, [pc, #88]	; (8001158 <main+0x1b8>)
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <main+0x1b0>)
 8001100:	f7ff fe8e 	bl	8000e20 <debouncer>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <main+0x190>
				cambiarEstadoClima();
 800110a:	f7ff fcd1 	bl	8000ab0 <cambiarEstadoClima>
			}
			break;
 800110e:	e00f      	b.n	8001130 <main+0x190>
			break;
 8001110:	bf00      	nop
 8001112:	e00e      	b.n	8001132 <main+0x192>
			break;
 8001114:	bf00      	nop
 8001116:	e00c      	b.n	8001132 <main+0x192>
			break;
 8001118:	bf00      	nop
 800111a:	e00a      	b.n	8001132 <main+0x192>
			break;
 800111c:	bf00      	nop
 800111e:	e008      	b.n	8001132 <main+0x192>
			break;
 8001120:	bf00      	nop
 8001122:	e006      	b.n	8001132 <main+0x192>
			break;
 8001124:	bf00      	nop
 8001126:	e004      	b.n	8001132 <main+0x192>
			break;
 8001128:	bf00      	nop
 800112a:	e002      	b.n	8001132 <main+0x192>
			break;
 800112c:	bf00      	nop
 800112e:	e000      	b.n	8001132 <main+0x192>
			break;
 8001130:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 8001132:	f7ff fa9f 	bl	8000674 <luces>
		riego();
 8001136:	f7ff fbc7 	bl	80008c8 <riego>
		seguridad();
 800113a:	f7ff fc6f 	bl	8000a1c <seguridad>
		clima();
 800113e:	f7ff fe33 	bl	8000da8 <clima>
		switch (boton_presionado) {
 8001142:	e756      	b.n	8000ff2 <main+0x52>
 8001144:	20000198 	.word	0x20000198
 8001148:	20000070 	.word	0x20000070
 800114c:	40020000 	.word	0x40020000
 8001150:	2000006c 	.word	0x2000006c
 8001154:	40021000 	.word	0x40021000
 8001158:	40020400 	.word	0x40020400

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	; 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2230      	movs	r2, #48	; 0x30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fa80 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <SystemClock_Config+0xcc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <SystemClock_Config+0xcc>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <SystemClock_Config+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <SystemClock_Config+0xd0>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c0:	2310      	movs	r3, #16
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011cc:	2308      	movs	r3, #8
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011d0:	2332      	movs	r3, #50	; 0x32
 80011d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011d8:	2307      	movs	r3, #7
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd43 	bl	8002c6c <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ec:	f000 fa80 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f001 ffa4 	bl	800315c <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800121a:	f000 fa69 	bl	80016f0 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3750      	adds	r7, #80	; 0x50
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001246:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_ADC1_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_ADC1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_ADC1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MX_ADC1_Init+0xa0>)
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_ADC1_Init+0x98>)
 800127c:	2201      	movs	r2, #1
 800127e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_ADC1_Init+0x98>)
 800128a:	2201      	movs	r2, #1
 800128c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_ADC1_Init+0x98>)
 8001290:	f000 fcb0 	bl	8001bf4 <HAL_ADC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 fa29 	bl	80016f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800129e:	2301      	movs	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <MX_ADC1_Init+0x98>)
 80012b0:	f000 fe82 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012ba:	f000 fa19 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000148 	.word	0x20000148
 80012cc:	40012000 	.word	0x40012000
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f001 fb67 	bl	80029e4 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f9e8 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000084 	.word	0x20000084
 8001328:	40005400 	.word	0x40005400
 800132c:	00061a80 	.word	0x00061a80

08001330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b096      	sub	sp, #88	; 0x58
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2220      	movs	r2, #32
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f003 f981 	bl	8004670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <MX_TIM1_Init+0x138>)
 8001370:	4a3e      	ldr	r2, [pc, #248]	; (800146c <MX_TIM1_Init+0x13c>)
 8001372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <MX_TIM1_Init+0x138>)
 8001376:	f240 22ff 	movw	r2, #767	; 0x2ff
 800137a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MX_TIM1_Init+0x138>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <MX_TIM1_Init+0x138>)
 8001384:	22fe      	movs	r2, #254	; 0xfe
 8001386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <MX_TIM1_Init+0x138>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <MX_TIM1_Init+0x138>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <MX_TIM1_Init+0x138>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800139a:	4833      	ldr	r0, [pc, #204]	; (8001468 <MX_TIM1_Init+0x138>)
 800139c:	f002 f8da 	bl	8003554 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013a6:	f000 f9a3 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b4:	4619      	mov	r1, r3
 80013b6:	482c      	ldr	r0, [pc, #176]	; (8001468 <MX_TIM1_Init+0x138>)
 80013b8:	f002 faa0 	bl	80038fc <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013c2:	f000 f995 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c6:	4828      	ldr	r0, [pc, #160]	; (8001468 <MX_TIM1_Init+0x138>)
 80013c8:	f002 f97c 	bl	80036c4 <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013d2:	f000 f98d 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e2:	4619      	mov	r1, r3
 80013e4:	4820      	ldr	r0, [pc, #128]	; (8001468 <MX_TIM1_Init+0x138>)
 80013e6:	f002 fe3b 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013f0:	f000 f97e 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4813      	ldr	r0, [pc, #76]	; (8001468 <MX_TIM1_Init+0x138>)
 800141a:	f002 f9ad 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001424:	f000 f964 	bl	80016f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_TIM1_Init+0x138>)
 800144c:	f002 fe84 	bl	8004158 <HAL_TIMEx_ConfigBreakDeadTime>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001456:	f000 f94b 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <MX_TIM1_Init+0x138>)
 800145c:	f000 fa3a 	bl	80018d4 <HAL_TIM_MspPostInit>

}
 8001460:	bf00      	nop
 8001462:	3758      	adds	r7, #88	; 0x58
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001e0 	.word	0x200001e0
 800146c:	40010000 	.word	0x40010000

08001470 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM6_Init+0x64>)
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MX_TIM6_Init+0x68>)
 8001482:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_TIM6_Init+0x64>)
 8001486:	2231      	movs	r2, #49	; 0x31
 8001488:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_TIM6_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_TIM6_Init+0x64>)
 8001492:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001496:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_TIM6_Init+0x64>)
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_TIM6_Init+0x64>)
 80014a0:	f002 f858 	bl	8003554 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80014aa:	f000 f921 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_TIM6_Init+0x64>)
 80014bc:	f002 fdd0 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014c6:	f000 f913 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000198 	.word	0x20000198
 80014d8:	40001000 	.word	0x40001000

080014dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART6_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001514:	f002 fe72 	bl	80041fc <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 f8e7 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000228 	.word	0x20000228
 800152c:	40011400 	.word	0x40011400

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4b64      	ldr	r3, [pc, #400]	; (80016dc <MX_GPIO_Init+0x1ac>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a63      	ldr	r2, [pc, #396]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a5c      	ldr	r2, [pc, #368]	; (80016dc <MX_GPIO_Init+0x1ac>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a55      	ldr	r2, [pc, #340]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <MX_GPIO_Init+0x1ac>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b48      	ldr	r3, [pc, #288]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a47      	ldr	r2, [pc, #284]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a40      	ldr	r2, [pc, #256]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <MX_GPIO_Init+0x1ac>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2174      	movs	r1, #116	; 0x74
 80015f2:	483b      	ldr	r0, [pc, #236]	; (80016e0 <MX_GPIO_Init+0x1b0>)
 80015f4:	f001 f9c4 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80015fe:	4839      	ldr	r0, [pc, #228]	; (80016e4 <MX_GPIO_Init+0x1b4>)
 8001600:	f001 f9be 	bl	8002980 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 8001604:	f242 6389 	movw	r3, #9865	; 0x2689
 8001608:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4831      	ldr	r0, [pc, #196]	; (80016e0 <MX_GPIO_Init+0x1b0>)
 800161c:	f000 fffc 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001620:	2374      	movs	r3, #116	; 0x74
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	482a      	ldr	r0, [pc, #168]	; (80016e0 <MX_GPIO_Init+0x1b0>)
 8001638:	f000 ffee 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800163c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001642:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4825      	ldr	r0, [pc, #148]	; (80016e8 <MX_GPIO_Init+0x1b8>)
 8001654:	f000 ffe0 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001658:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <MX_GPIO_Init+0x1bc>)
 8001670:	f000 ffd2 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001674:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001678:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <MX_GPIO_Init+0x1b4>)
 800168e:	f000 ffc3 	bl	8002618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2006      	movs	r0, #6
 8001698:	f000 ff87 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800169c:	2006      	movs	r0, #6
 800169e:	f000 ffa0 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2009      	movs	r0, #9
 80016a8:	f000 ff7f 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016ac:	2009      	movs	r0, #9
 80016ae:	f000 ff98 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2017      	movs	r0, #23
 80016b8:	f000 ff77 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016bc:	2017      	movs	r0, #23
 80016be:	f000 ff90 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2028      	movs	r0, #40	; 0x28
 80016c8:	f000 ff6f 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016cc:	2028      	movs	r0, #40	; 0x28
 80016ce:	f000 ff88 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40020400 	.word	0x40020400

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_MspInit+0x4c>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x4c>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800173a:	2007      	movs	r0, #7
 800173c:	f000 ff2a 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_ADC_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d127      	bne.n	80017be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_ADC_MspInit+0x80>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_ADC_MspInit+0x80>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017a6:	2302      	movs	r3, #2
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017aa:	2303      	movs	r3, #3
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_ADC_MspInit+0x84>)
 80017ba:	f000 ff2d 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012000 	.word	0x40012000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_I2C_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <HAL_I2C_MspInit+0x8c>)
 800182e:	f000 fef3 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x88>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_I2C_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40005400 	.word	0x40005400
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_TIM_Base_MspInit+0x64>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001892:	e012      	b.n	80018ba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_TIM_Base_MspInit+0x6c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10d      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_Base_MspInit+0x68>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40001000 	.word	0x40001000

080018d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_TIM_MspPostInit+0x68>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d11e      	bne.n	8001934 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_TIM_MspPostInit+0x6c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_TIM_MspPostInit+0x6c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_TIM_MspPostInit+0x6c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_TIM_MspPostInit+0x70>)
 8001930:	f000 fe72 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_UART_MspInit+0x84>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12b      	bne.n	80019c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_UART_MspInit+0x88>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_UART_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019b2:	2308      	movs	r3, #8
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 80019be:	f000 fe2b 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40011400 	.word	0x40011400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020800 	.word	0x40020800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 f8c6 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f000 ffbf 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f000 ffb8 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	f000 ffb1 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a56:	f000 ffad 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a66:	f000 ffa5 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a6e:	f000 ffa1 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a76:	f000 ff9d 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a7e:	f000 ff99 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a86:	f000 ff95 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a8e:	f000 ff91 	bl	80029b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad8:	4c0b      	ldr	r4, [pc, #44]	; (8001b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ae6:	f7ff ffd7 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f002 fd9d 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aee:	f7ff fa57 	bl	8000fa0 <main>
  bx  lr    
 8001af2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b00:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 8001b04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b08:	20000288 	.word	0x20000288

08001b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_Init+0x40>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_Init+0x40>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_Init+0x40>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 fd2b 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f808 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fdda 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x54>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fd43 	bl	80025fe <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 fd0b 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x5c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	2000000c 	.word	0x2000000c

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	20000284 	.word	0x20000284

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000284 	.word	0x20000284

08001bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e033      	b.n	8001c72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fd9a 	bl	800174c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c3a:	f023 0302 	bic.w	r3, r3, #2
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fad8 	bl	80021fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
 8001c62:	e001      	b.n	8001c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Start+0x1a>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e0b2      	b.n	8001dfc <HAL_ADC_Start+0x180>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d018      	beq.n	8001cde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_ADC_Start+0x18c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_ADC_Start+0x190>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9a      	lsrs	r2, r3, #18
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d17a      	bne.n	8001de2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d106      	bne.n	8001d3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f023 0206 	bic.w	r2, r3, #6
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12a      	bne.n	8001db8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_ADC_Start+0x198>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d015      	beq.n	8001d98 <HAL_ADC_Start+0x11c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_ADC_Start+0x19c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d105      	bne.n	8001d82 <HAL_ADC_Start+0x106>
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_ADC_Start+0x1a0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d136      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_ADC_Start+0x194>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d130      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d129      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	e020      	b.n	8001dfa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_ADC_Start+0x198>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d114      	bne.n	8001dfa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00b      	b.n	8001dfa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	40012300 	.word	0x40012300
 8001e14:	40012000 	.word	0x40012000
 8001e18:	40012100 	.word	0x40012100
 8001e1c:	40012200 	.word	0x40012200

08001e20 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Stop+0x16>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e021      	b.n	8001e7a <HAL_ADC_Stop+0x5a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea2:	d113      	bne.n	8001ecc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e063      	b.n	8001f94 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ecc:	f7ff fe86 	bl	8001bdc <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ed2:	e021      	b.n	8001f18 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eda:	d01d      	beq.n	8001f18 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ADC_PollForConversion+0x6c>
 8001ee2:	f7ff fe7b 	bl	8001bdc <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d212      	bcs.n	8001f18 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d00b      	beq.n	8001f18 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e03d      	b.n	8001f94 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1d6      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0212 	mvn.w	r2, #18
 8001f2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d123      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d11f      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1c>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e105      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x228>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d925      	bls.n	8002030 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68d9      	ldr	r1, [r3, #12]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b1e      	subs	r3, #30
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43da      	mvns	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	400a      	ands	r2, r1
 8002008:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68d9      	ldr	r1, [r3, #12]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	4603      	mov	r3, r0
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4403      	add	r3, r0
 8002022:	3b1e      	subs	r3, #30
 8002024:	409a      	lsls	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	e022      	b.n	8002076 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	2207      	movs	r2, #7
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	400a      	ands	r2, r1
 8002052:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6919      	ldr	r1, [r3, #16]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	4603      	mov	r3, r0
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4403      	add	r3, r0
 800206c:	409a      	lsls	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b06      	cmp	r3, #6
 800207c:	d824      	bhi.n	80020c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b05      	subs	r3, #5
 8002090:	221f      	movs	r2, #31
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b05      	subs	r3, #5
 80020ba:	fa00 f203 	lsl.w	r2, r0, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
 80020c6:	e04c      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d824      	bhi.n	800211a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b23      	subs	r3, #35	; 0x23
 80020e2:	221f      	movs	r2, #31
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b23      	subs	r3, #35	; 0x23
 800210c:	fa00 f203 	lsl.w	r2, r0, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
 8002118:	e023      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b41      	subs	r3, #65	; 0x41
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b41      	subs	r3, #65	; 0x41
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_ADC_ConfigChannel+0x234>)
 8002164:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_ADC_ConfigChannel+0x238>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d109      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b12      	cmp	r3, #18
 8002176:	d105      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_ADC_ConfigChannel+0x238>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d123      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x21e>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b10      	cmp	r3, #16
 8002194:	d003      	beq.n	800219e <HAL_ADC_ConfigChannel+0x1e6>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b11      	cmp	r3, #17
 800219c:	d11b      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d111      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_ADC_ConfigChannel+0x23c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_ADC_ConfigChannel+0x240>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0c9a      	lsrs	r2, r3, #18
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40012300 	.word	0x40012300
 80021f0:	40012000 	.word	0x40012000
 80021f4:	20000008 	.word	0x20000008
 80021f8:	431bde83 	.word	0x431bde83

080021fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002204:	4b79      	ldr	r3, [pc, #484]	; (80023ec <ADC_Init+0x1f0>)
 8002206:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <ADC_Init+0x1f4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e00f      	b.n	80022fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0202 	bic.w	r2, r2, #2
 8002308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	005a      	lsls	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	3b01      	subs	r3, #1
 8002354:	035a      	lsls	r2, r3, #13
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e007      	b.n	8002370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	3b01      	subs	r3, #1
 800238c:	051a      	lsls	r2, r3, #20
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b2:	025a      	lsls	r2, r3, #9
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	029a      	lsls	r2, r3, #10
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40012300 	.word	0x40012300
 80023f0:	0f000001 	.word	0x0f000001

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e16b      	b.n	800290c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 815a 	bne.w	8002906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80b4 	beq.w	8002906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b60      	ldr	r3, [pc, #384]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a5f      	ldr	r2, [pc, #380]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_GPIO_Init+0x310>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_GPIO_Init+0x314>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02b      	beq.n	800283e <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a51      	ldr	r2, [pc, #324]	; (8002930 <HAL_GPIO_Init+0x318>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d025      	beq.n	800283a <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_GPIO_Init+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01f      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_GPIO_Init+0x320>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_GPIO_Init+0x324>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x216>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4d      	ldr	r2, [pc, #308]	; (8002940 <HAL_GPIO_Init+0x328>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x212>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_GPIO_Init+0x32c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x20e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_GPIO_Init+0x330>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x20a>
 800281e:	2307      	movs	r3, #7
 8002820:	e00e      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002822:	2308      	movs	r3, #8
 8002824:	e00c      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002826:	2306      	movs	r3, #6
 8002828:	e00a      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800282a:	2305      	movs	r3, #5
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800282e:	2304      	movs	r3, #4
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x310>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_GPIO_Init+0x334>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_GPIO_Init+0x334>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_GPIO_Init+0x334>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_GPIO_Init+0x334>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_GPIO_Init+0x334>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_GPIO_Init+0x334>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_GPIO_Init+0x334>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_GPIO_Init+0x334>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f ae90 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40021400 	.word	0x40021400
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40013c00 	.word	0x40013c00

08002950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e001      	b.n	8002972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fa74 	bl	8000ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e12b      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fee2 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a48:	f000 fd5c 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a81      	ldr	r2, [pc, #516]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d807      	bhi.n	8002a68 <HAL_I2C_Init+0x84>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <HAL_I2C_Init+0x278>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e006      	b.n	8002a76 <HAL_I2C_Init+0x92>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_I2C_Init+0x27c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0e7      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a78      	ldr	r2, [pc, #480]	; (8002c64 <HAL_I2C_Init+0x280>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d802      	bhi.n	8002ab8 <HAL_I2C_Init+0xd4>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	e009      	b.n	8002acc <HAL_I2C_Init+0xe8>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a69      	ldr	r2, [pc, #420]	; (8002c68 <HAL_I2C_Init+0x284>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	3301      	adds	r3, #1
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	495c      	ldr	r1, [pc, #368]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d819      	bhi.n	8002b20 <HAL_I2C_Init+0x13c>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e59      	subs	r1, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b00:	400b      	ands	r3, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_I2C_Init+0x138>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e59      	subs	r1, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	e051      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e04f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_I2C_Init+0x168>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_I2C_Init+0x18e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x196>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e022      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10e      	bne.n	8002ba0 <HAL_I2C_Init+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e58      	subs	r0, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	440b      	add	r3, r1
 8002b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6809      	ldr	r1, [r1, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6911      	ldr	r1, [r2, #16]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	000186a0 	.word	0x000186a0
 8002c5c:	001e847f 	.word	0x001e847f
 8002c60:	003d08ff 	.word	0x003d08ff
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e264      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	4ba3      	ldr	r3, [pc, #652]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4ba0      	ldr	r3, [pc, #640]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d112      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4b9d      	ldr	r3, [pc, #628]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b99      	ldr	r3, [pc, #612]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e23f      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a90      	ldr	r2, [pc, #576]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a8a      	ldr	r2, [pc, #552]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b84      	ldr	r3, [pc, #528]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe ff5a 	bl	8001bdc <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe ff56 	bl	8001bdc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e204      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe ff46 	bl	8001bdc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe ff42 	bl	8001bdc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1f0      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c4      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4952      	ldr	r1, [pc, #328]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_OscConfig+0x2b0>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe fefb 	bl	8001bdc <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe fef7 	bl	8001bdc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a5      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4940      	ldr	r1, [pc, #256]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_OscConfig+0x2b0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe feda 	bl	8001bdc <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fed6 	bl	8001bdc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e184      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d030      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x2b4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe feba 	bl	8001bdc <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe feb6 	bl	8001bdc <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e164      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x2b4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fea3 	bl	8001bdc <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fe9f 	bl	8001bdc <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e14d      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a0 	beq.w	8003006 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_RCC_OscConfig+0x2b8>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fe65 	bl	8001bdc <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e011      	b.n	8002f3a <HAL_RCC_OscConfig+0x2ce>
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470000 	.word	0x42470000
 8002f20:	42470e80 	.word	0x42470e80
 8002f24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fe58 	bl	8001bdc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e106      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b85      	ldr	r3, [pc, #532]	; (8003150 <HAL_RCC_OscConfig+0x4e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002f4e:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	e01c      	b.n	8002f96 <HAL_RCC_OscConfig+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x312>
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_OscConfig+0x32a>
 8002f7e:	4b75      	ldr	r3, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a74      	ldr	r2, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f90:	f023 0304 	bic.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d015      	beq.n	8002fca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fe1d 	bl	8001bdc <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fe19 	bl	8001bdc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0c5      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ee      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x33a>
 8002fc8:	e014      	b.n	8002ff4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fe07 	bl	8001bdc <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fe03 	bl	8001bdc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0af      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 809b 	beq.w	8003146 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d05c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d141      	bne.n	80030a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fdd7 	bl	8001bdc <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fdd3 	bl	8001bdc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e081      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	019b      	lsls	r3, r3, #6
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fdac 	bl	8001bdc <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fda8 	bl	8001bdc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e056      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x41c>
 80030a6:	e04e      	b.n	8003146 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fd95 	bl	8001bdc <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fd91 	bl	8001bdc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e03f      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x44a>
 80030d4:	e037      	b.n	8003146 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e032      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d028      	beq.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d121      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d11a      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003118:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40007000 	.word	0x40007000
 8003154:	40023800 	.word	0x40023800
 8003158:	42470060 	.word	0x42470060

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cc      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d044      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e067      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fe fcc6 	bl	8001bdc <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe fcc2 	bl	8001bdc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20c      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fc26 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00
 8003318:	40023800 	.word	0x40023800
 800331c:	08004698 	.word	0x08004698
 8003320:	20000008 	.word	0x20000008
 8003324:	2000000c 	.word	0x2000000c

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003340:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d00d      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 800334c:	2b08      	cmp	r3, #8
 800334e:	f200 80bd 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x34>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d003      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x3a>
 800335a:	e0b7      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800335e:	60bb      	str	r3, [r7, #8]
       break;
 8003360:	e0b7      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003364:	60bb      	str	r3, [r7, #8]
      break;
 8003366:	e0b4      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003368:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003370:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04d      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	ea02 0800 	and.w	r8, r2, r0
 8003396:	ea03 0901 	and.w	r9, r3, r1
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	014b      	lsls	r3, r1, #5
 80033a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ac:	0142      	lsls	r2, r0, #5
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	ebb0 0008 	subs.w	r0, r0, r8
 80033b6:	eb61 0109 	sbc.w	r1, r1, r9
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033c8:	0182      	lsls	r2, r0, #6
 80033ca:	1a12      	subs	r2, r2, r0
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	00d9      	lsls	r1, r3, #3
 80033da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033de:	00d0      	lsls	r0, r2, #3
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	eb12 0208 	adds.w	r2, r2, r8
 80033e8:	eb43 0309 	adc.w	r3, r3, r9
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	0259      	lsls	r1, r3, #9
 80033f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033fa:	0250      	lsls	r0, r2, #9
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f7fc fedc 	bl	80001c8 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e04a      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	461a      	mov	r2, r3
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	ea02 0400 	and.w	r4, r2, r0
 8003432:	ea03 0501 	and.w	r5, r3, r1
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	014b      	lsls	r3, r1, #5
 8003444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003448:	0142      	lsls	r2, r0, #5
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	1b00      	subs	r0, r0, r4
 8003450:	eb61 0105 	sbc.w	r1, r1, r5
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	018b      	lsls	r3, r1, #6
 800345e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003462:	0182      	lsls	r2, r0, #6
 8003464:	1a12      	subs	r2, r2, r0
 8003466:	eb63 0301 	sbc.w	r3, r3, r1
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	00d9      	lsls	r1, r3, #3
 8003474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003478:	00d0      	lsls	r0, r2, #3
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	1912      	adds	r2, r2, r4
 8003480:	eb45 0303 	adc.w	r3, r5, r3
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	0299      	lsls	r1, r3, #10
 800348e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003492:	0290      	lsls	r0, r2, #10
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f7fc fe90 	bl	80001c8 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	60bb      	str	r3, [r7, #8]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034ce:	60bb      	str	r3, [r7, #8]
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	68bb      	ldr	r3, [r7, #8]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000008 	.word	0x20000008

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	080046a8 	.word	0x080046a8

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffdc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0b5b      	lsrs	r3, r3, #13
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	080046a8 	.word	0x080046a8

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe f972 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fa7a 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e046      	b.n	800369a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_TIM_Base_Start+0xb4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d01d      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_TIM_Base_Start+0xb8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_TIM_Base_Start+0xbc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_TIM_Base_Start+0xc0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_TIM_Base_Start+0xc4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_TIM_Base_Start+0xc8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start+0x70>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_TIM_Base_Start+0xcc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40010400 	.word	0x40010400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40001800 	.word	0x40001800

080036c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e041      	b.n	800375a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f839 	bl	8003762 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 f9c2 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003792:	2302      	movs	r3, #2
 8003794:	e0ae      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	f200 809f 	bhi.w	80038e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080038e5 	.word	0x080038e5
 80037b4:	080038e5 	.word	0x080038e5
 80037b8:	080038e5 	.word	0x080038e5
 80037bc:	08003821 	.word	0x08003821
 80037c0:	080038e5 	.word	0x080038e5
 80037c4:	080038e5 	.word	0x080038e5
 80037c8:	080038e5 	.word	0x080038e5
 80037cc:	08003863 	.word	0x08003863
 80037d0:	080038e5 	.word	0x080038e5
 80037d4:	080038e5 	.word	0x080038e5
 80037d8:	080038e5 	.word	0x080038e5
 80037dc:	080038a3 	.word	0x080038a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f9f0 	bl	8003bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6999      	ldr	r1, [r3, #24]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	619a      	str	r2, [r3, #24]
      break;
 800381e:	e064      	b.n	80038ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fa40 	bl	8003cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6999      	ldr	r1, [r3, #24]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	021a      	lsls	r2, r3, #8
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
      break;
 8003860:	e043      	b.n	80038ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa95 	bl	8003d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0208 	orr.w	r2, r2, #8
 800387c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0204 	bic.w	r2, r2, #4
 800388c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	61da      	str	r2, [r3, #28]
      break;
 80038a0:	e023      	b.n	80038ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fae9 	bl	8003e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69d9      	ldr	r1, [r3, #28]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	021a      	lsls	r2, r3, #8
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	61da      	str	r2, [r3, #28]
      break;
 80038e2:	e002      	b.n	80038ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
      break;
 80038e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIM_ConfigClockSource+0x1c>
 8003914:	2302      	movs	r3, #2
 8003916:	e0b4      	b.n	8003a82 <HAL_TIM_ConfigClockSource+0x186>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003950:	d03e      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	f200 8087 	bhi.w	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	f000 8086 	beq.w	8003a6e <HAL_TIM_ConfigClockSource+0x172>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d87f      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d01a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xa6>
 800396c:	2b70      	cmp	r3, #112	; 0x70
 800396e:	d87b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d050      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x11a>
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d877      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d03c      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0xfa>
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d873      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d058      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x13a>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d86f      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d064      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x15a>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d86b      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d060      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d867      	bhi.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05c      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d05a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x15a>
 80039a0:	e062      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f000 fb35 	bl	8004020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	609a      	str	r2, [r3, #8]
      break;
 80039ce:	e04f      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f000 fb1e 	bl	8004020 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f2:	609a      	str	r2, [r3, #8]
      break;
 80039f4:	e03c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f000 fa92 	bl	8003f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2150      	movs	r1, #80	; 0x50
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 faeb 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003a14:	e02c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 fab1 	bl	8003f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2160      	movs	r1, #96	; 0x60
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fadb 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003a34:	e01c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 fa72 	bl	8003f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 facb 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f000 fac2 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003a66:	e003      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e000      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d027      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d023      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_Base_SetConfig+0x128>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_Base_SetConfig+0x12c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0x13c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <TIM_OC1_SetConfig+0xd8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC1_SetConfig+0x64>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <TIM_OC1_SetConfig+0xdc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <TIM_OC1_SetConfig+0xd8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC1_SetConfig+0x8e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <TIM_OC1_SetConfig+0xdc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40010400 	.word	0x40010400

08003cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f023 0210 	bic.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0320 	bic.w	r3, r3, #32
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <TIM_OC2_SetConfig+0xe4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_OC2_SetConfig+0x68>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_OC2_SetConfig+0xe8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10d      	bne.n	8003d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <TIM_OC2_SetConfig+0xe4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_OC2_SetConfig+0x94>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <TIM_OC2_SetConfig+0xe8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d113      	bne.n	8003d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <TIM_OC3_SetConfig+0xe0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0x66>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <TIM_OC3_SetConfig+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <TIM_OC3_SetConfig+0xe0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_OC3_SetConfig+0x92>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <TIM_OC3_SetConfig+0xe4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d113      	bne.n	8003e52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40010400 	.word	0x40010400

08003e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <TIM_OC4_SetConfig+0xa4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x68>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <TIM_OC4_SetConfig+0xa8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d109      	bne.n	8003efc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40010400 	.word	0x40010400

08003f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 030a 	bic.w	r3, r3, #10
 8003f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	f043 0307 	orr.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	431a      	orrs	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e05a      	b.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a21      	ldr	r2, [pc, #132]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d022      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d01d      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d018      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a15      	ldr	r2, [pc, #84]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10c      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	4313      	orrs	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40014000 	.word	0x40014000
 8004154:	40001800 	.word	0x40001800

08004158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e03d      	b.n	80041f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e03f      	b.n	800428e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fb90 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f829 	bl	8004298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	b09f      	sub	sp, #124	; 0x7c
 800429e:	af00      	add	r7, sp, #0
 80042a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	68d9      	ldr	r1, [r3, #12]
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	ea40 0301 	orr.w	r3, r0, r1
 80042b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042dc:	f021 010c 	bic.w	r1, r1, #12
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e6:	430b      	orrs	r3, r1
 80042e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	6999      	ldr	r1, [r3, #24]
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	ea40 0301 	orr.w	r3, r0, r1
 8004300:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4bc5      	ldr	r3, [pc, #788]	; (800461c <UART_SetConfig+0x384>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d004      	beq.n	8004316 <UART_SetConfig+0x7e>
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4bc3      	ldr	r3, [pc, #780]	; (8004620 <UART_SetConfig+0x388>)
 8004312:	429a      	cmp	r2, r3
 8004314:	d103      	bne.n	800431e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004316:	f7ff f909 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 800431a:	6778      	str	r0, [r7, #116]	; 0x74
 800431c:	e002      	b.n	8004324 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff f8f1 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8004322:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432c:	f040 80b6 	bne.w	800449c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004332:	461c      	mov	r4, r3
 8004334:	f04f 0500 	mov.w	r5, #0
 8004338:	4622      	mov	r2, r4
 800433a:	462b      	mov	r3, r5
 800433c:	1891      	adds	r1, r2, r2
 800433e:	6439      	str	r1, [r7, #64]	; 0x40
 8004340:	415b      	adcs	r3, r3
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004348:	1912      	adds	r2, r2, r4
 800434a:	eb45 0303 	adc.w	r3, r5, r3
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	00d9      	lsls	r1, r3, #3
 8004358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435c:	00d0      	lsls	r0, r2, #3
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	1911      	adds	r1, r2, r4
 8004364:	6639      	str	r1, [r7, #96]	; 0x60
 8004366:	416b      	adcs	r3, r5
 8004368:	667b      	str	r3, [r7, #100]	; 0x64
 800436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	1891      	adds	r1, r2, r2
 8004376:	63b9      	str	r1, [r7, #56]	; 0x38
 8004378:	415b      	adcs	r3, r3
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004380:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004384:	f7fb ff20 	bl	80001c8 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4ba5      	ldr	r3, [pc, #660]	; (8004624 <UART_SetConfig+0x38c>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011e      	lsls	r6, r3, #4
 8004396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004398:	461c      	mov	r4, r3
 800439a:	f04f 0500 	mov.w	r5, #0
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	6339      	str	r1, [r7, #48]	; 0x30
 80043a6:	415b      	adcs	r3, r3
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
 80043aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043ae:	1912      	adds	r2, r2, r4
 80043b0:	eb45 0303 	adc.w	r3, r5, r3
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	00d9      	lsls	r1, r3, #3
 80043be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c2:	00d0      	lsls	r0, r2, #3
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	1911      	adds	r1, r2, r4
 80043ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80043cc:	416b      	adcs	r3, r5
 80043ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80043de:	415b      	adcs	r3, r3
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043ea:	f7fb feed 	bl	80001c8 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b8c      	ldr	r3, [pc, #560]	; (8004624 <UART_SetConfig+0x38c>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a87      	ldr	r2, [pc, #540]	; (8004624 <UART_SetConfig+0x38c>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004414:	441e      	add	r6, r3
 8004416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004418:	4618      	mov	r0, r3
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	1894      	adds	r4, r2, r2
 8004424:	623c      	str	r4, [r7, #32]
 8004426:	415b      	adcs	r3, r3
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442e:	1812      	adds	r2, r2, r0
 8004430:	eb41 0303 	adc.w	r3, r1, r3
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	f04f 0500 	mov.w	r5, #0
 800443c:	00dd      	lsls	r5, r3, #3
 800443e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004442:	00d4      	lsls	r4, r2, #3
 8004444:	4622      	mov	r2, r4
 8004446:	462b      	mov	r3, r5
 8004448:	1814      	adds	r4, r2, r0
 800444a:	653c      	str	r4, [r7, #80]	; 0x50
 800444c:	414b      	adcs	r3, r1
 800444e:	657b      	str	r3, [r7, #84]	; 0x54
 8004450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	461a      	mov	r2, r3
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	1891      	adds	r1, r2, r2
 800445c:	61b9      	str	r1, [r7, #24]
 800445e:	415b      	adcs	r3, r3
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004466:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800446a:	f7fb fead 	bl	80001c8 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <UART_SetConfig+0x38c>)
 8004474:	fba3 1302 	umull	r1, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	2164      	movs	r1, #100	; 0x64
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	3332      	adds	r3, #50	; 0x32
 8004486:	4a67      	ldr	r2, [pc, #412]	; (8004624 <UART_SetConfig+0x38c>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	f003 0207 	and.w	r2, r3, #7
 8004492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4432      	add	r2, r6
 8004498:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800449a:	e0b9      	b.n	8004610 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	461c      	mov	r4, r3
 80044a0:	f04f 0500 	mov.w	r5, #0
 80044a4:	4622      	mov	r2, r4
 80044a6:	462b      	mov	r3, r5
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	6139      	str	r1, [r7, #16]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044b4:	1912      	adds	r2, r2, r4
 80044b6:	eb45 0303 	adc.w	r3, r5, r3
 80044ba:	f04f 0000 	mov.w	r0, #0
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c8:	00d0      	lsls	r0, r2, #3
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	eb12 0804 	adds.w	r8, r2, r4
 80044d2:	eb43 0905 	adc.w	r9, r3, r5
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	008b      	lsls	r3, r1, #2
 80044ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044ee:	0082      	lsls	r2, r0, #2
 80044f0:	4640      	mov	r0, r8
 80044f2:	4649      	mov	r1, r9
 80044f4:	f7fb fe68 	bl	80001c8 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4b49      	ldr	r3, [pc, #292]	; (8004624 <UART_SetConfig+0x38c>)
 80044fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	011e      	lsls	r6, r3, #4
 8004506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004508:	4618      	mov	r0, r3
 800450a:	f04f 0100 	mov.w	r1, #0
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	1894      	adds	r4, r2, r2
 8004514:	60bc      	str	r4, [r7, #8]
 8004516:	415b      	adcs	r3, r3
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800451e:	1812      	adds	r2, r2, r0
 8004520:	eb41 0303 	adc.w	r3, r1, r3
 8004524:	f04f 0400 	mov.w	r4, #0
 8004528:	f04f 0500 	mov.w	r5, #0
 800452c:	00dd      	lsls	r5, r3, #3
 800452e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004532:	00d4      	lsls	r4, r2, #3
 8004534:	4622      	mov	r2, r4
 8004536:	462b      	mov	r3, r5
 8004538:	1814      	adds	r4, r2, r0
 800453a:	64bc      	str	r4, [r7, #72]	; 0x48
 800453c:	414b      	adcs	r3, r1
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004558:	0082      	lsls	r2, r0, #2
 800455a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800455e:	f7fb fe33 	bl	80001c8 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <UART_SetConfig+0x38c>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	; 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	4a2a      	ldr	r2, [pc, #168]	; (8004624 <UART_SetConfig+0x38c>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	441e      	add	r6, r3
 8004588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458a:	4618      	mov	r0, r3
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	1894      	adds	r4, r2, r2
 8004596:	603c      	str	r4, [r7, #0]
 8004598:	415b      	adcs	r3, r3
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a0:	1812      	adds	r2, r2, r0
 80045a2:	eb41 0303 	adc.w	r3, r1, r3
 80045a6:	f04f 0400 	mov.w	r4, #0
 80045aa:	f04f 0500 	mov.w	r5, #0
 80045ae:	00dd      	lsls	r5, r3, #3
 80045b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045b4:	00d4      	lsls	r4, r2, #3
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	eb12 0a00 	adds.w	sl, r2, r0
 80045be:	eb43 0b01 	adc.w	fp, r3, r1
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	008b      	lsls	r3, r1, #2
 80045d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045da:	0082      	lsls	r2, r0, #2
 80045dc:	4650      	mov	r0, sl
 80045de:	4659      	mov	r1, fp
 80045e0:	f7fb fdf2 	bl	80001c8 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <UART_SetConfig+0x38c>)
 80045ea:	fba3 1302 	umull	r1, r3, r3, r2
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2164      	movs	r1, #100	; 0x64
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	3332      	adds	r3, #50	; 0x32
 80045fc:	4a09      	ldr	r2, [pc, #36]	; (8004624 <UART_SetConfig+0x38c>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4432      	add	r2, r6
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	377c      	adds	r7, #124	; 0x7c
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	40011000 	.word	0x40011000
 8004620:	40011400 	.word	0x40011400
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 f820 	bl	8004680 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	080046b8 	.word	0x080046b8
 8004664:	080046b8 	.word	0x080046b8
 8004668:	080046b8 	.word	0x080046b8
 800466c:	080046bc 	.word	0x080046bc

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
