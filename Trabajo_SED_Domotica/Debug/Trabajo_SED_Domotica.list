
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f6c  08006f6c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000254  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001377b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ef  00000000  00000000  0003382b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  00036cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d14  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141dc  00000000  00000000  0005aaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9fb  00000000  00000000  0006ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001496c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa0  00000000  00000000  00149718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069d4 	.word	0x080069d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080069d4 	.word	0x080069d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <setLuces>:
int estado_luces=0;//0 off 1 on 2 auto
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;
int umbral_luces=80;

void setLuces(int n){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(n==0){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d110      	bne.n	80005c8 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <setLuces+0x8c>)
 80005ae:	f003 f9c1 	bl	8003934 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <setLuces+0x90>)
 80005b8:	f003 f9bc 	bl	8003934 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4819      	ldr	r0, [pc, #100]	; (8000628 <setLuces+0x90>)
 80005c2:	f003 f9b7 	bl	8003934 <HAL_GPIO_WritePin>
 80005c6:	e023      	b.n	8000610 <setLuces+0x78>
	}else if(n==1){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d110      	bne.n	80005f0 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <setLuces+0x8c>)
 80005d6:	f003 f9ad 	bl	8003934 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <setLuces+0x90>)
 80005e0:	f003 f9a8 	bl	8003934 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <setLuces+0x90>)
 80005ea:	f003 f9a3 	bl	8003934 <HAL_GPIO_WritePin>
 80005ee:	e00f      	b.n	8000610 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <setLuces+0x8c>)
 80005f8:	f003 f99c 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <setLuces+0x90>)
 8000602:	f003 f997 	bl	8003934 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <setLuces+0x90>)
 800060c:	f003 f992 	bl	8003934 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <setLuces+0x94>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
	actualizar_pantalla(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fa74 	bl	8001b04 <actualizar_pantalla>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40020000 	.word	0x40020000
 800062c:	2000009c 	.word	0x2000009c

08000630 <getEstadoLuces>:

int getEstadoLuces(){
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	return estado_luces;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <getEstadoLuces+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c

08000648 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <cambiarEstadoLuces+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff9f 	bl	8000598 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 800065a:	e00e      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <cambiarEstadoLuces+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d103      	bne.n	800066c <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff97 	bl	8000598 <setLuces>
}
 800066a:	e006      	b.n	800067a <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <cambiarEstadoLuces+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d102      	bne.n	800067a <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff8f 	bl	8000598 <setLuces>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c

08000684 <medirLDR>:

void setUmbralLuces(int u){
	umbral_luces=u;
}

void medirLDR(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>300){
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <medirLDR+0xcc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d151      	bne.n	8000736 <medirLDR+0xb2>
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <medirLDR+0xd0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800069a:	d94c      	bls.n	8000736 <medirLDR+0xb2>
		counter_luces=0;
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <medirLDR+0xd0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
		int media=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
		tickstart_luces=HAL_GetTick();
 80006a6:	f002 f9e1 	bl	8002a6c <HAL_GetTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <medirLDR+0xd4>)
 80006ae:	6013      	str	r3, [r2, #0]
		int i=0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
		for(i=0;i<10;i++){
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	e01f      	b.n	80006fa <medirLDR+0x76>
			HAL_ADC_Start(&hadc1);
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <medirLDR+0xd8>)
 80006bc:	f002 fa26 	bl	8002b0c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80006c0:	2164      	movs	r1, #100	; 0x64
 80006c2:	4826      	ldr	r0, [pc, #152]	; (800075c <medirLDR+0xd8>)
 80006c4:	f002 fb27 	bl	8002d16 <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 80006c8:	4824      	ldr	r0, [pc, #144]	; (800075c <medirLDR+0xd8>)
 80006ca:	f002 fbaf 	bl	8002e2c <HAL_ADC_GetValue>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b259      	sxtb	r1, r3
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <medirLDR+0xdc>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	460a      	mov	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <medirLDR+0xd8>)
 80006de:	f002 fae7 	bl	8002cb0 <HAL_ADC_Stop>
			media+=adcval[i];
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <medirLDR+0xdc>)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	f993 3000 	ldrsb.w	r3, [r3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	607b      	str	r3, [r7, #4]
		for(i=0;i<10;i++){
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	dddc      	ble.n	80006ba <medirLDR+0x36>
		}
		media=media/10;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <medirLDR+0xe0>)
 8000704:	fb82 1203 	smull	r1, r2, r2, r3
 8000708:	1092      	asrs	r2, r2, #2
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	607b      	str	r3, [r7, #4]
			if(media>umbral_luces){
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <medirLDR+0xe4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dd06      	ble.n	8000728 <medirLDR+0xa4>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <medirLDR+0xe8>)
 8000722:	f003 f907 	bl	8003934 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000726:	e00f      	b.n	8000748 <medirLDR+0xc4>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <medirLDR+0xe8>)
 8000730:	f003 f900 	bl	8003934 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000734:	e008      	b.n	8000748 <medirLDR+0xc4>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 8000736:	f002 f999 	bl	8002a6c <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <medirLDR+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <medirLDR+0xd0>)
 8000744:	6013      	str	r3, [r2, #0]
	}
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000009c 	.word	0x2000009c
 8000754:	200000a0 	.word	0x200000a0
 8000758:	200000a4 	.word	0x200000a4
 800075c:	2000018c 	.word	0x2000018c
 8000760:	200002b0 	.word	0x200002b0
 8000764:	66666667 	.word	0x66666667
 8000768:	20000000 	.word	0x20000000
 800076c:	40020c00 	.word	0x40020c00

08000770 <luces>:

void luces(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	medirLDR();
 8000774:	f7ff ff86 	bl	8000684 <medirLDR>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <setEstadoPersianas+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <setEstadoPersianas+0x8c>)
 800078a:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <setEstadoPersianas+0x88>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <setEstadoPersianas+0x88>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10c      	bne.n	80007b4 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <setEstadoPersianas+0x90>)
 80007a2:	f003 f8c7 	bl	8003934 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <setEstadoPersianas+0x90>)
 80007ae:	f003 f8c1 	bl	8003934 <HAL_GPIO_WritePin>
 80007b2:	e020      	b.n	80007f6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <setEstadoPersianas+0x88>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10c      	bne.n	80007d6 <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <setEstadoPersianas+0x90>)
 80007c4:	f003 f8b6 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <setEstadoPersianas+0x90>)
 80007d0:	f003 f8b0 	bl	8003934 <HAL_GPIO_WritePin>
 80007d4:	e00f      	b.n	80007f6 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <setEstadoPersianas+0x88>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d10b      	bne.n	80007f6 <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <setEstadoPersianas+0x90>)
 80007e6:	f003 f8a5 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <setEstadoPersianas+0x90>)
 80007f2:	f003 f89f 	bl	8003934 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(4);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f001 f984 	bl	8001b04 <actualizar_pantalla>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a8 	.word	0x200000a8
 8000808:	200000ac 	.word	0x200000ac
 800080c:	40020c00 	.word	0x40020c00

08000810 <getEstadoPersianas>:

int getEstadoPersianas(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	return estado_persianas;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <getEstadoPersianas+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200000a8 	.word	0x200000a8

08000828 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getEstadoAnteriorPersianas+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	200000ac 	.word	0x200000ac

08000840 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 8000844:	f7ff ffe4 	bl	8000810 <getEstadoPersianas>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d108      	bne.n	8000860 <cambiarEstadoPersianas+0x20>
 800084e:	f7ff ffeb 	bl	8000828 <getEstadoAnteriorPersianas>
 8000852:	4603      	mov	r3, r0
 8000854:	2b02      	cmp	r3, #2
 8000856:	d103      	bne.n	8000860 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff8f 	bl	800077c <setEstadoPersianas>
 800085e:	e02d      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8000860:	f7ff ffd6 	bl	8000810 <getEstadoPersianas>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d108      	bne.n	800087c <cambiarEstadoPersianas+0x3c>
 800086a:	f7ff ffdd 	bl	8000828 <getEstadoAnteriorPersianas>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d103      	bne.n	800087c <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff ff81 	bl	800077c <setEstadoPersianas>
 800087a:	e01f      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 800087c:	f7ff ffc8 	bl	8000810 <getEstadoPersianas>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d108      	bne.n	8000898 <cambiarEstadoPersianas+0x58>
 8000886:	f7ff ffcf 	bl	8000828 <getEstadoAnteriorPersianas>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff ff73 	bl	800077c <setEstadoPersianas>
 8000896:	e011      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 8000898:	f7ff ffba 	bl	8000810 <getEstadoPersianas>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d103      	bne.n	80008aa <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ff6a 	bl	800077c <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 80008a8:	e008      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 80008aa:	f7ff ffb1 	bl	8000810 <getEstadoPersianas>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d103      	bne.n	80008bc <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff61 	bl	800077c <setEstadoPersianas>
}
 80008ba:	e7ff      	b.n	80008bc <cambiarEstadoPersianas+0x7c>
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <setEstadoRiego+0x94>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <setEstadoRiego+0x98>)
 80008ce:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <setEstadoRiego+0x94>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 80008d6:	f002 f8c9 	bl	8002a6c <HAL_GetTick>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <setEstadoRiego+0x9c>)
 80008de:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <setEstadoRiego+0x94>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10c      	bne.n	8000902 <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <setEstadoRiego+0xa0>)
 80008f0:	f003 f820 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <setEstadoRiego+0xa0>)
 80008fc:	f003 f81a 	bl	8003934 <HAL_GPIO_WritePin>
 8000900:	e020      	b.n	8000944 <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <setEstadoRiego+0x94>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10c      	bne.n	8000924 <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <setEstadoRiego+0xa0>)
 8000912:	f003 f80f 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <setEstadoRiego+0xa0>)
 800091e:	f003 f809 	bl	8003934 <HAL_GPIO_WritePin>
 8000922:	e00f      	b.n	8000944 <setEstadoRiego+0x84>
	}
	else if(estado_riego==2){
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <setEstadoRiego+0x94>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d10b      	bne.n	8000944 <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <setEstadoRiego+0xa0>)
 8000934:	f002 fffe 	bl	8003934 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <setEstadoRiego+0xa0>)
 8000940:	f002 fff8 	bl	8003934 <HAL_GPIO_WritePin>
		}
	actualizar_pantalla(2);
 8000944:	2002      	movs	r0, #2
 8000946:	f001 f8dd 	bl	8001b04 <actualizar_pantalla>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000004 	.word	0x20000004
 8000958:	20000008 	.word	0x20000008
 800095c:	200000f8 	.word	0x200000f8
 8000960:	40020c00 	.word	0x40020c00

08000964 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <cambiarEstadoRiego+0x30>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ffa5 	bl	80008c0 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 8000976:	e00a      	b.n	800098e <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <cambiarEstadoRiego+0x30>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d103      	bne.n	8000988 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff9d 	bl	80008c0 <setEstadoRiego>
}
 8000986:	e002      	b.n	800098e <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff99 	bl	80008c0 <setEstadoRiego>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <getEstadoAnteriorRiego>:
int getEstadoAnteriorRiego(){
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	return estado_anterior_riego;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <getEstadoAnteriorRiego+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <temporizador_riego>:
void temporizador_riego(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <temporizador_riego+0x30>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d003      	beq.n	80009c4 <temporizador_riego+0x14>
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <temporizador_riego+0x30>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10b      	bne.n	80009dc <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 80009c4:	f002 f852 	bl	8002a6c <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <temporizador_riego+0x34>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d4:	d902      	bls.n	80009dc <temporizador_riego+0x2c>
			setEstadoRiego(2);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff ff72 	bl	80008c0 <setEstadoRiego>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	200000f8 	.word	0x200000f8

080009e8 <riego>:
void riego(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	temporizador_riego();
 80009ec:	f7ff ffe0 	bl	80009b0 <temporizador_riego>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <setEstadoSeguridad>:
int estado_seguridad = 0; //0 sistema apagado, 1 sistema encendiendose, 2 sistema_ activo
int alarma_seguridad = 0; //0 alarma apagada, 1 alarma encendida

uint32_t tickstart_seguridad = 0, counter_seguridad = 0;

void setEstadoSeguridad(int n) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	estado_seguridad = n;
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <setEstadoSeguridad+0x70>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	if (estado_seguridad == 0) {
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10e      	bne.n	8000a28 <setEstadoSeguridad+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a10:	f002 ff90 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a1c:	f002 ff8a 	bl	8003934 <HAL_GPIO_WritePin>
		alarma_seguridad = 0;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <setEstadoSeguridad+0x78>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e015      	b.n	8000a54 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 1) {
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <setEstadoSeguridad+0x4e>
		alarma_seguridad = 0;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <setEstadoSeguridad+0x78>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
		tickstart_seguridad = HAL_GetTick();
 8000a36:	f002 f819 	bl	8002a6c <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <setEstadoSeguridad+0x7c>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e008      	b.n	8000a54 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 2) {
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <setEstadoSeguridad+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d104      	bne.n	8000a54 <setEstadoSeguridad+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <setEstadoSeguridad+0x74>)
 8000a50:	f002 ff70 	bl	8003934 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(3);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f001 f855 	bl	8001b04 <actualizar_pantalla>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000b0 	.word	0x200000b0
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	200000b4 	.word	0x200000b4
 8000a70:	200000b8 	.word	0x200000b8

08000a74 <activar_sensor>:

void activar_sensor() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

	if (estado_seguridad == 1) {
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <activar_sensor+0x78>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d133      	bne.n	8000ae8 <activar_sensor+0x74>
		counter_seguridad = HAL_GetTick() - tickstart_seguridad;
 8000a80:	f001 fff4 	bl	8002a6c <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <activar_sensor+0x7c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <activar_sensor+0x80>)
 8000a8e:	6013      	str	r3, [r2, #0]
		if ((counter_seguridad > 0) && (counter_seguridad < 500)) {
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <activar_sensor+0x80>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00a      	beq.n	8000aae <activar_sensor+0x3a>
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <activar_sensor+0x80>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa0:	d205      	bcs.n	8000aae <activar_sensor+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <activar_sensor+0x84>)
 8000aa8:	f002 ff44 	bl	8003934 <HAL_GPIO_WritePin>
 8000aac:	e01c      	b.n	8000ae8 <activar_sensor+0x74>
		}else if ((counter_seguridad > 500) && (counter_seguridad < 1000)) {
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <activar_sensor+0x80>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ab6:	d90a      	bls.n	8000ace <activar_sensor+0x5a>
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <activar_sensor+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac0:	d205      	bcs.n	8000ace <activar_sensor+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <activar_sensor+0x84>)
 8000ac8:	f002 ff34 	bl	8003934 <HAL_GPIO_WritePin>
 8000acc:	e00c      	b.n	8000ae8 <activar_sensor+0x74>
		} else if (counter_seguridad > 5000) {
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <activar_sensor+0x80>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d906      	bls.n	8000ae8 <activar_sensor+0x74>
			counter_seguridad = 0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <activar_sensor+0x80>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff ff87 	bl	80009f4 <setEstadoSeguridad>
		}

	}
}
 8000ae6:	e7ff      	b.n	8000ae8 <activar_sensor+0x74>
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000b0 	.word	0x200000b0
 8000af0:	200000b8 	.word	0x200000b8
 8000af4:	200000bc 	.word	0x200000bc
 8000af8:	40020000 	.word	0x40020000

08000afc <getEstadoSeguridad>:

int getEstadoSeguridad() {
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <getEstadoSeguridad+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000b0 	.word	0x200000b0

08000b14 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if (getEstadoSeguridad() == 0) {
 8000b18:	f7ff fff0 	bl	8000afc <getEstadoSeguridad>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff ff66 	bl	80009f4 <setEstadoSeguridad>
	} else {
		setEstadoSeguridad(0);
	}
}
 8000b28:	e002      	b.n	8000b30 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ff62 	bl	80009f4 <setEstadoSeguridad>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <intruso_detectado>:

void intruso_detectado() {
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	if (estado_seguridad == 2) {
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <intruso_detectado+0x1c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d102      	bne.n	8000b46 <intruso_detectado+0x12>
		alarma_seguridad = 1;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <intruso_detectado+0x20>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
	}
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000b0 	.word	0x200000b0
 8000b54:	200000b4 	.word	0x200000b4

08000b58 <sonar_alarma>:

void sonar_alarma() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	if(estado_seguridad == 2 && alarma_seguridad == 1){
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <sonar_alarma+0x24>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d109      	bne.n	8000b78 <sonar_alarma+0x20>
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <sonar_alarma+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <sonar_alarma+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <sonar_alarma+0x2c>)
 8000b74:	f002 fede 	bl	8003934 <HAL_GPIO_WritePin>
		}
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000b0 	.word	0x200000b0
 8000b80:	200000b4 	.word	0x200000b4
 8000b84:	40020000 	.word	0x40020000

08000b88 <seguridad>:

void seguridad() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	activar_sensor();
 8000b8c:	f7ff ff72 	bl	8000a74 <activar_sensor>
	sonar_alarma();
 8000b90:	f7ff ffe2 	bl	8000b58 <sonar_alarma>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setEstadoClima>:
int temperatura_objetivo=20;
int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0, counter_clima=0;

void setEstadoClima(int n){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <setEstadoClima+0x80>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <setEstadoClima+0x80>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <setEstadoClima+0x84>)
 8000bb6:	f002 febd 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <setEstadoClima+0x84>)
 8000bc2:	f002 feb7 	bl	8003934 <HAL_GPIO_WritePin>
 8000bc6:	e020      	b.n	8000c0a <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <setEstadoClima+0x80>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10c      	bne.n	8000bea <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <setEstadoClima+0x84>)
 8000bd8:	f002 feac 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <setEstadoClima+0x84>)
 8000be4:	f002 fea6 	bl	8003934 <HAL_GPIO_WritePin>
 8000be8:	e00f      	b.n	8000c0a <setEstadoClima+0x72>
	}else if(estado_clima==2){
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <setEstadoClima+0x80>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d10b      	bne.n	8000c0a <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <setEstadoClima+0x84>)
 8000bfa:	f002 fe9b 	bl	8003934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <setEstadoClima+0x84>)
 8000c06:	f002 fe95 	bl	8003934 <HAL_GPIO_WritePin>
	}
	actualizar_pantalla(5);
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f000 ff7a 	bl	8001b04 <actualizar_pantalla>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000f4 	.word	0x200000f4
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <getEstadoClima>:

int getEstadoClima(){
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	return estado_clima;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <getEstadoClima+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000f4 	.word	0x200000f4

08000c38 <cambiarEstadoClima>:

void cambiarEstadoClima(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	controldelclima=0;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <cambiarEstadoClima+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ffa4 	bl	8000b98 <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 8000c50:	e00e      	b.n	8000c70 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d103      	bne.n	8000c62 <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff ff9c 	bl	8000b98 <setEstadoClima>
}
 8000c60:	e006      	b.n	8000c70 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <cambiarEstadoClima+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d102      	bne.n	8000c70 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ff94 	bl	8000b98 <setEstadoClima>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000cc 	.word	0x200000cc
 8000c78:	200000f4 	.word	0x200000f4

08000c7c <setControlClima>:

void setControlClima(int c){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	controldelclima=c;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <setControlClima+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
	if(c==0){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <setControlClima+0x1a>
		setEstadoClima(0);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ff81 	bl	8000b98 <setEstadoClima>
	}
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000cc 	.word	0x200000cc

08000ca4 <getControlClima>:

int getControlClima(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return controldelclima;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <getControlClima+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200000cc 	.word	0x200000cc

08000cbc <cambiarControlClima>:

void cambiarControlClima(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d103      	bne.n	8000cd0 <cambiarControlClima+0x14>
		controldelclima=1;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e005      	b.n	8000cdc <cambiarControlClima+0x20>
	}else{
		controldelclima=0;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <cambiarControlClima+0x2c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		setEstadoClima(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff5e 	bl	8000b98 <setEstadoClima>
	}
	actualizar_pantalla(5);
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f000 ff11 	bl	8001b04 <actualizar_pantalla>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000cc 	.word	0x200000cc

08000cec <delay>:

int getTemperaturaObjetivo(){
	return temperatura_objetivo;
}

void delay(uint16_t time) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <delay+0x30>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 8000cfe:	bf00      	nop
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <delay+0x30>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d3f9      	bcc.n	8000d00 <delay+0x14>
		;
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200001d8 	.word	0x200001d8

08000d20 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f002 fc3c 	bl	80035cc <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f002 fc1e 	bl	80035cc <HAL_GPIO_Init>
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <DHT11_Start+0x3c>)
 8000da0:	f7ff ffbe 	bl	8000d20 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <DHT11_Start+0x3c>)
 8000daa:	f002 fdc3 	bl	8003934 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000dae:	f244 6050 	movw	r0, #18000	; 0x4650
 8000db2:	f7ff ff9b 	bl	8000cec <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000db6:	2201      	movs	r2, #1
 8000db8:	2104      	movs	r1, #4
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <DHT11_Start+0x3c>)
 8000dbc:	f002 fdba 	bl	8003934 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f7ff ff93 	bl	8000cec <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DHT11_Start+0x3c>)
 8000dca:	f7ff ffc7 	bl	8000d5c <Set_Pin_Input>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f7ff ff82 	bl	8000cec <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000de8:	2104      	movs	r1, #4
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000dec:	f002 fd8a 	bl	8003904 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10e      	bne.n	8000e14 <DHT11_Check_Response+0x3c>
		delay(80);
 8000df6:	2050      	movs	r0, #80	; 0x50
 8000df8:	f7ff ff78 	bl	8000cec <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000e00:	f002 fd80 	bl	8003904 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <DHT11_Check_Response+0x38>
			Response = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8000e10:	23ff      	movs	r3, #255	; 0xff
 8000e12:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e14:	bf00      	nop
 8000e16:	2104      	movs	r1, #4
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <DHT11_Check_Response+0x58>)
 8000e1a:	f002 fd73 	bl	8003904 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f8      	bne.n	8000e16 <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020000 	.word	0x40020000

08000e34 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	e037      	b.n	8000eb0 <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e40:	bf00      	nop
 8000e42:	2104      	movs	r1, #4
 8000e44:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <DHT11_Read+0x8c>)
 8000e46:	f002 fd5d 	bl	8003904 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f8      	beq.n	8000e42 <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f7ff ff4b 	bl	8000cec <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e56:	2104      	movs	r1, #4
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <DHT11_Read+0x8c>)
 8000e5a:	f002 fd53 	bl	8003904 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10e      	bne.n	8000e82 <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	e00b      	b.n	8000e9a <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	f1c3 0307 	rsb	r3, r3, #7
 8000e88:	2201      	movs	r2, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e9a:	bf00      	nop
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <DHT11_Read+0x8c>)
 8000ea0:	f002 fd30 	bl	8003904 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f8      	bne.n	8000e9c <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	71bb      	strb	r3, [r7, #6]
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d9c4      	bls.n	8000e40 <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <lectura_dht11>:

void lectura_dht11() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000ec8:	f7ff ff66 	bl	8000d98 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000ecc:	f7ff ff84 	bl	8000dd8 <DHT11_Check_Response>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <lectura_dht11+0x8c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 8000ed8:	f7ff ffac 	bl	8000e34 <DHT11_Read>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <lectura_dht11+0x90>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8000ee4:	f7ff ffa6 	bl	8000e34 <DHT11_Read>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <lectura_dht11+0x94>)
 8000eee:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8000ef0:	f7ff ffa0 	bl	8000e34 <DHT11_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <lectura_dht11+0x98>)
 8000efa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8000efc:	f7ff ff9a 	bl	8000e34 <DHT11_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <lectura_dht11+0x9c>)
 8000f06:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000f08:	f7ff ff94 	bl	8000e34 <DHT11_Read>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <lectura_dht11+0xa0>)
 8000f12:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <lectura_dht11+0x98>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <lectura_dht11+0xa4>)
 8000f1c:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <lectura_dht11+0x90>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <lectura_dht11+0xa8>)
 8000f26:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <lectura_dht11+0xa4>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <lectura_dht11+0xac>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <lectura_dht11+0xa8>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <lectura_dht11+0xb0>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000c8 	.word	0x200000c8
 8000f54:	20000150 	.word	0x20000150
 8000f58:	200001d5 	.word	0x200001d5
 8000f5c:	200001d4 	.word	0x200001d4
 8000f60:	200002ae 	.word	0x200002ae
 8000f64:	200002ac 	.word	0x200002ac
 8000f68:	20000154 	.word	0x20000154
 8000f6c:	20000152 	.word	0x20000152
 8000f70:	200000c0 	.word	0x200000c0
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <clima>:

void clima(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(counter_clima>1000&&controldelclima==1){
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <clima+0x90>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f84:	d935      	bls.n	8000ff2 <clima+0x7a>
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <clima+0x94>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d131      	bne.n	8000ff2 <clima+0x7a>
		counter_clima=0;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <clima+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 8000f94:	f001 fd6a 	bl	8002a6c <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <clima+0x98>)
 8000f9c:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 8000f9e:	f7ff ff91 	bl	8000ec4 <lectura_dht11>
		//actualizar_pantalla(6);
			if(Temperature>temperatura_objetivo){
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <clima+0x9c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <clima+0xa0>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d50c      	bpl.n	8000fd8 <clima+0x60>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <clima+0xa4>)
 8000fc6:	f002 fcb5 	bl	8003934 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <clima+0xa4>)
 8000fd2:	f002 fcaf 	bl	8003934 <HAL_GPIO_WritePin>
			if(Temperature>temperatura_objetivo){
 8000fd6:	e015      	b.n	8001004 <clima+0x8c>
			}else{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <clima+0xa4>)
 8000fe0:	f002 fca8 	bl	8003934 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <clima+0xa4>)
 8000fec:	f002 fca2 	bl	8003934 <HAL_GPIO_WritePin>
			if(Temperature>temperatura_objetivo){
 8000ff0:	e008      	b.n	8001004 <clima+0x8c>
			}
	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
 8000ff2:	f001 fd3b 	bl	8002a6c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <clima+0x98>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	4a02      	ldr	r2, [pc, #8]	; (8001008 <clima+0x90>)
 8001000:	6013      	str	r3, [r2, #0]
	}

}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200000d4 	.word	0x200000d4
 800100c:	200000cc 	.word	0x200000cc
 8001010:	200000d0 	.word	0x200000d0
 8001014:	2000000c 	.word	0x2000000c
 8001018:	200000c0 	.word	0x200000c0
 800101c:	40020c00 	.word	0x40020c00

08001020 <bluetooth>:
 for (int i = 0; i < 50; i++) {
 rx_buffer[0] = '\0';
 }
 }
 */
void bluetooth(char recibido[]) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (strcmp(recibido, "a") == 0) {
 8001028:	49b0      	ldr	r1, [pc, #704]	; (80012ec <bluetooth+0x2cc>)
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff f8d0 	bl	80001d0 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d121      	bne.n	800107a <bluetooth+0x5a>
		if (getEstadoLuces() == 1)
 8001036:	f7ff fafb 	bl	8000630 <getEstadoLuces>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10c      	bne.n	800105a <bluetooth+0x3a>
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
					sprintf(tx_buffer, "Las luces ya estaban activadas\n"),
 8001040:	49ab      	ldr	r1, [pc, #684]	; (80012f0 <bluetooth+0x2d0>)
 8001042:	48ac      	ldr	r0, [pc, #688]	; (80012f4 <bluetooth+0x2d4>)
 8001044:	f005 f898 	bl	8006178 <siprintf>
 8001048:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800104a:	b29a      	uxth	r2, r3
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	49a8      	ldr	r1, [pc, #672]	; (80012f4 <bluetooth+0x2d4>)
 8001052:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <bluetooth+0x2d8>)
 8001054:	f004 f8e3 	bl	800521e <HAL_UART_Transmit>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
			setEstadoSeguridad(0);
		}

	}
}
 8001058:	e2cd      	b.n	80015f6 <bluetooth+0x5d6>
			setLuces(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fa9c 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces activadas\n"), 500);
 8001060:	49a6      	ldr	r1, [pc, #664]	; (80012fc <bluetooth+0x2dc>)
 8001062:	48a4      	ldr	r0, [pc, #656]	; (80012f4 <bluetooth+0x2d4>)
 8001064:	f005 f888 	bl	8006178 <siprintf>
 8001068:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800106a:	b29a      	uxth	r2, r3
 800106c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001070:	49a0      	ldr	r1, [pc, #640]	; (80012f4 <bluetooth+0x2d4>)
 8001072:	48a1      	ldr	r0, [pc, #644]	; (80012f8 <bluetooth+0x2d8>)
 8001074:	f004 f8d3 	bl	800521e <HAL_UART_Transmit>
}
 8001078:	e2bd      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "b") == 0) {
 800107a:	49a1      	ldr	r1, [pc, #644]	; (8001300 <bluetooth+0x2e0>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f8a7 	bl	80001d0 <strcmp>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d121      	bne.n	80010cc <bluetooth+0xac>
		if (getEstadoLuces() == 0)
 8001088:	f7ff fad2 	bl	8000630 <getEstadoLuces>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <bluetooth+0x8c>
					sprintf(tx_buffer, "Luces ya estaban desactivadas\n"), 500);
 8001092:	499c      	ldr	r1, [pc, #624]	; (8001304 <bluetooth+0x2e4>)
 8001094:	4897      	ldr	r0, [pc, #604]	; (80012f4 <bluetooth+0x2d4>)
 8001096:	f005 f86f 	bl	8006178 <siprintf>
 800109a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800109c:	b29a      	uxth	r2, r3
 800109e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a2:	4994      	ldr	r1, [pc, #592]	; (80012f4 <bluetooth+0x2d4>)
 80010a4:	4894      	ldr	r0, [pc, #592]	; (80012f8 <bluetooth+0x2d8>)
 80010a6:	f004 f8ba 	bl	800521e <HAL_UART_Transmit>
}
 80010aa:	e2a4      	b.n	80015f6 <bluetooth+0x5d6>
			setLuces(0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fa73 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces desactivadas\n"), 500);
 80010b2:	4995      	ldr	r1, [pc, #596]	; (8001308 <bluetooth+0x2e8>)
 80010b4:	488f      	ldr	r0, [pc, #572]	; (80012f4 <bluetooth+0x2d4>)
 80010b6:	f005 f85f 	bl	8006178 <siprintf>
 80010ba:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c2:	498c      	ldr	r1, [pc, #560]	; (80012f4 <bluetooth+0x2d4>)
 80010c4:	488c      	ldr	r0, [pc, #560]	; (80012f8 <bluetooth+0x2d8>)
 80010c6:	f004 f8aa 	bl	800521e <HAL_UART_Transmit>
}
 80010ca:	e294      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "c") == 0) {
 80010cc:	498f      	ldr	r1, [pc, #572]	; (800130c <bluetooth+0x2ec>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f87e 	bl	80001d0 <strcmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d121      	bne.n	800111e <bluetooth+0xfe>
		if (getEstadoLuces() == 2)
 80010da:	f7ff faa9 	bl	8000630 <getEstadoLuces>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d10c      	bne.n	80010fe <bluetooth+0xde>
					sprintf(tx_buffer, "Luces ya estaban en modo automatico\n"),
 80010e4:	498a      	ldr	r1, [pc, #552]	; (8001310 <bluetooth+0x2f0>)
 80010e6:	4883      	ldr	r0, [pc, #524]	; (80012f4 <bluetooth+0x2d4>)
 80010e8:	f005 f846 	bl	8006178 <siprintf>
 80010ec:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f4:	497f      	ldr	r1, [pc, #508]	; (80012f4 <bluetooth+0x2d4>)
 80010f6:	4880      	ldr	r0, [pc, #512]	; (80012f8 <bluetooth+0x2d8>)
 80010f8:	f004 f891 	bl	800521e <HAL_UART_Transmit>
}
 80010fc:	e27b      	b.n	80015f6 <bluetooth+0x5d6>
			setLuces(2);
 80010fe:	2002      	movs	r0, #2
 8001100:	f7ff fa4a 	bl	8000598 <setLuces>
					sprintf(tx_buffer, "Luces en modo automatico\n"), 500);
 8001104:	4983      	ldr	r1, [pc, #524]	; (8001314 <bluetooth+0x2f4>)
 8001106:	487b      	ldr	r0, [pc, #492]	; (80012f4 <bluetooth+0x2d4>)
 8001108:	f005 f836 	bl	8006178 <siprintf>
 800110c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800110e:	b29a      	uxth	r2, r3
 8001110:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001114:	4977      	ldr	r1, [pc, #476]	; (80012f4 <bluetooth+0x2d4>)
 8001116:	4878      	ldr	r0, [pc, #480]	; (80012f8 <bluetooth+0x2d8>)
 8001118:	f004 f881 	bl	800521e <HAL_UART_Transmit>
}
 800111c:	e26b      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "d") == 0) {
 800111e:	497e      	ldr	r1, [pc, #504]	; (8001318 <bluetooth+0x2f8>)
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff f855 	bl	80001d0 <strcmp>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d121      	bne.n	8001170 <bluetooth+0x150>
		if (getEstadoAnteriorRiego() == 0)
 800112c:	f7ff fc34 	bl	8000998 <getEstadoAnteriorRiego>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <bluetooth+0x130>
					sprintf(tx_buffer, "Ya estabas regando\n"), 500);
 8001136:	4979      	ldr	r1, [pc, #484]	; (800131c <bluetooth+0x2fc>)
 8001138:	486e      	ldr	r0, [pc, #440]	; (80012f4 <bluetooth+0x2d4>)
 800113a:	f005 f81d 	bl	8006178 <siprintf>
 800113e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001140:	b29a      	uxth	r2, r3
 8001142:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001146:	496b      	ldr	r1, [pc, #428]	; (80012f4 <bluetooth+0x2d4>)
 8001148:	486b      	ldr	r0, [pc, #428]	; (80012f8 <bluetooth+0x2d8>)
 800114a:	f004 f868 	bl	800521e <HAL_UART_Transmit>
}
 800114e:	e252      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Abriendo electrovalvula...\n"), 500);
 8001150:	4973      	ldr	r1, [pc, #460]	; (8001320 <bluetooth+0x300>)
 8001152:	4868      	ldr	r0, [pc, #416]	; (80012f4 <bluetooth+0x2d4>)
 8001154:	f005 f810 	bl	8006178 <siprintf>
 8001158:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800115a:	b29a      	uxth	r2, r3
 800115c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001160:	4964      	ldr	r1, [pc, #400]	; (80012f4 <bluetooth+0x2d4>)
 8001162:	4865      	ldr	r0, [pc, #404]	; (80012f8 <bluetooth+0x2d8>)
 8001164:	f004 f85b 	bl	800521e <HAL_UART_Transmit>
			setEstadoRiego(0);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fba9 	bl	80008c0 <setEstadoRiego>
}
 800116e:	e242      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "e") == 0) {
 8001170:	496c      	ldr	r1, [pc, #432]	; (8001324 <bluetooth+0x304>)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f82c 	bl	80001d0 <strcmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d121      	bne.n	80011c2 <bluetooth+0x1a2>
		if (getEstadoAnteriorRiego() == 1)
 800117e:	f7ff fc0b 	bl	8000998 <getEstadoAnteriorRiego>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10c      	bne.n	80011a2 <bluetooth+0x182>
					sprintf(tx_buffer, "La electrovalvula ya estaba cerrada\n"),
 8001188:	4967      	ldr	r1, [pc, #412]	; (8001328 <bluetooth+0x308>)
 800118a:	485a      	ldr	r0, [pc, #360]	; (80012f4 <bluetooth+0x2d4>)
 800118c:	f004 fff4 	bl	8006178 <siprintf>
 8001190:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001192:	b29a      	uxth	r2, r3
 8001194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001198:	4956      	ldr	r1, [pc, #344]	; (80012f4 <bluetooth+0x2d4>)
 800119a:	4857      	ldr	r0, [pc, #348]	; (80012f8 <bluetooth+0x2d8>)
 800119c:	f004 f83f 	bl	800521e <HAL_UART_Transmit>
}
 80011a0:	e229      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Cerrando electrovalvula...\n"), 500);
 80011a2:	4962      	ldr	r1, [pc, #392]	; (800132c <bluetooth+0x30c>)
 80011a4:	4853      	ldr	r0, [pc, #332]	; (80012f4 <bluetooth+0x2d4>)
 80011a6:	f004 ffe7 	bl	8006178 <siprintf>
 80011aa:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011b2:	4950      	ldr	r1, [pc, #320]	; (80012f4 <bluetooth+0x2d4>)
 80011b4:	4850      	ldr	r0, [pc, #320]	; (80012f8 <bluetooth+0x2d8>)
 80011b6:	f004 f832 	bl	800521e <HAL_UART_Transmit>
			setEstadoRiego(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fb80 	bl	80008c0 <setEstadoRiego>
}
 80011c0:	e219      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "f") == 0) {
 80011c2:	495b      	ldr	r1, [pc, #364]	; (8001330 <bluetooth+0x310>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff f803 	bl	80001d0 <strcmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d121      	bne.n	8001214 <bluetooth+0x1f4>
		if (getEstadoPersianas() == 1)
 80011d0:	f7ff fb1e 	bl	8000810 <getEstadoPersianas>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <bluetooth+0x1d4>
					sprintf(tx_buffer, "Ya se esta subiendo la persiana\n"),
 80011da:	4956      	ldr	r1, [pc, #344]	; (8001334 <bluetooth+0x314>)
 80011dc:	4845      	ldr	r0, [pc, #276]	; (80012f4 <bluetooth+0x2d4>)
 80011de:	f004 ffcb 	bl	8006178 <siprintf>
 80011e2:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ea:	4942      	ldr	r1, [pc, #264]	; (80012f4 <bluetooth+0x2d4>)
 80011ec:	4842      	ldr	r0, [pc, #264]	; (80012f8 <bluetooth+0x2d8>)
 80011ee:	f004 f816 	bl	800521e <HAL_UART_Transmit>
}
 80011f2:	e200      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Subiendo persiana...\n"), 500);
 80011f4:	4950      	ldr	r1, [pc, #320]	; (8001338 <bluetooth+0x318>)
 80011f6:	483f      	ldr	r0, [pc, #252]	; (80012f4 <bluetooth+0x2d4>)
 80011f8:	f004 ffbe 	bl	8006178 <siprintf>
 80011fc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001204:	493b      	ldr	r1, [pc, #236]	; (80012f4 <bluetooth+0x2d4>)
 8001206:	483c      	ldr	r0, [pc, #240]	; (80012f8 <bluetooth+0x2d8>)
 8001208:	f004 f809 	bl	800521e <HAL_UART_Transmit>
			setEstadoPersianas(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fab5 	bl	800077c <setEstadoPersianas>
}
 8001212:	e1f0      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "g") == 0) {
 8001214:	4949      	ldr	r1, [pc, #292]	; (800133c <bluetooth+0x31c>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7fe ffda 	bl	80001d0 <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d121      	bne.n	8001266 <bluetooth+0x246>
		if (getEstadoPersianas() == 2)
 8001222:	f7ff faf5 	bl	8000810 <getEstadoPersianas>
 8001226:	4603      	mov	r3, r0
 8001228:	2b02      	cmp	r3, #2
 800122a:	d10c      	bne.n	8001246 <bluetooth+0x226>
					sprintf(tx_buffer, "Ya se esta bajando la persiana\n"),
 800122c:	4944      	ldr	r1, [pc, #272]	; (8001340 <bluetooth+0x320>)
 800122e:	4831      	ldr	r0, [pc, #196]	; (80012f4 <bluetooth+0x2d4>)
 8001230:	f004 ffa2 	bl	8006178 <siprintf>
 8001234:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800123c:	492d      	ldr	r1, [pc, #180]	; (80012f4 <bluetooth+0x2d4>)
 800123e:	482e      	ldr	r0, [pc, #184]	; (80012f8 <bluetooth+0x2d8>)
 8001240:	f003 ffed 	bl	800521e <HAL_UART_Transmit>
}
 8001244:	e1d7      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Bajando persiana...\n"), 500);
 8001246:	493f      	ldr	r1, [pc, #252]	; (8001344 <bluetooth+0x324>)
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <bluetooth+0x2d4>)
 800124a:	f004 ff95 	bl	8006178 <siprintf>
 800124e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001250:	b29a      	uxth	r2, r3
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	4927      	ldr	r1, [pc, #156]	; (80012f4 <bluetooth+0x2d4>)
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <bluetooth+0x2d8>)
 800125a:	f003 ffe0 	bl	800521e <HAL_UART_Transmit>
			setEstadoPersianas(2);
 800125e:	2002      	movs	r0, #2
 8001260:	f7ff fa8c 	bl	800077c <setEstadoPersianas>
}
 8001264:	e1c7      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "h") == 0) {
 8001266:	4938      	ldr	r1, [pc, #224]	; (8001348 <bluetooth+0x328>)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ffb1 	bl	80001d0 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d121      	bne.n	80012b8 <bluetooth+0x298>
		if (getEstadoPersianas() == 0)
 8001274:	f7ff facc 	bl	8000810 <getEstadoPersianas>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <bluetooth+0x278>
					sprintf(tx_buffer, "La persiana ya estaba parada\n"), 500);
 800127e:	4933      	ldr	r1, [pc, #204]	; (800134c <bluetooth+0x32c>)
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <bluetooth+0x2d4>)
 8001282:	f004 ff79 	bl	8006178 <siprintf>
 8001286:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128e:	4919      	ldr	r1, [pc, #100]	; (80012f4 <bluetooth+0x2d4>)
 8001290:	4819      	ldr	r0, [pc, #100]	; (80012f8 <bluetooth+0x2d8>)
 8001292:	f003 ffc4 	bl	800521e <HAL_UART_Transmit>
}
 8001296:	e1ae      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Parando persiana...\n"), 500);
 8001298:	492d      	ldr	r1, [pc, #180]	; (8001350 <bluetooth+0x330>)
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <bluetooth+0x2d4>)
 800129c:	f004 ff6c 	bl	8006178 <siprintf>
 80012a0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a8:	4912      	ldr	r1, [pc, #72]	; (80012f4 <bluetooth+0x2d4>)
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <bluetooth+0x2d8>)
 80012ac:	f003 ffb7 	bl	800521e <HAL_UART_Transmit>
			setEstadoPersianas(0);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fa63 	bl	800077c <setEstadoPersianas>
}
 80012b6:	e19e      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "i") == 0) {
 80012b8:	4926      	ldr	r1, [pc, #152]	; (8001354 <bluetooth+0x334>)
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7fe ff88 	bl	80001d0 <strcmp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d15a      	bne.n	800137c <bluetooth+0x35c>
		if(getEstadoClima()==1){
 80012c6:	f7ff fcab 	bl	8000c20 <getEstadoClima>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d145      	bne.n	800135c <bluetooth+0x33c>
							sprintf(tx_buffer, "La calefaccion ya estaba encendida\n"), 500);
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <bluetooth+0x338>)
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <bluetooth+0x2d4>)
 80012d4:	f004 ff50 	bl	8006178 <siprintf>
 80012d8:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <bluetooth+0x2d4>)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <bluetooth+0x2d8>)
 80012e4:	f003 ff9b 	bl	800521e <HAL_UART_Transmit>
}
 80012e8:	e185      	b.n	80015f6 <bluetooth+0x5d6>
 80012ea:	bf00      	nop
 80012ec:	08006a50 	.word	0x08006a50
 80012f0:	08006a54 	.word	0x08006a54
 80012f4:	20000158 	.word	0x20000158
 80012f8:	20000268 	.word	0x20000268
 80012fc:	08006a74 	.word	0x08006a74
 8001300:	08006a88 	.word	0x08006a88
 8001304:	08006a8c 	.word	0x08006a8c
 8001308:	08006aac 	.word	0x08006aac
 800130c:	08006ac0 	.word	0x08006ac0
 8001310:	08006ac4 	.word	0x08006ac4
 8001314:	08006aec 	.word	0x08006aec
 8001318:	08006b08 	.word	0x08006b08
 800131c:	08006b0c 	.word	0x08006b0c
 8001320:	08006b20 	.word	0x08006b20
 8001324:	08006b3c 	.word	0x08006b3c
 8001328:	08006b40 	.word	0x08006b40
 800132c:	08006b68 	.word	0x08006b68
 8001330:	08006b84 	.word	0x08006b84
 8001334:	08006b88 	.word	0x08006b88
 8001338:	08006bac 	.word	0x08006bac
 800133c:	08006bc4 	.word	0x08006bc4
 8001340:	08006bc8 	.word	0x08006bc8
 8001344:	08006be8 	.word	0x08006be8
 8001348:	08006c00 	.word	0x08006c00
 800134c:	08006c04 	.word	0x08006c04
 8001350:	08006c24 	.word	0x08006c24
 8001354:	08006c3c 	.word	0x08006c3c
 8001358:	08006c40 	.word	0x08006c40
			setEstadoClima(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff fc1b 	bl	8000b98 <setEstadoClima>
					sprintf(tx_buffer, "Encendiendo calefaccion...\n"), 500);
 8001362:	49a7      	ldr	r1, [pc, #668]	; (8001600 <bluetooth+0x5e0>)
 8001364:	48a7      	ldr	r0, [pc, #668]	; (8001604 <bluetooth+0x5e4>)
 8001366:	f004 ff07 	bl	8006178 <siprintf>
 800136a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800136c:	b29a      	uxth	r2, r3
 800136e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001372:	49a4      	ldr	r1, [pc, #656]	; (8001604 <bluetooth+0x5e4>)
 8001374:	48a4      	ldr	r0, [pc, #656]	; (8001608 <bluetooth+0x5e8>)
 8001376:	f003 ff52 	bl	800521e <HAL_UART_Transmit>
}
 800137a:	e13c      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "j") == 0) {
 800137c:	49a3      	ldr	r1, [pc, #652]	; (800160c <bluetooth+0x5ec>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7fe ff26 	bl	80001d0 <strcmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d121      	bne.n	80013ce <bluetooth+0x3ae>
		if(getEstadoClima()==2){
 800138a:	f7ff fc49 	bl	8000c20 <getEstadoClima>
 800138e:	4603      	mov	r3, r0
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10c      	bne.n	80013ae <bluetooth+0x38e>
									sprintf(tx_buffer, "El ventilador ya estaba encendido\n"), 500);
 8001394:	499e      	ldr	r1, [pc, #632]	; (8001610 <bluetooth+0x5f0>)
 8001396:	489b      	ldr	r0, [pc, #620]	; (8001604 <bluetooth+0x5e4>)
 8001398:	f004 feee 	bl	8006178 <siprintf>
 800139c:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a4:	4997      	ldr	r1, [pc, #604]	; (8001604 <bluetooth+0x5e4>)
 80013a6:	4898      	ldr	r0, [pc, #608]	; (8001608 <bluetooth+0x5e8>)
 80013a8:	f003 ff39 	bl	800521e <HAL_UART_Transmit>
}
 80013ac:	e123      	b.n	80015f6 <bluetooth+0x5d6>
					setEstadoClima(2);
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff fbf2 	bl	8000b98 <setEstadoClima>
							sprintf(tx_buffer, "Encendiendo ventilador...\n"), 500);
 80013b4:	4997      	ldr	r1, [pc, #604]	; (8001614 <bluetooth+0x5f4>)
 80013b6:	4893      	ldr	r0, [pc, #588]	; (8001604 <bluetooth+0x5e4>)
 80013b8:	f004 fede 	bl	8006178 <siprintf>
 80013bc:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013c4:	498f      	ldr	r1, [pc, #572]	; (8001604 <bluetooth+0x5e4>)
 80013c6:	4890      	ldr	r0, [pc, #576]	; (8001608 <bluetooth+0x5e8>)
 80013c8:	f003 ff29 	bl	800521e <HAL_UART_Transmit>
}
 80013cc:	e113      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "k") == 0) {
 80013ce:	4992      	ldr	r1, [pc, #584]	; (8001618 <bluetooth+0x5f8>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d133      	bne.n	8001444 <bluetooth+0x424>
		if (getEstadoClima() == 1)
 80013dc:	f7ff fc20 	bl	8000c20 <getEstadoClima>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10c      	bne.n	8001400 <bluetooth+0x3e0>
					sprintf(tx_buffer, "Apagando calefaccion\n"), 500);
 80013e6:	498d      	ldr	r1, [pc, #564]	; (800161c <bluetooth+0x5fc>)
 80013e8:	4886      	ldr	r0, [pc, #536]	; (8001604 <bluetooth+0x5e4>)
 80013ea:	f004 fec5 	bl	8006178 <siprintf>
 80013ee:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013f6:	4983      	ldr	r1, [pc, #524]	; (8001604 <bluetooth+0x5e4>)
 80013f8:	4883      	ldr	r0, [pc, #524]	; (8001608 <bluetooth+0x5e8>)
 80013fa:	f003 ff10 	bl	800521e <HAL_UART_Transmit>
 80013fe:	e01d      	b.n	800143c <bluetooth+0x41c>
		else if (getEstadoClima() == 2)
 8001400:	f7ff fc0e 	bl	8000c20 <getEstadoClima>
 8001404:	4603      	mov	r3, r0
 8001406:	2b02      	cmp	r3, #2
 8001408:	d10c      	bne.n	8001424 <bluetooth+0x404>
					sprintf(tx_buffer, "Apagando ventilador\n"), 500);
 800140a:	4985      	ldr	r1, [pc, #532]	; (8001620 <bluetooth+0x600>)
 800140c:	487d      	ldr	r0, [pc, #500]	; (8001604 <bluetooth+0x5e4>)
 800140e:	f004 feb3 	bl	8006178 <siprintf>
 8001412:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001414:	b29a      	uxth	r2, r3
 8001416:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800141a:	497a      	ldr	r1, [pc, #488]	; (8001604 <bluetooth+0x5e4>)
 800141c:	487a      	ldr	r0, [pc, #488]	; (8001608 <bluetooth+0x5e8>)
 800141e:	f003 fefe 	bl	800521e <HAL_UART_Transmit>
 8001422:	e00b      	b.n	800143c <bluetooth+0x41c>
					sprintf(tx_buffer,
 8001424:	497f      	ldr	r1, [pc, #508]	; (8001624 <bluetooth+0x604>)
 8001426:	4877      	ldr	r0, [pc, #476]	; (8001604 <bluetooth+0x5e4>)
 8001428:	f004 fea6 	bl	8006178 <siprintf>
 800142c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800142e:	b29a      	uxth	r2, r3
 8001430:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001434:	4973      	ldr	r1, [pc, #460]	; (8001604 <bluetooth+0x5e4>)
 8001436:	4874      	ldr	r0, [pc, #464]	; (8001608 <bluetooth+0x5e8>)
 8001438:	f003 fef1 	bl	800521e <HAL_UART_Transmit>
		setEstadoClima(0);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fbab 	bl	8000b98 <setEstadoClima>
}
 8001442:	e0d8      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "l") == 0) {
 8001444:	4978      	ldr	r1, [pc, #480]	; (8001628 <bluetooth+0x608>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7fe fec2 	bl	80001d0 <strcmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d121      	bne.n	8001496 <bluetooth+0x476>
		if (getControlClima() == 1)
 8001452:	f7ff fc27 	bl	8000ca4 <getControlClima>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d10c      	bne.n	8001476 <bluetooth+0x456>
					sprintf(tx_buffer, "Termostato ya estaba activado\n"), 500);
 800145c:	4973      	ldr	r1, [pc, #460]	; (800162c <bluetooth+0x60c>)
 800145e:	4869      	ldr	r0, [pc, #420]	; (8001604 <bluetooth+0x5e4>)
 8001460:	f004 fe8a 	bl	8006178 <siprintf>
 8001464:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001466:	b29a      	uxth	r2, r3
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	4965      	ldr	r1, [pc, #404]	; (8001604 <bluetooth+0x5e4>)
 800146e:	4866      	ldr	r0, [pc, #408]	; (8001608 <bluetooth+0x5e8>)
 8001470:	f003 fed5 	bl	800521e <HAL_UART_Transmit>
}
 8001474:	e0bf      	b.n	80015f6 <bluetooth+0x5d6>
			setControlClima(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fc00 	bl	8000c7c <setControlClima>
					sprintf(tx_buffer, "Termostato activado\n"), 500);
 800147c:	496c      	ldr	r1, [pc, #432]	; (8001630 <bluetooth+0x610>)
 800147e:	4861      	ldr	r0, [pc, #388]	; (8001604 <bluetooth+0x5e4>)
 8001480:	f004 fe7a 	bl	8006178 <siprintf>
 8001484:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001486:	b29a      	uxth	r2, r3
 8001488:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800148c:	495d      	ldr	r1, [pc, #372]	; (8001604 <bluetooth+0x5e4>)
 800148e:	485e      	ldr	r0, [pc, #376]	; (8001608 <bluetooth+0x5e8>)
 8001490:	f003 fec5 	bl	800521e <HAL_UART_Transmit>
}
 8001494:	e0af      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "m") == 0) {
 8001496:	4967      	ldr	r1, [pc, #412]	; (8001634 <bluetooth+0x614>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7fe fe99 	bl	80001d0 <strcmp>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d121      	bne.n	80014e8 <bluetooth+0x4c8>
		if (getControlClima() == 0)
 80014a4:	f7ff fbfe 	bl	8000ca4 <getControlClima>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <bluetooth+0x4a8>
					sprintf(tx_buffer, "Termostato ya estaba desactivado\n"),
 80014ae:	4962      	ldr	r1, [pc, #392]	; (8001638 <bluetooth+0x618>)
 80014b0:	4854      	ldr	r0, [pc, #336]	; (8001604 <bluetooth+0x5e4>)
 80014b2:	f004 fe61 	bl	8006178 <siprintf>
 80014b6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014be:	4951      	ldr	r1, [pc, #324]	; (8001604 <bluetooth+0x5e4>)
 80014c0:	4851      	ldr	r0, [pc, #324]	; (8001608 <bluetooth+0x5e8>)
 80014c2:	f003 feac 	bl	800521e <HAL_UART_Transmit>
}
 80014c6:	e096      	b.n	80015f6 <bluetooth+0x5d6>
			setControlClima(0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fbd7 	bl	8000c7c <setControlClima>
					sprintf(tx_buffer, "Termostato desactivado\n"), 500);
 80014ce:	495b      	ldr	r1, [pc, #364]	; (800163c <bluetooth+0x61c>)
 80014d0:	484c      	ldr	r0, [pc, #304]	; (8001604 <bluetooth+0x5e4>)
 80014d2:	f004 fe51 	bl	8006178 <siprintf>
 80014d6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014de:	4949      	ldr	r1, [pc, #292]	; (8001604 <bluetooth+0x5e4>)
 80014e0:	4849      	ldr	r0, [pc, #292]	; (8001608 <bluetooth+0x5e8>)
 80014e2:	f003 fe9c 	bl	800521e <HAL_UART_Transmit>
}
 80014e6:	e086      	b.n	80015f6 <bluetooth+0x5d6>
	}else if(strcmp(recibido,"n")==0){
 80014e8:	4955      	ldr	r1, [pc, #340]	; (8001640 <bluetooth+0x620>)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7fe fe70 	bl	80001d0 <strcmp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d113      	bne.n	800151e <bluetooth+0x4fe>
	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La temperatura es de %i ºC\n", (int) Temperature), 500);
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <bluetooth+0x624>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 2a90 	vmov	r2, s15
 8001504:	4950      	ldr	r1, [pc, #320]	; (8001648 <bluetooth+0x628>)
 8001506:	483f      	ldr	r0, [pc, #252]	; (8001604 <bluetooth+0x5e4>)
 8001508:	f004 fe36 	bl	8006178 <siprintf>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001514:	493b      	ldr	r1, [pc, #236]	; (8001604 <bluetooth+0x5e4>)
 8001516:	483c      	ldr	r0, [pc, #240]	; (8001608 <bluetooth+0x5e8>)
 8001518:	f003 fe81 	bl	800521e <HAL_UART_Transmit>
}
 800151c:	e06b      	b.n	80015f6 <bluetooth+0x5d6>
	 }else if(strcmp(recibido,"o")==0){
 800151e:	494b      	ldr	r1, [pc, #300]	; (800164c <bluetooth+0x62c>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe fe55 	bl	80001d0 <strcmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d113      	bne.n	8001554 <bluetooth+0x534>
		 	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La humedad relativa es del %i %%\n",(int) Humidity), 500);
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <bluetooth+0x630>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 2a90 	vmov	r2, s15
 800153a:	4946      	ldr	r1, [pc, #280]	; (8001654 <bluetooth+0x634>)
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <bluetooth+0x5e4>)
 800153e:	f004 fe1b 	bl	8006178 <siprintf>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800154a:	492e      	ldr	r1, [pc, #184]	; (8001604 <bluetooth+0x5e4>)
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <bluetooth+0x5e8>)
 800154e:	f003 fe66 	bl	800521e <HAL_UART_Transmit>
}
 8001552:	e050      	b.n	80015f6 <bluetooth+0x5d6>
		 }else if (strcmp(recibido, "p") == 0) {
 8001554:	4940      	ldr	r1, [pc, #256]	; (8001658 <bluetooth+0x638>)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe fe3a 	bl	80001d0 <strcmp>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d121      	bne.n	80015a6 <bluetooth+0x586>
		if (getEstadoSeguridad() == 2)
 8001562:	f7ff facb 	bl	8000afc <getEstadoSeguridad>
 8001566:	4603      	mov	r3, r0
 8001568:	2b02      	cmp	r3, #2
 800156a:	d10c      	bne.n	8001586 <bluetooth+0x566>
					sprintf(tx_buffer,
 800156c:	493b      	ldr	r1, [pc, #236]	; (800165c <bluetooth+0x63c>)
 800156e:	4825      	ldr	r0, [pc, #148]	; (8001604 <bluetooth+0x5e4>)
 8001570:	f004 fe02 	bl	8006178 <siprintf>
 8001574:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001576:	b29a      	uxth	r2, r3
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157c:	4921      	ldr	r1, [pc, #132]	; (8001604 <bluetooth+0x5e4>)
 800157e:	4822      	ldr	r0, [pc, #136]	; (8001608 <bluetooth+0x5e8>)
 8001580:	f003 fe4d 	bl	800521e <HAL_UART_Transmit>
 8001584:	e00b      	b.n	800159e <bluetooth+0x57e>
					sprintf(tx_buffer, "Encendiendo alarma...\n"), 500);
 8001586:	4936      	ldr	r1, [pc, #216]	; (8001660 <bluetooth+0x640>)
 8001588:	481e      	ldr	r0, [pc, #120]	; (8001604 <bluetooth+0x5e4>)
 800158a:	f004 fdf5 	bl	8006178 <siprintf>
 800158e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001590:	b29a      	uxth	r2, r3
 8001592:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <bluetooth+0x5e4>)
 8001598:	481b      	ldr	r0, [pc, #108]	; (8001608 <bluetooth+0x5e8>)
 800159a:	f003 fe40 	bl	800521e <HAL_UART_Transmit>
		setEstadoSeguridad(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff fa28 	bl	80009f4 <setEstadoSeguridad>
}
 80015a4:	e027      	b.n	80015f6 <bluetooth+0x5d6>
	} else if (strcmp(recibido, "q") == 0) {
 80015a6:	492f      	ldr	r1, [pc, #188]	; (8001664 <bluetooth+0x644>)
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7fe fe11 	bl	80001d0 <strcmp>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d120      	bne.n	80015f6 <bluetooth+0x5d6>
		if (getEstadoSeguridad() == 0)
 80015b4:	f7ff faa2 	bl	8000afc <getEstadoSeguridad>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <bluetooth+0x5b8>
					sprintf(tx_buffer, "La alarma ya estaba apagada\n"), 500);
 80015be:	492a      	ldr	r1, [pc, #168]	; (8001668 <bluetooth+0x648>)
 80015c0:	4810      	ldr	r0, [pc, #64]	; (8001604 <bluetooth+0x5e4>)
 80015c2:	f004 fdd9 	bl	8006178 <siprintf>
 80015c6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <bluetooth+0x5e4>)
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <bluetooth+0x5e8>)
 80015d2:	f003 fe24 	bl	800521e <HAL_UART_Transmit>
}
 80015d6:	e00e      	b.n	80015f6 <bluetooth+0x5d6>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
 80015d8:	4924      	ldr	r1, [pc, #144]	; (800166c <bluetooth+0x64c>)
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <bluetooth+0x5e4>)
 80015dc:	f004 fdcc 	bl	8006178 <siprintf>
 80015e0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <bluetooth+0x5e4>)
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <bluetooth+0x5e8>)
 80015ec:	f003 fe17 	bl	800521e <HAL_UART_Transmit>
			setEstadoSeguridad(0);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff f9ff 	bl	80009f4 <setEstadoSeguridad>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	08006c64 	.word	0x08006c64
 8001604:	20000158 	.word	0x20000158
 8001608:	20000268 	.word	0x20000268
 800160c:	08006c80 	.word	0x08006c80
 8001610:	08006c84 	.word	0x08006c84
 8001614:	08006ca8 	.word	0x08006ca8
 8001618:	08006cc4 	.word	0x08006cc4
 800161c:	08006cc8 	.word	0x08006cc8
 8001620:	08006ce0 	.word	0x08006ce0
 8001624:	08006cf8 	.word	0x08006cf8
 8001628:	08006d28 	.word	0x08006d28
 800162c:	08006d2c 	.word	0x08006d2c
 8001630:	08006d4c 	.word	0x08006d4c
 8001634:	08006d64 	.word	0x08006d64
 8001638:	08006d68 	.word	0x08006d68
 800163c:	08006d8c 	.word	0x08006d8c
 8001640:	08006da4 	.word	0x08006da4
 8001644:	200000c0 	.word	0x200000c0
 8001648:	08006da8 	.word	0x08006da8
 800164c:	08006dc8 	.word	0x08006dc8
 8001650:	200000c4 	.word	0x200000c4
 8001654:	08006dcc 	.word	0x08006dcc
 8001658:	08006df0 	.word	0x08006df0
 800165c:	08006df4 	.word	0x08006df4
 8001660:	08006e28 	.word	0x08006e28
 8001664:	08006e40 	.word	0x08006e40
 8001668:	08006e44 	.word	0x08006e44
 800166c:	08006e64 	.word	0x08006e64

08001670 <clrScr>:
#include "control_clima.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 800167a:	1dfa      	adds	r2, r7, #7
 800167c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	2110      	movs	r1, #16
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <clrScr+0x24>)
 8001688:	f002 faca 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000fc 	.word	0x200000fc

08001698 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 80016a4:	2302      	movs	r3, #2
 80016a6:	753b      	strb	r3, [r7, #20]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	757b      	strb	r3, [r7, #21]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	75bb      	strb	r3, [r7, #22]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 80016ba:	f107 0214 	add.w	r2, r7, #20
 80016be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2304      	movs	r3, #4
 80016c6:	2110      	movs	r1, #16
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <setColor+0x40>)
 80016ca:	f002 faa9 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000fc 	.word	0x200000fc

080016dc <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 80016e8:	2303      	movs	r3, #3
 80016ea:	753b      	strb	r3, [r7, #20]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	757b      	strb	r3, [r7, #21]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	75bb      	strb	r3, [r7, #22]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) color, 4, 3000);
 80016fe:	f107 0214 	add.w	r2, r7, #20
 8001702:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2304      	movs	r3, #4
 800170a:	2110      	movs	r1, #16
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <setBackColor+0x40>)
 800170e:	f002 fa87 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000fc 	.word	0x200000fc

08001720 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	dd01      	ble.n	8001746 <drawRect+0x26>
		desb[0] = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2bff      	cmp	r3, #255	; 0xff
 800174a:	dd01      	ble.n	8001750 <drawRect+0x30>
		desb[1] = 1;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	dd01      	ble.n	800175a <drawRect+0x3a>
		desb[2] = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2bff      	cmp	r3, #255	; 0xff
 800175e:	dd01      	ble.n	8001764 <drawRect+0x44>
		desb[3] = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 8001764:	2304      	movs	r3, #4
 8001766:	753b      	strb	r3, [r7, #20]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	757b      	strb	r3, [r7, #21]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	75bb      	strb	r3, [r7, #22]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	75fb      	strb	r3, [r7, #23]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	763b      	strb	r3, [r7, #24]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	767b      	strb	r3, [r7, #25]
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	b2db      	uxtb	r3, r3
 800178a:	76bb      	strb	r3, [r7, #26]
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	b2db      	uxtb	r3, r3
 8001790:	76fb      	strb	r3, [r7, #27]
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	b2db      	uxtb	r3, r3
 8001796:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 8001798:	f107 0214 	add.w	r2, r7, #20
 800179c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2309      	movs	r3, #9
 80017a4:	2110      	movs	r1, #16
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <drawRect+0x94>)
 80017a8:	f002 fa3a 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200000fc 	.word	0x200000fc

080017b8 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	dd01      	ble.n	80017de <fillRect+0x26>
		desb[0] = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	dd01      	ble.n	80017e8 <fillRect+0x30>
		desb[1] = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	dd01      	ble.n	80017f2 <fillRect+0x3a>
		desb[2] = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2bff      	cmp	r3, #255	; 0xff
 80017f6:	dd01      	ble.n	80017fc <fillRect+0x44>
		desb[3] = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80017fc:	2305      	movs	r3, #5
 80017fe:	753b      	strb	r3, [r7, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	757b      	strb	r3, [r7, #21]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	75bb      	strb	r3, [r7, #22]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	75fb      	strb	r3, [r7, #23]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	763b      	strb	r3, [r7, #24]
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	767b      	strb	r3, [r7, #25]
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	b2db      	uxtb	r3, r3
 8001822:	76bb      	strb	r3, [r7, #26]
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	b2db      	uxtb	r3, r3
 8001828:	76fb      	strb	r3, [r7, #27]
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	b2db      	uxtb	r3, r3
 800182e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 9, 3000);
 8001830:	f107 0214 	add.w	r2, r7, #20
 8001834:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2309      	movs	r3, #9
 800183c:	2110      	movs	r1, #16
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <fillRect+0x94>)
 8001840:	f002 f9ee 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	; 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000fc 	.word	0x200000fc

08001850 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b098      	sub	sp, #96	; 0x60
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 800185c:	2300      	movs	r3, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	dd01      	ble.n	800186e <print+0x1e>
		desb[0] = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	dd01      	ble.n	8001878 <print+0x28>
		desb[1] = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 8001878:	2306      	movs	r3, #6
 800187a:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7fe fcb1 	bl	80001e4 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 8001886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001888:	b2db      	uxtb	r3, r3
 800188a:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 800188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188e:	b2db      	uxtb	r3, r3
 8001890:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 8001892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001894:	b2db      	uxtb	r3, r3
 8001896:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 8001898:	2304      	movs	r3, #4
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
 800189c:	e00d      	b.n	80018ba <print+0x6a>
		cadena[i] = t[i - 4];
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	3b04      	subs	r3, #4
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	f107 0214 	add.w	r2, r7, #20
 80018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ae:	4413      	add	r3, r2
 80018b0:	460a      	mov	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 80018b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b6:	3301      	adds	r3, #1
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
 80018ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018bc:	3303      	adds	r3, #3
 80018be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018c0:	429a      	cmp	r2, r3
 80018c2:	ddec      	ble.n	800189e <print+0x4e>
	}
	cadena[longitud + 4] = x;
 80018c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c6:	3304      	adds	r3, #4
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018d0:	440b      	add	r3, r1
 80018d2:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 80018d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d8:	3305      	adds	r3, #5
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018e2:	440b      	add	r3, r1
 80018e4:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) cadena, longitud + 6, 3000);
 80018e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3306      	adds	r3, #6
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f107 0214 	add.w	r2, r7, #20
 80018f4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80018f8:	9100      	str	r1, [sp, #0]
 80018fa:	2110      	movs	r1, #16
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <print+0xbc>)
 80018fe:	f002 f98f 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 8001902:	bf00      	nop
 8001904:	3758      	adds	r7, #88	; 0x58
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000fc 	.word	0x200000fc

08001910 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e01b      	b.n	8001960 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	4413      	add	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff ff88 	bl	8001850 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc4a 	bl	80001e4 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	00da      	lsls	r2, r3, #3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	3301      	adds	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbdf      	blt.n	8001928 <printfrase+0x18>
	}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af02      	add	r7, sp, #8
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 800197c:	2307      	movs	r3, #7
 800197e:	733b      	strb	r3, [r7, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) font, 2, 3000);
 8001986:	f107 020c 	add.w	r2, r7, #12
 800198a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2302      	movs	r3, #2
 8001992:	2110      	movs	r1, #16
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <setFont+0x30>)
 8001996:	f002 f943 	bl	8003c20 <HAL_I2C_Master_Transmit>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000fc 	.word	0x200000fc

080019a8 <pantalla_principal>:
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, (uint8_t*) coord, 7, 3000);
}


void pantalla_principal() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
	clrScr();
 80019ae:	f7ff fe5f 	bl	8001670 <clrScr>
	setColor(255, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	20ff      	movs	r0, #255	; 0xff
 80019b8:	f7ff fe6e 	bl	8001698 <setColor>
	fillRect(1, 1, 478, 40);
 80019bc:	2328      	movs	r3, #40	; 0x28
 80019be:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80019c2:	2101      	movs	r1, #1
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fef7 	bl	80017b8 <fillRect>
	setColor(64, 64, 64);
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	2040      	movs	r0, #64	; 0x40
 80019d0:	f7ff fe62 	bl	8001698 <setColor>
	fillRect(1, 318, 478, 280);
 80019d4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80019d8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80019dc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fee9 	bl	80017b8 <fillRect>
	setColor(255, 255, 255);
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	21ff      	movs	r1, #255	; 0xff
 80019ea:	20ff      	movs	r0, #255	; 0xff
 80019ec:	f7ff fe54 	bl	8001698 <setColor>
	setBackColor(255, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	20ff      	movs	r0, #255	; 0xff
 80019f6:	f7ff fe71 	bl	80016dc <setBackColor>
	setFont(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff ffba 	bl	8001974 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001a00:	220c      	movs	r2, #12
 8001a02:	2132      	movs	r1, #50	; 0x32
 8001a04:	4835      	ldr	r0, [pc, #212]	; (8001adc <pantalla_principal+0x134>)
 8001a06:	f7ff ff23 	bl	8001850 <print>
	setBackColor(64, 64, 64);
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2140      	movs	r1, #64	; 0x40
 8001a0e:	2040      	movs	r0, #64	; 0x40
 8001a10:	f7ff fe64 	bl	80016dc <setBackColor>
	setColor(255, 255, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	21ff      	movs	r1, #255	; 0xff
 8001a18:	20ff      	movs	r0, #255	; 0xff
 8001a1a:	f7ff fe3d 	bl	8001698 <setColor>
	setFont(0);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ffa8 	bl	8001974 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001a24:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <pantalla_principal+0x138>)
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001a30:	f107 000c 	add.w	r0, r7, #12
 8001a34:	2303      	movs	r3, #3
 8001a36:	f240 1219 	movw	r2, #281	; 0x119
 8001a3a:	2114      	movs	r1, #20
 8001a3c:	f7ff ff68 	bl	8001910 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <pantalla_principal+0x13c>)
 8001a42:	463b      	mov	r3, r7
 8001a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a52:	2114      	movs	r1, #20
 8001a54:	f7ff ff5c 	bl	8001910 <printfrase>
	setColor(0, 0, 255);
 8001a58:	22ff      	movs	r2, #255	; 0xff
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fe1b 	bl	8001698 <setColor>
	drawRect(0, 0, 479, 319);
 8001a62:	f240 133f 	movw	r3, #319	; 0x13f
 8001a66:	f240 12df 	movw	r2, #479	; 0x1df
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fe57 	bl	8001720 <drawRect>
	setFont(1);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f7ff ff7e 	bl	8001974 <setFont>
	setColor(255, 255, 255);
 8001a78:	22ff      	movs	r2, #255	; 0xff
 8001a7a:	21ff      	movs	r1, #255	; 0xff
 8001a7c:	20ff      	movs	r0, #255	; 0xff
 8001a7e:	f7ff fe0b 	bl	8001698 <setColor>
	setBackColor(0, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fe28 	bl	80016dc <setBackColor>
	print("LUCES:", 50, 94);
 8001a8c:	225e      	movs	r2, #94	; 0x5e
 8001a8e:	2132      	movs	r1, #50	; 0x32
 8001a90:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <pantalla_principal+0x140>)
 8001a92:	f7ff fedd 	bl	8001850 <print>
	print("RIEGO:", 50, 138);
 8001a96:	228a      	movs	r2, #138	; 0x8a
 8001a98:	2132      	movs	r1, #50	; 0x32
 8001a9a:	4814      	ldr	r0, [pc, #80]	; (8001aec <pantalla_principal+0x144>)
 8001a9c:	f7ff fed8 	bl	8001850 <print>
	print("ALARMA:", 50, 182);
 8001aa0:	22b6      	movs	r2, #182	; 0xb6
 8001aa2:	2132      	movs	r1, #50	; 0x32
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <pantalla_principal+0x148>)
 8001aa6:	f7ff fed3 	bl	8001850 <print>
	print("PERSIANA:", 50, 226);
 8001aaa:	22e2      	movs	r2, #226	; 0xe2
 8001aac:	2132      	movs	r1, #50	; 0x32
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <pantalla_principal+0x14c>)
 8001ab0:	f7ff fece 	bl	8001850 <print>
	print("CLIMA:", 240, 94);
 8001ab4:	225e      	movs	r2, #94	; 0x5e
 8001ab6:	21f0      	movs	r1, #240	; 0xf0
 8001ab8:	480f      	ldr	r0, [pc, #60]	; (8001af8 <pantalla_principal+0x150>)
 8001aba:	f7ff fec9 	bl	8001850 <print>
	print("TEMP:", 240, 138);
 8001abe:	228a      	movs	r2, #138	; 0x8a
 8001ac0:	21f0      	movs	r1, #240	; 0xf0
 8001ac2:	480e      	ldr	r0, [pc, #56]	; (8001afc <pantalla_principal+0x154>)
 8001ac4:	f7ff fec4 	bl	8001850 <print>
	print("HUMEDAD:", 240, 182);
 8001ac8:	22b6      	movs	r2, #182	; 0xb6
 8001aca:	21f0      	movs	r1, #240	; 0xf0
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <pantalla_principal+0x158>)
 8001ace:	f7ff febf 	bl	8001850 <print>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	08006e78 	.word	0x08006e78
 8001ae0:	08006ecc 	.word	0x08006ecc
 8001ae4:	08006ed8 	.word	0x08006ed8
 8001ae8:	08006e8c 	.word	0x08006e8c
 8001aec:	08006e94 	.word	0x08006e94
 8001af0:	08006e9c 	.word	0x08006e9c
 8001af4:	08006ea4 	.word	0x08006ea4
 8001af8:	08006eb0 	.word	0x08006eb0
 8001afc:	08006eb8 	.word	0x08006eb8
 8001b00:	08006ec0 	.word	0x08006ec0

08001b04 <actualizar_pantalla>:

void actualizar_pantalla(int act){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	setColor(0, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fdc1 	bl	8001698 <setColor>
	if(act==1){
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d12b      	bne.n	8001b74 <actualizar_pantalla+0x70>
		fillRect(146, 94, 210,110);
 8001b1c:	236e      	movs	r3, #110	; 0x6e
 8001b1e:	22d2      	movs	r2, #210	; 0xd2
 8001b20:	215e      	movs	r1, #94	; 0x5e
 8001b22:	2092      	movs	r0, #146	; 0x92
 8001b24:	f7ff fe48 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001b28:	22ff      	movs	r2, #255	; 0xff
 8001b2a:	21ff      	movs	r1, #255	; 0xff
 8001b2c:	20ff      	movs	r0, #255	; 0xff
 8001b2e:	f7ff fdb3 	bl	8001698 <setColor>
		setBackColor(0, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fdd0 	bl	80016dc <setBackColor>
			if(getEstadoLuces()==0){
 8001b3c:	f7fe fd78 	bl	8000630 <getEstadoLuces>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <actualizar_pantalla+0x4e>
				print("OFF", 146, 94);
 8001b46:	225e      	movs	r2, #94	; 0x5e
 8001b48:	2192      	movs	r1, #146	; 0x92
 8001b4a:	4870      	ldr	r0, [pc, #448]	; (8001d0c <actualizar_pantalla+0x208>)
 8001b4c:	f7ff fe80 	bl	8001850 <print>
	}




}
 8001b50:	e0d8      	b.n	8001d04 <actualizar_pantalla+0x200>
			}else if(getEstadoLuces()==1){
 8001b52:	f7fe fd6d 	bl	8000630 <getEstadoLuces>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <actualizar_pantalla+0x64>
				print("ON", 146, 94);
 8001b5c:	225e      	movs	r2, #94	; 0x5e
 8001b5e:	2192      	movs	r1, #146	; 0x92
 8001b60:	486b      	ldr	r0, [pc, #428]	; (8001d10 <actualizar_pantalla+0x20c>)
 8001b62:	f7ff fe75 	bl	8001850 <print>
}
 8001b66:	e0cd      	b.n	8001d04 <actualizar_pantalla+0x200>
				print("AUTO", 146, 94);
 8001b68:	225e      	movs	r2, #94	; 0x5e
 8001b6a:	2192      	movs	r1, #146	; 0x92
 8001b6c:	4869      	ldr	r0, [pc, #420]	; (8001d14 <actualizar_pantalla+0x210>)
 8001b6e:	f7ff fe6f 	bl	8001850 <print>
}
 8001b72:	e0c7      	b.n	8001d04 <actualizar_pantalla+0x200>
	}else if(act==2){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d11b      	bne.n	8001bb2 <actualizar_pantalla+0xae>
		fillRect(146, 138, 210,154);
 8001b7a:	239a      	movs	r3, #154	; 0x9a
 8001b7c:	22d2      	movs	r2, #210	; 0xd2
 8001b7e:	218a      	movs	r1, #138	; 0x8a
 8001b80:	2092      	movs	r0, #146	; 0x92
 8001b82:	f7ff fe19 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	21ff      	movs	r1, #255	; 0xff
 8001b8a:	20ff      	movs	r0, #255	; 0xff
 8001b8c:	f7ff fd84 	bl	8001698 <setColor>
			if(getEstadoAnteriorRiego()==0){
 8001b90:	f7fe ff02 	bl	8000998 <getEstadoAnteriorRiego>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <actualizar_pantalla+0xa2>
				print("ON", 146, 138);
 8001b9a:	228a      	movs	r2, #138	; 0x8a
 8001b9c:	2192      	movs	r1, #146	; 0x92
 8001b9e:	485c      	ldr	r0, [pc, #368]	; (8001d10 <actualizar_pantalla+0x20c>)
 8001ba0:	f7ff fe56 	bl	8001850 <print>
}
 8001ba4:	e0ae      	b.n	8001d04 <actualizar_pantalla+0x200>
				print("OFF", 146, 138);
 8001ba6:	228a      	movs	r2, #138	; 0x8a
 8001ba8:	2192      	movs	r1, #146	; 0x92
 8001baa:	4858      	ldr	r0, [pc, #352]	; (8001d0c <actualizar_pantalla+0x208>)
 8001bac:	f7ff fe50 	bl	8001850 <print>
}
 8001bb0:	e0a8      	b.n	8001d04 <actualizar_pantalla+0x200>
	}else if(act==3){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d11b      	bne.n	8001bf0 <actualizar_pantalla+0xec>
		fillRect(162, 182, 226,198);
 8001bb8:	23c6      	movs	r3, #198	; 0xc6
 8001bba:	22e2      	movs	r2, #226	; 0xe2
 8001bbc:	21b6      	movs	r1, #182	; 0xb6
 8001bbe:	20a2      	movs	r0, #162	; 0xa2
 8001bc0:	f7ff fdfa 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001bc4:	22ff      	movs	r2, #255	; 0xff
 8001bc6:	21ff      	movs	r1, #255	; 0xff
 8001bc8:	20ff      	movs	r0, #255	; 0xff
 8001bca:	f7ff fd65 	bl	8001698 <setColor>
			if(getEstadoSeguridad()==0){
 8001bce:	f7fe ff95 	bl	8000afc <getEstadoSeguridad>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <actualizar_pantalla+0xe0>
				print("OFF", 162, 182);
 8001bd8:	22b6      	movs	r2, #182	; 0xb6
 8001bda:	21a2      	movs	r1, #162	; 0xa2
 8001bdc:	484b      	ldr	r0, [pc, #300]	; (8001d0c <actualizar_pantalla+0x208>)
 8001bde:	f7ff fe37 	bl	8001850 <print>
}
 8001be2:	e08f      	b.n	8001d04 <actualizar_pantalla+0x200>
				print("ON", 162, 182);
 8001be4:	22b6      	movs	r2, #182	; 0xb6
 8001be6:	21a2      	movs	r1, #162	; 0xa2
 8001be8:	4849      	ldr	r0, [pc, #292]	; (8001d10 <actualizar_pantalla+0x20c>)
 8001bea:	f7ff fe31 	bl	8001850 <print>
}
 8001bee:	e089      	b.n	8001d04 <actualizar_pantalla+0x200>
	}else if(act==4){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d12c      	bne.n	8001c50 <actualizar_pantalla+0x14c>
		fillRect(194, 226, 258,242);
 8001bf6:	23f2      	movs	r3, #242	; 0xf2
 8001bf8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001bfc:	21e2      	movs	r1, #226	; 0xe2
 8001bfe:	20c2      	movs	r0, #194	; 0xc2
 8001c00:	f7ff fdda 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	21ff      	movs	r1, #255	; 0xff
 8001c08:	20ff      	movs	r0, #255	; 0xff
 8001c0a:	f7ff fd45 	bl	8001698 <setColor>
			if(getEstadoPersianas()==0){
 8001c0e:	f7fe fdff 	bl	8000810 <getEstadoPersianas>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <actualizar_pantalla+0x120>
				print("STOP", 194, 226);
 8001c18:	22e2      	movs	r2, #226	; 0xe2
 8001c1a:	21c2      	movs	r1, #194	; 0xc2
 8001c1c:	483e      	ldr	r0, [pc, #248]	; (8001d18 <actualizar_pantalla+0x214>)
 8001c1e:	f7ff fe17 	bl	8001850 <print>
}
 8001c22:	e06f      	b.n	8001d04 <actualizar_pantalla+0x200>
			else if(getEstadoPersianas()==1){
 8001c24:	f7fe fdf4 	bl	8000810 <getEstadoPersianas>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <actualizar_pantalla+0x136>
				print("DOWN", 194, 226);
 8001c2e:	22e2      	movs	r2, #226	; 0xe2
 8001c30:	21c2      	movs	r1, #194	; 0xc2
 8001c32:	483a      	ldr	r0, [pc, #232]	; (8001d1c <actualizar_pantalla+0x218>)
 8001c34:	f7ff fe0c 	bl	8001850 <print>
}
 8001c38:	e064      	b.n	8001d04 <actualizar_pantalla+0x200>
			}else if(getEstadoPersianas()==2){
 8001c3a:	f7fe fde9 	bl	8000810 <getEstadoPersianas>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d15f      	bne.n	8001d04 <actualizar_pantalla+0x200>
				print("UP", 194, 226);
 8001c44:	22e2      	movs	r2, #226	; 0xe2
 8001c46:	21c2      	movs	r1, #194	; 0xc2
 8001c48:	4835      	ldr	r0, [pc, #212]	; (8001d20 <actualizar_pantalla+0x21c>)
 8001c4a:	f7ff fe01 	bl	8001850 <print>
}
 8001c4e:	e059      	b.n	8001d04 <actualizar_pantalla+0x200>
	}else if(act==5){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d141      	bne.n	8001cda <actualizar_pantalla+0x1d6>
		fillRect(336, 94, 400,110);
 8001c56:	236e      	movs	r3, #110	; 0x6e
 8001c58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c5c:	215e      	movs	r1, #94	; 0x5e
 8001c5e:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001c62:	f7ff fda9 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	21ff      	movs	r1, #255	; 0xff
 8001c6a:	20ff      	movs	r0, #255	; 0xff
 8001c6c:	f7ff fd14 	bl	8001698 <setColor>
		setBackColor(0, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fd31 	bl	80016dc <setBackColor>
		if(getControlClima()==1){
 8001c7a:	f7ff f813 	bl	8000ca4 <getControlClima>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <actualizar_pantalla+0x18e>
			print("AUTO", 336, 94);
 8001c84:	225e      	movs	r2, #94	; 0x5e
 8001c86:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001c8a:	4822      	ldr	r0, [pc, #136]	; (8001d14 <actualizar_pantalla+0x210>)
 8001c8c:	f7ff fde0 	bl	8001850 <print>
}
 8001c90:	e038      	b.n	8001d04 <actualizar_pantalla+0x200>
		}else if(getEstadoClima()==0){
 8001c92:	f7fe ffc5 	bl	8000c20 <getEstadoClima>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <actualizar_pantalla+0x1a6>
				print("OFF", 336, 94);
 8001c9c:	225e      	movs	r2, #94	; 0x5e
 8001c9e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001ca2:	481a      	ldr	r0, [pc, #104]	; (8001d0c <actualizar_pantalla+0x208>)
 8001ca4:	f7ff fdd4 	bl	8001850 <print>
}
 8001ca8:	e02c      	b.n	8001d04 <actualizar_pantalla+0x200>
			}else if(getEstadoClima()==1){
 8001caa:	f7fe ffb9 	bl	8000c20 <getEstadoClima>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <actualizar_pantalla+0x1be>
				print("CALD", 336, 94);
 8001cb4:	225e      	movs	r2, #94	; 0x5e
 8001cb6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001cba:	481a      	ldr	r0, [pc, #104]	; (8001d24 <actualizar_pantalla+0x220>)
 8001cbc:	f7ff fdc8 	bl	8001850 <print>
}
 8001cc0:	e020      	b.n	8001d04 <actualizar_pantalla+0x200>
			}else if(getEstadoClima()==2){
 8001cc2:	f7fe ffad 	bl	8000c20 <getEstadoClima>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d11b      	bne.n	8001d04 <actualizar_pantalla+0x200>
				print("AIRE", 336, 94);
 8001ccc:	225e      	movs	r2, #94	; 0x5e
 8001cce:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001cd2:	4815      	ldr	r0, [pc, #84]	; (8001d28 <actualizar_pantalla+0x224>)
 8001cd4:	f7ff fdbc 	bl	8001850 <print>
}
 8001cd8:	e014      	b.n	8001d04 <actualizar_pantalla+0x200>
	}else if(act==6){
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	d111      	bne.n	8001d04 <actualizar_pantalla+0x200>
		fillRect(336, 110, 400,126);
 8001ce0:	237e      	movs	r3, #126	; 0x7e
 8001ce2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ce6:	216e      	movs	r1, #110	; 0x6e
 8001ce8:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8001cec:	f7ff fd64 	bl	80017b8 <fillRect>
		setColor(255, 255, 255);
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	21ff      	movs	r1, #255	; 0xff
 8001cf4:	20ff      	movs	r0, #255	; 0xff
 8001cf6:	f7ff fccf 	bl	8001698 <setColor>
		setBackColor(0, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fcec 	bl	80016dc <setBackColor>
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08006ee4 	.word	0x08006ee4
 8001d10:	08006ee8 	.word	0x08006ee8
 8001d14:	08006eec 	.word	0x08006eec
 8001d18:	08006ef4 	.word	0x08006ef4
 8001d1c:	08006efc 	.word	0x08006efc
 8001d20:	08006f04 	.word	0x08006f04
 8001d24:	08006f08 	.word	0x08006f08
 8001d28:	08006f10 	.word	0x08006f10

08001d2c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char readBuf[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001d34:	2201      	movs	r2, #1
 8001d36:	4905      	ldr	r1, [pc, #20]	; (8001d4c <HAL_UART_RxCpltCallback+0x20>)
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_UART_RxCpltCallback+0x24>)
 8001d3a:	f003 fb02 	bl	8005342 <HAL_UART_Receive_IT>
 bluetooth(readBuf);
 8001d3e:	4803      	ldr	r0, [pc, #12]	; (8001d4c <HAL_UART_RxCpltCallback+0x20>)
 8001d40:	f7ff f96e 	bl	8001020 <bluetooth>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200002bc 	.word	0x200002bc
 8001d50:	20000268 	.word	0x20000268

08001d54 <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d13b      	bne.n	8001de2 <debouncer+0x8e>
		if (button_count == 0) {
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <debouncer+0x98>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <debouncer+0x36>
			counter = HAL_GetTick();
 8001d72:	f000 fe7b 	bl	8002a6c <HAL_GetTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <debouncer+0x9c>)
 8001d7c:	601a      	str	r2, [r3, #0]
			button_count++;
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <debouncer+0x98>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <debouncer+0x98>)
 8001d88:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8001d8a:	f000 fe6f 	bl	8002a6c <HAL_GetTick>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <debouncer+0x9c>)
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	2b13      	cmp	r3, #19
 8001d98:	d923      	bls.n	8001de2 <debouncer+0x8e>
			counter = HAL_GetTick();
 8001d9a:	f000 fe67 	bl	8002a6c <HAL_GetTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <debouncer+0x9c>)
 8001da4:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4619      	mov	r1, r3
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f001 fdaa 	bl	8003904 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d003      	beq.n	8001dbe <debouncer+0x6a>
				button_count = 1;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <debouncer+0x98>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e005      	b.n	8001dca <debouncer+0x76>
			} else {
				button_count++;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <debouncer+0x98>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <debouncer+0x98>)
 8001dc8:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <debouncer+0x98>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d107      	bne.n	8001de2 <debouncer+0x8e>
				button_count = 0;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <debouncer+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
				return 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200000e0 	.word	0x200000e0
 8001df0:	200000e4 	.word	0x200000e4

08001df4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d106      	bne.n	8001e12 <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8001e10:	e04a      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e18:	d106      	bne.n	8001e28 <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	e03f      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2e:	d106      	bne.n	8001e3e <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e38:	220d      	movs	r2, #13
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	e034      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e44:	d106      	bne.n	8001e54 <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e4e:	220a      	movs	r2, #10
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	e029      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d106      	bne.n	8001e68 <HAL_GPIO_EXTI_Callback+0x74>
		button_int = 1;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	e01f      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6e:	d106      	bne.n	8001e7e <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e78:	2209      	movs	r2, #9
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	e014      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e84:	d106      	bne.n	8001e94 <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e8e:	220e      	movs	r2, #14
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	e009      	b.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9a:	d105      	bne.n	8001ea8 <HAL_GPIO_EXTI_Callback+0xb4>
		button_int = 1;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	200000d8 	.word	0x200000d8
 8001eb8:	200000dc 	.word	0x200000dc

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec0:	f000 fd6e 	bl	80029a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 f8d2 	bl	800206c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f000 fa6a 	bl	80023a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ecc:	f000 f98a 	bl	80021e4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001ed0:	f000 fa3c 	bl	800234c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001ed4:	f000 f934 	bl	8002140 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001ed8:	f000 fa02 	bl	80022e0 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001edc:	f000 f9b0 	bl	8002240 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001ee0:	485a      	ldr	r0, [pc, #360]	; (800204c <main+0x190>)
 8001ee2:	f002 fe69 	bl	8004bb8 <HAL_TIM_Base_Start>
	//int menu_actual = 0;
	//int retorno = 0;
	pantalla_principal();
 8001ee6:	f7ff fd5f 	bl	80019a8 <pantalla_principal>
	setEstadoPersianas(0);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7fe fc46 	bl	800077c <setEstadoPersianas>
	setLuces(0);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7fe fb51 	bl	8000598 <setLuces>
	setEstadoClima(0);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7fe fe4e 	bl	8000b98 <setEstadoClima>
	setEstadoSeguridad(0);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe fd79 	bl	80009f4 <setEstadoSeguridad>
	setEstadoRiego(2);
 8001f02:	2002      	movs	r0, #2
 8001f04:	f7fe fcdc 	bl	80008c0 <setEstadoRiego>
	lectura_dht11();
 8001f08:	f7fe ffdc 	bl	8000ec4 <lectura_dht11>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4950      	ldr	r1, [pc, #320]	; (8002050 <main+0x194>)
 8001f10:	4850      	ldr	r0, [pc, #320]	; (8002054 <main+0x198>)
 8001f12:	f003 fa16 	bl	8005342 <HAL_UART_Receive_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (boton_presionado) {
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <main+0x19c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3b03      	subs	r3, #3
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f200 808b 	bhi.w	8002038 <main+0x17c>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <main+0x6c>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f5d 	.word	0x08001f5d
 8001f2c:	08002039 	.word	0x08002039
 8001f30:	08002039 	.word	0x08002039
 8001f34:	08002039 	.word	0x08002039
 8001f38:	08001fbd 	.word	0x08001fbd
 8001f3c:	08002039 	.word	0x08002039
 8001f40:	08001fd3 	.word	0x08001fd3
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08002039 	.word	0x08002039
 8001f4c:	08001f73 	.word	0x08001f73
 8001f50:	08001f8d 	.word	0x08001f8d
 8001f54:	08001feb 	.word	0x08001feb
 8001f58:	08002003 	.word	0x08002003
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	493f      	ldr	r1, [pc, #252]	; (800205c <main+0x1a0>)
 8001f60:	483f      	ldr	r0, [pc, #252]	; (8002060 <main+0x1a4>)
 8001f62:	f7ff fef7 	bl	8001d54 <debouncer>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d056      	beq.n	800201a <main+0x15e>
				cambiarEstadoLuces();
 8001f6c:	f7fe fb6c 	bl	8000648 <cambiarEstadoLuces>
			}
			break;
 8001f70:	e053      	b.n	800201a <main+0x15e>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 8001f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f76:	493b      	ldr	r1, [pc, #236]	; (8002064 <main+0x1a8>)
 8001f78:	4839      	ldr	r0, [pc, #228]	; (8002060 <main+0x1a4>)
 8001f7a:	f7ff feeb 	bl	8001d54 <debouncer>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d04c      	beq.n	800201e <main+0x162>
				setEstadoPersianas(0);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fbf9 	bl	800077c <setEstadoPersianas>
			}
			break;
 8001f8a:	e048      	b.n	800201e <main+0x162>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 8001f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f90:	4932      	ldr	r1, [pc, #200]	; (800205c <main+0x1a0>)
 8001f92:	4833      	ldr	r0, [pc, #204]	; (8002060 <main+0x1a4>)
 8001f94:	f7ff fede 	bl	8001d54 <debouncer>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d041      	beq.n	8002022 <main+0x166>
				cambiarEstadoPersianas();
 8001f9e:	f7fe fc4f 	bl	8000840 <cambiarEstadoPersianas>
			}
			break;
 8001fa2:	e03e      	b.n	8002022 <main+0x166>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 8001fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa8:	492c      	ldr	r1, [pc, #176]	; (800205c <main+0x1a0>)
 8001faa:	482d      	ldr	r0, [pc, #180]	; (8002060 <main+0x1a4>)
 8001fac:	f7ff fed2 	bl	8001d54 <debouncer>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d037      	beq.n	8002026 <main+0x16a>
				cambiarEstadoRiego();
 8001fb6:	f7fe fcd5 	bl	8000964 <cambiarEstadoRiego>
			}
			break;
 8001fba:	e034      	b.n	8002026 <main+0x16a>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	4927      	ldr	r1, [pc, #156]	; (800205c <main+0x1a0>)
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <main+0x1a4>)
 8001fc2:	f7ff fec7 	bl	8001d54 <debouncer>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02e      	beq.n	800202a <main+0x16e>
				cambiarEstadoSeguridad();
 8001fcc:	f7fe fda2 	bl	8000b14 <cambiarEstadoSeguridad>
			}
			break;
 8001fd0:	e02b      	b.n	800202a <main+0x16e>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 8001fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd6:	4921      	ldr	r1, [pc, #132]	; (800205c <main+0x1a0>)
 8001fd8:	4821      	ldr	r0, [pc, #132]	; (8002060 <main+0x1a4>)
 8001fda:	f7ff febb 	bl	8001d54 <debouncer>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d024      	beq.n	800202e <main+0x172>
				intruso_detectado();
 8001fe4:	f7fe fda6 	bl	8000b34 <intruso_detectado>
			}
			break;
 8001fe8:	e021      	b.n	800202e <main+0x172>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 8001fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fee:	491e      	ldr	r1, [pc, #120]	; (8002068 <main+0x1ac>)
 8001ff0:	481b      	ldr	r0, [pc, #108]	; (8002060 <main+0x1a4>)
 8001ff2:	f7ff feaf 	bl	8001d54 <debouncer>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01a      	beq.n	8002032 <main+0x176>
				cambiarControlClima();
 8001ffc:	f7fe fe5e 	bl	8000cbc <cambiarControlClima>
			}
			break;
 8002000:	e017      	b.n	8002032 <main+0x176>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 8002002:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002006:	4918      	ldr	r1, [pc, #96]	; (8002068 <main+0x1ac>)
 8002008:	4815      	ldr	r0, [pc, #84]	; (8002060 <main+0x1a4>)
 800200a:	f7ff fea3 	bl	8001d54 <debouncer>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <main+0x17a>
				cambiarEstadoClima();
 8002014:	f7fe fe10 	bl	8000c38 <cambiarEstadoClima>
			}
			break;
 8002018:	e00d      	b.n	8002036 <main+0x17a>
			break;
 800201a:	bf00      	nop
 800201c:	e00c      	b.n	8002038 <main+0x17c>
			break;
 800201e:	bf00      	nop
 8002020:	e00a      	b.n	8002038 <main+0x17c>
			break;
 8002022:	bf00      	nop
 8002024:	e008      	b.n	8002038 <main+0x17c>
			break;
 8002026:	bf00      	nop
 8002028:	e006      	b.n	8002038 <main+0x17c>
			break;
 800202a:	bf00      	nop
 800202c:	e004      	b.n	8002038 <main+0x17c>
			break;
 800202e:	bf00      	nop
 8002030:	e002      	b.n	8002038 <main+0x17c>
			break;
 8002032:	bf00      	nop
 8002034:	e000      	b.n	8002038 <main+0x17c>
			break;
 8002036:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 8002038:	f7fe fb9a 	bl	8000770 <luces>
		riego();
 800203c:	f7fe fcd4 	bl	80009e8 <riego>
		seguridad();
 8002040:	f7fe fda2 	bl	8000b88 <seguridad>
		clima();
 8002044:	f7fe ff98 	bl	8000f78 <clima>
		switch (boton_presionado) {
 8002048:	e765      	b.n	8001f16 <main+0x5a>
 800204a:	bf00      	nop
 800204c:	200001d8 	.word	0x200001d8
 8002050:	200002bc 	.word	0x200002bc
 8002054:	20000268 	.word	0x20000268
 8002058:	200000dc 	.word	0x200000dc
 800205c:	40020000 	.word	0x40020000
 8002060:	200000d8 	.word	0x200000d8
 8002064:	40021000 	.word	0x40021000
 8002068:	40020400 	.word	0x40020400

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b094      	sub	sp, #80	; 0x50
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0320 	add.w	r3, r7, #32
 8002076:	2230      	movs	r2, #48	; 0x30
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f004 f874 	bl	8006168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <SystemClock_Config+0xcc>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <SystemClock_Config+0xcc>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	6413      	str	r3, [r2, #64]	; 0x40
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <SystemClock_Config+0xcc>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <SystemClock_Config+0xd0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <SystemClock_Config+0xd0>)
 80020b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <SystemClock_Config+0xd0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020cc:	2301      	movs	r3, #1
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d0:	2310      	movs	r3, #16
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d4:	2302      	movs	r3, #2
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020dc:	2308      	movs	r3, #8
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80020e0:	2332      	movs	r3, #50	; 0x32
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020e8:	2307      	movs	r3, #7
 80020ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 f89d 	bl	8004230 <HAL_RCC_OscConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020fc:	f000 fa32 	bl	8002564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002100:	230f      	movs	r3, #15
 8002102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fafe 	bl	8004720 <HAL_RCC_ClockConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800212a:	f000 fa1b 	bl	8002564 <Error_Handler>
  }
}
 800212e:	bf00      	nop
 8002130:	3750      	adds	r7, #80	; 0x50
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000

08002140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002146:	463b      	mov	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <MX_ADC1_Init+0x9c>)
 8002156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_ADC1_Init+0x98>)
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_ADC1_Init+0x98>)
 800216c:	2200      	movs	r2, #0
 800216e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <MX_ADC1_Init+0x98>)
 800217a:	2200      	movs	r2, #0
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <MX_ADC1_Init+0xa0>)
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_ADC1_Init+0x98>)
 800218c:	2201      	movs	r2, #1
 800218e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_ADC1_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_ADC1_Init+0x98>)
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800219e:	480e      	ldr	r0, [pc, #56]	; (80021d8 <MX_ADC1_Init+0x98>)
 80021a0:	f000 fc70 	bl	8002a84 <HAL_ADC_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021aa:	f000 f9db 	bl	8002564 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_ADC1_Init+0x98>)
 80021c0:	f000 fe42 	bl	8002e48 <HAL_ADC_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021ca:	f000 f9cb 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000018c 	.word	0x2000018c
 80021dc:	40012000 	.word	0x40012000
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_I2C1_Init+0x50>)
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <MX_I2C1_Init+0x54>)
 80021ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_I2C1_Init+0x50>)
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <MX_I2C1_Init+0x58>)
 80021f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_I2C1_Init+0x50>)
 8002202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MX_I2C1_Init+0x50>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_I2C1_Init+0x50>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <MX_I2C1_Init+0x50>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_I2C1_Init+0x50>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <MX_I2C1_Init+0x50>)
 8002222:	f001 fbb9 	bl	8003998 <HAL_I2C_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800222c:	f000 f99a 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200000fc 	.word	0x200000fc
 8002238:	40005400 	.word	0x40005400
 800223c:	000186a0 	.word	0x000186a0

08002240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <MX_TIM1_Init+0x98>)
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <MX_TIM1_Init+0x9c>)
 8002260:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002264:	f240 22ff 	movw	r2, #767	; 0x2ff
 8002268:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <MX_TIM1_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002272:	22fe      	movs	r2, #254	; 0xfe
 8002274:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_TIM1_Init+0x98>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_TIM1_Init+0x98>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <MX_TIM1_Init+0x98>)
 800228a:	f002 fc45 	bl	8004b18 <HAL_TIM_Base_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002294:	f000 f966 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MX_TIM1_Init+0x98>)
 80022a6:	f002 fcef 	bl	8004c88 <HAL_TIM_ConfigClockSource>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022b0:	f000 f958 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_TIM1_Init+0x98>)
 80022c2:	f002 fee3 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022cc:	f000 f94a 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000220 	.word	0x20000220
 80022dc:	40010000 	.word	0x40010000

080022e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e6:	463b      	mov	r3, r7
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_TIM6_Init+0x64>)
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <MX_TIM6_Init+0x68>)
 80022f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_TIM6_Init+0x64>)
 80022f6:	2231      	movs	r2, #49	; 0x31
 80022f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_TIM6_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <MX_TIM6_Init+0x64>)
 8002302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002306:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_TIM6_Init+0x64>)
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <MX_TIM6_Init+0x64>)
 8002310:	f002 fc02 	bl	8004b18 <HAL_TIM_Base_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800231a:	f000 f923 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	4619      	mov	r1, r3
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <MX_TIM6_Init+0x64>)
 800232c:	f002 feae 	bl	800508c <HAL_TIMEx_MasterConfigSynchronization>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002336:	f000 f915 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200001d8 	.word	0x200001d8
 8002348:	40001000 	.word	0x40001000

0800234c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_USART6_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800235c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART6_UART_Init+0x4c>)
 8002384:	f002 fefe 	bl	8005184 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f000 f8e9 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000268 	.word	0x20000268
 800239c:	40011400 	.word	0x40011400

080023a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a64      	ldr	r2, [pc, #400]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a5d      	ldr	r2, [pc, #372]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a56      	ldr	r2, [pc, #344]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a4f      	ldr	r2, [pc, #316]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <MX_GPIO_Init+0x1b0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <MX_GPIO_Init+0x1b0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a48      	ldr	r2, [pc, #288]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <MX_GPIO_Init+0x1b0>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002464:	483b      	ldr	r0, [pc, #236]	; (8002554 <MX_GPIO_Init+0x1b4>)
 8002466:	f001 fa65 	bl	8003934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8002470:	4839      	ldr	r0, [pc, #228]	; (8002558 <MX_GPIO_Init+0x1b8>)
 8002472:	f001 fa5f 	bl	8003934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 8002476:	f242 6389 	movw	r3, #9865	; 0x2689
 800247a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4831      	ldr	r0, [pc, #196]	; (8002554 <MX_GPIO_Init+0x1b4>)
 800248e:	f001 f89d 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002492:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8002496:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482a      	ldr	r0, [pc, #168]	; (8002554 <MX_GPIO_Init+0x1b4>)
 80024ac:	f001 f88e 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	4825      	ldr	r0, [pc, #148]	; (800255c <MX_GPIO_Init+0x1bc>)
 80024c8:	f001 f880 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	4619      	mov	r1, r3
 80024e2:	481f      	ldr	r0, [pc, #124]	; (8002560 <MX_GPIO_Init+0x1c0>)
 80024e4:	f001 f872 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80024e8:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80024ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	4815      	ldr	r0, [pc, #84]	; (8002558 <MX_GPIO_Init+0x1b8>)
 8002502:	f001 f863 	bl	80035cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2006      	movs	r0, #6
 800250c:	f000 ff95 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002510:	2006      	movs	r0, #6
 8002512:	f000 ffae 	bl	8003472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2009      	movs	r0, #9
 800251c:	f000 ff8d 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002520:	2009      	movs	r0, #9
 8002522:	f000 ffa6 	bl	8003472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2017      	movs	r0, #23
 800252c:	f000 ff85 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002530:	2017      	movs	r0, #23
 8002532:	f000 ff9e 	bl	8003472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2028      	movs	r0, #40	; 0x28
 800253c:	f000 ff7d 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002540:	2028      	movs	r0, #40	; 0x28
 8002542:	f000 ff96 	bl	8003472 <HAL_NVIC_EnableIRQ>

}
 8002546:	bf00      	nop
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40020400 	.word	0x40020400

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800256c:	e7fe      	b.n	800256c <Error_Handler+0x8>
	...

08002570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_MspInit+0x4c>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_MspInit+0x4c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ae:	2007      	movs	r0, #7
 80025b0:	f000 ff38 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_ADC_MspInit+0x7c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d127      	bne.n	8002632 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_ADC_MspInit+0x80>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_ADC_MspInit+0x80>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_ADC_MspInit+0x80>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_ADC_MspInit+0x80>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_ADC_MspInit+0x80>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_ADC_MspInit+0x80>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800261a:	2302      	movs	r3, #2
 800261c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261e:	2303      	movs	r3, #3
 8002620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_ADC_MspInit+0x84>)
 800262e:	f000 ffcd 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40012000 	.word	0x40012000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_I2C_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002686:	23c0      	movs	r3, #192	; 0xc0
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002696:	2304      	movs	r3, #4
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <HAL_I2C_MspInit+0x8c>)
 80026a2:	f000 ff93 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002706:	e012      	b.n	800272e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_TIM_Base_MspInit+0x6c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10d      	bne.n	800272e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	40023800 	.word	0x40023800
 8002744:	40001000 	.word	0x40001000

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_UART_MspInit+0x94>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d133      	bne.n	80027d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_UART_MspInit+0x98>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_UART_MspInit+0x98>)
 8002774:	f043 0320 	orr.w	r3, r3, #32
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x98>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0x98>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_UART_MspInit+0x98>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_UART_MspInit+0x98>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027b2:	2308      	movs	r3, #8
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4809      	ldr	r0, [pc, #36]	; (80027e4 <HAL_UART_MspInit+0x9c>)
 80027be:	f000 ff05 	bl	80035cc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2047      	movs	r0, #71	; 0x47
 80027c8:	f000 fe37 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027cc:	2047      	movs	r0, #71	; 0x47
 80027ce:	f000 fe50 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40011400 	.word	0x40011400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 f906 	bl	8002a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002840:	2001      	movs	r0, #1
 8002842:	f001 f891 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}

0800284a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800284e:	2008      	movs	r0, #8
 8002850:	f001 f88a 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800285c:	2080      	movs	r0, #128	; 0x80
 800285e:	f001 f883 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002866:	f001 f87f 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}

0800286e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002872:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002876:	f001 f877 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800287a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800287e:	f001 f873 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002882:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002886:	f001 f86f 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800288a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800288e:	f001 f86b 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002892:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002896:	f001 f867 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800289a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800289e:	f001 f863 	bl	8003968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <USART6_IRQHandler+0x10>)
 80028ae:	f002 fd79 	bl	80053a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000268 	.word	0x20000268

080028bc <_sbrk>:
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
 80028ec:	f003 fc12 	bl	8006114 <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20020000 	.word	0x20020000
 800291c:	00000400 	.word	0x00000400
 8002920:	200000e8 	.word	0x200000e8
 8002924:	200002d8 	.word	0x200002d8

08002928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <SystemInit+0x20>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <SystemInit+0x20>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack     /* set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002950:	480d      	ldr	r0, [pc, #52]	; (8002988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002952:	490e      	ldr	r1, [pc, #56]	; (800298c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002968:	4c0b      	ldr	r4, [pc, #44]	; (8002998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002976:	f7ff ffd7 	bl	8002928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297a:	f003 fbd1 	bl	8006120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800297e:	f7ff fa9d 	bl	8001ebc <main>
  bx  lr    
 8002982:	4770      	bx	lr
;  ldr   sp, =_estack     /* set stack pointer */
 8002984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002990:	08006f74 	.word	0x08006f74
  ldr r2, =_sbss
 8002994:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002998:	200002d4 	.word	0x200002d4

0800299c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_Init+0x40>)
 80029aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_Init+0x40>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_Init+0x40>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 fd2b 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 f808 	bl	80029e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d4:	f7ff fdcc 	bl	8002570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x54>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x58>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fd43 	bl	800348e <HAL_SYSTICK_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00e      	b.n	8002a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d80a      	bhi.n	8002a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f000 fd0b 	bl	800343a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <HAL_InitTick+0x5c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	20000018 	.word	0x20000018
 8002a40:	20000014 	.word	0x20000014

08002a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x20>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_IncTick+0x24>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_IncTick+0x24>)
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000018 	.word	0x20000018
 8002a68:	200002c0 	.word	0x200002c0

08002a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_GetTick+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	200002c0 	.word	0x200002c0

08002a84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e033      	b.n	8002b02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fd8c 	bl	80025c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aca:	f023 0302 	bic.w	r3, r3, #2
 8002ace:	f043 0202 	orr.w	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fad8 	bl	800308c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
 8002af2:	e001      	b.n	8002af8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Start+0x1a>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e0b2      	b.n	8002c8c <HAL_ADC_Start+0x180>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d018      	beq.n	8002b6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b4c:	4b52      	ldr	r3, [pc, #328]	; (8002c98 <HAL_ADC_Start+0x18c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_ADC_Start+0x190>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9a      	lsrs	r2, r3, #18
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b60:	e002      	b.n	8002b68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f9      	bne.n	8002b62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d17a      	bne.n	8002c72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d106      	bne.n	8002bca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f023 0206 	bic.w	r2, r3, #6
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_ADC_Start+0x194>)
 8002bda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002be4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <HAL_ADC_Start+0x198>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d015      	beq.n	8002c28 <HAL_ADC_Start+0x11c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_ADC_Start+0x19c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_Start+0x106>
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_ADC_Start+0x194>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <HAL_ADC_Start+0x1a0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d136      	bne.n	8002c8a <HAL_ADC_Start+0x17e>
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_ADC_Start+0x194>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d130      	bne.n	8002c8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d129      	bne.n	8002c8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e020      	b.n	8002c8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_ADC_Start+0x198>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d11b      	bne.n	8002c8a <HAL_ADC_Start+0x17e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d114      	bne.n	8002c8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e00b      	b.n	8002c8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	20000010 	.word	0x20000010
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	40012300 	.word	0x40012300
 8002ca4:	40012000 	.word	0x40012000
 8002ca8:	40012100 	.word	0x40012100
 8002cac:	40012200 	.word	0x40012200

08002cb0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Stop+0x16>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e021      	b.n	8002d0a <HAL_ADC_Stop+0x5a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d32:	d113      	bne.n	8002d5c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d42:	d10b      	bne.n	8002d5c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e063      	b.n	8002e24 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d5c:	f7ff fe86 	bl	8002a6c <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d62:	e021      	b.n	8002da8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d01d      	beq.n	8002da8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_ADC_PollForConversion+0x6c>
 8002d72:	f7ff fe7b 	bl	8002a6c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d212      	bcs.n	8002da8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d00b      	beq.n	8002da8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d1d6      	bne.n	8002d64 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0212 	mvn.w	r2, #18
 8002dbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d123      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11f      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d111      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1c>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e105      	b.n	8003070 <HAL_ADC_ConfigChannel+0x228>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	d925      	bls.n	8002ec0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68d9      	ldr	r1, [r3, #12]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	3b1e      	subs	r3, #30
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68d9      	ldr	r1, [r3, #12]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4603      	mov	r3, r0
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4403      	add	r3, r0
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	e022      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6919      	ldr	r1, [r3, #16]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4403      	add	r3, r0
 8002efc:	409a      	lsls	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d824      	bhi.n	8002f58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b05      	subs	r3, #5
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b05      	subs	r3, #5
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
 8002f56:	e04c      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d824      	bhi.n	8002faa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b23      	subs	r3, #35	; 0x23
 8002f72:	221f      	movs	r2, #31
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	400a      	ands	r2, r1
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	3b23      	subs	r3, #35	; 0x23
 8002f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa8:	e023      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b41      	subs	r3, #65	; 0x41
 8002fbc:	221f      	movs	r2, #31
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	400a      	ands	r2, r1
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3b41      	subs	r3, #65	; 0x41
 8002fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_ADC_ConfigChannel+0x234>)
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <HAL_ADC_ConfigChannel+0x238>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1cc>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b12      	cmp	r3, #18
 8003006:	d105      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_ADC_ConfigChannel+0x238>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d123      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x21e>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b10      	cmp	r3, #16
 8003024:	d003      	beq.n	800302e <HAL_ADC_ConfigChannel+0x1e6>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b11      	cmp	r3, #17
 800302c:	d11b      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d111      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_ADC_ConfigChannel+0x23c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_ADC_ConfigChannel+0x240>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0c9a      	lsrs	r2, r3, #18
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003058:	e002      	b.n	8003060 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3b01      	subs	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f9      	bne.n	800305a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012300 	.word	0x40012300
 8003080:	40012000 	.word	0x40012000
 8003084:	20000010 	.word	0x20000010
 8003088:	431bde83 	.word	0x431bde83

0800308c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003094:	4b79      	ldr	r3, [pc, #484]	; (800327c <ADC_Init+0x1f0>)
 8003096:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	021a      	lsls	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	4a58      	ldr	r2, [pc, #352]	; (8003280 <ADC_Init+0x1f4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e00f      	b.n	800318a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0202 	bic.w	r2, r2, #2
 8003198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7e1b      	ldrb	r3, [r3, #24]
 80031a4:	005a      	lsls	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	3b01      	subs	r3, #1
 80031e4:	035a      	lsls	r2, r3, #13
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	e007      	b.n	8003200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	3b01      	subs	r3, #1
 800321c:	051a      	lsls	r2, r3, #20
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003242:	025a      	lsls	r2, r3, #9
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	029a      	lsls	r2, r3, #10
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012300 	.word	0x40012300
 8003280:	0f000001 	.word	0x0f000001

08003284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a0:	4013      	ands	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b6:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	60d3      	str	r3, [r2, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <__NVIC_GetPriorityGrouping+0x18>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 0307 	and.w	r3, r3, #7
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	db0b      	blt.n	8003312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <__NVIC_EnableIRQ+0x38>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2001      	movs	r0, #1
 800330a:	fa00 f202 	lsl.w	r2, r0, r2
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	; (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f0:	d301      	bcc.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00f      	b.n	8003416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <SysTick_Config+0x40>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	210f      	movs	r1, #15
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	f7ff ff8e 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <SysTick_Config+0x40>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <SysTick_Config+0x40>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff29 	bl	8003284 <__NVIC_SetPriorityGrouping>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800344c:	f7ff ff3e 	bl	80032cc <__NVIC_GetPriorityGrouping>
 8003450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7ff ff8e 	bl	8003378 <NVIC_EncodePriority>
 800345c:	4602      	mov	r2, r0
 800345e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff5d 	bl	8003324 <__NVIC_SetPriority>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff31 	bl	80032e8 <__NVIC_EnableIRQ>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ffa2 	bl	80033e0 <SysTick_Config>
 800349c:	4603      	mov	r3, r0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff fada 	bl	8002a6c <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d008      	beq.n	80034d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e052      	b.n	800357e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0216 	bic.w	r2, r2, #22
 80034e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <HAL_DMA_Abort+0x62>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003528:	e013      	b.n	8003552 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800352a:	f7ff fa9f 	bl	8002a6c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b05      	cmp	r3, #5
 8003536:	d90c      	bls.n	8003552 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e015      	b.n	800357e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e4      	bne.n	800352a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	223f      	movs	r2, #63	; 0x3f
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e00c      	b.n	80035be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2205      	movs	r2, #5
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	e16b      	b.n	80038c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	f040 815a 	bne.w	80038ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d005      	beq.n	800361e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	2b02      	cmp	r3, #2
 800361c:	d130      	bne.n	8003680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003654:	2201      	movs	r2, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 0201 	and.w	r2, r3, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b03      	cmp	r3, #3
 800368a:	d017      	beq.n	80036bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d123      	bne.n	8003710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	08da      	lsrs	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3208      	adds	r2, #8
 80036d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	220f      	movs	r2, #15
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	08da      	lsrs	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3208      	adds	r2, #8
 800370a:	69b9      	ldr	r1, [r7, #24]
 800370c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0203 	and.w	r2, r3, #3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80b4 	beq.w	80038ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <HAL_GPIO_Init+0x30c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	4a5f      	ldr	r2, [pc, #380]	; (80038d8 <HAL_GPIO_Init+0x30c>)
 800375c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
 8003762:	4b5d      	ldr	r3, [pc, #372]	; (80038d8 <HAL_GPIO_Init+0x30c>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376e:	4a5b      	ldr	r2, [pc, #364]	; (80038dc <HAL_GPIO_Init+0x310>)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_GPIO_Init+0x314>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02b      	beq.n	80037f2 <HAL_GPIO_Init+0x226>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_GPIO_Init+0x318>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d025      	beq.n	80037ee <HAL_GPIO_Init+0x222>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <HAL_GPIO_Init+0x31c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01f      	beq.n	80037ea <HAL_GPIO_Init+0x21e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4f      	ldr	r2, [pc, #316]	; (80038ec <HAL_GPIO_Init+0x320>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d019      	beq.n	80037e6 <HAL_GPIO_Init+0x21a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4e      	ldr	r2, [pc, #312]	; (80038f0 <HAL_GPIO_Init+0x324>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_GPIO_Init+0x216>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4d      	ldr	r2, [pc, #308]	; (80038f4 <HAL_GPIO_Init+0x328>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00d      	beq.n	80037de <HAL_GPIO_Init+0x212>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4c      	ldr	r2, [pc, #304]	; (80038f8 <HAL_GPIO_Init+0x32c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <HAL_GPIO_Init+0x20e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <HAL_GPIO_Init+0x330>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_GPIO_Init+0x20a>
 80037d2:	2307      	movs	r3, #7
 80037d4:	e00e      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037d6:	2308      	movs	r3, #8
 80037d8:	e00c      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037da:	2306      	movs	r3, #6
 80037dc:	e00a      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037de:	2305      	movs	r3, #5
 80037e0:	e008      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037e2:	2304      	movs	r3, #4
 80037e4:	e006      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037e6:	2303      	movs	r3, #3
 80037e8:	e004      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_GPIO_Init+0x228>
 80037f2:	2300      	movs	r3, #0
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	f002 0203 	and.w	r2, r2, #3
 80037fa:	0092      	lsls	r2, r2, #2
 80037fc:	4093      	lsls	r3, r2
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003804:	4935      	ldr	r1, [pc, #212]	; (80038dc <HAL_GPIO_Init+0x310>)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	3302      	adds	r3, #2
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_GPIO_Init+0x334>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003836:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_GPIO_Init+0x334>)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800383c:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_GPIO_Init+0x334>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_GPIO_Init+0x334>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_GPIO_Init+0x334>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <HAL_GPIO_Init+0x334>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_GPIO_Init+0x334>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b4:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_GPIO_Init+0x334>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	f67f ae90 	bls.w	80035e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40013800 	.word	0x40013800
 80038e0:	40020000 	.word	0x40020000
 80038e4:	40020400 	.word	0x40020400
 80038e8:	40020800 	.word	0x40020800
 80038ec:	40020c00 	.word	0x40020c00
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40021400 	.word	0x40021400
 80038f8:	40021800 	.word	0x40021800
 80038fc:	40021c00 	.word	0x40021c00
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e001      	b.n	8003926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fa34 	bl	8001df4 <HAL_GPIO_EXTI_Callback>
  }
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fe42 	bl	8002648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f001 f864 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	817b      	strh	r3, [r7, #10]
 8003c30:	4613      	mov	r3, r2
 8003c32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7fe ff1a 	bl	8002a6c <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	f040 80e0 	bne.w	8003e08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2319      	movs	r3, #25
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4970      	ldr	r1, [pc, #448]	; (8003e14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f964 	bl	8003f20 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0d3      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2C_Master_Transmit+0x50>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0cc      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d007      	beq.n	8003c96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2221      	movs	r2, #33	; 0x21
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	893a      	ldrh	r2, [r7, #8]
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a50      	ldr	r2, [pc, #320]	; (8003e18 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cd8:	8979      	ldrh	r1, [r7, #10]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f89c 	bl	8003e1c <I2C_MasterRequestWrite>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08d      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d04:	e066      	b.n	8003dd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	6a39      	ldr	r1, [r7, #32]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f9de 	bl	80040cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d107      	bne.n	8003d2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06b      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d11b      	bne.n	8003da8 <HAL_I2C_Master_Transmit+0x188>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	6a39      	ldr	r1, [r7, #32]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9ce 	bl	800414e <I2C_WaitOnBTFFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e01a      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d194      	bne.n	8003d06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	00100002 	.word	0x00100002
 8003e18:	ffff0000 	.word	0xffff0000

08003e1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d006      	beq.n	8003e46 <I2C_MasterRequestWrite+0x2a>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d003      	beq.n	8003e46 <I2C_MasterRequestWrite+0x2a>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e44:	d108      	bne.n	8003e58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e00b      	b.n	8003e70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b12      	cmp	r3, #18
 8003e5e:	d107      	bne.n	8003e70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f84f 	bl	8003f20 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d103      	bne.n	8003ea0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e035      	b.n	8003f10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eac:	d108      	bne.n	8003ec0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eae:	897b      	ldrh	r3, [r7, #10]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ebc:	611a      	str	r2, [r3, #16]
 8003ebe:	e01b      	b.n	8003ef8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	11db      	asrs	r3, r3, #7
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f063 030f 	orn	r3, r3, #15
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	490e      	ldr	r1, [pc, #56]	; (8003f18 <I2C_MasterRequestWrite+0xfc>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f875 	bl	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e010      	b.n	8003f10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003eee:	897b      	ldrh	r3, [r7, #10]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <I2C_MasterRequestWrite+0x100>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f865 	bl	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	00010008 	.word	0x00010008
 8003f1c:	00010002 	.word	0x00010002

08003f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f30:	e025      	b.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d021      	beq.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fe fd97 	bl	8002a6c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d116      	bne.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e023      	b.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10d      	bne.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	e00c      	b.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2301      	moveq	r3, #1
 8003fb8:	2300      	movne	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d0b6      	beq.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fdc:	e051      	b.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d123      	bne.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004006:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e046      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d021      	beq.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe fd15 	bl	8002a6c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d116      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e020      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10c      	bne.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e00b      	b.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d18d      	bne.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d8:	e02d      	b.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f878 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e02d      	b.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d021      	beq.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fe fcbb 	bl	8002a6c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e007      	b.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d1ca      	bne.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800415a:	e02d      	b.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f837 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e02d      	b.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d021      	beq.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe fc7a 	bl	8002a6c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d1ca      	bne.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d11b      	bne.n	8004220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e264      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d075      	beq.n	800433a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424e:	4ba3      	ldr	r3, [pc, #652]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00c      	beq.n	8004274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4ba0      	ldr	r3, [pc, #640]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	2b08      	cmp	r3, #8
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b9d      	ldr	r3, [pc, #628]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004272:	d10b      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	4b99      	ldr	r3, [pc, #612]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <HAL_RCC_OscConfig+0x108>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d157      	bne.n	8004338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e23f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x74>
 8004296:	4b91      	ldr	r3, [pc, #580]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a90      	ldr	r2, [pc, #576]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e01d      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b8b      	ldr	r3, [pc, #556]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a8a      	ldr	r2, [pc, #552]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a87      	ldr	r2, [pc, #540]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042c8:	4b84      	ldr	r3, [pc, #528]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a83      	ldr	r2, [pc, #524]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b81      	ldr	r3, [pc, #516]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a80      	ldr	r2, [pc, #512]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fbc0 	bl	8002a6c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe fbbc 	bl	8002a6c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e204      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe fbac 	bl	8002a6c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe fba8 	bl	8002a6c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1f0      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0xe8>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1c4      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b56      	ldr	r3, [pc, #344]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4952      	ldr	r1, [pc, #328]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe fb61 	bl	8002a6c <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe fb5d 	bl	8002a6c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1a5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b46      	ldr	r3, [pc, #280]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4940      	ldr	r1, [pc, #256]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fb40 	bl	8002a6c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe fb3c 	bl	8002a6c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e184      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d030      	beq.n	800447c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe fb20 	bl	8002a6c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe fb1c 	bl	8002a6c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e164      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x200>
 800444e:	e015      	b.n	800447c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe fb09 	bl	8002a6c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe fb05 	bl	8002a6c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e14d      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe facb 	bl	8002a6c <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e011      	b.n	80044fe <HAL_RCC_OscConfig+0x2ce>
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	42470000 	.word	0x42470000
 80044e4:	42470e80 	.word	0x42470e80
 80044e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fe fabe 	bl	8002a6c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e106      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x4e4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x2f0>
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x312>
 8004528:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a7a      	ldr	r2, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a71      	ldr	r2, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fa83 	bl	8002a6c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fa7f 	bl	8002a6c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0c5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b65      	ldr	r3, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x33a>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fe fa6d 	bl	8002a6c <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fe fa69 	bl	8002a6c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0af      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a55      	ldr	r2, [pc, #340]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809b 	beq.w	800470a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d05c      	beq.n	800469a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d141      	bne.n	800466c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe fa3d 	bl	8002a6c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe fa39 	bl	8002a6c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e081      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	019b      	lsls	r3, r3, #6
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fa12 	bl	8002a6c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fa0e 	bl	8002a6c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e056      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x41c>
 800466a:	e04e      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe f9fb 	bl	8002a6c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe f9f7 	bl	8002a6c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e03f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x44a>
 8004698:	e037      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e032      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d028      	beq.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d11a      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40007000 	.word	0x40007000
 8004718:	40023800 	.word	0x40023800
 800471c:	42470060 	.word	0x42470060

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe f92c 	bl	8002a6c <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe f928 	bl	8002a6c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe f88c 	bl	80029e4 <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	08006f18 	.word	0x08006f18
 80048e4:	20000010 	.word	0x20000010
 80048e8:	20000014 	.word	0x20000014

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4b67      	ldr	r3, [pc, #412]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d00d      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x40>
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 80bd 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x3a>
 800491e:	e0b7      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004922:	60bb      	str	r3, [r7, #8]
       break;
 8004924:	e0b7      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e0b4      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04d      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	ea02 0800 	and.w	r8, r2, r0
 800495a:	ea03 0901 	and.w	r9, r3, r1
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	014b      	lsls	r3, r1, #5
 800496c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004970:	0142      	lsls	r2, r0, #5
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	ebb0 0008 	subs.w	r0, r0, r8
 800497a:	eb61 0109 	sbc.w	r1, r1, r9
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800498c:	0182      	lsls	r2, r0, #6
 800498e:	1a12      	subs	r2, r2, r0
 8004990:	eb63 0301 	sbc.w	r3, r3, r1
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	00d9      	lsls	r1, r3, #3
 800499e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a2:	00d0      	lsls	r0, r2, #3
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	eb12 0208 	adds.w	r2, r2, r8
 80049ac:	eb43 0309 	adc.w	r3, r3, r9
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0259      	lsls	r1, r3, #9
 80049ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049be:	0250      	lsls	r0, r2, #9
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	f7fb fc66 	bl	80002a0 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e04a      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	ea02 0400 	and.w	r4, r2, r0
 80049f6:	ea03 0501 	and.w	r5, r3, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	014b      	lsls	r3, r1, #5
 8004a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a0c:	0142      	lsls	r2, r0, #5
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	1b00      	subs	r0, r0, r4
 8004a14:	eb61 0105 	sbc.w	r1, r1, r5
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	018b      	lsls	r3, r1, #6
 8004a22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a26:	0182      	lsls	r2, r0, #6
 8004a28:	1a12      	subs	r2, r2, r0
 8004a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	00d9      	lsls	r1, r3, #3
 8004a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a3c:	00d0      	lsls	r0, r2, #3
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	1912      	adds	r2, r2, r4
 8004a44:	eb45 0303 	adc.w	r3, r5, r3
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0299      	lsls	r1, r3, #10
 8004a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a56:	0290      	lsls	r0, r2, #10
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f7fb fc1a 	bl	80002a0 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	60bb      	str	r3, [r7, #8]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a92:	60bb      	str	r3, [r7, #8]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	68bb      	ldr	r3, [r7, #8]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000010 	.word	0x20000010

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08006f28 	.word	0x08006f28

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffdc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0b5b      	lsrs	r3, r3, #13
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08006f28 	.word	0x08006f28

08004b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fdca 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 f95e 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e046      	b.n	8004c5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_TIM_Base_Start+0xb4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d01d      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_TIM_Base_Start+0xb8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_TIM_Base_Start+0xbc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <HAL_TIM_Base_Start+0xc0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_TIM_Base_Start+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_TIM_Base_Start+0xc8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Start+0x70>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIM_Base_Start+0xcc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d111      	bne.n	8004c4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d010      	beq.n	8004c5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e007      	b.n	8004c5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0b4      	b.n	8004e0e <HAL_TIM_ConfigClockSource+0x186>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cdc:	d03e      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0xd4>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce2:	f200 8087 	bhi.w	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	f000 8086 	beq.w	8004dfa <HAL_TIM_ConfigClockSource+0x172>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	d87f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b70      	cmp	r3, #112	; 0x70
 8004cf6:	d01a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xa6>
 8004cf8:	2b70      	cmp	r3, #112	; 0x70
 8004cfa:	d87b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b60      	cmp	r3, #96	; 0x60
 8004cfe:	d050      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d00:	2b60      	cmp	r3, #96	; 0x60
 8004d02:	d877      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b50      	cmp	r3, #80	; 0x50
 8004d06:	d03c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xfa>
 8004d08:	2b50      	cmp	r3, #80	; 0x50
 8004d0a:	d873      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d058      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d86f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b30      	cmp	r3, #48	; 0x30
 8004d16:	d064      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d18:	2b30      	cmp	r3, #48	; 0x30
 8004d1a:	d86b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d060      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d867      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d05a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	e062      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f000 f985 	bl	800504c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
      break;
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f000 f96e 	bl	800504c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7e:	609a      	str	r2, [r3, #8]
      break;
 8004d80:	e03c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 f8e2 	bl	8004f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2150      	movs	r1, #80	; 0x50
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f93b 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004da0:	e02c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 f901 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2160      	movs	r1, #96	; 0x60
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f92b 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e01c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 f8c2 	bl	8004f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	; 0x40
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f91b 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004de0:	e00c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 f912 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3c      	ldr	r2, [pc, #240]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3b      	ldr	r2, [pc, #236]	; (8004f38 <TIM_Base_SetConfig+0x120>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3a      	ldr	r2, [pc, #232]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d027      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d023      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <TIM_Base_SetConfig+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <TIM_Base_SetConfig+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <TIM_Base_SetConfig+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a24      	ldr	r2, [pc, #144]	; (8004f50 <TIM_Base_SetConfig+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d103      	bne.n	8004f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	615a      	str	r2, [r3, #20]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	40001800 	.word	0x40001800
 8004f50:	40001c00 	.word	0x40001c00
 8004f54:	40002000 	.word	0x40002000

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0210 	bic.w	r2, r3, #16
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e05a      	b.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d01d      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10c      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800

08005184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e03f      	b.n	8005216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fd facc 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fddb 	bl	8005d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	; 0x28
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d17c      	bne.n	8005338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UART_Transmit+0x2c>
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e075      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Transmit+0x3e>
 8005258:	2302      	movs	r3, #2
 800525a:	e06e      	b.n	800533a <HAL_UART_Transmit+0x11c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fd fbfb 	bl	8002a6c <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052b0:	e02a      	b.n	8005308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fb1f 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e036      	b.n	800533a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3302      	adds	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e007      	b.n	80052fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cf      	bne.n	80052b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 faef 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b20      	cmp	r3, #32
 800535a:	d11d      	bne.n	8005398 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_UART_Receive_IT+0x26>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e016      	b.n	800539a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Receive_IT+0x38>
 8005376:	2302      	movs	r3, #2
 8005378:	e00f      	b.n	800539a <HAL_UART_Receive_IT+0x58>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	461a      	mov	r2, r3
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb24 	bl	80059dc <UART_Start_Receive_IT>
 8005394:	4603      	mov	r3, r0
 8005396:	e000      	b.n	800539a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b0ba      	sub	sp, #232	; 0xe8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_UART_IRQHandler+0x66>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fc03 	bl	8005c0e <UART_Receive_IT>
      return;
 8005408:	e256      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80de 	beq.w	80055d0 <HAL_UART_IRQHandler+0x22c>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80d1 	beq.w	80055d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HAL_UART_IRQHandler+0xae>
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xd2>
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xf6>
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d011      	beq.n	80054ca <HAL_UART_IRQHandler+0x126>
 80054a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0208 	orr.w	r2, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 81ed 	beq.w	80058ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_UART_IRQHandler+0x14e>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fb8e 	bl	8005c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <HAL_UART_IRQHandler+0x17a>
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04f      	beq.n	80055be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa96 	bl	8005a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d141      	bne.n	80055b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800555e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800556a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1d9      	bne.n	8005532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	4a7d      	ldr	r2, [pc, #500]	; (8005780 <HAL_UART_IRQHandler+0x3dc>)
 800558c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	4618      	mov	r0, r3
 8005594:	f7fd fff7 	bl	8003586 <HAL_DMA_Abort_IT>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e00e      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f990 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	e00a      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f98c 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e006      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f988 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055ca:	e170      	b.n	80058ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	bf00      	nop
    return;
 80055ce:	e16e      	b.n	80058ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 814a 	bne.w	800586e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8143 	beq.w	800586e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 813c 	beq.w	800586e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	f040 80b4 	bne.w	8005784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8140 	beq.w	80058b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800563a:	429a      	cmp	r2, r3
 800563c:	f080 8139 	bcs.w	80058b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005652:	f000 8088 	beq.w	8005766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800566c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800569a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1d9      	bne.n	8005656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e1      	bne.n	80056a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005748:	65ba      	str	r2, [r7, #88]	; 0x58
 800574a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	4618      	mov	r0, r3
 8005762:	f7fd fea0 	bl	80034a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576e:	b29b      	uxth	r3, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8b6 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577c:	e099      	b.n	80058b2 <HAL_UART_IRQHandler+0x50e>
 800577e:	bf00      	nop
 8005780:	08005b17 	.word	0x08005b17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 808b 	beq.w	80058b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ce:	647a      	str	r2, [r7, #68]	; 0x44
 80057d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	623b      	str	r3, [r7, #32]
   return(result);
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005806:	633a      	str	r2, [r7, #48]	; 0x30
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60fb      	str	r3, [r7, #12]
   return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	617b      	str	r3, [r7, #20]
   return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f83e 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800586c:	e023      	b.n	80058b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_UART_IRQHandler+0x4ea>
 800587a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f959 	bl	8005b3e <UART_Transmit_IT>
    return;
 800588c:	e014      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00e      	beq.n	80058b8 <HAL_UART_IRQHandler+0x514>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f999 	bl	8005bde <UART_EndTransmit_IT>
    return;
 80058ac:	e004      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
    return;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
      return;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
      return;
 80058b6:	bf00      	nop
  }
}
 80058b8:	37e8      	adds	r7, #232	; 0xe8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop

080058c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b090      	sub	sp, #64	; 0x40
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e050      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d04c      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800591a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
 8005920:	f7fd f8a4 	bl	8002a6c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592c:	429a      	cmp	r2, r3
 800592e:	d241      	bcs.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005950:	637a      	str	r2, [r7, #52]	; 0x34
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	613b      	str	r3, [r7, #16]
   return(result);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005984:	623a      	str	r2, [r7, #32]
 8005986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69f9      	ldr	r1, [r7, #28]
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	61bb      	str	r3, [r7, #24]
   return(result);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e00f      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d09f      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3740      	adds	r7, #64	; 0x40
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	; 0x22
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0220 	orr.w	r2, r2, #32
 8005a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b095      	sub	sp, #84	; 0x54
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a78:	643a      	str	r2, [r7, #64]	; 0x40
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d119      	bne.n	8005afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae8:	61ba      	str	r2, [r7, #24]
 8005aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	613b      	str	r3, [r7, #16]
   return(result);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b0a:	bf00      	nop
 8005b0c:	3754      	adds	r7, #84	; 0x54
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fecf 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b21      	cmp	r3, #33	; 0x21
 8005b50:	d13e      	bne.n	8005bd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d114      	bne.n	8005b86 <UART_Transmit_IT+0x48>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	1c9a      	adds	r2, r3, #2
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]
 8005b84:	e008      	b.n	8005b98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6211      	str	r1, [r2, #32]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fe5e 	bl	80058c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08c      	sub	sp, #48	; 0x30
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b22      	cmp	r3, #34	; 0x22
 8005c20:	f040 80ab 	bne.w	8005d7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d117      	bne.n	8005c5e <UART_Receive_IT+0x50>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d113      	bne.n	8005c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c5c:	e026      	b.n	8005cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	d007      	beq.n	8005c82 <UART_Receive_IT+0x74>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <UART_Receive_IT+0x82>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e008      	b.n	8005ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d15a      	bne.n	8005d76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0220 	bic.w	r2, r2, #32
 8005cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d135      	bne.n	8005d6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	613b      	str	r3, [r7, #16]
   return(result);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d26:	623a      	str	r2, [r7, #32]
 8005d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	69f9      	ldr	r1, [r7, #28]
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d10a      	bne.n	8005d5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fdbf 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
 8005d6a:	e002      	b.n	8005d72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fb ffdd 	bl	8001d2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e002      	b.n	8005d7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
  }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	b09f      	sub	sp, #124	; 0x7c
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9a:	68d9      	ldr	r1, [r3, #12]
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	ea40 0301 	orr.w	r3, r0, r1
 8005da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dc8:	f021 010c 	bic.w	r1, r1, #12
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de2:	6999      	ldr	r1, [r3, #24]
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	ea40 0301 	orr.w	r3, r0, r1
 8005dec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4bc5      	ldr	r3, [pc, #788]	; (8006108 <UART_SetConfig+0x384>)
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d004      	beq.n	8005e02 <UART_SetConfig+0x7e>
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4bc3      	ldr	r3, [pc, #780]	; (800610c <UART_SetConfig+0x388>)
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d103      	bne.n	8005e0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e02:	f7fe fe75 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 8005e06:	6778      	str	r0, [r7, #116]	; 0x74
 8005e08:	e002      	b.n	8005e10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fe fe5d 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8005e0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e18:	f040 80b6 	bne.w	8005f88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e1e:	461c      	mov	r4, r3
 8005e20:	f04f 0500 	mov.w	r5, #0
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e34:	1912      	adds	r2, r2, r4
 8005e36:	eb45 0303 	adc.w	r3, r5, r3
 8005e3a:	f04f 0000 	mov.w	r0, #0
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	00d9      	lsls	r1, r3, #3
 8005e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e48:	00d0      	lsls	r0, r2, #3
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	1911      	adds	r1, r2, r4
 8005e50:	6639      	str	r1, [r7, #96]	; 0x60
 8005e52:	416b      	adcs	r3, r5
 8005e54:	667b      	str	r3, [r7, #100]	; 0x64
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e64:	415b      	adcs	r3, r3
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e70:	f7fa fa16 	bl	80002a0 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4ba5      	ldr	r3, [pc, #660]	; (8006110 <UART_SetConfig+0x38c>)
 8005e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	011e      	lsls	r6, r3, #4
 8005e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e84:	461c      	mov	r4, r3
 8005e86:	f04f 0500 	mov.w	r5, #0
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	1891      	adds	r1, r2, r2
 8005e90:	6339      	str	r1, [r7, #48]	; 0x30
 8005e92:	415b      	adcs	r3, r3
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
 8005e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e9a:	1912      	adds	r2, r2, r4
 8005e9c:	eb45 0303 	adc.w	r3, r5, r3
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	00d9      	lsls	r1, r3, #3
 8005eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eae:	00d0      	lsls	r0, r2, #3
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	1911      	adds	r1, r2, r4
 8005eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005eb8:	416b      	adcs	r3, r5
 8005eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	1891      	adds	r1, r2, r2
 8005ec8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eca:	415b      	adcs	r3, r3
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ed6:	f7fa f9e3 	bl	80002a0 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4b8c      	ldr	r3, [pc, #560]	; (8006110 <UART_SetConfig+0x38c>)
 8005ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2164      	movs	r1, #100	; 0x64
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a87      	ldr	r2, [pc, #540]	; (8006110 <UART_SetConfig+0x38c>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f00:	441e      	add	r6, r3
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	4618      	mov	r0, r3
 8005f06:	f04f 0100 	mov.w	r1, #0
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	1894      	adds	r4, r2, r2
 8005f10:	623c      	str	r4, [r7, #32]
 8005f12:	415b      	adcs	r3, r3
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
 8005f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f1a:	1812      	adds	r2, r2, r0
 8005f1c:	eb41 0303 	adc.w	r3, r1, r3
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	f04f 0500 	mov.w	r5, #0
 8005f28:	00dd      	lsls	r5, r3, #3
 8005f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f2e:	00d4      	lsls	r4, r2, #3
 8005f30:	4622      	mov	r2, r4
 8005f32:	462b      	mov	r3, r5
 8005f34:	1814      	adds	r4, r2, r0
 8005f36:	653c      	str	r4, [r7, #80]	; 0x50
 8005f38:	414b      	adcs	r3, r1
 8005f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	61b9      	str	r1, [r7, #24]
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f56:	f7fa f9a3 	bl	80002a0 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4b6c      	ldr	r3, [pc, #432]	; (8006110 <UART_SetConfig+0x38c>)
 8005f60:	fba3 1302 	umull	r1, r3, r3, r2
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	3332      	adds	r3, #50	; 0x32
 8005f72:	4a67      	ldr	r2, [pc, #412]	; (8006110 <UART_SetConfig+0x38c>)
 8005f74:	fba2 2303 	umull	r2, r3, r2, r3
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	f003 0207 	and.w	r2, r3, #7
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4432      	add	r2, r6
 8005f84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f86:	e0b9      	b.n	80060fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8a:	461c      	mov	r4, r3
 8005f8c:	f04f 0500 	mov.w	r5, #0
 8005f90:	4622      	mov	r2, r4
 8005f92:	462b      	mov	r3, r5
 8005f94:	1891      	adds	r1, r2, r2
 8005f96:	6139      	str	r1, [r7, #16]
 8005f98:	415b      	adcs	r3, r3
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fa0:	1912      	adds	r2, r2, r4
 8005fa2:	eb45 0303 	adc.w	r3, r5, r3
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	00d9      	lsls	r1, r3, #3
 8005fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fb4:	00d0      	lsls	r0, r2, #3
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	eb12 0804 	adds.w	r8, r2, r4
 8005fbe:	eb43 0905 	adc.w	r9, r3, r5
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	008b      	lsls	r3, r1, #2
 8005fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fda:	0082      	lsls	r2, r0, #2
 8005fdc:	4640      	mov	r0, r8
 8005fde:	4649      	mov	r1, r9
 8005fe0:	f7fa f95e 	bl	80002a0 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4b49      	ldr	r3, [pc, #292]	; (8006110 <UART_SetConfig+0x38c>)
 8005fea:	fba3 2302 	umull	r2, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	011e      	lsls	r6, r3, #4
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	1894      	adds	r4, r2, r2
 8006000:	60bc      	str	r4, [r7, #8]
 8006002:	415b      	adcs	r3, r3
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800600a:	1812      	adds	r2, r2, r0
 800600c:	eb41 0303 	adc.w	r3, r1, r3
 8006010:	f04f 0400 	mov.w	r4, #0
 8006014:	f04f 0500 	mov.w	r5, #0
 8006018:	00dd      	lsls	r5, r3, #3
 800601a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800601e:	00d4      	lsls	r4, r2, #3
 8006020:	4622      	mov	r2, r4
 8006022:	462b      	mov	r3, r5
 8006024:	1814      	adds	r4, r2, r0
 8006026:	64bc      	str	r4, [r7, #72]	; 0x48
 8006028:	414b      	adcs	r3, r1
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800602c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4618      	mov	r0, r3
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006044:	0082      	lsls	r2, r0, #2
 8006046:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800604a:	f7fa f929 	bl	80002a0 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <UART_SetConfig+0x38c>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	2164      	movs	r1, #100	; 0x64
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	3332      	adds	r3, #50	; 0x32
 8006066:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <UART_SetConfig+0x38c>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006072:	441e      	add	r6, r3
 8006074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006076:	4618      	mov	r0, r3
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	1894      	adds	r4, r2, r2
 8006082:	603c      	str	r4, [r7, #0]
 8006084:	415b      	adcs	r3, r3
 8006086:	607b      	str	r3, [r7, #4]
 8006088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608c:	1812      	adds	r2, r2, r0
 800608e:	eb41 0303 	adc.w	r3, r1, r3
 8006092:	f04f 0400 	mov.w	r4, #0
 8006096:	f04f 0500 	mov.w	r5, #0
 800609a:	00dd      	lsls	r5, r3, #3
 800609c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060a0:	00d4      	lsls	r4, r2, #3
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	eb12 0a00 	adds.w	sl, r2, r0
 80060aa:	eb43 0b01 	adc.w	fp, r3, r1
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	008b      	lsls	r3, r1, #2
 80060c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060c6:	0082      	lsls	r2, r0, #2
 80060c8:	4650      	mov	r0, sl
 80060ca:	4659      	mov	r1, fp
 80060cc:	f7fa f8e8 	bl	80002a0 <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <UART_SetConfig+0x38c>)
 80060d6:	fba3 1302 	umull	r1, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	2164      	movs	r1, #100	; 0x64
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	3332      	adds	r3, #50	; 0x32
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <UART_SetConfig+0x38c>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4432      	add	r2, r6
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	377c      	adds	r7, #124	; 0x7c
 8006100:	46bd      	mov	sp, r7
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	bf00      	nop
 8006108:	40011000 	.word	0x40011000
 800610c:	40011400 	.word	0x40011400
 8006110:	51eb851f 	.word	0x51eb851f

08006114 <__errno>:
 8006114:	4b01      	ldr	r3, [pc, #4]	; (800611c <__errno+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000001c 	.word	0x2000001c

08006120 <__libc_init_array>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4d0d      	ldr	r5, [pc, #52]	; (8006158 <__libc_init_array+0x38>)
 8006124:	4c0d      	ldr	r4, [pc, #52]	; (800615c <__libc_init_array+0x3c>)
 8006126:	1b64      	subs	r4, r4, r5
 8006128:	10a4      	asrs	r4, r4, #2
 800612a:	2600      	movs	r6, #0
 800612c:	42a6      	cmp	r6, r4
 800612e:	d109      	bne.n	8006144 <__libc_init_array+0x24>
 8006130:	4d0b      	ldr	r5, [pc, #44]	; (8006160 <__libc_init_array+0x40>)
 8006132:	4c0c      	ldr	r4, [pc, #48]	; (8006164 <__libc_init_array+0x44>)
 8006134:	f000 fc4e 	bl	80069d4 <_init>
 8006138:	1b64      	subs	r4, r4, r5
 800613a:	10a4      	asrs	r4, r4, #2
 800613c:	2600      	movs	r6, #0
 800613e:	42a6      	cmp	r6, r4
 8006140:	d105      	bne.n	800614e <__libc_init_array+0x2e>
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f855 3b04 	ldr.w	r3, [r5], #4
 8006148:	4798      	blx	r3
 800614a:	3601      	adds	r6, #1
 800614c:	e7ee      	b.n	800612c <__libc_init_array+0xc>
 800614e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006152:	4798      	blx	r3
 8006154:	3601      	adds	r6, #1
 8006156:	e7f2      	b.n	800613e <__libc_init_array+0x1e>
 8006158:	08006f6c 	.word	0x08006f6c
 800615c:	08006f6c 	.word	0x08006f6c
 8006160:	08006f6c 	.word	0x08006f6c
 8006164:	08006f70 	.word	0x08006f70

08006168 <memset>:
 8006168:	4402      	add	r2, r0
 800616a:	4603      	mov	r3, r0
 800616c:	4293      	cmp	r3, r2
 800616e:	d100      	bne.n	8006172 <memset+0xa>
 8006170:	4770      	bx	lr
 8006172:	f803 1b01 	strb.w	r1, [r3], #1
 8006176:	e7f9      	b.n	800616c <memset+0x4>

08006178 <siprintf>:
 8006178:	b40e      	push	{r1, r2, r3}
 800617a:	b500      	push	{lr}
 800617c:	b09c      	sub	sp, #112	; 0x70
 800617e:	ab1d      	add	r3, sp, #116	; 0x74
 8006180:	9002      	str	r0, [sp, #8]
 8006182:	9006      	str	r0, [sp, #24]
 8006184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006188:	4809      	ldr	r0, [pc, #36]	; (80061b0 <siprintf+0x38>)
 800618a:	9107      	str	r1, [sp, #28]
 800618c:	9104      	str	r1, [sp, #16]
 800618e:	4909      	ldr	r1, [pc, #36]	; (80061b4 <siprintf+0x3c>)
 8006190:	f853 2b04 	ldr.w	r2, [r3], #4
 8006194:	9105      	str	r1, [sp, #20]
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	a902      	add	r1, sp, #8
 800619c:	f000 f868 	bl	8006270 <_svfiprintf_r>
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	b01c      	add	sp, #112	; 0x70
 80061a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ac:	b003      	add	sp, #12
 80061ae:	4770      	bx	lr
 80061b0:	2000001c 	.word	0x2000001c
 80061b4:	ffff0208 	.word	0xffff0208

080061b8 <__ssputs_r>:
 80061b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	688e      	ldr	r6, [r1, #8]
 80061be:	429e      	cmp	r6, r3
 80061c0:	4682      	mov	sl, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	4690      	mov	r8, r2
 80061c6:	461f      	mov	r7, r3
 80061c8:	d838      	bhi.n	800623c <__ssputs_r+0x84>
 80061ca:	898a      	ldrh	r2, [r1, #12]
 80061cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061d0:	d032      	beq.n	8006238 <__ssputs_r+0x80>
 80061d2:	6825      	ldr	r5, [r4, #0]
 80061d4:	6909      	ldr	r1, [r1, #16]
 80061d6:	eba5 0901 	sub.w	r9, r5, r1
 80061da:	6965      	ldr	r5, [r4, #20]
 80061dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061e4:	3301      	adds	r3, #1
 80061e6:	444b      	add	r3, r9
 80061e8:	106d      	asrs	r5, r5, #1
 80061ea:	429d      	cmp	r5, r3
 80061ec:	bf38      	it	cc
 80061ee:	461d      	movcc	r5, r3
 80061f0:	0553      	lsls	r3, r2, #21
 80061f2:	d531      	bpl.n	8006258 <__ssputs_r+0xa0>
 80061f4:	4629      	mov	r1, r5
 80061f6:	f000 fb47 	bl	8006888 <_malloc_r>
 80061fa:	4606      	mov	r6, r0
 80061fc:	b950      	cbnz	r0, 8006214 <__ssputs_r+0x5c>
 80061fe:	230c      	movs	r3, #12
 8006200:	f8ca 3000 	str.w	r3, [sl]
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	6921      	ldr	r1, [r4, #16]
 8006216:	464a      	mov	r2, r9
 8006218:	f000 fabe 	bl	8006798 <memcpy>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	6126      	str	r6, [r4, #16]
 800622a:	6165      	str	r5, [r4, #20]
 800622c:	444e      	add	r6, r9
 800622e:	eba5 0509 	sub.w	r5, r5, r9
 8006232:	6026      	str	r6, [r4, #0]
 8006234:	60a5      	str	r5, [r4, #8]
 8006236:	463e      	mov	r6, r7
 8006238:	42be      	cmp	r6, r7
 800623a:	d900      	bls.n	800623e <__ssputs_r+0x86>
 800623c:	463e      	mov	r6, r7
 800623e:	4632      	mov	r2, r6
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	4641      	mov	r1, r8
 8006244:	f000 fab6 	bl	80067b4 <memmove>
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	1b9b      	subs	r3, r3, r6
 800624e:	4432      	add	r2, r6
 8006250:	60a3      	str	r3, [r4, #8]
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	2000      	movs	r0, #0
 8006256:	e7db      	b.n	8006210 <__ssputs_r+0x58>
 8006258:	462a      	mov	r2, r5
 800625a:	f000 fb6f 	bl	800693c <_realloc_r>
 800625e:	4606      	mov	r6, r0
 8006260:	2800      	cmp	r0, #0
 8006262:	d1e1      	bne.n	8006228 <__ssputs_r+0x70>
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	4650      	mov	r0, sl
 8006268:	f000 fabe 	bl	80067e8 <_free_r>
 800626c:	e7c7      	b.n	80061fe <__ssputs_r+0x46>
	...

08006270 <_svfiprintf_r>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	4698      	mov	r8, r3
 8006276:	898b      	ldrh	r3, [r1, #12]
 8006278:	061b      	lsls	r3, r3, #24
 800627a:	b09d      	sub	sp, #116	; 0x74
 800627c:	4607      	mov	r7, r0
 800627e:	460d      	mov	r5, r1
 8006280:	4614      	mov	r4, r2
 8006282:	d50e      	bpl.n	80062a2 <_svfiprintf_r+0x32>
 8006284:	690b      	ldr	r3, [r1, #16]
 8006286:	b963      	cbnz	r3, 80062a2 <_svfiprintf_r+0x32>
 8006288:	2140      	movs	r1, #64	; 0x40
 800628a:	f000 fafd 	bl	8006888 <_malloc_r>
 800628e:	6028      	str	r0, [r5, #0]
 8006290:	6128      	str	r0, [r5, #16]
 8006292:	b920      	cbnz	r0, 800629e <_svfiprintf_r+0x2e>
 8006294:	230c      	movs	r3, #12
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	e0d1      	b.n	8006442 <_svfiprintf_r+0x1d2>
 800629e:	2340      	movs	r3, #64	; 0x40
 80062a0:	616b      	str	r3, [r5, #20]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9309      	str	r3, [sp, #36]	; 0x24
 80062a6:	2320      	movs	r3, #32
 80062a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80062b0:	2330      	movs	r3, #48	; 0x30
 80062b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800645c <_svfiprintf_r+0x1ec>
 80062b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ba:	f04f 0901 	mov.w	r9, #1
 80062be:	4623      	mov	r3, r4
 80062c0:	469a      	mov	sl, r3
 80062c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c6:	b10a      	cbz	r2, 80062cc <_svfiprintf_r+0x5c>
 80062c8:	2a25      	cmp	r2, #37	; 0x25
 80062ca:	d1f9      	bne.n	80062c0 <_svfiprintf_r+0x50>
 80062cc:	ebba 0b04 	subs.w	fp, sl, r4
 80062d0:	d00b      	beq.n	80062ea <_svfiprintf_r+0x7a>
 80062d2:	465b      	mov	r3, fp
 80062d4:	4622      	mov	r2, r4
 80062d6:	4629      	mov	r1, r5
 80062d8:	4638      	mov	r0, r7
 80062da:	f7ff ff6d 	bl	80061b8 <__ssputs_r>
 80062de:	3001      	adds	r0, #1
 80062e0:	f000 80aa 	beq.w	8006438 <_svfiprintf_r+0x1c8>
 80062e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e6:	445a      	add	r2, fp
 80062e8:	9209      	str	r2, [sp, #36]	; 0x24
 80062ea:	f89a 3000 	ldrb.w	r3, [sl]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80a2 	beq.w	8006438 <_svfiprintf_r+0x1c8>
 80062f4:	2300      	movs	r3, #0
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fe:	f10a 0a01 	add.w	sl, sl, #1
 8006302:	9304      	str	r3, [sp, #16]
 8006304:	9307      	str	r3, [sp, #28]
 8006306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800630a:	931a      	str	r3, [sp, #104]	; 0x68
 800630c:	4654      	mov	r4, sl
 800630e:	2205      	movs	r2, #5
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	4851      	ldr	r0, [pc, #324]	; (800645c <_svfiprintf_r+0x1ec>)
 8006316:	f7f9 ff73 	bl	8000200 <memchr>
 800631a:	9a04      	ldr	r2, [sp, #16]
 800631c:	b9d8      	cbnz	r0, 8006356 <_svfiprintf_r+0xe6>
 800631e:	06d0      	lsls	r0, r2, #27
 8006320:	bf44      	itt	mi
 8006322:	2320      	movmi	r3, #32
 8006324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006328:	0711      	lsls	r1, r2, #28
 800632a:	bf44      	itt	mi
 800632c:	232b      	movmi	r3, #43	; 0x2b
 800632e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006332:	f89a 3000 	ldrb.w	r3, [sl]
 8006336:	2b2a      	cmp	r3, #42	; 0x2a
 8006338:	d015      	beq.n	8006366 <_svfiprintf_r+0xf6>
 800633a:	9a07      	ldr	r2, [sp, #28]
 800633c:	4654      	mov	r4, sl
 800633e:	2000      	movs	r0, #0
 8006340:	f04f 0c0a 	mov.w	ip, #10
 8006344:	4621      	mov	r1, r4
 8006346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800634a:	3b30      	subs	r3, #48	; 0x30
 800634c:	2b09      	cmp	r3, #9
 800634e:	d94e      	bls.n	80063ee <_svfiprintf_r+0x17e>
 8006350:	b1b0      	cbz	r0, 8006380 <_svfiprintf_r+0x110>
 8006352:	9207      	str	r2, [sp, #28]
 8006354:	e014      	b.n	8006380 <_svfiprintf_r+0x110>
 8006356:	eba0 0308 	sub.w	r3, r0, r8
 800635a:	fa09 f303 	lsl.w	r3, r9, r3
 800635e:	4313      	orrs	r3, r2
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	46a2      	mov	sl, r4
 8006364:	e7d2      	b.n	800630c <_svfiprintf_r+0x9c>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	1d19      	adds	r1, r3, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	9103      	str	r1, [sp, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfbb      	ittet	lt
 8006372:	425b      	neglt	r3, r3
 8006374:	f042 0202 	orrlt.w	r2, r2, #2
 8006378:	9307      	strge	r3, [sp, #28]
 800637a:	9307      	strlt	r3, [sp, #28]
 800637c:	bfb8      	it	lt
 800637e:	9204      	strlt	r2, [sp, #16]
 8006380:	7823      	ldrb	r3, [r4, #0]
 8006382:	2b2e      	cmp	r3, #46	; 0x2e
 8006384:	d10c      	bne.n	80063a0 <_svfiprintf_r+0x130>
 8006386:	7863      	ldrb	r3, [r4, #1]
 8006388:	2b2a      	cmp	r3, #42	; 0x2a
 800638a:	d135      	bne.n	80063f8 <_svfiprintf_r+0x188>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	9203      	str	r2, [sp, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb8      	it	lt
 8006398:	f04f 33ff 	movlt.w	r3, #4294967295
 800639c:	3402      	adds	r4, #2
 800639e:	9305      	str	r3, [sp, #20]
 80063a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800646c <_svfiprintf_r+0x1fc>
 80063a4:	7821      	ldrb	r1, [r4, #0]
 80063a6:	2203      	movs	r2, #3
 80063a8:	4650      	mov	r0, sl
 80063aa:	f7f9 ff29 	bl	8000200 <memchr>
 80063ae:	b140      	cbz	r0, 80063c2 <_svfiprintf_r+0x152>
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	eba0 000a 	sub.w	r0, r0, sl
 80063b6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	4303      	orrs	r3, r0
 80063be:	3401      	adds	r4, #1
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c6:	4826      	ldr	r0, [pc, #152]	; (8006460 <_svfiprintf_r+0x1f0>)
 80063c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063cc:	2206      	movs	r2, #6
 80063ce:	f7f9 ff17 	bl	8000200 <memchr>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d038      	beq.n	8006448 <_svfiprintf_r+0x1d8>
 80063d6:	4b23      	ldr	r3, [pc, #140]	; (8006464 <_svfiprintf_r+0x1f4>)
 80063d8:	bb1b      	cbnz	r3, 8006422 <_svfiprintf_r+0x1b2>
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	3307      	adds	r3, #7
 80063de:	f023 0307 	bic.w	r3, r3, #7
 80063e2:	3308      	adds	r3, #8
 80063e4:	9303      	str	r3, [sp, #12]
 80063e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e8:	4433      	add	r3, r6
 80063ea:	9309      	str	r3, [sp, #36]	; 0x24
 80063ec:	e767      	b.n	80062be <_svfiprintf_r+0x4e>
 80063ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80063f2:	460c      	mov	r4, r1
 80063f4:	2001      	movs	r0, #1
 80063f6:	e7a5      	b.n	8006344 <_svfiprintf_r+0xd4>
 80063f8:	2300      	movs	r3, #0
 80063fa:	3401      	adds	r4, #1
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	4619      	mov	r1, r3
 8006400:	f04f 0c0a 	mov.w	ip, #10
 8006404:	4620      	mov	r0, r4
 8006406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800640a:	3a30      	subs	r2, #48	; 0x30
 800640c:	2a09      	cmp	r2, #9
 800640e:	d903      	bls.n	8006418 <_svfiprintf_r+0x1a8>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0c5      	beq.n	80063a0 <_svfiprintf_r+0x130>
 8006414:	9105      	str	r1, [sp, #20]
 8006416:	e7c3      	b.n	80063a0 <_svfiprintf_r+0x130>
 8006418:	fb0c 2101 	mla	r1, ip, r1, r2
 800641c:	4604      	mov	r4, r0
 800641e:	2301      	movs	r3, #1
 8006420:	e7f0      	b.n	8006404 <_svfiprintf_r+0x194>
 8006422:	ab03      	add	r3, sp, #12
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	462a      	mov	r2, r5
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <_svfiprintf_r+0x1f8>)
 800642a:	a904      	add	r1, sp, #16
 800642c:	4638      	mov	r0, r7
 800642e:	f3af 8000 	nop.w
 8006432:	1c42      	adds	r2, r0, #1
 8006434:	4606      	mov	r6, r0
 8006436:	d1d6      	bne.n	80063e6 <_svfiprintf_r+0x176>
 8006438:	89ab      	ldrh	r3, [r5, #12]
 800643a:	065b      	lsls	r3, r3, #25
 800643c:	f53f af2c 	bmi.w	8006298 <_svfiprintf_r+0x28>
 8006440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006442:	b01d      	add	sp, #116	; 0x74
 8006444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006448:	ab03      	add	r3, sp, #12
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	462a      	mov	r2, r5
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <_svfiprintf_r+0x1f8>)
 8006450:	a904      	add	r1, sp, #16
 8006452:	4638      	mov	r0, r7
 8006454:	f000 f87a 	bl	800654c <_printf_i>
 8006458:	e7eb      	b.n	8006432 <_svfiprintf_r+0x1c2>
 800645a:	bf00      	nop
 800645c:	08006f30 	.word	0x08006f30
 8006460:	08006f3a 	.word	0x08006f3a
 8006464:	00000000 	.word	0x00000000
 8006468:	080061b9 	.word	0x080061b9
 800646c:	08006f36 	.word	0x08006f36

08006470 <_printf_common>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	4616      	mov	r6, r2
 8006476:	4699      	mov	r9, r3
 8006478:	688a      	ldr	r2, [r1, #8]
 800647a:	690b      	ldr	r3, [r1, #16]
 800647c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006480:	4293      	cmp	r3, r2
 8006482:	bfb8      	it	lt
 8006484:	4613      	movlt	r3, r2
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800648c:	4607      	mov	r7, r0
 800648e:	460c      	mov	r4, r1
 8006490:	b10a      	cbz	r2, 8006496 <_printf_common+0x26>
 8006492:	3301      	adds	r3, #1
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	0699      	lsls	r1, r3, #26
 800649a:	bf42      	ittt	mi
 800649c:	6833      	ldrmi	r3, [r6, #0]
 800649e:	3302      	addmi	r3, #2
 80064a0:	6033      	strmi	r3, [r6, #0]
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	f015 0506 	ands.w	r5, r5, #6
 80064a8:	d106      	bne.n	80064b8 <_printf_common+0x48>
 80064aa:	f104 0a19 	add.w	sl, r4, #25
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	6832      	ldr	r2, [r6, #0]
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc26      	bgt.n	8006506 <_printf_common+0x96>
 80064b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064bc:	1e13      	subs	r3, r2, #0
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	bf18      	it	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	0692      	lsls	r2, r2, #26
 80064c6:	d42b      	bmi.n	8006520 <_printf_common+0xb0>
 80064c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064cc:	4649      	mov	r1, r9
 80064ce:	4638      	mov	r0, r7
 80064d0:	47c0      	blx	r8
 80064d2:	3001      	adds	r0, #1
 80064d4:	d01e      	beq.n	8006514 <_printf_common+0xa4>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	68e5      	ldr	r5, [r4, #12]
 80064da:	6832      	ldr	r2, [r6, #0]
 80064dc:	f003 0306 	and.w	r3, r3, #6
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	bf08      	it	eq
 80064e4:	1aad      	subeq	r5, r5, r2
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	6922      	ldr	r2, [r4, #16]
 80064ea:	bf0c      	ite	eq
 80064ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064f0:	2500      	movne	r5, #0
 80064f2:	4293      	cmp	r3, r2
 80064f4:	bfc4      	itt	gt
 80064f6:	1a9b      	subgt	r3, r3, r2
 80064f8:	18ed      	addgt	r5, r5, r3
 80064fa:	2600      	movs	r6, #0
 80064fc:	341a      	adds	r4, #26
 80064fe:	42b5      	cmp	r5, r6
 8006500:	d11a      	bne.n	8006538 <_printf_common+0xc8>
 8006502:	2000      	movs	r0, #0
 8006504:	e008      	b.n	8006518 <_printf_common+0xa8>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4649      	mov	r1, r9
 800650c:	4638      	mov	r0, r7
 800650e:	47c0      	blx	r8
 8006510:	3001      	adds	r0, #1
 8006512:	d103      	bne.n	800651c <_printf_common+0xac>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	3501      	adds	r5, #1
 800651e:	e7c6      	b.n	80064ae <_printf_common+0x3e>
 8006520:	18e1      	adds	r1, r4, r3
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	2030      	movs	r0, #48	; 0x30
 8006526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800652a:	4422      	add	r2, r4
 800652c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006534:	3302      	adds	r3, #2
 8006536:	e7c7      	b.n	80064c8 <_printf_common+0x58>
 8006538:	2301      	movs	r3, #1
 800653a:	4622      	mov	r2, r4
 800653c:	4649      	mov	r1, r9
 800653e:	4638      	mov	r0, r7
 8006540:	47c0      	blx	r8
 8006542:	3001      	adds	r0, #1
 8006544:	d0e6      	beq.n	8006514 <_printf_common+0xa4>
 8006546:	3601      	adds	r6, #1
 8006548:	e7d9      	b.n	80064fe <_printf_common+0x8e>
	...

0800654c <_printf_i>:
 800654c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	460c      	mov	r4, r1
 8006552:	4691      	mov	r9, r2
 8006554:	7e27      	ldrb	r7, [r4, #24]
 8006556:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006558:	2f78      	cmp	r7, #120	; 0x78
 800655a:	4680      	mov	r8, r0
 800655c:	469a      	mov	sl, r3
 800655e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006562:	d807      	bhi.n	8006574 <_printf_i+0x28>
 8006564:	2f62      	cmp	r7, #98	; 0x62
 8006566:	d80a      	bhi.n	800657e <_printf_i+0x32>
 8006568:	2f00      	cmp	r7, #0
 800656a:	f000 80d8 	beq.w	800671e <_printf_i+0x1d2>
 800656e:	2f58      	cmp	r7, #88	; 0x58
 8006570:	f000 80a3 	beq.w	80066ba <_printf_i+0x16e>
 8006574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800657c:	e03a      	b.n	80065f4 <_printf_i+0xa8>
 800657e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006582:	2b15      	cmp	r3, #21
 8006584:	d8f6      	bhi.n	8006574 <_printf_i+0x28>
 8006586:	a001      	add	r0, pc, #4	; (adr r0, 800658c <_printf_i+0x40>)
 8006588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800658c:	080065e5 	.word	0x080065e5
 8006590:	080065f9 	.word	0x080065f9
 8006594:	08006575 	.word	0x08006575
 8006598:	08006575 	.word	0x08006575
 800659c:	08006575 	.word	0x08006575
 80065a0:	08006575 	.word	0x08006575
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006575 	.word	0x08006575
 80065ac:	08006575 	.word	0x08006575
 80065b0:	08006575 	.word	0x08006575
 80065b4:	08006575 	.word	0x08006575
 80065b8:	08006705 	.word	0x08006705
 80065bc:	08006629 	.word	0x08006629
 80065c0:	080066e7 	.word	0x080066e7
 80065c4:	08006575 	.word	0x08006575
 80065c8:	08006575 	.word	0x08006575
 80065cc:	08006727 	.word	0x08006727
 80065d0:	08006575 	.word	0x08006575
 80065d4:	08006629 	.word	0x08006629
 80065d8:	08006575 	.word	0x08006575
 80065dc:	08006575 	.word	0x08006575
 80065e0:	080066ef 	.word	0x080066ef
 80065e4:	680b      	ldr	r3, [r1, #0]
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	600a      	str	r2, [r1, #0]
 80065ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0a3      	b.n	8006740 <_printf_i+0x1f4>
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	6808      	ldr	r0, [r1, #0]
 80065fc:	062e      	lsls	r6, r5, #24
 80065fe:	f100 0304 	add.w	r3, r0, #4
 8006602:	d50a      	bpl.n	800661a <_printf_i+0xce>
 8006604:	6805      	ldr	r5, [r0, #0]
 8006606:	600b      	str	r3, [r1, #0]
 8006608:	2d00      	cmp	r5, #0
 800660a:	da03      	bge.n	8006614 <_printf_i+0xc8>
 800660c:	232d      	movs	r3, #45	; 0x2d
 800660e:	426d      	negs	r5, r5
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006614:	485e      	ldr	r0, [pc, #376]	; (8006790 <_printf_i+0x244>)
 8006616:	230a      	movs	r3, #10
 8006618:	e019      	b.n	800664e <_printf_i+0x102>
 800661a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800661e:	6805      	ldr	r5, [r0, #0]
 8006620:	600b      	str	r3, [r1, #0]
 8006622:	bf18      	it	ne
 8006624:	b22d      	sxthne	r5, r5
 8006626:	e7ef      	b.n	8006608 <_printf_i+0xbc>
 8006628:	680b      	ldr	r3, [r1, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	1d18      	adds	r0, r3, #4
 800662e:	6008      	str	r0, [r1, #0]
 8006630:	0628      	lsls	r0, r5, #24
 8006632:	d501      	bpl.n	8006638 <_printf_i+0xec>
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	e002      	b.n	800663e <_printf_i+0xf2>
 8006638:	0669      	lsls	r1, r5, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0xe8>
 800663c:	881d      	ldrh	r5, [r3, #0]
 800663e:	4854      	ldr	r0, [pc, #336]	; (8006790 <_printf_i+0x244>)
 8006640:	2f6f      	cmp	r7, #111	; 0x6f
 8006642:	bf0c      	ite	eq
 8006644:	2308      	moveq	r3, #8
 8006646:	230a      	movne	r3, #10
 8006648:	2100      	movs	r1, #0
 800664a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800664e:	6866      	ldr	r6, [r4, #4]
 8006650:	60a6      	str	r6, [r4, #8]
 8006652:	2e00      	cmp	r6, #0
 8006654:	bfa2      	ittt	ge
 8006656:	6821      	ldrge	r1, [r4, #0]
 8006658:	f021 0104 	bicge.w	r1, r1, #4
 800665c:	6021      	strge	r1, [r4, #0]
 800665e:	b90d      	cbnz	r5, 8006664 <_printf_i+0x118>
 8006660:	2e00      	cmp	r6, #0
 8006662:	d04d      	beq.n	8006700 <_printf_i+0x1b4>
 8006664:	4616      	mov	r6, r2
 8006666:	fbb5 f1f3 	udiv	r1, r5, r3
 800666a:	fb03 5711 	mls	r7, r3, r1, r5
 800666e:	5dc7      	ldrb	r7, [r0, r7]
 8006670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006674:	462f      	mov	r7, r5
 8006676:	42bb      	cmp	r3, r7
 8006678:	460d      	mov	r5, r1
 800667a:	d9f4      	bls.n	8006666 <_printf_i+0x11a>
 800667c:	2b08      	cmp	r3, #8
 800667e:	d10b      	bne.n	8006698 <_printf_i+0x14c>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	07df      	lsls	r7, r3, #31
 8006684:	d508      	bpl.n	8006698 <_printf_i+0x14c>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6861      	ldr	r1, [r4, #4]
 800668a:	4299      	cmp	r1, r3
 800668c:	bfde      	ittt	le
 800668e:	2330      	movle	r3, #48	; 0x30
 8006690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006698:	1b92      	subs	r2, r2, r6
 800669a:	6122      	str	r2, [r4, #16]
 800669c:	f8cd a000 	str.w	sl, [sp]
 80066a0:	464b      	mov	r3, r9
 80066a2:	aa03      	add	r2, sp, #12
 80066a4:	4621      	mov	r1, r4
 80066a6:	4640      	mov	r0, r8
 80066a8:	f7ff fee2 	bl	8006470 <_printf_common>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d14c      	bne.n	800674a <_printf_i+0x1fe>
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	b004      	add	sp, #16
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	4835      	ldr	r0, [pc, #212]	; (8006790 <_printf_i+0x244>)
 80066bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	680e      	ldr	r6, [r1, #0]
 80066c4:	061f      	lsls	r7, r3, #24
 80066c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80066ca:	600e      	str	r6, [r1, #0]
 80066cc:	d514      	bpl.n	80066f8 <_printf_i+0x1ac>
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	bf44      	itt	mi
 80066d2:	f043 0320 	orrmi.w	r3, r3, #32
 80066d6:	6023      	strmi	r3, [r4, #0]
 80066d8:	b91d      	cbnz	r5, 80066e2 <_printf_i+0x196>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	f023 0320 	bic.w	r3, r3, #32
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	2310      	movs	r3, #16
 80066e4:	e7b0      	b.n	8006648 <_printf_i+0xfc>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f043 0320 	orr.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	2378      	movs	r3, #120	; 0x78
 80066f0:	4828      	ldr	r0, [pc, #160]	; (8006794 <_printf_i+0x248>)
 80066f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066f6:	e7e3      	b.n	80066c0 <_printf_i+0x174>
 80066f8:	065e      	lsls	r6, r3, #25
 80066fa:	bf48      	it	mi
 80066fc:	b2ad      	uxthmi	r5, r5
 80066fe:	e7e6      	b.n	80066ce <_printf_i+0x182>
 8006700:	4616      	mov	r6, r2
 8006702:	e7bb      	b.n	800667c <_printf_i+0x130>
 8006704:	680b      	ldr	r3, [r1, #0]
 8006706:	6826      	ldr	r6, [r4, #0]
 8006708:	6960      	ldr	r0, [r4, #20]
 800670a:	1d1d      	adds	r5, r3, #4
 800670c:	600d      	str	r5, [r1, #0]
 800670e:	0635      	lsls	r5, r6, #24
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	d501      	bpl.n	8006718 <_printf_i+0x1cc>
 8006714:	6018      	str	r0, [r3, #0]
 8006716:	e002      	b.n	800671e <_printf_i+0x1d2>
 8006718:	0671      	lsls	r1, r6, #25
 800671a:	d5fb      	bpl.n	8006714 <_printf_i+0x1c8>
 800671c:	8018      	strh	r0, [r3, #0]
 800671e:	2300      	movs	r3, #0
 8006720:	6123      	str	r3, [r4, #16]
 8006722:	4616      	mov	r6, r2
 8006724:	e7ba      	b.n	800669c <_printf_i+0x150>
 8006726:	680b      	ldr	r3, [r1, #0]
 8006728:	1d1a      	adds	r2, r3, #4
 800672a:	600a      	str	r2, [r1, #0]
 800672c:	681e      	ldr	r6, [r3, #0]
 800672e:	6862      	ldr	r2, [r4, #4]
 8006730:	2100      	movs	r1, #0
 8006732:	4630      	mov	r0, r6
 8006734:	f7f9 fd64 	bl	8000200 <memchr>
 8006738:	b108      	cbz	r0, 800673e <_printf_i+0x1f2>
 800673a:	1b80      	subs	r0, r0, r6
 800673c:	6060      	str	r0, [r4, #4]
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	2300      	movs	r3, #0
 8006744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006748:	e7a8      	b.n	800669c <_printf_i+0x150>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	4632      	mov	r2, r6
 800674e:	4649      	mov	r1, r9
 8006750:	4640      	mov	r0, r8
 8006752:	47d0      	blx	sl
 8006754:	3001      	adds	r0, #1
 8006756:	d0ab      	beq.n	80066b0 <_printf_i+0x164>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	079b      	lsls	r3, r3, #30
 800675c:	d413      	bmi.n	8006786 <_printf_i+0x23a>
 800675e:	68e0      	ldr	r0, [r4, #12]
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	4298      	cmp	r0, r3
 8006764:	bfb8      	it	lt
 8006766:	4618      	movlt	r0, r3
 8006768:	e7a4      	b.n	80066b4 <_printf_i+0x168>
 800676a:	2301      	movs	r3, #1
 800676c:	4632      	mov	r2, r6
 800676e:	4649      	mov	r1, r9
 8006770:	4640      	mov	r0, r8
 8006772:	47d0      	blx	sl
 8006774:	3001      	adds	r0, #1
 8006776:	d09b      	beq.n	80066b0 <_printf_i+0x164>
 8006778:	3501      	adds	r5, #1
 800677a:	68e3      	ldr	r3, [r4, #12]
 800677c:	9903      	ldr	r1, [sp, #12]
 800677e:	1a5b      	subs	r3, r3, r1
 8006780:	42ab      	cmp	r3, r5
 8006782:	dcf2      	bgt.n	800676a <_printf_i+0x21e>
 8006784:	e7eb      	b.n	800675e <_printf_i+0x212>
 8006786:	2500      	movs	r5, #0
 8006788:	f104 0619 	add.w	r6, r4, #25
 800678c:	e7f5      	b.n	800677a <_printf_i+0x22e>
 800678e:	bf00      	nop
 8006790:	08006f41 	.word	0x08006f41
 8006794:	08006f52 	.word	0x08006f52

08006798 <memcpy>:
 8006798:	440a      	add	r2, r1
 800679a:	4291      	cmp	r1, r2
 800679c:	f100 33ff 	add.w	r3, r0, #4294967295
 80067a0:	d100      	bne.n	80067a4 <memcpy+0xc>
 80067a2:	4770      	bx	lr
 80067a4:	b510      	push	{r4, lr}
 80067a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ae:	4291      	cmp	r1, r2
 80067b0:	d1f9      	bne.n	80067a6 <memcpy+0xe>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <memmove>:
 80067b4:	4288      	cmp	r0, r1
 80067b6:	b510      	push	{r4, lr}
 80067b8:	eb01 0402 	add.w	r4, r1, r2
 80067bc:	d902      	bls.n	80067c4 <memmove+0x10>
 80067be:	4284      	cmp	r4, r0
 80067c0:	4623      	mov	r3, r4
 80067c2:	d807      	bhi.n	80067d4 <memmove+0x20>
 80067c4:	1e43      	subs	r3, r0, #1
 80067c6:	42a1      	cmp	r1, r4
 80067c8:	d008      	beq.n	80067dc <memmove+0x28>
 80067ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067d2:	e7f8      	b.n	80067c6 <memmove+0x12>
 80067d4:	4402      	add	r2, r0
 80067d6:	4601      	mov	r1, r0
 80067d8:	428a      	cmp	r2, r1
 80067da:	d100      	bne.n	80067de <memmove+0x2a>
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067e6:	e7f7      	b.n	80067d8 <memmove+0x24>

080067e8 <_free_r>:
 80067e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ea:	2900      	cmp	r1, #0
 80067ec:	d048      	beq.n	8006880 <_free_r+0x98>
 80067ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f2:	9001      	str	r0, [sp, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f1a1 0404 	sub.w	r4, r1, #4
 80067fa:	bfb8      	it	lt
 80067fc:	18e4      	addlt	r4, r4, r3
 80067fe:	f000 f8d3 	bl	80069a8 <__malloc_lock>
 8006802:	4a20      	ldr	r2, [pc, #128]	; (8006884 <_free_r+0x9c>)
 8006804:	9801      	ldr	r0, [sp, #4]
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	4615      	mov	r5, r2
 800680a:	b933      	cbnz	r3, 800681a <_free_r+0x32>
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	6014      	str	r4, [r2, #0]
 8006810:	b003      	add	sp, #12
 8006812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006816:	f000 b8cd 	b.w	80069b4 <__malloc_unlock>
 800681a:	42a3      	cmp	r3, r4
 800681c:	d90b      	bls.n	8006836 <_free_r+0x4e>
 800681e:	6821      	ldr	r1, [r4, #0]
 8006820:	1862      	adds	r2, r4, r1
 8006822:	4293      	cmp	r3, r2
 8006824:	bf04      	itt	eq
 8006826:	681a      	ldreq	r2, [r3, #0]
 8006828:	685b      	ldreq	r3, [r3, #4]
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	bf04      	itt	eq
 800682e:	1852      	addeq	r2, r2, r1
 8006830:	6022      	streq	r2, [r4, #0]
 8006832:	602c      	str	r4, [r5, #0]
 8006834:	e7ec      	b.n	8006810 <_free_r+0x28>
 8006836:	461a      	mov	r2, r3
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	b10b      	cbz	r3, 8006840 <_free_r+0x58>
 800683c:	42a3      	cmp	r3, r4
 800683e:	d9fa      	bls.n	8006836 <_free_r+0x4e>
 8006840:	6811      	ldr	r1, [r2, #0]
 8006842:	1855      	adds	r5, r2, r1
 8006844:	42a5      	cmp	r5, r4
 8006846:	d10b      	bne.n	8006860 <_free_r+0x78>
 8006848:	6824      	ldr	r4, [r4, #0]
 800684a:	4421      	add	r1, r4
 800684c:	1854      	adds	r4, r2, r1
 800684e:	42a3      	cmp	r3, r4
 8006850:	6011      	str	r1, [r2, #0]
 8006852:	d1dd      	bne.n	8006810 <_free_r+0x28>
 8006854:	681c      	ldr	r4, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	6053      	str	r3, [r2, #4]
 800685a:	4421      	add	r1, r4
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	e7d7      	b.n	8006810 <_free_r+0x28>
 8006860:	d902      	bls.n	8006868 <_free_r+0x80>
 8006862:	230c      	movs	r3, #12
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	e7d3      	b.n	8006810 <_free_r+0x28>
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	1961      	adds	r1, r4, r5
 800686c:	428b      	cmp	r3, r1
 800686e:	bf04      	itt	eq
 8006870:	6819      	ldreq	r1, [r3, #0]
 8006872:	685b      	ldreq	r3, [r3, #4]
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	bf04      	itt	eq
 8006878:	1949      	addeq	r1, r1, r5
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	6054      	str	r4, [r2, #4]
 800687e:	e7c7      	b.n	8006810 <_free_r+0x28>
 8006880:	b003      	add	sp, #12
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	200000ec 	.word	0x200000ec

08006888 <_malloc_r>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	1ccd      	adds	r5, r1, #3
 800688c:	f025 0503 	bic.w	r5, r5, #3
 8006890:	3508      	adds	r5, #8
 8006892:	2d0c      	cmp	r5, #12
 8006894:	bf38      	it	cc
 8006896:	250c      	movcc	r5, #12
 8006898:	2d00      	cmp	r5, #0
 800689a:	4606      	mov	r6, r0
 800689c:	db01      	blt.n	80068a2 <_malloc_r+0x1a>
 800689e:	42a9      	cmp	r1, r5
 80068a0:	d903      	bls.n	80068aa <_malloc_r+0x22>
 80068a2:	230c      	movs	r3, #12
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	2000      	movs	r0, #0
 80068a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068aa:	f000 f87d 	bl	80069a8 <__malloc_lock>
 80068ae:	4921      	ldr	r1, [pc, #132]	; (8006934 <_malloc_r+0xac>)
 80068b0:	680a      	ldr	r2, [r1, #0]
 80068b2:	4614      	mov	r4, r2
 80068b4:	b99c      	cbnz	r4, 80068de <_malloc_r+0x56>
 80068b6:	4f20      	ldr	r7, [pc, #128]	; (8006938 <_malloc_r+0xb0>)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	b923      	cbnz	r3, 80068c6 <_malloc_r+0x3e>
 80068bc:	4621      	mov	r1, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	f000 f862 	bl	8006988 <_sbrk_r>
 80068c4:	6038      	str	r0, [r7, #0]
 80068c6:	4629      	mov	r1, r5
 80068c8:	4630      	mov	r0, r6
 80068ca:	f000 f85d 	bl	8006988 <_sbrk_r>
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d123      	bne.n	800691a <_malloc_r+0x92>
 80068d2:	230c      	movs	r3, #12
 80068d4:	6033      	str	r3, [r6, #0]
 80068d6:	4630      	mov	r0, r6
 80068d8:	f000 f86c 	bl	80069b4 <__malloc_unlock>
 80068dc:	e7e3      	b.n	80068a6 <_malloc_r+0x1e>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	1b5b      	subs	r3, r3, r5
 80068e2:	d417      	bmi.n	8006914 <_malloc_r+0x8c>
 80068e4:	2b0b      	cmp	r3, #11
 80068e6:	d903      	bls.n	80068f0 <_malloc_r+0x68>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	441c      	add	r4, r3
 80068ec:	6025      	str	r5, [r4, #0]
 80068ee:	e004      	b.n	80068fa <_malloc_r+0x72>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	42a2      	cmp	r2, r4
 80068f4:	bf0c      	ite	eq
 80068f6:	600b      	streq	r3, [r1, #0]
 80068f8:	6053      	strne	r3, [r2, #4]
 80068fa:	4630      	mov	r0, r6
 80068fc:	f000 f85a 	bl	80069b4 <__malloc_unlock>
 8006900:	f104 000b 	add.w	r0, r4, #11
 8006904:	1d23      	adds	r3, r4, #4
 8006906:	f020 0007 	bic.w	r0, r0, #7
 800690a:	1ac2      	subs	r2, r0, r3
 800690c:	d0cc      	beq.n	80068a8 <_malloc_r+0x20>
 800690e:	1a1b      	subs	r3, r3, r0
 8006910:	50a3      	str	r3, [r4, r2]
 8006912:	e7c9      	b.n	80068a8 <_malloc_r+0x20>
 8006914:	4622      	mov	r2, r4
 8006916:	6864      	ldr	r4, [r4, #4]
 8006918:	e7cc      	b.n	80068b4 <_malloc_r+0x2c>
 800691a:	1cc4      	adds	r4, r0, #3
 800691c:	f024 0403 	bic.w	r4, r4, #3
 8006920:	42a0      	cmp	r0, r4
 8006922:	d0e3      	beq.n	80068ec <_malloc_r+0x64>
 8006924:	1a21      	subs	r1, r4, r0
 8006926:	4630      	mov	r0, r6
 8006928:	f000 f82e 	bl	8006988 <_sbrk_r>
 800692c:	3001      	adds	r0, #1
 800692e:	d1dd      	bne.n	80068ec <_malloc_r+0x64>
 8006930:	e7cf      	b.n	80068d2 <_malloc_r+0x4a>
 8006932:	bf00      	nop
 8006934:	200000ec 	.word	0x200000ec
 8006938:	200000f0 	.word	0x200000f0

0800693c <_realloc_r>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	4607      	mov	r7, r0
 8006940:	4614      	mov	r4, r2
 8006942:	460e      	mov	r6, r1
 8006944:	b921      	cbnz	r1, 8006950 <_realloc_r+0x14>
 8006946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800694a:	4611      	mov	r1, r2
 800694c:	f7ff bf9c 	b.w	8006888 <_malloc_r>
 8006950:	b922      	cbnz	r2, 800695c <_realloc_r+0x20>
 8006952:	f7ff ff49 	bl	80067e8 <_free_r>
 8006956:	4625      	mov	r5, r4
 8006958:	4628      	mov	r0, r5
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695c:	f000 f830 	bl	80069c0 <_malloc_usable_size_r>
 8006960:	42a0      	cmp	r0, r4
 8006962:	d20f      	bcs.n	8006984 <_realloc_r+0x48>
 8006964:	4621      	mov	r1, r4
 8006966:	4638      	mov	r0, r7
 8006968:	f7ff ff8e 	bl	8006888 <_malloc_r>
 800696c:	4605      	mov	r5, r0
 800696e:	2800      	cmp	r0, #0
 8006970:	d0f2      	beq.n	8006958 <_realloc_r+0x1c>
 8006972:	4631      	mov	r1, r6
 8006974:	4622      	mov	r2, r4
 8006976:	f7ff ff0f 	bl	8006798 <memcpy>
 800697a:	4631      	mov	r1, r6
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff ff33 	bl	80067e8 <_free_r>
 8006982:	e7e9      	b.n	8006958 <_realloc_r+0x1c>
 8006984:	4635      	mov	r5, r6
 8006986:	e7e7      	b.n	8006958 <_realloc_r+0x1c>

08006988 <_sbrk_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_sbrk_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fb ff92 	bl	80028bc <_sbrk>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_sbrk_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_sbrk_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200002c4 	.word	0x200002c4

080069a8 <__malloc_lock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__malloc_lock+0x8>)
 80069aa:	f000 b811 	b.w	80069d0 <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	200002cc 	.word	0x200002cc

080069b4 <__malloc_unlock>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__malloc_unlock+0x8>)
 80069b6:	f000 b80c 	b.w	80069d2 <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	200002cc 	.word	0x200002cc

080069c0 <_malloc_usable_size_r>:
 80069c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c4:	1f18      	subs	r0, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfbc      	itt	lt
 80069ca:	580b      	ldrlt	r3, [r1, r0]
 80069cc:	18c0      	addlt	r0, r0, r3
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_acquire_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <__retarget_lock_release_recursive>:
 80069d2:	4770      	bx	lr

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
