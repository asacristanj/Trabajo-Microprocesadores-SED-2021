
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004194  08004194  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800419c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000160  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be41  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b1  00000000  00000000  0002befd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0002df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002000a  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bed2  00000000  00000000  0004e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4117  00000000  00000000  0005a77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e893  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002874  00000000  00000000  0011e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ff4 	.word	0x08003ff4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08003ff4 	.word	0x08003ff4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <setLuces>:
#ifndef INC_CONTROL_LUCES_H_
#define INC_CONTROL_LUCES_H_
#include "main.h"

int estado=0;
void setLuces(int n){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(n==0){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d106      	bne.n	80004ec <setLuces+0x1c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <setLuces+0x38>)
 80004e6:	f002 f941 	bl	800276c <HAL_GPIO_WritePin>
 80004ea:	e005      	b.n	80004f8 <setLuces+0x28>

	}else{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <setLuces+0x38>)
 80004f4:	f002 f93a 	bl	800276c <HAL_GPIO_WritePin>
	}
	  estado=n;
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <setLuces+0x3c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020c00 	.word	0x40020c00
 800050c:	200000a8 	.word	0x200000a8

08000510 <getEstadoLuces>:

int getEstadoLuces(){
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	return estado;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <getEstadoLuces+0x14>)
 8000516:	681b      	ldr	r3, [r3, #0]
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200000a8 	.word	0x200000a8

08000528 <clrScr>:
#include "control_luces.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 8000532:	1dfa      	adds	r2, r7, #7
 8000534:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2301      	movs	r3, #1
 800053c:	2110      	movs	r1, #16
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <clrScr+0x24>)
 8000540:	f002 fa8a 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000b8 	.word	0x200000b8

08000550 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af02      	add	r7, sp, #8
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 800055c:	2302      	movs	r3, #2
 800055e:	753b      	strb	r3, [r7, #20]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	757b      	strb	r3, [r7, #21]
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	75bb      	strb	r3, [r7, #22]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 8000572:	f107 0214 	add.w	r2, r7, #20
 8000576:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2304      	movs	r3, #4
 800057e:	2110      	movs	r1, #16
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <setColor+0x40>)
 8000582:	f002 fa69 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 8000586:	bf00      	nop
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000b8 	.word	0x200000b8

08000594 <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af02      	add	r7, sp, #8
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 80005a0:	2303      	movs	r3, #3
 80005a2:	753b      	strb	r3, [r7, #20]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	757b      	strb	r3, [r7, #21]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	75bb      	strb	r3, [r7, #22]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 80005b6:	f107 0214 	add.w	r2, r7, #20
 80005ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	2110      	movs	r1, #16
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <setBackColor+0x40>)
 80005c6:	f002 fa47 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000b8 	.word	0x200000b8

080005d8 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af02      	add	r7, sp, #8
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2bff      	cmp	r3, #255	; 0xff
 80005f8:	dd01      	ble.n	80005fe <drawRect+0x26>
		desb[0] = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2bff      	cmp	r3, #255	; 0xff
 8000602:	dd01      	ble.n	8000608 <drawRect+0x30>
		desb[1] = 1;
 8000604:	2301      	movs	r3, #1
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2bff      	cmp	r3, #255	; 0xff
 800060c:	dd01      	ble.n	8000612 <drawRect+0x3a>
		desb[2] = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	dd01      	ble.n	800061c <drawRect+0x44>
		desb[3] = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 800061c:	2304      	movs	r3, #4
 800061e:	753b      	strb	r3, [r7, #20]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	757b      	strb	r3, [r7, #21]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	75bb      	strb	r3, [r7, #22]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	75fb      	strb	r3, [r7, #23]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	763b      	strb	r3, [r7, #24]
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	767b      	strb	r3, [r7, #25]
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	b2db      	uxtb	r3, r3
 8000642:	76bb      	strb	r3, [r7, #26]
 8000644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000646:	b2db      	uxtb	r3, r3
 8000648:	76fb      	strb	r3, [r7, #27]
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	b2db      	uxtb	r3, r3
 800064e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 8000650:	f107 0214 	add.w	r2, r7, #20
 8000654:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2309      	movs	r3, #9
 800065c:	2110      	movs	r1, #16
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <drawRect+0x94>)
 8000660:	f002 f9fa 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 8000664:	bf00      	nop
 8000666:	3730      	adds	r7, #48	; 0x30
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000b8 	.word	0x200000b8

08000670 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af02      	add	r7, sp, #8
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	dd01      	ble.n	8000696 <fillRect+0x26>
		desb[0] = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2bff      	cmp	r3, #255	; 0xff
 800069a:	dd01      	ble.n	80006a0 <fillRect+0x30>
		desb[1] = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	dd01      	ble.n	80006aa <fillRect+0x3a>
		desb[2] = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2bff      	cmp	r3, #255	; 0xff
 80006ae:	dd01      	ble.n	80006b4 <fillRect+0x44>
		desb[3] = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	757b      	strb	r3, [r7, #21]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	75bb      	strb	r3, [r7, #22]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	75fb      	strb	r3, [r7, #23]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	763b      	strb	r3, [r7, #24]
 80006d0:	6a3b      	ldr	r3, [r7, #32]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	767b      	strb	r3, [r7, #25]
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	76bb      	strb	r3, [r7, #26]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	76fb      	strb	r3, [r7, #27]
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 80006e8:	f107 0214 	add.w	r2, r7, #20
 80006ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2309      	movs	r3, #9
 80006f4:	2110      	movs	r1, #16
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <fillRect+0x94>)
 80006f8:	f002 f9ae 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000b8 	.word	0x200000b8

08000708 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b098      	sub	sp, #96	; 0x60
 800070c:	af02      	add	r7, sp, #8
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 8000714:	2300      	movs	r3, #0
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
 8000718:	2300      	movs	r3, #0
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	dd01      	ble.n	8000726 <print+0x1e>
		desb[0] = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	dd01      	ble.n	8000730 <print+0x28>
		desb[1] = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 8000730:	2306      	movs	r3, #6
 8000732:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f7ff fd47 	bl	80001c8 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 800073e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000740:	b2db      	uxtb	r3, r3
 8000742:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 8000744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000746:	b2db      	uxtb	r3, r3
 8000748:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 800074a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074c:	b2db      	uxtb	r3, r3
 800074e:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 8000750:	2304      	movs	r3, #4
 8000752:	657b      	str	r3, [r7, #84]	; 0x54
 8000754:	e00d      	b.n	8000772 <print+0x6a>
		cadena[i] = t[i - 4];
 8000756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000758:	3b04      	subs	r3, #4
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	f107 0214 	add.w	r2, r7, #20
 8000764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000766:	4413      	add	r3, r2
 8000768:	460a      	mov	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 800076c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800076e:	3301      	adds	r3, #1
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
 8000772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000774:	3303      	adds	r3, #3
 8000776:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000778:	429a      	cmp	r2, r3
 800077a:	ddec      	ble.n	8000756 <print+0x4e>
	}
	cadena[longitud + 4] = x;
 800077c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800077e:	3304      	adds	r3, #4
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000788:	440b      	add	r3, r1
 800078a:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 800078e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000790:	3305      	adds	r3, #5
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800079a:	440b      	add	r3, r1
 800079c:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 80007a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	3306      	adds	r3, #6
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f107 0214 	add.w	r2, r7, #20
 80007ac:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80007b0:	9100      	str	r1, [sp, #0]
 80007b2:	2110      	movs	r1, #16
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <print+0xbc>)
 80007b6:	f002 f94f 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	3758      	adds	r7, #88	; 0x58
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b8 	.word	0x200000b8

080007c8 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e01b      	b.n	8000818 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	4413      	add	r3, r2
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff ff88 	bl	8000708 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fce0 	bl	80001c8 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	00da      	lsls	r2, r3, #3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4413      	add	r3, r2
 8000810:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	3301      	adds	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbdf      	blt.n	80007e0 <printfrase+0x18>
	}
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 8000834:	2307      	movs	r3, #7
 8000836:	733b      	strb	r3, [r7, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 800083e:	f107 020c 	add.w	r2, r7, #12
 8000842:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	2110      	movs	r1, #16
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <setFont+0x30>)
 800084e:	f002 f903 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b8 	.word	0x200000b8

08000860 <fillCircle>:
	}
	uint8_t coord[7] = { 8, x, y, r, desb[0], desb[1], desb[2] };
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
}
//Imprime circulos rellenos
void fillCircle(int x, int y, int r) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af02      	add	r7, sp, #8
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	int desb[3] = { 0, 0, 0 };
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	if (x > 255) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2bff      	cmp	r3, #255	; 0xff
 800087c:	dd01      	ble.n	8000882 <fillCircle+0x22>
		desb[0] = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
	}
	if (y > 255) {
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2bff      	cmp	r3, #255	; 0xff
 8000886:	dd01      	ble.n	800088c <fillCircle+0x2c>
		desb[1] = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
	}
	if (r > 255) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2bff      	cmp	r3, #255	; 0xff
 8000890:	dd01      	ble.n	8000896 <fillCircle+0x36>
		desb[2] = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
	}
	uint8_t coord[7] = { 9, x, y, r, desb[0], desb[1], desb[2] };
 8000896:	2309      	movs	r3, #9
 8000898:	753b      	strb	r3, [r7, #20]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	757b      	strb	r3, [r7, #21]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	75bb      	strb	r3, [r7, #22]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	75fb      	strb	r3, [r7, #23]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	763b      	strb	r3, [r7, #24]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	767b      	strb	r3, [r7, #25]
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 7, 3000);
 80008be:	f107 0214 	add.w	r2, r7, #20
 80008c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2307      	movs	r3, #7
 80008ca:	2110      	movs	r1, #16
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <fillCircle+0x7c>)
 80008ce:	f002 f8c3 	bl	8002a58 <HAL_I2C_Master_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000b8 	.word	0x200000b8

080008e0 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 80008e0:	b490      	push	{r4, r7}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 80008ee:	4a48      	ldr	r2, [pc, #288]	; (8000a10 <botones+0x130>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 80008f4:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <botones+0x134>)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 80008fa:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <botones+0x138>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000900:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <botones+0x13c>)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 8000906:	4a46      	ldr	r2, [pc, #280]	; (8000a20 <botones+0x140>)
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 800090c:	4a45      	ldr	r2, [pc, #276]	; (8000a24 <botones+0x144>)
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 8000912:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <botones+0x148>)
 8000914:	461c      	mov	r4, r3
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800091e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <botones+0x14c>)
 8000924:	461c      	mov	r4, r3
 8000926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800092e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <botones+0x150>)
 8000934:	461c      	mov	r4, r3
 8000936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800093e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <botones+0x154>)
 8000944:	461c      	mov	r4, r3
 8000946:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800094a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800094e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 8000952:	4a39      	ldr	r2, [pc, #228]	; (8000a38 <botones+0x158>)
 8000954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000956:	6013      	str	r3, [r2, #0]
	columnas = c;
 8000958:	4a38      	ldr	r2, [pc, #224]	; (8000a3c <botones+0x15c>)
 800095a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800095c:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <botones+0x15c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d013      	beq.n	800098e <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <botones+0x138>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <botones+0x15c>)
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <botones+0x130>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	1ad2      	subs	r2, r2, r3
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <botones+0x15c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <botones+0x160>)
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e011      	b.n	80009b2 <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <botones+0x138>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <botones+0x15c>)
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <botones+0x130>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	1ad2      	subs	r2, r2, r3
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <botones+0x15c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 80009ae:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <botones+0x160>)
 80009b0:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <botones+0x158>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d013      	beq.n	80009e2 <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <botones+0x13c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <botones+0x158>)
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <botones+0x134>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <botones+0x158>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <botones+0x164>)
 80009de:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 80009e0:	e011      	b.n	8000a06 <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <botones+0x13c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <botones+0x158>)
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <botones+0x134>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	1ad2      	subs	r2, r2, r3
				/ filas;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <botones+0x158>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <botones+0x164>)
 8000a04:	6013      	str	r3, [r2, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc90      	pop	{r4, r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	20000010 	.word	0x20000010
 8000a24:	20000014 	.word	0x20000014
 8000a28:	20000018 	.word	0x20000018
 8000a2c:	20000024 	.word	0x20000024
 8000a30:	20000030 	.word	0x20000030
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	20000048 	.word	0x20000048
 8000a3c:	2000004c 	.word	0x2000004c
 8000a40:	2000019c 	.word	0x2000019c
 8000a44:	200001e4 	.word	0x200001e4

08000a48 <crear_botonera>:

void crear_botonera() {
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e05d      	b.n	8000b10 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	e052      	b.n	8000b00 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <crear_botonera+0xdc>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <crear_botonera+0xe0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	fb02 f203 	mul.w	r2, r2, r3
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <crear_botonera+0xe4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000a6e:	4413      	add	r3, r2
 8000a70:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <crear_botonera+0xe8>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <crear_botonera+0xec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	fb02 f203 	mul.w	r2, r2, r3
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <crear_botonera+0xf0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <crear_botonera+0xf4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <crear_botonera+0xf4>)
 8000a90:	6851      	ldr	r1, [r2, #4]
 8000a92:	4a2a      	ldr	r2, [pc, #168]	; (8000b3c <crear_botonera+0xf4>)
 8000a94:	6892      	ldr	r2, [r2, #8]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd5a 	bl	8000550 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <crear_botonera+0xf8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	1ad0      	subs	r0, r2, r3
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <crear_botonera+0xf8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <crear_botonera+0xe0>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <crear_botonera+0xf8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <crear_botonera+0xec>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <crear_botonera+0xf8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4622      	mov	r2, r4
 8000aca:	f7ff fdd1 	bl	8000670 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <crear_botonera+0xfc>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <crear_botonera+0xfc>)
 8000ad4:	6851      	ldr	r1, [r2, #4]
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <crear_botonera+0xfc>)
 8000ad8:	6892      	ldr	r2, [r2, #8]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd38 	bl	8000550 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <crear_botonera+0xe0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	18d1      	adds	r1, r2, r3
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <crear_botonera+0xec>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	460a      	mov	r2, r1
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fdbb 	bl	8000670 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <crear_botonera+0x100>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dba7      	blt.n	8000a5a <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <crear_botonera+0x104>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	db9c      	blt.n	8000a54 <crear_botonera+0xc>
		}
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	2000019c 	.word	0x2000019c
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	200001e4 	.word	0x200001e4
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000024 	.word	0x20000024
 8000b40:	20000010 	.word	0x20000010
 8000b44:	20000018 	.word	0x20000018
 8000b48:	2000004c 	.word	0x2000004c
 8000b4c:	20000048 	.word	0x20000048

08000b50 <resaltar_boton>:

void resaltar_boton(int b) {
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08d      	sub	sp, #52	; 0x34
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int j = 0; j < filas; j++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b60:	e083      	b.n	8000c6a <resaltar_boton+0x11a>
		for (int i = 0; i < columnas; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
 8000b66:	e078      	b.n	8000c5a <resaltar_boton+0x10a>
			if (boton_resaltado == k) {
 8000b68:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <resaltar_boton+0x218>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d16d      	bne.n	8000c4e <resaltar_boton+0xfe>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000b72:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <resaltar_boton+0x21c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b7e      	ldr	r3, [pc, #504]	; (8000d70 <resaltar_boton+0x220>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b7e:	fb02 f203 	mul.w	r2, r2, r3
 8000b82:	4b7c      	ldr	r3, [pc, #496]	; (8000d74 <resaltar_boton+0x224>)
 8000b84:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000b86:	4413      	add	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <resaltar_boton+0x228>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <resaltar_boton+0x22c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b96:	fb02 f203 	mul.w	r2, r2, r3
 8000b9a:	4b79      	ldr	r3, [pc, #484]	; (8000d80 <resaltar_boton+0x230>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
				setColor(0, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fcd2 	bl	8000550 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000bac:	4b75      	ldr	r3, [pc, #468]	; (8000d84 <resaltar_boton+0x234>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	1ad0      	subs	r0, r2, r3
 8000bb4:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <resaltar_boton+0x234>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000bbc:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <resaltar_boton+0x220>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000bc4:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <resaltar_boton+0x234>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000bca:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <resaltar_boton+0x22c>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <resaltar_boton+0x234>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4622      	mov	r2, r4
 8000bda:	f7ff fd49 	bl	8000670 <fillRect>
				setColor(cmarco.r, cmarco.g, cmarco.b);
 8000bde:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <resaltar_boton+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a69      	ldr	r2, [pc, #420]	; (8000d88 <resaltar_boton+0x238>)
 8000be4:	6851      	ldr	r1, [r2, #4]
 8000be6:	4a68      	ldr	r2, [pc, #416]	; (8000d88 <resaltar_boton+0x238>)
 8000be8:	6892      	ldr	r2, [r2, #8]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcb0 	bl	8000550 <setColor>
				fillRect(x - marco_boton, y - marco_boton,
 8000bf0:	4b66      	ldr	r3, [pc, #408]	; (8000d8c <resaltar_boton+0x23c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	1ad0      	subs	r0, r2, r3
 8000bf8:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <resaltar_boton+0x23c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + marco_boton,
 8000c00:	4b5b      	ldr	r3, [pc, #364]	; (8000d70 <resaltar_boton+0x220>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c08:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <resaltar_boton+0x23c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	18d4      	adds	r4, r2, r3
						y + alto_boton + marco_boton);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <resaltar_boton+0x22c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000c16:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <resaltar_boton+0x23c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4622      	mov	r2, r4
 8000c1e:	f7ff fd27 	bl	8000670 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000c22:	4b5b      	ldr	r3, [pc, #364]	; (8000d90 <resaltar_boton+0x240>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a5a      	ldr	r2, [pc, #360]	; (8000d90 <resaltar_boton+0x240>)
 8000c28:	6851      	ldr	r1, [r2, #4]
 8000c2a:	4a59      	ldr	r2, [pc, #356]	; (8000d90 <resaltar_boton+0x240>)
 8000c2c:	6892      	ldr	r2, [r2, #8]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc8e 	bl	8000550 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000c34:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <resaltar_boton+0x220>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	18d1      	adds	r1, r2, r3
 8000c3c:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <resaltar_boton+0x22c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	460a      	mov	r2, r1
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	6938      	ldr	r0, [r7, #16]
 8000c4a:	f7ff fd11 	bl	8000670 <fillRect>
			}
			k++;
 8000c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c50:	3301      	adds	r3, #1
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3301      	adds	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <resaltar_boton+0x244>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c60:	429a      	cmp	r2, r3
 8000c62:	db81      	blt.n	8000b68 <resaltar_boton+0x18>
	for (int j = 0; j < filas; j++) {
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	3301      	adds	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <resaltar_boton+0x248>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f6ff af76 	blt.w	8000b62 <resaltar_boton+0x12>
		}
	}
	k = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	boton_resaltado = b;
 8000c7a:	4a3b      	ldr	r2, [pc, #236]	; (8000d68 <resaltar_boton+0x218>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < filas; j++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	e065      	b.n	8000d52 <resaltar_boton+0x202>
		for (int i = 0; i < columnas; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e05a      	b.n	8000d42 <resaltar_boton+0x1f2>
			if (boton_resaltado == k) {
 8000c8c:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <resaltar_boton+0x218>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d14f      	bne.n	8000d36 <resaltar_boton+0x1e6>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <resaltar_boton+0x21c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <resaltar_boton+0x220>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	fb02 f203 	mul.w	r2, r2, r3
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <resaltar_boton+0x224>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000caa:	4413      	add	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <resaltar_boton+0x228>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <resaltar_boton+0x22c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	6a3a      	ldr	r2, [r7, #32]
 8000cba:	fb02 f203 	mul.w	r2, r2, r3
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <resaltar_boton+0x230>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000cc2:	4413      	add	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
				setColor(cmarcon.r, cmarcon.g, cmarcon.b);
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <resaltar_boton+0x24c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a34      	ldr	r2, [pc, #208]	; (8000d9c <resaltar_boton+0x24c>)
 8000ccc:	6851      	ldr	r1, [r2, #4]
 8000cce:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <resaltar_boton+0x24c>)
 8000cd0:	6892      	ldr	r2, [r2, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc3c 	bl	8000550 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <resaltar_boton+0x234>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	1ad0      	subs	r0, r2, r3
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <resaltar_boton+0x234>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <resaltar_boton+0x220>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <resaltar_boton+0x234>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <resaltar_boton+0x22c>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <resaltar_boton+0x234>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4622      	mov	r2, r4
 8000d06:	f7ff fcb3 	bl	8000670 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <resaltar_boton+0x240>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a20      	ldr	r2, [pc, #128]	; (8000d90 <resaltar_boton+0x240>)
 8000d10:	6851      	ldr	r1, [r2, #4]
 8000d12:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <resaltar_boton+0x240>)
 8000d14:	6892      	ldr	r2, [r2, #8]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc1a 	bl	8000550 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <resaltar_boton+0x220>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	18d1      	adds	r1, r2, r3
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <resaltar_boton+0x22c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	6979      	ldr	r1, [r7, #20]
 8000d30:	69b8      	ldr	r0, [r7, #24]
 8000d32:	f7ff fc9d 	bl	8000670 <fillRect>
			}
			k++;
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	3301      	adds	r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <resaltar_boton+0x244>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	db9f      	blt.n	8000c8c <resaltar_boton+0x13c>
	for (int j = 0; j < filas; j++) {
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <resaltar_boton+0x248>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a3a      	ldr	r2, [r7, #32]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	db94      	blt.n	8000c86 <resaltar_boton+0x136>
		}
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3734      	adds	r7, #52	; 0x34
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000ac 	.word	0x200000ac
 8000d6c:	2000019c 	.word	0x2000019c
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	200001e4 	.word	0x200001e4
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000004 	.word	0x20000004
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000024 	.word	0x20000024
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	20000018 	.word	0x20000018
 8000d94:	2000004c 	.word	0x2000004c
 8000d98:	20000048 	.word	0x20000048
 8000d9c:	20000030 	.word	0x20000030

08000da0 <rellenar_botones>:

void rellenar_botones(const char *t[]) {
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000dac:	2310      	movs	r3, #16
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000db0:	2310      	movs	r3, #16
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000db4:	4b99      	ldr	r3, [pc, #612]	; (800101c <rellenar_botones+0x27c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a98      	ldr	r2, [pc, #608]	; (800101c <rellenar_botones+0x27c>)
 8000dba:	6851      	ldr	r1, [r2, #4]
 8000dbc:	4a97      	ldr	r2, [pc, #604]	; (800101c <rellenar_botones+0x27c>)
 8000dbe:	6892      	ldr	r2, [r2, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fbc5 	bl	8000550 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000dc6:	4b96      	ldr	r3, [pc, #600]	; (8001020 <rellenar_botones+0x280>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a95      	ldr	r2, [pc, #596]	; (8001020 <rellenar_botones+0x280>)
 8000dcc:	6851      	ldr	r1, [r2, #4]
 8000dce:	4a94      	ldr	r2, [pc, #592]	; (8001020 <rellenar_botones+0x280>)
 8000dd0:	6892      	ldr	r2, [r2, #8]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fbde 	bl	8000594 <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	653b      	str	r3, [r7, #80]	; 0x50
 8000ddc:	e112      	b.n	8001004 <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de2:	e106      	b.n	8000ff2 <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000de4:	4b8f      	ldr	r3, [pc, #572]	; (8001024 <rellenar_botones+0x284>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b8f      	ldr	r3, [pc, #572]	; (8001028 <rellenar_botones+0x288>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000df0:	fb02 f203 	mul.w	r2, r2, r3
 8000df4:	4b8d      	ldr	r3, [pc, #564]	; (800102c <rellenar_botones+0x28c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000df8:	4413      	add	r3, r2
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000dfc:	4b8c      	ldr	r3, [pc, #560]	; (8001030 <rellenar_botones+0x290>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <rellenar_botones+0x294>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e08:	fb02 f203 	mul.w	r2, r2, r3
 8000e0c:	4b8a      	ldr	r3, [pc, #552]	; (8001038 <rellenar_botones+0x298>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9cf 	bl	80001c8 <strlen>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e2e:	fb03 f302 	mul.w	r3, r3, r2
 8000e32:	4a7d      	ldr	r2, [pc, #500]	; (8001028 <rellenar_botones+0x288>)
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d82d      	bhi.n	8000e96 <rellenar_botones+0xf6>
				print(t[k - 1],
 8000e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e40:	3b01      	subs	r3, #1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000e4a:	4b77      	ldr	r3, [pc, #476]	; (8001028 <rellenar_botones+0x288>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461d      	mov	r5, r3
 8000e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e56:	3b01      	subs	r3, #1
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f9b1 	bl	80001c8 <strlen>
 8000e66:	4602      	mov	r2, r0
 8000e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6a:	fb03 f302 	mul.w	r3, r3, r2
 8000e6e:	1aeb      	subs	r3, r5, r3
 8000e70:	085a      	lsrs	r2, r3, #1
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	4413      	add	r3, r2
				print(t[k - 1],
 8000e76:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000e78:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <rellenar_botones+0x294>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	0fda      	lsrs	r2, r3, #31
 8000e82:	4413      	add	r3, r2
 8000e84:	105b      	asrs	r3, r3, #1
 8000e86:	461a      	mov	r2, r3
				print(t[k - 1],
 8000e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fc3a 	bl	8000708 <print>
 8000e94:	e0a7      	b.n	8000fe6 <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e9a:	e00e      	b.n	8000eba <rellenar_botones+0x11a>
					t1[i] = 0;
 8000e9c:	f107 021c 	add.w	r2, r7, #28
 8000ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000ea8:	f107 0208 	add.w	r2, r7, #8
 8000eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eae:	4413      	add	r3, r2
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ebc:	2b13      	cmp	r3, #19
 8000ebe:	dded      	ble.n	8000e9c <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8000ec4:	e013      	b.n	8000eee <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed8:	4413      	add	r3, r2
 8000eda:	7819      	ldrb	r1, [r3, #0]
 8000edc:	f107 021c 	add.w	r2, r7, #28
 8000ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee2:	4413      	add	r3, r2
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eea:	3301      	adds	r3, #1
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
 8000eee:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <rellenar_botones+0x288>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dbe3      	blt.n	8000ec6 <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000efe:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <rellenar_botones+0x288>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f08:	643b      	str	r3, [r7, #64]	; 0x40
 8000f0a:	e019      	b.n	8000f40 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8000f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f12:	3b01      	subs	r3, #1
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f1e:	441a      	add	r2, r3
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <rellenar_botones+0x288>)
 8000f22:	6819      	ldr	r1, [r3, #0]
 8000f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f26:	fb91 f3f3 	sdiv	r3, r1, r3
 8000f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000f34:	440b      	add	r3, r1
 8000f36:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8000f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f46:	3b01      	subs	r3, #1
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f939 	bl	80001c8 <strlen>
 8000f56:	4602      	mov	r2, r0
 8000f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d2d6      	bcs.n	8000f0c <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <rellenar_botones+0x288>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461c      	mov	r4, r3
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f92d 	bl	80001c8 <strlen>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f72:	fb03 f302 	mul.w	r3, r3, r2
 8000f76:	1ae3      	subs	r3, r4, r3
 8000f78:	085a      	lsrs	r2, r3, #1
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <rellenar_botones+0x294>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	0fda      	lsrs	r2, r3, #31
 8000f8c:	4413      	add	r3, r2
 8000f8e:	105b      	asrs	r3, r3, #1
 8000f90:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	441a      	add	r2, r3
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fbb4 	bl	8000708 <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <rellenar_botones+0x288>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f90c 	bl	80001c8 <strlen>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb4:	fb03 f302 	mul.w	r3, r3, r2
 8000fb8:	1ae3      	subs	r3, r4, r3
 8000fba:	085a      	lsrs	r2, r3, #1
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <rellenar_botones+0x294>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	0fda      	lsrs	r2, r3, #31
 8000fce:	4413      	add	r3, r2
 8000fd0:	105b      	asrs	r3, r3, #1
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fda:	441a      	add	r2, r3
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fb91 	bl	8000708 <print>
			}

			k++;
 8000fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe8:	3301      	adds	r3, #1
 8000fea:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 8000fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <rellenar_botones+0x29c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f6ff aef3 	blt.w	8000de4 <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8000ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001000:	3301      	adds	r3, #1
 8001002:	653b      	str	r3, [r7, #80]	; 0x50
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <rellenar_botones+0x2a0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800100a:	429a      	cmp	r2, r3
 800100c:	f6ff aee7 	blt.w	8000dde <rellenar_botones+0x3e>
		}
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	; 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000003c 	.word	0x2000003c
 8001020:	20000018 	.word	0x20000018
 8001024:	2000019c 	.word	0x2000019c
 8001028:	20000008 	.word	0x20000008
 800102c:	20000000 	.word	0x20000000
 8001030:	200001e4 	.word	0x200001e4
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000004 	.word	0x20000004
 800103c:	2000004c 	.word	0x2000004c
 8001040:	20000048 	.word	0x20000048

08001044 <pantalla_principal>:

//-------------------------------------------------------------------------------//

void pantalla_principal() {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b0a8      	sub	sp, #160	; 0xa0
 8001048:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
 800104a:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <pantalla_principal+0x180>)
 800104c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 0003 	ldmia.w	r5, {r0, r1}
 800105a:	e884 0003 	stmia.w	r4, {r0, r1}
			"SEGURIDAD" };
	rgb boton = { 0, 0, 255 };
 800105e:	2300      	movs	r3, #0
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001062:	2300      	movs	r3, #0
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 800106a:	4a57      	ldr	r2, [pc, #348]	; (80011c8 <pantalla_principal+0x184>)
 800106c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001070:	ca07      	ldmia	r2, {r0, r1, r2}
 8001072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 8001076:	23ff      	movs	r3, #255	; 0xff
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 8001082:	4a51      	ldr	r2, [pc, #324]	; (80011c8 <pantalla_principal+0x184>)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	ca07      	ldmia	r2, {r0, r1, r2}
 800108a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 800108e:	f7ff fa4b 	bl	8000528 <clrScr>
	setColor(255, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	20ff      	movs	r0, #255	; 0xff
 8001098:	f7ff fa5a 	bl	8000550 <setColor>
	fillRect(1, 1, 478, 40);
 800109c:	2328      	movs	r3, #40	; 0x28
 800109e:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80010a2:	2101      	movs	r1, #1
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fae3 	bl	8000670 <fillRect>
	setColor(64, 64, 64);
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	2040      	movs	r0, #64	; 0x40
 80010b0:	f7ff fa4e 	bl	8000550 <setColor>
	fillRect(1, 318, 478, 280);
 80010b4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80010b8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80010bc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fad5 	bl	8000670 <fillRect>
	setColor(255, 255, 255);
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	21ff      	movs	r1, #255	; 0xff
 80010ca:	20ff      	movs	r0, #255	; 0xff
 80010cc:	f7ff fa40 	bl	8000550 <setColor>
	setBackColor(255, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	20ff      	movs	r0, #255	; 0xff
 80010d6:	f7ff fa5d 	bl	8000594 <setBackColor>
	setFont(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fba6 	bl	800082c <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 80010e0:	220c      	movs	r2, #12
 80010e2:	2132      	movs	r1, #50	; 0x32
 80010e4:	4839      	ldr	r0, [pc, #228]	; (80011cc <pantalla_principal+0x188>)
 80010e6:	f7ff fb0f 	bl	8000708 <print>
	setBackColor(64, 64, 64);
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	2040      	movs	r0, #64	; 0x40
 80010f0:	f7ff fa50 	bl	8000594 <setBackColor>
	setColor(255, 255, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	20ff      	movs	r0, #255	; 0xff
 80010fa:	f7ff fa29 	bl	8000550 <setColor>
	setFont(0);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fb94 	bl	800082c <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001104:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <pantalla_principal+0x18c>)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	ca07      	ldmia	r2, {r0, r1, r2}
 800110c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001110:	f107 000c 	add.w	r0, r7, #12
 8001114:	2303      	movs	r3, #3
 8001116:	f240 1219 	movw	r2, #281	; 0x119
 800111a:	2114      	movs	r1, #20
 800111c:	f7ff fb54 	bl	80007c8 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001120:	4a2c      	ldr	r2, [pc, #176]	; (80011d4 <pantalla_principal+0x190>)
 8001122:	463b      	mov	r3, r7
 8001124:	ca07      	ldmia	r2, {r0, r1, r2}
 8001126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800112a:	4638      	mov	r0, r7
 800112c:	2303      	movs	r3, #3
 800112e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001132:	2114      	movs	r1, #20
 8001134:	f7ff fb48 	bl	80007c8 <printfrase>
	setColor(0, 0, 255);
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fa07 	bl	8000550 <setColor>
	drawRect(0, 0, 479, 319);
 8001142:	f240 133f 	movw	r3, #319	; 0x13f
 8001146:	f240 12df 	movw	r2, #479	; 0x1df
 800114a:	2100      	movs	r1, #0
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fa43 	bl	80005d8 <drawRect>
	botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 8001152:	2303      	movs	r3, #3
 8001154:	930f      	str	r3, [sp, #60]	; 0x3c
 8001156:	2302      	movs	r3, #2
 8001158:	930e      	str	r3, [sp, #56]	; 0x38
 800115a:	ac0b      	add	r4, sp, #44	; 0x2c
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001168:	ac08      	add	r4, sp, #32
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001176:	ac05      	add	r4, sp, #20
 8001178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001184:	ac02      	add	r4, sp, #8
 8001186:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800118a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001192:	2305      	movs	r3, #5
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2302      	movs	r3, #2
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2346      	movs	r3, #70	; 0x46
 800119c:	2264      	movs	r2, #100	; 0x64
 800119e:	2146      	movs	r1, #70	; 0x46
 80011a0:	201e      	movs	r0, #30
 80011a2:	f7ff fb9d 	bl	80008e0 <botones>
	crear_botonera();
 80011a6:	f7ff fc4f 	bl	8000a48 <crear_botonera>
	setFont(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fb3e 	bl	800082c <setFont>
	rellenar_botones(t_menu);
 80011b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fdf3 	bl	8000da0 <rellenar_botones>
}
 80011ba:	bf00      	nop
 80011bc:	3760      	adds	r7, #96	; 0x60
 80011be:	46bd      	mov	sp, r7
 80011c0:	bdb0      	pop	{r4, r5, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	080040e4 	.word	0x080040e4
 80011c8:	080040fc 	.word	0x080040fc
 80011cc:	080040d0 	.word	0x080040d0
 80011d0:	08004108 	.word	0x08004108
 80011d4:	08004114 	.word	0x08004114

080011d8 <pantalla_luces>:

void pantalla_luces() {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b0a9      	sub	sp, #164	; 0xa4
 80011dc:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
 80011de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b5a      	ldr	r3, [pc, #360]	; (800135c <pantalla_luces+0x184>)
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <pantalla_luces+0x188>)
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	rgb boton = { 0, 0, 255 };
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011fc:	2300      	movs	r3, #0
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001200:	23ff      	movs	r3, #255	; 0xff
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 8001204:	4a57      	ldr	r2, [pc, #348]	; (8001364 <pantalla_luces+0x18c>)
 8001206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <pantalla_luces+0x18c>)
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 8001228:	f7ff f97e 	bl	8000528 <clrScr>
	setColor(255, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	20ff      	movs	r0, #255	; 0xff
 8001232:	f7ff f98d 	bl	8000550 <setColor>
	fillRect(1, 1, 478, 40);
 8001236:	2328      	movs	r3, #40	; 0x28
 8001238:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800123c:	2101      	movs	r1, #1
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fa16 	bl	8000670 <fillRect>
	setColor(64, 64, 64);
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	2040      	movs	r0, #64	; 0x40
 800124a:	f7ff f981 	bl	8000550 <setColor>
	fillRect(1, 318, 478, 280);
 800124e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001252:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8001256:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fa08 	bl	8000670 <fillRect>
	setColor(255, 255, 255);
 8001260:	22ff      	movs	r2, #255	; 0xff
 8001262:	21ff      	movs	r1, #255	; 0xff
 8001264:	20ff      	movs	r0, #255	; 0xff
 8001266:	f7ff f973 	bl	8000550 <setColor>
	setBackColor(255, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	20ff      	movs	r0, #255	; 0xff
 8001270:	f7ff f990 	bl	8000594 <setBackColor>
	setFont(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fad9 	bl	800082c <setFont>
	print("* MENU LUCES *", 100, 12);
 800127a:	220c      	movs	r2, #12
 800127c:	2164      	movs	r1, #100	; 0x64
 800127e:	483a      	ldr	r0, [pc, #232]	; (8001368 <pantalla_luces+0x190>)
 8001280:	f7ff fa42 	bl	8000708 <print>
	setBackColor(64, 64, 64);
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	2040      	movs	r0, #64	; 0x40
 800128a:	f7ff f983 	bl	8000594 <setBackColor>
	setColor(255, 255, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	21ff      	movs	r1, #255	; 0xff
 8001292:	20ff      	movs	r0, #255	; 0xff
 8001294:	f7ff f95c 	bl	8000550 <setColor>
	setFont(0);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fac7 	bl	800082c <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 800129e:	4a33      	ldr	r2, [pc, #204]	; (800136c <pantalla_luces+0x194>)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 80012aa:	f107 000c 	add.w	r0, r7, #12
 80012ae:	2303      	movs	r3, #3
 80012b0:	f240 1219 	movw	r2, #281	; 0x119
 80012b4:	2114      	movs	r1, #20
 80012b6:	f7ff fa87 	bl	80007c8 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 80012ba:	4a2d      	ldr	r2, [pc, #180]	; (8001370 <pantalla_luces+0x198>)
 80012bc:	463b      	mov	r3, r7
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 80012c4:	4638      	mov	r0, r7
 80012c6:	2303      	movs	r3, #3
 80012c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012cc:	2114      	movs	r1, #20
 80012ce:	f7ff fa7b 	bl	80007c8 <printfrase>
	setColor(0, 0, 255);
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff f93a 	bl	8000550 <setColor>
	drawRect(0, 0, 479, 319);
 80012dc:	f240 133f 	movw	r3, #319	; 0x13f
 80012e0:	f240 12df 	movw	r2, #479	; 0x1df
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff f976 	bl	80005d8 <drawRect>
	botones(40, 85, 180, 150, 2, 5, boton, marco, nmarco, texto, 1, 2);
 80012ec:	2302      	movs	r3, #2
 80012ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80012f0:	2301      	movs	r3, #1
 80012f2:	930e      	str	r3, [sp, #56]	; 0x38
 80012f4:	ac0b      	add	r4, sp, #44	; 0x2c
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001302:	ac08      	add	r4, sp, #32
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001310:	ac05      	add	r4, sp, #20
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800131a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800131e:	ac02      	add	r4, sp, #8
 8001320:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800132c:	2305      	movs	r3, #5
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2302      	movs	r3, #2
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2396      	movs	r3, #150	; 0x96
 8001336:	22b4      	movs	r2, #180	; 0xb4
 8001338:	2155      	movs	r1, #85	; 0x55
 800133a:	2028      	movs	r0, #40	; 0x28
 800133c:	f7ff fad0 	bl	80008e0 <botones>
	crear_botonera();
 8001340:	f7ff fb82 	bl	8000a48 <crear_botonera>
	setFont(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fa71 	bl	800082c <setFont>
	rellenar_botones(t_menu_luces);
 800134a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd26 	bl	8000da0 <rellenar_botones>
}
 8001354:	bf00      	nop
 8001356:	3764      	adds	r7, #100	; 0x64
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	08004120 	.word	0x08004120
 8001360:	0800412c 	.word	0x0800412c
 8001364:	080040fc 	.word	0x080040fc
 8001368:	08004134 	.word	0x08004134
 800136c:	08004108 	.word	0x08004108
 8001370:	08004144 	.word	0x08004144

08001374 <pantalla_luces_manual>:
void pantalla_luces_manual() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
	clrScr();
 800137a:	f7ff f8d5 	bl	8000528 <clrScr>
	setColor(255, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	20ff      	movs	r0, #255	; 0xff
 8001384:	f7ff f8e4 	bl	8000550 <setColor>
	fillRect(1, 1, 478, 40);
 8001388:	2328      	movs	r3, #40	; 0x28
 800138a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800138e:	2101      	movs	r1, #1
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff f96d 	bl	8000670 <fillRect>
	setColor(64, 64, 64);
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	2040      	movs	r0, #64	; 0x40
 800139c:	f7ff f8d8 	bl	8000550 <setColor>
	fillRect(1, 318, 478, 280);
 80013a0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013a4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80013a8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff f95f 	bl	8000670 <fillRect>
	setColor(255, 255, 255);
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	21ff      	movs	r1, #255	; 0xff
 80013b6:	20ff      	movs	r0, #255	; 0xff
 80013b8:	f7ff f8ca 	bl	8000550 <setColor>
	setBackColor(255, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	20ff      	movs	r0, #255	; 0xff
 80013c2:	f7ff f8e7 	bl	8000594 <setBackColor>
	setFont(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fa30 	bl	800082c <setFont>
	print("* CONTROL MANUAL DE LUCES *", 40, 12);
 80013cc:	220c      	movs	r2, #12
 80013ce:	2128      	movs	r1, #40	; 0x28
 80013d0:	4860      	ldr	r0, [pc, #384]	; (8001554 <pantalla_luces_manual+0x1e0>)
 80013d2:	f7ff f999 	bl	8000708 <print>
	setBackColor(64, 64, 64);
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	2040      	movs	r0, #64	; 0x40
 80013dc:	f7ff f8da 	bl	8000594 <setBackColor>
	setColor(255, 255, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	21ff      	movs	r1, #255	; 0xff
 80013e4:	20ff      	movs	r0, #255	; 0xff
 80013e6:	f7ff f8b3 	bl	8000550 <setColor>
	setFont(0);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fa1e 	bl	800082c <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 80013f0:	4a59      	ldr	r2, [pc, #356]	; (8001558 <pantalla_luces_manual+0x1e4>)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 80013fc:	f107 000c 	add.w	r0, r7, #12
 8001400:	2303      	movs	r3, #3
 8001402:	f240 1219 	movw	r2, #281	; 0x119
 8001406:	2114      	movs	r1, #20
 8001408:	f7ff f9de 	bl	80007c8 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan,",
 800140c:	4a53      	ldr	r2, [pc, #332]	; (800155c <pantalla_luces_manual+0x1e8>)
 800140e:	463b      	mov	r3, r7
 8001410:	ca07      	ldmia	r2, {r0, r1, r2}
 8001412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			" Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001416:	4638      	mov	r0, r7
 8001418:	2303      	movs	r3, #3
 800141a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141e:	2114      	movs	r1, #20
 8001420:	f7ff f9d2 	bl	80007c8 <printfrase>
	setColor(0, 0, 255);
 8001424:	22ff      	movs	r2, #255	; 0xff
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff f891 	bl	8000550 <setColor>
	drawRect(0, 0, 479, 319);
 800142e:	f240 133f 	movw	r3, #319	; 0x13f
 8001432:	f240 12df 	movw	r2, #479	; 0x1df
 8001436:	2100      	movs	r1, #0
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff f8cd 	bl	80005d8 <drawRect>

	setColor(0, 255, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	21ff      	movs	r1, #255	; 0xff
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff f884 	bl	8000550 <setColor>
	fillCircle(118, 130, 25);
 8001448:	2219      	movs	r2, #25
 800144a:	2182      	movs	r1, #130	; 0x82
 800144c:	2076      	movs	r0, #118	; 0x76
 800144e:	f7ff fa07 	bl	8000860 <fillCircle>
	setColor(255, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	20ff      	movs	r0, #255	; 0xff
 8001458:	f7ff f87a 	bl	8000550 <setColor>
	fillCircle(358, 130, 25);
 800145c:	2219      	movs	r2, #25
 800145e:	2182      	movs	r1, #130	; 0x82
 8001460:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001464:	f7ff f9fc 	bl	8000860 <fillCircle>
	setColor(255, 255, 255);
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	21ff      	movs	r1, #255	; 0xff
 800146c:	20ff      	movs	r0, #255	; 0xff
 800146e:	f7ff f86f 	bl	8000550 <setColor>
	setBackColor(0, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff f88c 	bl	8000594 <setBackColor>
	setFont(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff f9d5 	bl	800082c <setFont>
	print("ON", 102, 170);
 8001482:	22aa      	movs	r2, #170	; 0xaa
 8001484:	2166      	movs	r1, #102	; 0x66
 8001486:	4836      	ldr	r0, [pc, #216]	; (8001560 <pantalla_luces_manual+0x1ec>)
 8001488:	f7ff f93e 	bl	8000708 <print>
	print("OFF", 334, 170);
 800148c:	22aa      	movs	r2, #170	; 0xaa
 800148e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8001492:	4834      	ldr	r0, [pc, #208]	; (8001564 <pantalla_luces_manual+0x1f0>)
 8001494:	f7ff f938 	bl	8000708 <print>

	if (getEstadoLuces() == 0) {
 8001498:	f7ff f83a 	bl	8000510 <getEstadoLuces>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12a      	bne.n	80014f8 <pantalla_luces_manual+0x184>
		setColor(0, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff f852 	bl	8000550 <setColor>
		fillCircle(118, 130, 30);
 80014ac:	221e      	movs	r2, #30
 80014ae:	2182      	movs	r1, #130	; 0x82
 80014b0:	2076      	movs	r0, #118	; 0x76
 80014b2:	f7ff f9d5 	bl	8000860 <fillCircle>
		setColor(0, 0, 255);
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	2100      	movs	r1, #0
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff f848 	bl	8000550 <setColor>
		fillCircle(358, 130, 30);
 80014c0:	221e      	movs	r2, #30
 80014c2:	2182      	movs	r1, #130	; 0x82
 80014c4:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80014c8:	f7ff f9ca 	bl	8000860 <fillCircle>
		setColor(0, 255, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	21ff      	movs	r1, #255	; 0xff
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff f83d 	bl	8000550 <setColor>
		fillCircle(118, 130, 25);
 80014d6:	2219      	movs	r2, #25
 80014d8:	2182      	movs	r1, #130	; 0x82
 80014da:	2076      	movs	r0, #118	; 0x76
 80014dc:	f7ff f9c0 	bl	8000860 <fillCircle>
		setColor(255, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	20ff      	movs	r0, #255	; 0xff
 80014e6:	f7ff f833 	bl	8000550 <setColor>
		fillCircle(358, 130, 25);
 80014ea:	2219      	movs	r2, #25
 80014ec:	2182      	movs	r1, #130	; 0x82
 80014ee:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80014f2:	f7ff f9b5 	bl	8000860 <fillCircle>
		fillCircle(118, 130, 25);
		setColor(255, 0, 0);
		fillCircle(358, 130, 25);
	}

}
 80014f6:	e029      	b.n	800154c <pantalla_luces_manual+0x1d8>
		setColor(0, 0, 255);
 80014f8:	22ff      	movs	r2, #255	; 0xff
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff f827 	bl	8000550 <setColor>
		fillCircle(118, 130, 30);
 8001502:	221e      	movs	r2, #30
 8001504:	2182      	movs	r1, #130	; 0x82
 8001506:	2076      	movs	r0, #118	; 0x76
 8001508:	f7ff f9aa 	bl	8000860 <fillCircle>
		setColor(0, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f81d 	bl	8000550 <setColor>
		fillCircle(358, 130, 30);
 8001516:	221e      	movs	r2, #30
 8001518:	2182      	movs	r1, #130	; 0x82
 800151a:	f44f 70b3 	mov.w	r0, #358	; 0x166
 800151e:	f7ff f99f 	bl	8000860 <fillCircle>
		setColor(0, 255, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	21ff      	movs	r1, #255	; 0xff
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff f812 	bl	8000550 <setColor>
		fillCircle(118, 130, 25);
 800152c:	2219      	movs	r2, #25
 800152e:	2182      	movs	r1, #130	; 0x82
 8001530:	2076      	movs	r0, #118	; 0x76
 8001532:	f7ff f995 	bl	8000860 <fillCircle>
		setColor(255, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	20ff      	movs	r0, #255	; 0xff
 800153c:	f7ff f808 	bl	8000550 <setColor>
		fillCircle(358, 130, 25);
 8001540:	2219      	movs	r2, #25
 8001542:	2182      	movs	r1, #130	; 0x82
 8001544:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001548:	f7ff f98a 	bl	8000860 <fillCircle>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	08004150 	.word	0x08004150
 8001558:	08004108 	.word	0x08004108
 800155c:	08004144 	.word	0x08004144
 8001560:	0800416c 	.word	0x0800416c
 8001564:	08004170 	.word	0x08004170

08001568 <reset_buffer>:
#include "string.h"
#include "TFT.h"

UART_HandleTypeDef huart6;
char rx_buffer[50], tx_buffer[50];
void reset_buffer() {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	e005      	b.n	8001580 <reset_buffer+0x18>
		rx_buffer[0] = '\0';
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <reset_buffer+0x2c>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3301      	adds	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b31      	cmp	r3, #49	; 0x31
 8001584:	ddf6      	ble.n	8001574 <reset_buffer+0xc>
	}
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	20000134 	.word	0x20000134

08001598 <seleccion_menu_principal>:

const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
		"SEGURIDAD" };
const char *t_menu_luces[6] = { "AUTOMATICO", "MANUAL" };
int opcion = 0;
int seleccion_menu_principal() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 800159e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015a2:	2232      	movs	r2, #50	; 0x32
 80015a4:	498b      	ldr	r1, [pc, #556]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015a6:	488c      	ldr	r0, [pc, #560]	; (80017d8 <seleccion_menu_principal+0x240>)
 80015a8:	f002 fa1f 	bl	80039ea <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 80015ac:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b72      	cmp	r3, #114	; 0x72
 80015b2:	d132      	bne.n	800161a <seleccion_menu_principal+0x82>
 80015b4:	4b87      	ldr	r3, [pc, #540]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	2b69      	cmp	r3, #105	; 0x69
 80015ba:	d12e      	bne.n	800161a <seleccion_menu_principal+0x82>
 80015bc:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	2b67      	cmp	r3, #103	; 0x67
 80015c2:	d12a      	bne.n	800161a <seleccion_menu_principal+0x82>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 80015c4:	4b83      	ldr	r3, [pc, #524]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015c6:	78db      	ldrb	r3, [r3, #3]
 80015c8:	2b68      	cmp	r3, #104	; 0x68
 80015ca:	d126      	bne.n	800161a <seleccion_menu_principal+0x82>
 80015cc:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80015ce:	791b      	ldrb	r3, [r3, #4]
 80015d0:	2b74      	cmp	r3, #116	; 0x74
 80015d2:	d122      	bne.n	800161a <seleccion_menu_principal+0x82>
		if (opcion == 3) {
 80015d4:	4b81      	ldr	r3, [pc, #516]	; (80017dc <seleccion_menu_principal+0x244>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d103      	bne.n	80015e4 <seleccion_menu_principal+0x4c>
			opcion = 1;
 80015dc:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <seleccion_menu_principal+0x244>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e00c      	b.n	80015fe <seleccion_menu_principal+0x66>
		} else if (opcion == 6) {
 80015e4:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <seleccion_menu_principal+0x244>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	d103      	bne.n	80015f4 <seleccion_menu_principal+0x5c>
			opcion = 4;
 80015ec:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <seleccion_menu_principal+0x244>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e004      	b.n	80015fe <seleccion_menu_principal+0x66>
		} else {
			opcion++;
 80015f4:	4b79      	ldr	r3, [pc, #484]	; (80017dc <seleccion_menu_principal+0x244>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a78      	ldr	r2, [pc, #480]	; (80017dc <seleccion_menu_principal+0x244>)
 80015fc:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <seleccion_menu_principal+0x244>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff faa4 	bl	8000b50 <resaltar_boton>
		setFont(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff f90f 	bl	800082c <setFont>
		rellenar_botones(t_menu);
 800160e:	4874      	ldr	r0, [pc, #464]	; (80017e0 <seleccion_menu_principal+0x248>)
 8001610:	f7ff fbc6 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 8001614:	f7ff ffa8 	bl	8001568 <reset_buffer>
 8001618:	e0d6      	b.n	80017c8 <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <seleccion_menu_principal+0x23c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b6c      	cmp	r3, #108	; 0x6c
 8001620:	d136      	bne.n	8001690 <seleccion_menu_principal+0xf8>
 8001622:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001624:	785b      	ldrb	r3, [r3, #1]
 8001626:	2b65      	cmp	r3, #101	; 0x65
 8001628:	d132      	bne.n	8001690 <seleccion_menu_principal+0xf8>
 800162a:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <seleccion_menu_principal+0x23c>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b66      	cmp	r3, #102	; 0x66
 8001630:	d12e      	bne.n	8001690 <seleccion_menu_principal+0xf8>
			&& rx_buffer[3] == 't') {
 8001632:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001634:	78db      	ldrb	r3, [r3, #3]
 8001636:	2b74      	cmp	r3, #116	; 0x74
 8001638:	d12a      	bne.n	8001690 <seleccion_menu_principal+0xf8>
		if (opcion == 1) {
 800163a:	4b68      	ldr	r3, [pc, #416]	; (80017dc <seleccion_menu_principal+0x244>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d103      	bne.n	800164a <seleccion_menu_principal+0xb2>
			opcion = 3;
 8001642:	4b66      	ldr	r3, [pc, #408]	; (80017dc <seleccion_menu_principal+0x244>)
 8001644:	2203      	movs	r2, #3
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e014      	b.n	8001674 <seleccion_menu_principal+0xdc>
		} else if (opcion == 4) {
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <seleccion_menu_principal+0x244>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d103      	bne.n	800165a <seleccion_menu_principal+0xc2>
			opcion = 6;
 8001652:	4b62      	ldr	r3, [pc, #392]	; (80017dc <seleccion_menu_principal+0x244>)
 8001654:	2206      	movs	r2, #6
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e00c      	b.n	8001674 <seleccion_menu_principal+0xdc>
		} else if (opcion == 0) {
 800165a:	4b60      	ldr	r3, [pc, #384]	; (80017dc <seleccion_menu_principal+0x244>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <seleccion_menu_principal+0xd2>
			opcion = 1;
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <seleccion_menu_principal+0x244>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e004      	b.n	8001674 <seleccion_menu_principal+0xdc>
		} else {
			opcion--;
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <seleccion_menu_principal+0x244>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <seleccion_menu_principal+0x244>)
 8001672:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <seleccion_menu_principal+0x244>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa69 	bl	8000b50 <resaltar_boton>
		setFont(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff f8d4 	bl	800082c <setFont>
		rellenar_botones(t_menu);
 8001684:	4856      	ldr	r0, [pc, #344]	; (80017e0 <seleccion_menu_principal+0x248>)
 8001686:	f7ff fb8b 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 800168a:	f7ff ff6d 	bl	8001568 <reset_buffer>
 800168e:	e09b      	b.n	80017c8 <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'u' && rx_buffer[1] == 'p') {
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b75      	cmp	r3, #117	; 0x75
 8001696:	d136      	bne.n	8001706 <seleccion_menu_principal+0x16e>
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <seleccion_menu_principal+0x23c>)
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b70      	cmp	r3, #112	; 0x70
 800169e:	d132      	bne.n	8001706 <seleccion_menu_principal+0x16e>
		if (opcion == 1) {
 80016a0:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <seleccion_menu_principal+0x244>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d103      	bne.n	80016b0 <seleccion_menu_principal+0x118>
			opcion = 4;
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <seleccion_menu_principal+0x244>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e01c      	b.n	80016ea <seleccion_menu_principal+0x152>
		} else if (opcion == 2) {
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <seleccion_menu_principal+0x244>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d103      	bne.n	80016c0 <seleccion_menu_principal+0x128>
			opcion = 5;
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <seleccion_menu_principal+0x244>)
 80016ba:	2205      	movs	r2, #5
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e014      	b.n	80016ea <seleccion_menu_principal+0x152>
		} else if (opcion == 3) {
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <seleccion_menu_principal+0x244>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d103      	bne.n	80016d0 <seleccion_menu_principal+0x138>
			opcion = 6;
 80016c8:	4b44      	ldr	r3, [pc, #272]	; (80017dc <seleccion_menu_principal+0x244>)
 80016ca:	2206      	movs	r2, #6
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00c      	b.n	80016ea <seleccion_menu_principal+0x152>
		} else if (opcion == 0) {
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <seleccion_menu_principal+0x244>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <seleccion_menu_principal+0x148>
			opcion = 1;
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <seleccion_menu_principal+0x244>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e004      	b.n	80016ea <seleccion_menu_principal+0x152>
		} else {
			opcion -= 3;
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <seleccion_menu_principal+0x244>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <seleccion_menu_principal+0x244>)
 80016e8:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <seleccion_menu_principal+0x244>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fa2e 	bl	8000b50 <resaltar_boton>
		setFont(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff f899 	bl	800082c <setFont>
		rellenar_botones(t_menu);
 80016fa:	4839      	ldr	r0, [pc, #228]	; (80017e0 <seleccion_menu_principal+0x248>)
 80016fc:	f7ff fb50 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 8001700:	f7ff ff32 	bl	8001568 <reset_buffer>
 8001704:	e060      	b.n	80017c8 <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 'd' && rx_buffer[1] == 'o' && rx_buffer[2] == 'w'
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d13e      	bne.n	800178c <seleccion_menu_principal+0x1f4>
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	2b6f      	cmp	r3, #111	; 0x6f
 8001714:	d13a      	bne.n	800178c <seleccion_menu_principal+0x1f4>
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	2b77      	cmp	r3, #119	; 0x77
 800171c:	d136      	bne.n	800178c <seleccion_menu_principal+0x1f4>
			&& rx_buffer[3] == 'n') {
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001720:	78db      	ldrb	r3, [r3, #3]
 8001722:	2b6e      	cmp	r3, #110	; 0x6e
 8001724:	d132      	bne.n	800178c <seleccion_menu_principal+0x1f4>
		if (opcion == 4) {
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <seleccion_menu_principal+0x244>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d103      	bne.n	8001736 <seleccion_menu_principal+0x19e>
			opcion = 1;
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <seleccion_menu_principal+0x244>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e01c      	b.n	8001770 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 5) {
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <seleccion_menu_principal+0x244>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d103      	bne.n	8001746 <seleccion_menu_principal+0x1ae>
			opcion = 2;
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <seleccion_menu_principal+0x244>)
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e014      	b.n	8001770 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 0) {
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <seleccion_menu_principal+0x244>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <seleccion_menu_principal+0x1be>
			opcion = 1;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <seleccion_menu_principal+0x244>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e00c      	b.n	8001770 <seleccion_menu_principal+0x1d8>
		} else if (opcion == 6) {
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <seleccion_menu_principal+0x244>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b06      	cmp	r3, #6
 800175c:	d103      	bne.n	8001766 <seleccion_menu_principal+0x1ce>
			opcion = 3;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <seleccion_menu_principal+0x244>)
 8001760:	2203      	movs	r2, #3
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e004      	b.n	8001770 <seleccion_menu_principal+0x1d8>
		} else {
			opcion += 3;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <seleccion_menu_principal+0x244>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3303      	adds	r3, #3
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <seleccion_menu_principal+0x244>)
 800176e:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion);
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <seleccion_menu_principal+0x244>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f9eb 	bl	8000b50 <resaltar_boton>
		setFont(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff f856 	bl	800082c <setFont>
		rellenar_botones(t_menu);
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <seleccion_menu_principal+0x248>)
 8001782:	f7ff fb0d 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 8001786:	f7ff feef 	bl	8001568 <reset_buffer>
 800178a:	e01d      	b.n	80017c8 <seleccion_menu_principal+0x230>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <seleccion_menu_principal+0x23c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b73      	cmp	r3, #115	; 0x73
 8001792:	d119      	bne.n	80017c8 <seleccion_menu_principal+0x230>
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <seleccion_menu_principal+0x23c>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	2b74      	cmp	r3, #116	; 0x74
 800179a:	d115      	bne.n	80017c8 <seleccion_menu_principal+0x230>
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <seleccion_menu_principal+0x23c>)
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	2b61      	cmp	r3, #97	; 0x61
 80017a2:	d111      	bne.n	80017c8 <seleccion_menu_principal+0x230>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	2b72      	cmp	r3, #114	; 0x72
 80017aa:	d10d      	bne.n	80017c8 <seleccion_menu_principal+0x230>
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <seleccion_menu_principal+0x23c>)
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	2b74      	cmp	r3, #116	; 0x74
 80017b2:	d109      	bne.n	80017c8 <seleccion_menu_principal+0x230>
		reset_buffer();
 80017b4:	f7ff fed8 	bl	8001568 <reset_buffer>
		int op = opcion;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <seleccion_menu_principal+0x244>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	607b      	str	r3, [r7, #4]
		opcion = 0;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <seleccion_menu_principal+0x244>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		return op;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	e000      	b.n	80017ca <seleccion_menu_principal+0x232>
	}
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000134 	.word	0x20000134
 80017d8:	200001a0 	.word	0x200001a0
 80017dc:	200000b0 	.word	0x200000b0
 80017e0:	20000050 	.word	0x20000050

080017e4 <seleccion_menu_luces>:

int opcion_luces = 0;
int seleccion_menu_luces() {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 80017ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ee:	2232      	movs	r2, #50	; 0x32
 80017f0:	4954      	ldr	r1, [pc, #336]	; (8001944 <seleccion_menu_luces+0x160>)
 80017f2:	4855      	ldr	r0, [pc, #340]	; (8001948 <seleccion_menu_luces+0x164>)
 80017f4:	f002 f8f9 	bl	80039ea <HAL_UART_Receive>
	if (rx_buffer[0] == 'r' && rx_buffer[1] == 'i' && rx_buffer[2] == 'g'
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <seleccion_menu_luces+0x160>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b72      	cmp	r3, #114	; 0x72
 80017fe:	d12a      	bne.n	8001856 <seleccion_menu_luces+0x72>
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <seleccion_menu_luces+0x160>)
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	2b69      	cmp	r3, #105	; 0x69
 8001806:	d126      	bne.n	8001856 <seleccion_menu_luces+0x72>
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <seleccion_menu_luces+0x160>)
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	2b67      	cmp	r3, #103	; 0x67
 800180e:	d122      	bne.n	8001856 <seleccion_menu_luces+0x72>
			&& rx_buffer[3] == 'h' && rx_buffer[4] == 't') {
 8001810:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <seleccion_menu_luces+0x160>)
 8001812:	78db      	ldrb	r3, [r3, #3]
 8001814:	2b68      	cmp	r3, #104	; 0x68
 8001816:	d11e      	bne.n	8001856 <seleccion_menu_luces+0x72>
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <seleccion_menu_luces+0x160>)
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	2b74      	cmp	r3, #116	; 0x74
 800181e:	d11a      	bne.n	8001856 <seleccion_menu_luces+0x72>
		if (opcion_luces == 2) {
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <seleccion_menu_luces+0x168>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d103      	bne.n	8001830 <seleccion_menu_luces+0x4c>
			opcion_luces = 1;
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <seleccion_menu_luces+0x168>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e004      	b.n	800183a <seleccion_menu_luces+0x56>
		} else {
			opcion_luces++;
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <seleccion_menu_luces+0x168>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a45      	ldr	r2, [pc, #276]	; (800194c <seleccion_menu_luces+0x168>)
 8001838:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 800183a:	4b44      	ldr	r3, [pc, #272]	; (800194c <seleccion_menu_luces+0x168>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f986 	bl	8000b50 <resaltar_boton>
		setFont(1);
 8001844:	2001      	movs	r0, #1
 8001846:	f7fe fff1 	bl	800082c <setFont>
		rellenar_botones(t_menu_luces);
 800184a:	4841      	ldr	r0, [pc, #260]	; (8001950 <seleccion_menu_luces+0x16c>)
 800184c:	f7ff faa8 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 8001850:	f7ff fe8a 	bl	8001568 <reset_buffer>
 8001854:	e070      	b.n	8001938 <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'f'
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <seleccion_menu_luces+0x160>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b6c      	cmp	r3, #108	; 0x6c
 800185c:	d12e      	bne.n	80018bc <seleccion_menu_luces+0xd8>
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <seleccion_menu_luces+0x160>)
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	2b65      	cmp	r3, #101	; 0x65
 8001864:	d12a      	bne.n	80018bc <seleccion_menu_luces+0xd8>
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <seleccion_menu_luces+0x160>)
 8001868:	789b      	ldrb	r3, [r3, #2]
 800186a:	2b66      	cmp	r3, #102	; 0x66
 800186c:	d126      	bne.n	80018bc <seleccion_menu_luces+0xd8>
			&& rx_buffer[3] == 't') {
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <seleccion_menu_luces+0x160>)
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	2b74      	cmp	r3, #116	; 0x74
 8001874:	d122      	bne.n	80018bc <seleccion_menu_luces+0xd8>
		if (opcion_luces == 1) {
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <seleccion_menu_luces+0x168>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d103      	bne.n	8001886 <seleccion_menu_luces+0xa2>
			opcion_luces = 2;
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <seleccion_menu_luces+0x168>)
 8001880:	2202      	movs	r2, #2
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e00c      	b.n	80018a0 <seleccion_menu_luces+0xbc>
		} else if (opcion_luces == 0) {
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <seleccion_menu_luces+0x168>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <seleccion_menu_luces+0xb2>
			opcion_luces = 1;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <seleccion_menu_luces+0x168>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e004      	b.n	80018a0 <seleccion_menu_luces+0xbc>
		} else {
			opcion_luces--;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <seleccion_menu_luces+0x168>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a2b      	ldr	r2, [pc, #172]	; (800194c <seleccion_menu_luces+0x168>)
 800189e:	6013      	str	r3, [r2, #0]
		}
		resaltar_boton(opcion_luces);
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <seleccion_menu_luces+0x168>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f953 	bl	8000b50 <resaltar_boton>
		setFont(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7fe ffbe 	bl	800082c <setFont>
		rellenar_botones(t_menu_luces);
 80018b0:	4827      	ldr	r0, [pc, #156]	; (8001950 <seleccion_menu_luces+0x16c>)
 80018b2:	f7ff fa75 	bl	8000da0 <rellenar_botones>
		reset_buffer();
 80018b6:	f7ff fe57 	bl	8001568 <reset_buffer>
 80018ba:	e03d      	b.n	8001938 <seleccion_menu_luces+0x154>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <seleccion_menu_luces+0x160>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b73      	cmp	r3, #115	; 0x73
 80018c2:	d11a      	bne.n	80018fa <seleccion_menu_luces+0x116>
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <seleccion_menu_luces+0x160>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b65      	cmp	r3, #101	; 0x65
 80018ca:	d116      	bne.n	80018fa <seleccion_menu_luces+0x116>
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <seleccion_menu_luces+0x160>)
 80018ce:	789b      	ldrb	r3, [r3, #2]
 80018d0:	2b6c      	cmp	r3, #108	; 0x6c
 80018d2:	d112      	bne.n	80018fa <seleccion_menu_luces+0x116>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <seleccion_menu_luces+0x160>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b65      	cmp	r3, #101	; 0x65
 80018da:	d10e      	bne.n	80018fa <seleccion_menu_luces+0x116>
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <seleccion_menu_luces+0x160>)
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	2b63      	cmp	r3, #99	; 0x63
 80018e2:	d10a      	bne.n	80018fa <seleccion_menu_luces+0x116>
			&& rx_buffer[5] == 't') {
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <seleccion_menu_luces+0x160>)
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	2b74      	cmp	r3, #116	; 0x74
 80018ea:	d106      	bne.n	80018fa <seleccion_menu_luces+0x116>
		reset_buffer();
 80018ec:	f7ff fe3c 	bl	8001568 <reset_buffer>
		opcion_luces = 0;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <seleccion_menu_luces+0x168>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
		return 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e01f      	b.n	800193a <seleccion_menu_luces+0x156>
	} else if (rx_buffer[0] == 's' && rx_buffer[1] == 't' && rx_buffer[2] == 'a'
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <seleccion_menu_luces+0x160>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b73      	cmp	r3, #115	; 0x73
 8001900:	d11a      	bne.n	8001938 <seleccion_menu_luces+0x154>
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <seleccion_menu_luces+0x160>)
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	2b74      	cmp	r3, #116	; 0x74
 8001908:	d116      	bne.n	8001938 <seleccion_menu_luces+0x154>
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <seleccion_menu_luces+0x160>)
 800190c:	789b      	ldrb	r3, [r3, #2]
 800190e:	2b61      	cmp	r3, #97	; 0x61
 8001910:	d112      	bne.n	8001938 <seleccion_menu_luces+0x154>
			&& rx_buffer[3] == 'r' && rx_buffer[4] == 't') {
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <seleccion_menu_luces+0x160>)
 8001914:	78db      	ldrb	r3, [r3, #3]
 8001916:	2b72      	cmp	r3, #114	; 0x72
 8001918:	d10e      	bne.n	8001938 <seleccion_menu_luces+0x154>
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <seleccion_menu_luces+0x160>)
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	2b74      	cmp	r3, #116	; 0x74
 8001920:	d10a      	bne.n	8001938 <seleccion_menu_luces+0x154>
		reset_buffer();
 8001922:	f7ff fe21 	bl	8001568 <reset_buffer>
		int op = opcion_luces;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <seleccion_menu_luces+0x168>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	607b      	str	r3, [r7, #4]
		opcion_luces = 0;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <seleccion_menu_luces+0x168>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
		return op + 6;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3306      	adds	r3, #6
 8001936:	e000      	b.n	800193a <seleccion_menu_luces+0x156>
	}
	return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000134 	.word	0x20000134
 8001948:	200001a0 	.word	0x200001a0
 800194c:	200000b4 	.word	0x200000b4
 8001950:	20000068 	.word	0x20000068

08001954 <menu_luces_manual>:
int menu_luces_manual() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, (uint8_t*) rx_buffer, 50, 500);
 8001958:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800195c:	2232      	movs	r2, #50	; 0x32
 800195e:	495c      	ldr	r1, [pc, #368]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001960:	485c      	ldr	r0, [pc, #368]	; (8001ad4 <menu_luces_manual+0x180>)
 8001962:	f002 f842 	bl	80039ea <HAL_UART_Receive>
	if (rx_buffer[0] == 's' && rx_buffer[1] == 'q' && rx_buffer[2] == 'u'
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b73      	cmp	r3, #115	; 0x73
 800196c:	d148      	bne.n	8001a00 <menu_luces_manual+0xac>
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	2b71      	cmp	r3, #113	; 0x71
 8001974:	d144      	bne.n	8001a00 <menu_luces_manual+0xac>
 8001976:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001978:	789b      	ldrb	r3, [r3, #2]
 800197a:	2b75      	cmp	r3, #117	; 0x75
 800197c:	d140      	bne.n	8001a00 <menu_luces_manual+0xac>
			&& rx_buffer[3] == 'a' && rx_buffer[4] == 'r'
 800197e:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001980:	78db      	ldrb	r3, [r3, #3]
 8001982:	2b61      	cmp	r3, #97	; 0x61
 8001984:	d13c      	bne.n	8001a00 <menu_luces_manual+0xac>
 8001986:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	2b72      	cmp	r3, #114	; 0x72
 800198c:	d138      	bne.n	8001a00 <menu_luces_manual+0xac>
			&& rx_buffer[5] == 'e') {
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001990:	795b      	ldrb	r3, [r3, #5]
 8001992:	2b65      	cmp	r3, #101	; 0x65
 8001994:	d134      	bne.n	8001a00 <menu_luces_manual+0xac>
		if (getEstadoLuces() == 0) {
 8001996:	f7fe fdbb 	bl	8000510 <getEstadoLuces>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d12c      	bne.n	80019fa <menu_luces_manual+0xa6>
			setLuces(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7fe fd95 	bl	80004d0 <setLuces>
			setColor(0, 0, 255);
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7fe fdd0 	bl	8000550 <setColor>
			fillCircle(118, 130, 30);
 80019b0:	221e      	movs	r2, #30
 80019b2:	2182      	movs	r1, #130	; 0x82
 80019b4:	2076      	movs	r0, #118	; 0x76
 80019b6:	f7fe ff53 	bl	8000860 <fillCircle>
			setColor(0, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f7fe fdc6 	bl	8000550 <setColor>
			fillCircle(358, 130, 30);
 80019c4:	221e      	movs	r2, #30
 80019c6:	2182      	movs	r1, #130	; 0x82
 80019c8:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80019cc:	f7fe ff48 	bl	8000860 <fillCircle>
			setColor(0, 255, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7fe fdbb 	bl	8000550 <setColor>
			fillCircle(118, 130, 25);
 80019da:	2219      	movs	r2, #25
 80019dc:	2182      	movs	r1, #130	; 0x82
 80019de:	2076      	movs	r0, #118	; 0x76
 80019e0:	f7fe ff3e 	bl	8000860 <fillCircle>
			setColor(255, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	20ff      	movs	r0, #255	; 0xff
 80019ea:	f7fe fdb1 	bl	8000550 <setColor>
			fillCircle(358, 130, 25);
 80019ee:	2219      	movs	r2, #25
 80019f0:	2182      	movs	r1, #130	; 0x82
 80019f2:	f44f 70b3 	mov.w	r0, #358	; 0x166
 80019f6:	f7fe ff33 	bl	8000860 <fillCircle>
		}
		reset_buffer();
 80019fa:	f7ff fdb5 	bl	8001568 <reset_buffer>
 80019fe:	e064      	b.n	8001aca <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 'c' && rx_buffer[1] == 'r' && rx_buffer[2] == 'o'
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b63      	cmp	r3, #99	; 0x63
 8001a06:	d144      	bne.n	8001a92 <menu_luces_manual+0x13e>
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b72      	cmp	r3, #114	; 0x72
 8001a0e:	d140      	bne.n	8001a92 <menu_luces_manual+0x13e>
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a12:	789b      	ldrb	r3, [r3, #2]
 8001a14:	2b6f      	cmp	r3, #111	; 0x6f
 8001a16:	d13c      	bne.n	8001a92 <menu_luces_manual+0x13e>
			&& rx_buffer[3] == 's' && rx_buffer[4] == 's') {
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a1a:	78db      	ldrb	r3, [r3, #3]
 8001a1c:	2b73      	cmp	r3, #115	; 0x73
 8001a1e:	d138      	bne.n	8001a92 <menu_luces_manual+0x13e>
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a22:	791b      	ldrb	r3, [r3, #4]
 8001a24:	2b73      	cmp	r3, #115	; 0x73
 8001a26:	d134      	bne.n	8001a92 <menu_luces_manual+0x13e>
		if (getEstadoLuces() == 1) {
 8001a28:	f7fe fd72 	bl	8000510 <getEstadoLuces>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d12c      	bne.n	8001a8c <menu_luces_manual+0x138>
			setLuces(0);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7fe fd4c 	bl	80004d0 <setLuces>
			setColor(0, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7fe fd87 	bl	8000550 <setColor>
			fillCircle(118, 130, 30);
 8001a42:	221e      	movs	r2, #30
 8001a44:	2182      	movs	r1, #130	; 0x82
 8001a46:	2076      	movs	r0, #118	; 0x76
 8001a48:	f7fe ff0a 	bl	8000860 <fillCircle>
			setColor(0, 0, 255);
 8001a4c:	22ff      	movs	r2, #255	; 0xff
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7fe fd7d 	bl	8000550 <setColor>
			fillCircle(358, 130, 30);
 8001a56:	221e      	movs	r2, #30
 8001a58:	2182      	movs	r1, #130	; 0x82
 8001a5a:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a5e:	f7fe feff 	bl	8000860 <fillCircle>
			setColor(0, 255, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	21ff      	movs	r1, #255	; 0xff
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7fe fd72 	bl	8000550 <setColor>
			fillCircle(118, 130, 25);
 8001a6c:	2219      	movs	r2, #25
 8001a6e:	2182      	movs	r1, #130	; 0x82
 8001a70:	2076      	movs	r0, #118	; 0x76
 8001a72:	f7fe fef5 	bl	8000860 <fillCircle>
			setColor(255, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	20ff      	movs	r0, #255	; 0xff
 8001a7c:	f7fe fd68 	bl	8000550 <setColor>
			fillCircle(358, 130, 25);
 8001a80:	2219      	movs	r2, #25
 8001a82:	2182      	movs	r1, #130	; 0x82
 8001a84:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001a88:	f7fe feea 	bl	8000860 <fillCircle>
		}
		reset_buffer();
 8001a8c:	f7ff fd6c 	bl	8001568 <reset_buffer>
 8001a90:	e01b      	b.n	8001aca <menu_luces_manual+0x176>
	}else if (rx_buffer[0] == 's' && rx_buffer[1] == 'e' && rx_buffer[2] == 'l'
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b73      	cmp	r3, #115	; 0x73
 8001a98:	d117      	bne.n	8001aca <menu_luces_manual+0x176>
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b65      	cmp	r3, #101	; 0x65
 8001aa0:	d113      	bne.n	8001aca <menu_luces_manual+0x176>
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001aa4:	789b      	ldrb	r3, [r3, #2]
 8001aa6:	2b6c      	cmp	r3, #108	; 0x6c
 8001aa8:	d10f      	bne.n	8001aca <menu_luces_manual+0x176>
			&& rx_buffer[3] == 'e' && rx_buffer[4] == 'c'
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001aac:	78db      	ldrb	r3, [r3, #3]
 8001aae:	2b65      	cmp	r3, #101	; 0x65
 8001ab0:	d10b      	bne.n	8001aca <menu_luces_manual+0x176>
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	2b63      	cmp	r3, #99	; 0x63
 8001ab8:	d107      	bne.n	8001aca <menu_luces_manual+0x176>
			&& rx_buffer[5] == 't') {
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <menu_luces_manual+0x17c>)
 8001abc:	795b      	ldrb	r3, [r3, #5]
 8001abe:	2b74      	cmp	r3, #116	; 0x74
 8001ac0:	d103      	bne.n	8001aca <menu_luces_manual+0x176>
		reset_buffer();
 8001ac2:	f7ff fd51 	bl	8001568 <reset_buffer>
		return 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <menu_luces_manual+0x178>
	}
return 8;
 8001aca:	2308      	movs	r3, #8
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000134 	.word	0x20000134
 8001ad4:	200001a0 	.word	0x200001a0

08001ad8 <rellbotones.8980>:
/* USER CODE BEGIN 0 */

//Interrupciones botones:
volatile int button[10];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	void rellbotones(int n) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	f8c7 c000 	str.w	ip, [r7]
		for (int i = 0; i < 10; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e00b      	b.n	8001b02 <rellbotones.8980+0x2a>
			if (i != n)
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d004      	beq.n	8001afc <rellbotones.8980+0x24>
				button[i] = 0;
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <rellbotones.8980+0x48>)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2100      	movs	r1, #0
 8001af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	ddf0      	ble.n	8001aea <rellbotones.8980+0x12>
		}
		button[n] = 1;
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <rellbotones.8980+0x48>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	2000010c 	.word	0x2000010c

08001b24 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_0) {
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d106      	bne.n	8001b48 <HAL_GPIO_EXTI_Callback+0x24>
		rellbotones(0);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	469c      	mov	ip, r3
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ffc9 	bl	8001ad8 <rellbotones.8980>
	} else if (GPIO_Pin == GPIO_PIN_1) {
		rellbotones(1);
	}

}
 8001b46:	e008      	b.n	8001b5a <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d105      	bne.n	8001b5a <HAL_GPIO_EXTI_Callback+0x36>
		rellbotones(1);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	469c      	mov	ip, r3
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff ffbf 	bl	8001ad8 <rellbotones.8980>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b68:	f000 fae0 	bl	800212c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b6c:	f000 f86a 	bl	8001c44 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b70:	f000 f92a 	bl	8001dc8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001b74:	f000 f8d0 	bl	8001d18 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8001b78:	f000 f8fc 	bl	8001d74 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	int menu_actual = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//MENU PRINCIPAL
		if (menu_actual == 0) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d111      	bne.n	8001bae <main+0x4c>
			if (retorno == 0) {
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <main+0x38>
				pantalla_principal();
 8001b90:	f7ff fa58 	bl	8001044 <pantalla_principal>
				retorno++;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_principal();
 8001b9a:	f7ff fcfd 	bl	8001598 <seleccion_menu_principal>
 8001b9e:	6078      	str	r0, [r7, #4]
			if (menu_actual != 0) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0ee      	beq.n	8001b84 <main+0x22>
				retorno--;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	e7ea      	b.n	8001b84 <main+0x22>
			}
//MENU SELECCION MODO LUCES
		} else if (menu_actual == 1) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d111      	bne.n	8001bd8 <main+0x76>
			if (retorno == 0) {
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d104      	bne.n	8001bc4 <main+0x62>
				pantalla_luces();
 8001bba:	f7ff fb0d 	bl	80011d8 <pantalla_luces>
				retorno++;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
			}
			menu_actual = seleccion_menu_luces();
 8001bc4:	f7ff fe0e 	bl	80017e4 <seleccion_menu_luces>
 8001bc8:	6078      	str	r0, [r7, #4]
			if (menu_actual != 1) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d0d9      	beq.n	8001b84 <main+0x22>
				retorno--;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	e7d5      	b.n	8001b84 <main+0x22>
			}
//MENU SELECCION MODO PERSIANAS
		} else if (menu_actual == 2) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d102      	bne.n	8001be4 <main+0x82>
			clrScr();
 8001bde:	f7fe fca3 	bl	8000528 <clrScr>
 8001be2:	e7cf      	b.n	8001b84 <main+0x22>
		}
//MENU SELECCION MODO RIEGO
		else if (menu_actual == 3) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d102      	bne.n	8001bf0 <main+0x8e>
			clrScr();
 8001bea:	f7fe fc9d 	bl	8000528 <clrScr>
 8001bee:	e7c9      	b.n	8001b84 <main+0x22>
		}
//MENU SELECCION MODO CLIMA
		else if (menu_actual == 4) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d102      	bne.n	8001bfc <main+0x9a>
			clrScr();
 8001bf6:	f7fe fc97 	bl	8000528 <clrScr>
 8001bfa:	e7c3      	b.n	8001b84 <main+0x22>
		}
//MENU SELECCION AUDIO
		else if (menu_actual == 5) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d102      	bne.n	8001c08 <main+0xa6>
			clrScr();
 8001c02:	f7fe fc91 	bl	8000528 <clrScr>
 8001c06:	e7bd      	b.n	8001b84 <main+0x22>
		}
//MENU SEGURIDAD
		else if (menu_actual == 6) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d102      	bne.n	8001c14 <main+0xb2>
			clrScr();
 8001c0e:	f7fe fc8b 	bl	8000528 <clrScr>
 8001c12:	e7b7      	b.n	8001b84 <main+0x22>
		}
//MENU LUCES AUTOMATICO (7)
		else if (menu_actual == 7) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d0b4      	beq.n	8001b84 <main+0x22>

		}
//MENU LUCES MANUAL (8)
		else if (menu_actual == 8) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d1b1      	bne.n	8001b84 <main+0x22>
			if (retorno == 0) {
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <main+0xce>
				pantalla_luces_manual();
 8001c26:	f7ff fba5 	bl	8001374 <pantalla_luces_manual>
				retorno++;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]
			}
			menu_actual = menu_luces_manual();
 8001c30:	f7ff fe90 	bl	8001954 <menu_luces_manual>
 8001c34:	6078      	str	r0, [r7, #4]
			if (menu_actual != 8) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d0a3      	beq.n	8001b84 <main+0x22>
				retorno--;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	603b      	str	r3, [r7, #0]
		if (menu_actual == 0) {
 8001c42:	e79f      	b.n	8001b84 <main+0x22>

08001c44 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	; 0x50
 8001c48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2230      	movs	r2, #48	; 0x30
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 f9c6 	bl	8003fe4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <SystemClock_Config+0xd0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <SystemClock_Config+0xd0>)
 8001c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <SystemClock_Config+0xd0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cac:	2302      	movs	r3, #2
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001cb8:	2332      	movs	r3, #50	; 0x32
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f9cd 	bl	8003068 <HAL_RCC_OscConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0x94>
		Error_Handler();
 8001cd4:	f000 f8f8 	bl	8001ec8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cd8:	230f      	movs	r3, #15
 8001cda:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fc2e 	bl	8003558 <HAL_RCC_ClockConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0xc2>
		Error_Handler();
 8001d02:	f000 f8e1 	bl	8001ec8 <Error_Handler>
	}
}
 8001d06:	bf00      	nop
 8001d08:	3750      	adds	r7, #80	; 0x50
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d1e:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <MX_I2C1_Init+0x54>)
 8001d20:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_I2C1_Init+0x58>)
 8001d26:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <MX_I2C1_Init+0x50>)
 8001d56:	f000 fd3b 	bl	80027d0 <HAL_I2C_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001d60:	f000 f8b2 	bl	8001ec8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200000b8 	.word	0x200000b8
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	00061a80 	.word	0x00061a80

08001d74 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <MX_USART6_UART_Init+0x50>)
 8001d7c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d84:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART6_UART_Init+0x4c>)
 8001dac:	f001 fdd0 	bl	8003950 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001db6:	f000 f887 	bl	8001ec8 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200001a0 	.word	0x200001a0
 8001dc4:	40011400 	.word	0x40011400

08001dc8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <MX_GPIO_Init+0xf4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001e54:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <MX_GPIO_Init+0xf8>)
 8001e56:	f000 fc89 	bl	800276c <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4815      	ldr	r0, [pc, #84]	; (8001ec4 <MX_GPIO_Init+0xfc>)
 8001e70:	f000 fae0 	bl	8002434 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001e74:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001e78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <MX_GPIO_Init+0xf8>)
 8001e8e:	f000 fad1 	bl	8002434 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2006      	movs	r0, #6
 8001e98:	f000 fa95 	bl	80023c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f000 faae 	bl	80023fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2007      	movs	r0, #7
 8001ea8:	f000 fa8d 	bl	80023c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001eac:	2007      	movs	r0, #7
 8001eae:	f000 faa6 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 fa4c 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_I2C_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f62:	23c0      	movs	r3, #192	; 0xc0
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f72:	2304      	movs	r3, #4
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_I2C_MspInit+0x8c>)
 8001f7e:	f000 fa59 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12b      	bne.n	800202e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_UART_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200e:	23c0      	movs	r3, #192	; 0xc0
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800201e:	2308      	movs	r3, #8
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x8c>)
 800202a:	f000 fa03 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40011400 	.word	0x40011400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020800 	.word	0x40020800

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f89e 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800209c:	2001      	movs	r0, #1
 800209e:	f000 fb7f 	bl	80027a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020aa:	2002      	movs	r0, #2
 80020ac:	f000 fb78 	bl	80027a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f4:	4c0b      	ldr	r4, [pc, #44]	; (8002124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002102:	f7ff ffd7 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f001 ff49 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7ff fd2a 	bl	8001b62 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800211c:	0800419c 	.word	0x0800419c
  ldr r2, =_sbss
 8002120:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002124:	200001ec 	.word	0x200001ec

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f92b 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff feb8 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f943 	bl	800241a <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 f90b 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000080 	.word	0x20000080
 80021c8:	20000088 	.word	0x20000088
 80021cc:	20000084 	.word	0x20000084

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000088 	.word	0x20000088
 80021f4:	200001e8 	.word	0x200001e8

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200001e8 	.word	0x200001e8

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e16b      	b.n	8002728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 815a 	bne.w	8002722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d005      	beq.n	8002486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	2b02      	cmp	r3, #2
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80b4 	beq.w	8002722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a5f      	ldr	r2, [pc, #380]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_GPIO_Init+0x310>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_GPIO_Init+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x226>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <HAL_GPIO_Init+0x318>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x222>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_GPIO_Init+0x31c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x21e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x320>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x21a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x324>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x216>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	; (800275c <HAL_GPIO_Init+0x328>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x212>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_GPIO_Init+0x32c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_GPIO_Init+0x330>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x20a>
 800263a:	2307      	movs	r3, #7
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x228>
 800263e:	2308      	movs	r3, #8
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x228>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x310>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_GPIO_Init+0x334>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_GPIO_Init+0x334>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_GPIO_Init+0x334>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae90 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f9b0 	bl	8001b24 <HAL_GPIO_EXTI_Callback>
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e12b      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fb94 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002834:	f001 f864 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a81      	ldr	r2, [pc, #516]	; (8002a44 <HAL_I2C_Init+0x274>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d807      	bhi.n	8002854 <HAL_I2C_Init+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a80      	ldr	r2, [pc, #512]	; (8002a48 <HAL_I2C_Init+0x278>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e006      	b.n	8002862 <HAL_I2C_Init+0x92>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a7d      	ldr	r2, [pc, #500]	; (8002a4c <HAL_I2C_Init+0x27c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0e7      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a78      	ldr	r2, [pc, #480]	; (8002a50 <HAL_I2C_Init+0x280>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a6a      	ldr	r2, [pc, #424]	; (8002a44 <HAL_I2C_Init+0x274>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d802      	bhi.n	80028a4 <HAL_I2C_Init+0xd4>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3301      	adds	r3, #1
 80028a2:	e009      	b.n	80028b8 <HAL_I2C_Init+0xe8>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <HAL_I2C_Init+0x284>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	3301      	adds	r3, #1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	495c      	ldr	r1, [pc, #368]	; (8002a44 <HAL_I2C_Init+0x274>)
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d819      	bhi.n	800290c <HAL_I2C_Init+0x13c>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e59      	subs	r1, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028ec:	400b      	ands	r3, r1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_I2C_Init+0x138>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e59      	subs	r1, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	e051      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002908:	2304      	movs	r3, #4
 800290a:	e04f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <HAL_I2C_Init+0x168>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e012      	b.n	800295e <HAL_I2C_Init+0x18e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	0099      	lsls	r1, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Init+0x196>
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <HAL_I2C_Init+0x1bc>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e58      	subs	r0, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	440b      	add	r3, r1
 800297c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6911      	ldr	r1, [r2, #16]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	000186a0 	.word	0x000186a0
 8002a48:	001e847f 	.word	0x001e847f
 8002a4c:	003d08ff 	.word	0x003d08ff
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	460b      	mov	r3, r1
 8002a66:	817b      	strh	r3, [r7, #10]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fbc4 	bl	80021f8 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	f040 80e0 	bne.w	8002c40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2319      	movs	r3, #25
 8002a86:	2201      	movs	r2, #1
 8002a88:	4970      	ldr	r1, [pc, #448]	; (8002c4c <HAL_I2C_Master_Transmit+0x1f4>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f964 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0d3      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_I2C_Master_Transmit+0x50>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0cc      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d007      	beq.n	8002ace <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002adc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2221      	movs	r2, #33	; 0x21
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	893a      	ldrh	r2, [r7, #8]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f89c 	bl	8002c54 <I2C_MasterRequestWrite>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e08d      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b3c:	e066      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f9de 	bl	8002f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06b      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11b      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x188>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	6a39      	ldr	r1, [r7, #32]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f9ce 	bl	8002f86 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d107      	bne.n	8002c08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e01a      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d194      	bne.n	8002b3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000

08002c54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d006      	beq.n	8002c7e <I2C_MasterRequestWrite+0x2a>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d003      	beq.n	8002c7e <I2C_MasterRequestWrite+0x2a>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7c:	d108      	bne.n	8002c90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e00b      	b.n	8002ca8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d107      	bne.n	8002ca8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f84f 	bl	8002d58 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d103      	bne.n	8002cd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e035      	b.n	8002d48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ce4:	d108      	bne.n	8002cf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	e01b      	b.n	8002d30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	11db      	asrs	r3, r3, #7
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0306 	and.w	r3, r3, #6
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f063 030f 	orn	r3, r3, #15
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <I2C_MasterRequestWrite+0xfc>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f875 	bl	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e010      	b.n	8002d48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4907      	ldr	r1, [pc, #28]	; (8002d54 <I2C_MasterRequestWrite+0x100>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f865 	bl	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	00010008 	.word	0x00010008
 8002d54:	00010002 	.word	0x00010002

08002d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	e025      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d021      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7ff fa41 	bl	80021f8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e023      	b.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	e00c      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d0b6      	beq.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e14:	e051      	b.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e24:	d123      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e046      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7ff f9bf 	bl	80021f8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e020      	b.n	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10c      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e00b      	b.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d18d      	bne.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f10:	e02d      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f878 	bl	8003008 <I2C_IsAcknowledgeFailed>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e02d      	b.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d021      	beq.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7ff f965 	bl	80021f8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d116      	bne.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e007      	b.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d1ca      	bne.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f92:	e02d      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f837 	bl	8003008 <I2C_IsAcknowledgeFailed>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e02d      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d021      	beq.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff f924 	bl	80021f8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d1ca      	bne.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301e:	d11b      	bne.n	8003058 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003028:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e264      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003086:	4ba3      	ldr	r3, [pc, #652]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4ba0      	ldr	r3, [pc, #640]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b99      	ldr	r3, [pc, #612]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e23f      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b91      	ldr	r3, [pc, #580]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a90      	ldr	r2, [pc, #576]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8a      	ldr	r2, [pc, #552]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a87      	ldr	r2, [pc, #540]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b84      	ldr	r3, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b81      	ldr	r3, [pc, #516]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a80      	ldr	r2, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7ff f86a 	bl	80021f8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7ff f866 	bl	80021f8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e204      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7ff f856 	bl	80021f8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7ff f852 	bl	80021f8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1f0      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b62      	ldr	r3, [pc, #392]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c4      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b56      	ldr	r3, [pc, #344]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4952      	ldr	r1, [pc, #328]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_OscConfig+0x2b0>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7ff f80b 	bl	80021f8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e6:	f7ff f807 	bl	80021f8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a5      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4940      	ldr	r1, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x2b0>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe ffea 	bl	80021f8 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe ffe6 	bl	80021f8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e184      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d030      	beq.n	80032b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x2b4>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe ffca 	bl	80021f8 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe ffc6 	bl	80021f8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e164      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e015      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x2b4>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe ffb3 	bl	80021f8 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe ffaf 	bl	80021f8 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e14d      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a0 	beq.w	8003402 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe ff75 	bl	80021f8 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e011      	b.n	8003336 <HAL_RCC_OscConfig+0x2ce>
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
 8003320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fe ff68 	bl	80021f8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e106      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <HAL_RCC_OscConfig+0x4e4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x2f0>
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a80      	ldr	r2, [pc, #512]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x32a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x312>
 8003360:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a77      	ldr	r2, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x32a>
 800337a:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a74      	ldr	r2, [pc, #464]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a71      	ldr	r2, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe ff2d 	bl	80021f8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe ff29 	bl	80021f8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0c5      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x33a>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7fe ff17 	bl	80021f8 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe ff13 	bl	80021f8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0af      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 809b 	beq.w	8003542 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d05c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d141      	bne.n	80034a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b4c      	ldr	r3, [pc, #304]	; (8003554 <HAL_RCC_OscConfig+0x4ec>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fee7 	bl	80021f8 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fee3 	bl	80021f8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e081      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	019b      	lsls	r3, r3, #6
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	3b01      	subs	r3, #1
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	061b      	lsls	r3, r3, #24
 8003470:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_RCC_OscConfig+0x4ec>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe febc 	bl	80021f8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe feb8 	bl	80021f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e056      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x41c>
 80034a2:	e04e      	b.n	8003542 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_OscConfig+0x4ec>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fea5 	bl	80021f8 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe fea1 	bl	80021f8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e03f      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x44a>
 80034d0:	e037      	b.n	8003542 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e032      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d028      	beq.n	800353e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d121      	bne.n	800353e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d11a      	bne.n	800353e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003514:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003516:	4293      	cmp	r3, r2
 8003518:	d111      	bne.n	800353e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d107      	bne.n	800353e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40007000 	.word	0x40007000
 8003550:	40023800 	.word	0x40023800
 8003554:	42470060 	.word	0x42470060

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90c      	bls.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b65      	ldr	r3, [pc, #404]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a58      	ldr	r2, [pc, #352]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e067      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4934      	ldr	r1, [pc, #208]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fe fdd6 	bl	80021f8 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fe fdd2 	bl	80021f8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20c      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fd36 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00
 8003714:	40023800 	.word	0x40023800
 8003718:	08004174 	.word	0x08004174
 800371c:	20000080 	.word	0x20000080
 8003720:	20000084 	.word	0x20000084

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80bd 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e0b7      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800375a:	60bb      	str	r3, [r7, #8]
       break;
 800375c:	e0b7      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003760:	60bb      	str	r3, [r7, #8]
      break;
 8003762:	e0b4      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04d      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b58      	ldr	r3, [pc, #352]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	461a      	mov	r2, r3
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	ea02 0800 	and.w	r8, r2, r0
 8003792:	ea03 0901 	and.w	r9, r3, r1
 8003796:	4640      	mov	r0, r8
 8003798:	4649      	mov	r1, r9
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	014b      	lsls	r3, r1, #5
 80037a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037a8:	0142      	lsls	r2, r0, #5
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	ebb0 0008 	subs.w	r0, r0, r8
 80037b2:	eb61 0109 	sbc.w	r1, r1, r9
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	018b      	lsls	r3, r1, #6
 80037c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037c4:	0182      	lsls	r2, r0, #6
 80037c6:	1a12      	subs	r2, r2, r0
 80037c8:	eb63 0301 	sbc.w	r3, r3, r1
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	00d9      	lsls	r1, r3, #3
 80037d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037da:	00d0      	lsls	r0, r2, #3
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	eb12 0208 	adds.w	r2, r2, r8
 80037e4:	eb43 0309 	adc.w	r3, r3, r9
 80037e8:	f04f 0000 	mov.w	r0, #0
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	0259      	lsls	r1, r3, #9
 80037f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037f6:	0250      	lsls	r0, r2, #9
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	461a      	mov	r2, r3
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f7fc fce6 	bl	80001d8 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e04a      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	461a      	mov	r2, r3
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	ea02 0400 	and.w	r4, r2, r0
 800382e:	ea03 0501 	and.w	r5, r3, r1
 8003832:	4620      	mov	r0, r4
 8003834:	4629      	mov	r1, r5
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	014b      	lsls	r3, r1, #5
 8003840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003844:	0142      	lsls	r2, r0, #5
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	1b00      	subs	r0, r0, r4
 800384c:	eb61 0105 	sbc.w	r1, r1, r5
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	018b      	lsls	r3, r1, #6
 800385a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800385e:	0182      	lsls	r2, r0, #6
 8003860:	1a12      	subs	r2, r2, r0
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	00d9      	lsls	r1, r3, #3
 8003870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003874:	00d0      	lsls	r0, r2, #3
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	1912      	adds	r2, r2, r4
 800387c:	eb45 0303 	adc.w	r3, r5, r3
 8003880:	f04f 0000 	mov.w	r0, #0
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	0299      	lsls	r1, r3, #10
 800388a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800388e:	0290      	lsls	r0, r2, #10
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	f7fc fc9a 	bl	80001d8 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	60bb      	str	r3, [r7, #8]
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ca:	60bb      	str	r3, [r7, #8]
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	68bb      	ldr	r3, [r7, #8]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000080 	.word	0x20000080

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08004184 	.word	0x08004184

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08004184 	.word	0x08004184

08003950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e03f      	b.n	80039e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe fb1c 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2224      	movs	r2, #36	; 0x24
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f939 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08a      	sub	sp, #40	; 0x28
 80039ee:	af02      	add	r7, sp, #8
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	f040 808c 	bne.w	8003b24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_UART_Receive+0x2e>
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e084      	b.n	8003b26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Receive+0x40>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e07d      	b.n	8003b26 <HAL_UART_Receive+0x13c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2222      	movs	r2, #34	; 0x22
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fe fbd7 	bl	80021f8 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d108      	bne.n	8003a74 <HAL_UART_Receive+0x8a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a84:	e043      	b.n	8003b0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2120      	movs	r1, #32
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f84c 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e042      	b.n	8003b26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	3302      	adds	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e01f      	b.n	8003b00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d007      	beq.n	8003ada <HAL_UART_Receive+0xf0>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_UART_Receive+0xfe>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e008      	b.n	8003afa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1b6      	bne.n	8003a86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b090      	sub	sp, #64	; 0x40
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	e050      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d04c      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	f7fe fb53 	bl	80021f8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d241      	bcs.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb2:	623a      	str	r2, [r7, #32]
 8003bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69f9      	ldr	r1, [r7, #28]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d09f      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3740      	adds	r7, #64	; 0x40
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	b09f      	sub	sp, #124	; 0x7c
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c22:	68d9      	ldr	r1, [r3, #12]
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	ea40 0301 	orr.w	r3, r0, r1
 8003c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c50:	f021 010c 	bic.w	r1, r1, #12
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	6999      	ldr	r1, [r3, #24]
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	ea40 0301 	orr.w	r3, r0, r1
 8003c74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4bc5      	ldr	r3, [pc, #788]	; (8003f90 <UART_SetConfig+0x384>)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d004      	beq.n	8003c8a <UART_SetConfig+0x7e>
 8003c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4bc3      	ldr	r3, [pc, #780]	; (8003f94 <UART_SetConfig+0x388>)
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d103      	bne.n	8003c92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c8a:	f7ff fe4d 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8003c8e:	6778      	str	r0, [r7, #116]	; 0x74
 8003c90:	e002      	b.n	8003c98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c92:	f7ff fe35 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8003c96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	f040 80b6 	bne.w	8003e10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca6:	461c      	mov	r4, r3
 8003ca8:	f04f 0500 	mov.w	r5, #0
 8003cac:	4622      	mov	r2, r4
 8003cae:	462b      	mov	r3, r5
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	6439      	str	r1, [r7, #64]	; 0x40
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cbc:	1912      	adds	r2, r2, r4
 8003cbe:	eb45 0303 	adc.w	r3, r5, r3
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	00d9      	lsls	r1, r3, #3
 8003ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cd0:	00d0      	lsls	r0, r2, #3
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	1911      	adds	r1, r2, r4
 8003cd8:	6639      	str	r1, [r7, #96]	; 0x60
 8003cda:	416b      	adcs	r3, r5
 8003cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cec:	415b      	adcs	r3, r3
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003cf8:	f7fc fa6e 	bl	80001d8 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4ba5      	ldr	r3, [pc, #660]	; (8003f98 <UART_SetConfig+0x38c>)
 8003d02:	fba3 2302 	umull	r2, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	011e      	lsls	r6, r3, #4
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0c:	461c      	mov	r4, r3
 8003d0e:	f04f 0500 	mov.w	r5, #0
 8003d12:	4622      	mov	r2, r4
 8003d14:	462b      	mov	r3, r5
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	6339      	str	r1, [r7, #48]	; 0x30
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d22:	1912      	adds	r2, r2, r4
 8003d24:	eb45 0303 	adc.w	r3, r5, r3
 8003d28:	f04f 0000 	mov.w	r0, #0
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	00d9      	lsls	r1, r3, #3
 8003d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d36:	00d0      	lsls	r0, r2, #3
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	1911      	adds	r1, r2, r4
 8003d3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d40:	416b      	adcs	r3, r5
 8003d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	1891      	adds	r1, r2, r2
 8003d50:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d52:	415b      	adcs	r3, r3
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d5e:	f7fc fa3b 	bl	80001d8 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4b8c      	ldr	r3, [pc, #560]	; (8003f98 <UART_SetConfig+0x38c>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	3332      	adds	r3, #50	; 0x32
 8003d7a:	4a87      	ldr	r2, [pc, #540]	; (8003f98 <UART_SetConfig+0x38c>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d88:	441e      	add	r6, r3
 8003d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	1894      	adds	r4, r2, r2
 8003d98:	623c      	str	r4, [r7, #32]
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da2:	1812      	adds	r2, r2, r0
 8003da4:	eb41 0303 	adc.w	r3, r1, r3
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	f04f 0500 	mov.w	r5, #0
 8003db0:	00dd      	lsls	r5, r3, #3
 8003db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003db6:	00d4      	lsls	r4, r2, #3
 8003db8:	4622      	mov	r2, r4
 8003dba:	462b      	mov	r3, r5
 8003dbc:	1814      	adds	r4, r2, r0
 8003dbe:	653c      	str	r4, [r7, #80]	; 0x50
 8003dc0:	414b      	adcs	r3, r1
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	61b9      	str	r1, [r7, #24]
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dde:	f7fc f9fb 	bl	80001d8 <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4b6c      	ldr	r3, [pc, #432]	; (8003f98 <UART_SetConfig+0x38c>)
 8003de8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	2164      	movs	r1, #100	; 0x64
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	3332      	adds	r3, #50	; 0x32
 8003dfa:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <UART_SetConfig+0x38c>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	f003 0207 	and.w	r2, r3, #7
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4432      	add	r2, r6
 8003e0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e0e:	e0b9      	b.n	8003f84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	461c      	mov	r4, r3
 8003e14:	f04f 0500 	mov.w	r5, #0
 8003e18:	4622      	mov	r2, r4
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	6139      	str	r1, [r7, #16]
 8003e20:	415b      	adcs	r3, r3
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e28:	1912      	adds	r2, r2, r4
 8003e2a:	eb45 0303 	adc.w	r3, r5, r3
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	00d9      	lsls	r1, r3, #3
 8003e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3c:	00d0      	lsls	r0, r2, #3
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	eb12 0804 	adds.w	r8, r2, r4
 8003e46:	eb43 0905 	adc.w	r9, r3, r5
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	008b      	lsls	r3, r1, #2
 8003e5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e62:	0082      	lsls	r2, r0, #2
 8003e64:	4640      	mov	r0, r8
 8003e66:	4649      	mov	r1, r9
 8003e68:	f7fc f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <UART_SetConfig+0x38c>)
 8003e72:	fba3 2302 	umull	r2, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	011e      	lsls	r6, r3, #4
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	1894      	adds	r4, r2, r2
 8003e88:	60bc      	str	r4, [r7, #8]
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e92:	1812      	adds	r2, r2, r0
 8003e94:	eb41 0303 	adc.w	r3, r1, r3
 8003e98:	f04f 0400 	mov.w	r4, #0
 8003e9c:	f04f 0500 	mov.w	r5, #0
 8003ea0:	00dd      	lsls	r5, r3, #3
 8003ea2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ea6:	00d4      	lsls	r4, r2, #3
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	462b      	mov	r3, r5
 8003eac:	1814      	adds	r4, r2, r0
 8003eae:	64bc      	str	r4, [r7, #72]	; 0x48
 8003eb0:	414b      	adcs	r3, r1
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	008b      	lsls	r3, r1, #2
 8003ec8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ecc:	0082      	lsls	r2, r0, #2
 8003ece:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ed2:	f7fc f981 	bl	80001d8 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <UART_SetConfig+0x38c>)
 8003edc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	2164      	movs	r1, #100	; 0x64
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	3332      	adds	r3, #50	; 0x32
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <UART_SetConfig+0x38c>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	441e      	add	r6, r3
 8003efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efe:	4618      	mov	r0, r3
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	1894      	adds	r4, r2, r2
 8003f0a:	603c      	str	r4, [r7, #0]
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f14:	1812      	adds	r2, r2, r0
 8003f16:	eb41 0303 	adc.w	r3, r1, r3
 8003f1a:	f04f 0400 	mov.w	r4, #0
 8003f1e:	f04f 0500 	mov.w	r5, #0
 8003f22:	00dd      	lsls	r5, r3, #3
 8003f24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f28:	00d4      	lsls	r4, r2, #3
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f32:	eb43 0b01 	adc.w	fp, r3, r1
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f4e:	0082      	lsls	r2, r0, #2
 8003f50:	4650      	mov	r0, sl
 8003f52:	4659      	mov	r1, fp
 8003f54:	f7fc f940 	bl	80001d8 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <UART_SetConfig+0x38c>)
 8003f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2164      	movs	r1, #100	; 0x64
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <UART_SetConfig+0x38c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4432      	add	r2, r6
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	377c      	adds	r7, #124	; 0x7c
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	bf00      	nop
 8003f90:	40011000 	.word	0x40011000
 8003f94:	40011400 	.word	0x40011400
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4d0d      	ldr	r5, [pc, #52]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4d0b      	ldr	r5, [pc, #44]	; (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f000 f820 	bl	8003ff4 <_init>
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2600      	movs	r6, #0
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004194 	.word	0x08004194
 8003fd8:	08004194 	.word	0x08004194
 8003fdc:	08004194 	.word	0x08004194
 8003fe0:	08004198 	.word	0x08004198

08003fe4 <memset>:
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
