
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          0000025c  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012aa2  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002011  00000000  00000000  00032b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00034bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022694  00000000  00000000  00036d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013209  00000000  00000000  000593bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9889  00000000  00000000  0006c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145e4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cf0  00000000  00000000  00145ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cf0 	.word	0x08005cf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08005cf0 	.word	0x08005cf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <setLuces>:
ADC_HandleTypeDef hadc1;
int estado_luces=0;//0 off 1 on 2 auto
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;

void setLuces(int n){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(n==0){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d110      	bne.n	80005a8 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058c:	481c      	ldr	r0, [pc, #112]	; (8000600 <setLuces+0x88>)
 800058e:	f002 ff6f 	bl	8003470 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	481b      	ldr	r0, [pc, #108]	; (8000604 <setLuces+0x8c>)
 8000598:	f002 ff6a 	bl	8003470 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4818      	ldr	r0, [pc, #96]	; (8000604 <setLuces+0x8c>)
 80005a2:	f002 ff65 	bl	8003470 <HAL_GPIO_WritePin>
 80005a6:	e023      	b.n	80005f0 <setLuces+0x78>
	}else if(n==1){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d110      	bne.n	80005d0 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <setLuces+0x88>)
 80005b6:	f002 ff5b 	bl	8003470 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <setLuces+0x8c>)
 80005c0:	f002 ff56 	bl	8003470 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2120      	movs	r1, #32
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <setLuces+0x8c>)
 80005ca:	f002 ff51 	bl	8003470 <HAL_GPIO_WritePin>
 80005ce:	e00f      	b.n	80005f0 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <setLuces+0x88>)
 80005d8:	f002 ff4a 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <setLuces+0x8c>)
 80005e2:	f002 ff45 	bl	8003470 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <setLuces+0x8c>)
 80005ec:	f002 ff40 	bl	8003470 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <setLuces+0x90>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020c00 	.word	0x40020c00
 8000604:	40020000 	.word	0x40020000
 8000608:	200000e4 	.word	0x200000e4

0800060c <cambiarEstadoLuces>:

int getEstadoLuces(){
	return estado_luces;
}

void cambiarEstadoLuces(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <cambiarEstadoLuces+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffad 	bl	8000578 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 800061e:	e00e      	b.n	800063e <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <cambiarEstadoLuces+0x38>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d103      	bne.n	8000630 <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ffa5 	bl	8000578 <setLuces>
}
 800062e:	e006      	b.n	800063e <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <cambiarEstadoLuces+0x38>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d102      	bne.n	800063e <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ff9d 	bl	8000578 <setLuces>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000e4 	.word	0x200000e4

08000648 <medirLDR>:

void medirLDR(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>300){
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <medirLDR+0xc8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d14f      	bne.n	80006f6 <medirLDR+0xae>
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <medirLDR+0xcc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800065e:	d94a      	bls.n	80006f6 <medirLDR+0xae>
		counter_luces=0;
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <medirLDR+0xcc>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
		int media=0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
		tickstart_luces=HAL_GetTick();
 800066a:	f002 f82f 	bl	80026cc <HAL_GetTick>
 800066e:	4603      	mov	r3, r0
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <medirLDR+0xd0>)
 8000672:	6013      	str	r3, [r2, #0]
		int i=0;
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
		for(i=0;i<10;i++){
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	e01f      	b.n	80006be <medirLDR+0x76>
			HAL_ADC_Start(&hadc1);
 800067e:	4827      	ldr	r0, [pc, #156]	; (800071c <medirLDR+0xd4>)
 8000680:	f002 f874 	bl	800276c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000684:	2164      	movs	r1, #100	; 0x64
 8000686:	4825      	ldr	r0, [pc, #148]	; (800071c <medirLDR+0xd4>)
 8000688:	f002 f975 	bl	8002976 <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 800068c:	4823      	ldr	r0, [pc, #140]	; (800071c <medirLDR+0xd4>)
 800068e:	f002 f9fd 	bl	8002a8c <HAL_ADC_GetValue>
 8000692:	4603      	mov	r3, r0
 8000694:	b259      	sxtb	r1, r3
 8000696:	4a22      	ldr	r2, [pc, #136]	; (8000720 <medirLDR+0xd8>)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80006a0:	481e      	ldr	r0, [pc, #120]	; (800071c <medirLDR+0xd4>)
 80006a2:	f002 f935 	bl	8002910 <HAL_ADC_Stop>
			media+=adcval[i];
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <medirLDR+0xd8>)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	f993 3000 	ldrsb.w	r3, [r3]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
		for(i=0;i<10;i++){
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b09      	cmp	r3, #9
 80006c2:	dddc      	ble.n	800067e <medirLDR+0x36>
		}
		media=media/10;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <medirLDR+0xdc>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	607b      	str	r3, [r7, #4]
			if(media>80){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b50      	cmp	r3, #80	; 0x50
 80006d8:	dd06      	ble.n	80006e8 <medirLDR+0xa0>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <medirLDR+0xe0>)
 80006e2:	f002 fec5 	bl	8003470 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 80006e6:	e00f      	b.n	8000708 <medirLDR+0xc0>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <medirLDR+0xe0>)
 80006f0:	f002 febe 	bl	8003470 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 80006f4:	e008      	b.n	8000708 <medirLDR+0xc0>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 80006f6:	f001 ffe9 	bl	80026cc <HAL_GetTick>
 80006fa:	4602      	mov	r2, r0
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <medirLDR+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <medirLDR+0xcc>)
 8000704:	6013      	str	r3, [r2, #0]
	}
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000e4 	.word	0x200000e4
 8000714:	200000e8 	.word	0x200000e8
 8000718:	200000ec 	.word	0x200000ec
 800071c:	200001d4 	.word	0x200001d4
 8000720:	20000304 	.word	0x20000304
 8000724:	66666667 	.word	0x66666667
 8000728:	40020c00 	.word	0x40020c00

0800072c <luces>:

void luces(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	medirLDR();
 8000730:	f7ff ff8a 	bl	8000648 <medirLDR>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <clrScr>:
#include "control_luces.h"

I2C_HandleTypeDef hi2c1;

//Limpiar pantalla LCD
void clrScr() {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2110      	movs	r1, #16
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <clrScr+0x24>)
 8000750:	f003 f804 	bl	800375c <HAL_I2C_Master_Transmit>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000144 	.word	0x20000144

08000760 <setColor>:

//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af02      	add	r7, sp, #8
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 800076c:	2302      	movs	r3, #2
 800076e:	753b      	strb	r3, [r7, #20]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	757b      	strb	r3, [r7, #21]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	75bb      	strb	r3, [r7, #22]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 8000782:	f107 0214 	add.w	r2, r7, #20
 8000786:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2304      	movs	r3, #4
 800078e:	2110      	movs	r1, #16
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <setColor+0x40>)
 8000792:	f002 ffe3 	bl	800375c <HAL_I2C_Master_Transmit>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000144 	.word	0x20000144

080007a4 <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 80007b0:	2303      	movs	r3, #3
 80007b2:	753b      	strb	r3, [r7, #20]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	757b      	strb	r3, [r7, #21]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	75bb      	strb	r3, [r7, #22]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 80007c6:	f107 0214 	add.w	r2, r7, #20
 80007ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2304      	movs	r3, #4
 80007d2:	2110      	movs	r1, #16
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <setBackColor+0x40>)
 80007d6:	f002 ffc1 	bl	800375c <HAL_I2C_Master_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000144 	.word	0x20000144

080007e8 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2bff      	cmp	r3, #255	; 0xff
 8000808:	dd01      	ble.n	800080e <drawRect+0x26>
		desb[0] = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	2bff      	cmp	r3, #255	; 0xff
 8000812:	dd01      	ble.n	8000818 <drawRect+0x30>
		desb[1] = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2bff      	cmp	r3, #255	; 0xff
 800081c:	dd01      	ble.n	8000822 <drawRect+0x3a>
		desb[2] = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	dd01      	ble.n	800082c <drawRect+0x44>
		desb[3] = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 800082c:	2304      	movs	r3, #4
 800082e:	753b      	strb	r3, [r7, #20]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	757b      	strb	r3, [r7, #21]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	75bb      	strb	r3, [r7, #22]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	75fb      	strb	r3, [r7, #23]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	763b      	strb	r3, [r7, #24]
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	767b      	strb	r3, [r7, #25]
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	b2db      	uxtb	r3, r3
 8000852:	76bb      	strb	r3, [r7, #26]
 8000854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000856:	b2db      	uxtb	r3, r3
 8000858:	76fb      	strb	r3, [r7, #27]
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	b2db      	uxtb	r3, r3
 800085e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 8000860:	f107 0214 	add.w	r2, r7, #20
 8000864:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2309      	movs	r3, #9
 800086c:	2110      	movs	r1, #16
 800086e:	4803      	ldr	r0, [pc, #12]	; (800087c <drawRect+0x94>)
 8000870:	f002 ff74 	bl	800375c <HAL_I2C_Master_Transmit>
}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000144 	.word	0x20000144

08000880 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af02      	add	r7, sp, #8
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	dd01      	ble.n	80008a6 <fillRect+0x26>
		desb[0] = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	dd01      	ble.n	80008b0 <fillRect+0x30>
		desb[1] = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	dd01      	ble.n	80008ba <fillRect+0x3a>
		desb[2] = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2bff      	cmp	r3, #255	; 0xff
 80008be:	dd01      	ble.n	80008c4 <fillRect+0x44>
		desb[3] = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80008c4:	2305      	movs	r3, #5
 80008c6:	753b      	strb	r3, [r7, #20]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	757b      	strb	r3, [r7, #21]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	75bb      	strb	r3, [r7, #22]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	75fb      	strb	r3, [r7, #23]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	763b      	strb	r3, [r7, #24]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	767b      	strb	r3, [r7, #25]
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	76bb      	strb	r3, [r7, #26]
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	76fb      	strb	r3, [r7, #27]
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 80008f8:	f107 0214 	add.w	r2, r7, #20
 80008fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2309      	movs	r3, #9
 8000904:	2110      	movs	r1, #16
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <fillRect+0x94>)
 8000908:	f002 ff28 	bl	800375c <HAL_I2C_Master_Transmit>
}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000144 	.word	0x20000144

08000918 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b098      	sub	sp, #96	; 0x60
 800091c:	af02      	add	r7, sp, #8
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
 8000928:	2300      	movs	r3, #0
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	dd01      	ble.n	8000936 <print+0x1e>
		desb[0] = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2bff      	cmp	r3, #255	; 0xff
 800093a:	dd01      	ble.n	8000940 <print+0x28>
		desb[1] = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 8000940:	2306      	movs	r3, #6
 8000942:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff fc43 	bl	80001d0 <strlen>
 800094a:	4603      	mov	r3, r0
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 800094e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000950:	b2db      	uxtb	r3, r3
 8000952:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 8000954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000956:	b2db      	uxtb	r3, r3
 8000958:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 800095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800095c:	b2db      	uxtb	r3, r3
 800095e:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 8000960:	2304      	movs	r3, #4
 8000962:	657b      	str	r3, [r7, #84]	; 0x54
 8000964:	e00d      	b.n	8000982 <print+0x6a>
		cadena[i] = t[i - 4];
 8000966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000968:	3b04      	subs	r3, #4
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4413      	add	r3, r2
 800096e:	7819      	ldrb	r1, [r3, #0]
 8000970:	f107 0214 	add.w	r2, r7, #20
 8000974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 800097c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800097e:	3301      	adds	r3, #1
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
 8000982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000984:	3303      	adds	r3, #3
 8000986:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000988:	429a      	cmp	r2, r3
 800098a:	ddec      	ble.n	8000966 <print+0x4e>
	}
	cadena[longitud + 4] = x;
 800098c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800098e:	3304      	adds	r3, #4
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000998:	440b      	add	r3, r1
 800099a:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 800099e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a0:	3305      	adds	r3, #5
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80009aa:	440b      	add	r3, r1
 80009ac:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 80009b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3306      	adds	r3, #6
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	f107 0214 	add.w	r2, r7, #20
 80009bc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80009c0:	9100      	str	r1, [sp, #0]
 80009c2:	2110      	movs	r1, #16
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <print+0xbc>)
 80009c6:	f002 fec9 	bl	800375c <HAL_I2C_Master_Transmit>
}
 80009ca:	bf00      	nop
 80009cc:	3758      	adds	r7, #88	; 0x58
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000144 	.word	0x20000144

080009d8 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	e01b      	b.n	8000a28 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4413      	add	r3, r2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4619      	mov	r1, r3
 8000a04:	f7ff ff88 	bl	8000918 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fbdc 	bl	80001d0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	00da      	lsls	r2, r3, #3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	4413      	add	r3, r2
 8000a20:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	3301      	adds	r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbdf      	blt.n	80009f0 <printfrase+0x18>
	}
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 8000a44:	2307      	movs	r3, #7
 8000a46:	733b      	strb	r3, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 8000a4e:	f107 020c 	add.w	r2, r7, #12
 8000a52:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <setFont+0x30>)
 8000a5e:	f002 fe7d 	bl	800375c <HAL_I2C_Master_Transmit>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000144 	.word	0x20000144

08000a70 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 8000a70:	b490      	push	{r4, r7}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 8000a7e:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <botones+0x130>)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 8000a84:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <botones+0x134>)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 8000a8a:	4a47      	ldr	r2, [pc, #284]	; (8000ba8 <botones+0x138>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000a90:	4a46      	ldr	r2, [pc, #280]	; (8000bac <botones+0x13c>)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 8000a96:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <botones+0x140>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 8000a9c:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <botones+0x144>)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 8000aa2:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <botones+0x148>)
 8000aa4:	461c      	mov	r4, r3
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <botones+0x14c>)
 8000ab4:	461c      	mov	r4, r3
 8000ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <botones+0x150>)
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <botones+0x154>)
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 8000ae2:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <botones+0x158>)
 8000ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ae6:	6013      	str	r3, [r2, #0]
	columnas = c;
 8000ae8:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <botones+0x15c>)
 8000aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aec:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <botones+0x15c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d013      	beq.n	8000b1e <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <botones+0x138>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <botones+0x15c>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <botones+0x130>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <botones+0x15c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000b18:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <botones+0x160>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e011      	b.n	8000b42 <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <botones+0x138>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <botones+0x15c>)
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <botones+0x130>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <botones+0x15c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000b3e:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <botones+0x160>)
 8000b40:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <botones+0x158>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d013      	beq.n	8000b72 <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <botones+0x13c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <botones+0x158>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	fb02 f303 	mul.w	r3, r2, r3
 8000b56:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <botones+0x134>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <botones+0x158>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <botones+0x164>)
 8000b6e:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 8000b70:	e011      	b.n	8000b96 <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <botones+0x13c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <botones+0x158>)
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <botones+0x134>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	1ad2      	subs	r2, r2, r3
				/ filas;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <botones+0x158>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <botones+0x164>)
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc90      	pop	{r4, r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000014 	.word	0x20000014
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	20000024 	.word	0x20000024
 8000bc0:	20000030 	.word	0x20000030
 8000bc4:	2000003c 	.word	0x2000003c
 8000bc8:	20000048 	.word	0x20000048
 8000bcc:	2000004c 	.word	0x2000004c
 8000bd0:	2000021c 	.word	0x2000021c
 8000bd4:	200002fc 	.word	0x200002fc

08000bd8 <crear_botonera>:

void crear_botonera() {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e05d      	b.n	8000ca0 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	e052      	b.n	8000c90 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <crear_botonera+0xdc>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <crear_botonera+0xe0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	fb02 f203 	mul.w	r2, r2, r3
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <crear_botonera+0xe4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000bfe:	4413      	add	r3, r2
 8000c00:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <crear_botonera+0xe8>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <crear_botonera+0xec>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	fb02 f203 	mul.w	r2, r2, r3
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <crear_botonera+0xf0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <crear_botonera+0xf4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <crear_botonera+0xf4>)
 8000c20:	6851      	ldr	r1, [r2, #4]
 8000c22:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <crear_botonera+0xf4>)
 8000c24:	6892      	ldr	r2, [r2, #8]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd9a 	bl	8000760 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <crear_botonera+0xf8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	1ad0      	subs	r0, r2, r3
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <crear_botonera+0xf8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <crear_botonera+0xe0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <crear_botonera+0xf8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <crear_botonera+0xec>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <crear_botonera+0xf8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4622      	mov	r2, r4
 8000c5a:	f7ff fe11 	bl	8000880 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <crear_botonera+0xfc>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <crear_botonera+0xfc>)
 8000c64:	6851      	ldr	r1, [r2, #4]
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <crear_botonera+0xfc>)
 8000c68:	6892      	ldr	r2, [r2, #8]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd78 	bl	8000760 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <crear_botonera+0xe0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	18d1      	adds	r1, r2, r3
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <crear_botonera+0xec>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	460a      	mov	r2, r1
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fdfb 	bl	8000880 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <crear_botonera+0x100>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dba7      	blt.n	8000bea <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <crear_botonera+0x104>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	db9c      	blt.n	8000be4 <crear_botonera+0xc>
		}
	}
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	2000021c 	.word	0x2000021c
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200002fc 	.word	0x200002fc
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000024 	.word	0x20000024
 8000cd0:	20000010 	.word	0x20000010
 8000cd4:	20000018 	.word	0x20000018
 8000cd8:	2000004c 	.word	0x2000004c
 8000cdc:	20000048 	.word	0x20000048

08000ce0 <rellenar_botones>:
			k++;
		}
	}
}

void rellenar_botones(const char *t[]) {
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b096      	sub	sp, #88	; 0x58
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000cf4:	4b99      	ldr	r3, [pc, #612]	; (8000f5c <rellenar_botones+0x27c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <rellenar_botones+0x27c>)
 8000cfa:	6851      	ldr	r1, [r2, #4]
 8000cfc:	4a97      	ldr	r2, [pc, #604]	; (8000f5c <rellenar_botones+0x27c>)
 8000cfe:	6892      	ldr	r2, [r2, #8]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd2d 	bl	8000760 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000d06:	4b96      	ldr	r3, [pc, #600]	; (8000f60 <rellenar_botones+0x280>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a95      	ldr	r2, [pc, #596]	; (8000f60 <rellenar_botones+0x280>)
 8000d0c:	6851      	ldr	r1, [r2, #4]
 8000d0e:	4a94      	ldr	r2, [pc, #592]	; (8000f60 <rellenar_botones+0x280>)
 8000d10:	6892      	ldr	r2, [r2, #8]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd46 	bl	80007a4 <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8000d1c:	e112      	b.n	8000f44 <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d22:	e106      	b.n	8000f32 <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000d24:	4b8f      	ldr	r3, [pc, #572]	; (8000f64 <rellenar_botones+0x284>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <rellenar_botones+0x288>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d30:	fb02 f203 	mul.w	r2, r2, r3
 8000d34:	4b8d      	ldr	r3, [pc, #564]	; (8000f6c <rellenar_botones+0x28c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000d38:	4413      	add	r3, r2
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000d3c:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <rellenar_botones+0x290>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <rellenar_botones+0x294>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d48:	fb02 f203 	mul.w	r2, r2, r3
 8000d4c:	4b8a      	ldr	r3, [pc, #552]	; (8000f78 <rellenar_botones+0x298>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fa33 	bl	80001d0 <strlen>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d6e:	fb03 f302 	mul.w	r3, r3, r2
 8000d72:	4a7d      	ldr	r2, [pc, #500]	; (8000f68 <rellenar_botones+0x288>)
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d82d      	bhi.n	8000dd6 <rellenar_botones+0xf6>
				print(t[k - 1],
 8000d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d80:	3b01      	subs	r3, #1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000d8a:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <rellenar_botones+0x288>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	461d      	mov	r5, r3
 8000d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d96:	3b01      	subs	r3, #1
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa15 	bl	80001d0 <strlen>
 8000da6:	4602      	mov	r2, r0
 8000da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000daa:	fb03 f302 	mul.w	r3, r3, r2
 8000dae:	1aeb      	subs	r3, r5, r3
 8000db0:	085a      	lsrs	r2, r3, #1
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	4413      	add	r3, r2
				print(t[k - 1],
 8000db6:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000db8:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <rellenar_botones+0x294>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	0fda      	lsrs	r2, r3, #31
 8000dc2:	4413      	add	r3, r2
 8000dc4:	105b      	asrs	r3, r3, #1
 8000dc6:	461a      	mov	r2, r3
				print(t[k - 1],
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	4413      	add	r3, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f7ff fda2 	bl	8000918 <print>
 8000dd4:	e0a7      	b.n	8000f26 <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dda:	e00e      	b.n	8000dfa <rellenar_botones+0x11a>
					t1[i] = 0;
 8000ddc:	f107 021c 	add.w	r2, r7, #28
 8000de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de2:	4413      	add	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dee:	4413      	add	r3, r2
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000df6:	3301      	adds	r3, #1
 8000df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dfc:	2b13      	cmp	r3, #19
 8000dfe:	dded      	ble.n	8000ddc <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
 8000e04:	e013      	b.n	8000e2e <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e18:	4413      	add	r3, r2
 8000e1a:	7819      	ldrb	r1, [r3, #0]
 8000e1c:	f107 021c 	add.w	r2, r7, #28
 8000e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e22:	4413      	add	r3, r2
 8000e24:	460a      	mov	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <rellenar_botones+0x288>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbe3      	blt.n	8000e06 <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <rellenar_botones+0x288>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e48:	643b      	str	r3, [r7, #64]	; 0x40
 8000e4a:	e019      	b.n	8000e80 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8000e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e52:	3b01      	subs	r3, #1
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e5e:	441a      	add	r2, r3
 8000e60:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <rellenar_botones+0x288>)
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e66:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e74:	440b      	add	r3, r1
 8000e76:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8000e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8000e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e86:	3b01      	subs	r3, #1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff f99d 	bl	80001d0 <strlen>
 8000e96:	4602      	mov	r2, r0
 8000e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d2d6      	bcs.n	8000e4c <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <rellenar_botones+0x288>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461c      	mov	r4, r3
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff f991 	bl	80001d0 <strlen>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb2:	fb03 f302 	mul.w	r3, r3, r2
 8000eb6:	1ae3      	subs	r3, r4, r3
 8000eb8:	085a      	lsrs	r2, r3, #1
 8000eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <rellenar_botones+0x294>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	0fda      	lsrs	r2, r3, #31
 8000ecc:	4413      	add	r3, r2
 8000ece:	105b      	asrs	r3, r3, #1
 8000ed0:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	441a      	add	r2, r3
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd1c 	bl	8000918 <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <rellenar_botones+0x288>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461c      	mov	r4, r3
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f970 	bl	80001d0 <strlen>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	fb03 f302 	mul.w	r3, r3, r2
 8000ef8:	1ae3      	subs	r3, r4, r3
 8000efa:	085a      	lsrs	r2, r3, #1
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	4413      	add	r3, r2
 8000f00:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <rellenar_botones+0x294>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	0fda      	lsrs	r2, r3, #31
 8000f0e:	4413      	add	r3, r2
 8000f10:	105b      	asrs	r3, r3, #1
 8000f12:	461a      	mov	r2, r3
 8000f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f16:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 8000f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1a:	441a      	add	r2, r3
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fcf9 	bl	8000918 <print>
			}

			k++;
 8000f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f28:	3301      	adds	r3, #1
 8000f2a:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 8000f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f2e:	3301      	adds	r3, #1
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <rellenar_botones+0x29c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f6ff aef3 	blt.w	8000d24 <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8000f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f40:	3301      	adds	r3, #1
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <rellenar_botones+0x2a0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	f6ff aee7 	blt.w	8000d1e <rellenar_botones+0x3e>
		}
	}
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3758      	adds	r7, #88	; 0x58
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000003c 	.word	0x2000003c
 8000f60:	20000018 	.word	0x20000018
 8000f64:	2000021c 	.word	0x2000021c
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	200002fc 	.word	0x200002fc
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	2000004c 	.word	0x2000004c
 8000f80:	20000048 	.word	0x20000048

08000f84 <pantalla_principal>:

//-------------------------------------------------------------------------------//

void pantalla_principal() {
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b0a8      	sub	sp, #160	; 0xa0
 8000f88:	af10      	add	r7, sp, #64	; 0x40
	const char *t_menu[6] = { "LUCES", "PERSIANAS", "RIEGO", "CLIMA", "AUDIO",
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <pantalla_principal+0x180>)
 8000f8c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000f90:	461d      	mov	r5, r3
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f9a:	e884 0003 	stmia.w	r4, {r0, r1}
			"SEGURIDAD" };
	rgb boton = { 0, 0, 255 };
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
	rgb marco = { 255, 255, 255 };
 8000faa:	4a57      	ldr	r2, [pc, #348]	; (8001108 <pantalla_principal+0x184>)
 8000fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 8000fb6:	23ff      	movs	r3, #255	; 0xff
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	rgb texto = { 255, 255, 255 };
 8000fc2:	4a51      	ldr	r2, [pc, #324]	; (8001108 <pantalla_principal+0x184>)
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 8000fce:	f7ff fbb3 	bl	8000738 <clrScr>
	setColor(255, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	20ff      	movs	r0, #255	; 0xff
 8000fd8:	f7ff fbc2 	bl	8000760 <setColor>
	fillRect(1, 1, 478, 40);
 8000fdc:	2328      	movs	r3, #40	; 0x28
 8000fde:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fc4b 	bl	8000880 <fillRect>
	setColor(64, 64, 64);
 8000fea:	2240      	movs	r2, #64	; 0x40
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	2040      	movs	r0, #64	; 0x40
 8000ff0:	f7ff fbb6 	bl	8000760 <setColor>
	fillRect(1, 318, 478, 280);
 8000ff4:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000ff8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000ffc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fc3d 	bl	8000880 <fillRect>
	setColor(255, 255, 255);
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	21ff      	movs	r1, #255	; 0xff
 800100a:	20ff      	movs	r0, #255	; 0xff
 800100c:	f7ff fba8 	bl	8000760 <setColor>
	setBackColor(255, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	20ff      	movs	r0, #255	; 0xff
 8001016:	f7ff fbc5 	bl	80007a4 <setBackColor>
	setFont(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fd0e 	bl	8000a3c <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 8001020:	220c      	movs	r2, #12
 8001022:	2132      	movs	r1, #50	; 0x32
 8001024:	4839      	ldr	r0, [pc, #228]	; (800110c <pantalla_principal+0x188>)
 8001026:	f7ff fc77 	bl	8000918 <print>
	setBackColor(64, 64, 64);
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	2040      	movs	r0, #64	; 0x40
 8001030:	f7ff fbb8 	bl	80007a4 <setBackColor>
	setColor(255, 255, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	21ff      	movs	r1, #255	; 0xff
 8001038:	20ff      	movs	r0, #255	; 0xff
 800103a:	f7ff fb91 	bl	8000760 <setColor>
	setFont(0);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fcfc 	bl	8000a3c <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <pantalla_principal+0x18c>)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	ca07      	ldmia	r2, {r0, r1, r2}
 800104c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001050:	f107 000c 	add.w	r0, r7, #12
 8001054:	2303      	movs	r3, #3
 8001056:	f240 1219 	movw	r2, #281	; 0x119
 800105a:	2114      	movs	r1, #20
 800105c:	f7ff fcbc 	bl	80009d8 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001060:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <pantalla_principal+0x190>)
 8001062:	463b      	mov	r3, r7
 8001064:	ca07      	ldmia	r2, {r0, r1, r2}
 8001066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 800106a:	4638      	mov	r0, r7
 800106c:	2303      	movs	r3, #3
 800106e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001072:	2114      	movs	r1, #20
 8001074:	f7ff fcb0 	bl	80009d8 <printfrase>
	setColor(0, 0, 255);
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fb6f 	bl	8000760 <setColor>
	drawRect(0, 0, 479, 319);
 8001082:	f240 133f 	movw	r3, #319	; 0x13f
 8001086:	f240 12df 	movw	r2, #479	; 0x1df
 800108a:	2100      	movs	r1, #0
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fbab 	bl	80007e8 <drawRect>
	botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 8001092:	2303      	movs	r3, #3
 8001094:	930f      	str	r3, [sp, #60]	; 0x3c
 8001096:	2302      	movs	r3, #2
 8001098:	930e      	str	r3, [sp, #56]	; 0x38
 800109a:	ac0b      	add	r4, sp, #44	; 0x2c
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010a8:	ac08      	add	r4, sp, #32
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010b6:	ac05      	add	r4, sp, #20
 80010b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010c4:	ac02      	add	r4, sp, #8
 80010c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d2:	2305      	movs	r3, #5
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	2302      	movs	r3, #2
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2346      	movs	r3, #70	; 0x46
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	2146      	movs	r1, #70	; 0x46
 80010e0:	201e      	movs	r0, #30
 80010e2:	f7ff fcc5 	bl	8000a70 <botones>
	crear_botonera();
 80010e6:	f7ff fd77 	bl	8000bd8 <crear_botonera>
	setFont(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fca6 	bl	8000a3c <setFont>
	rellenar_botones(t_menu);
 80010f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fdf3 	bl	8000ce0 <rellenar_botones>
}
 80010fa:	bf00      	nop
 80010fc:	3760      	adds	r7, #96	; 0x60
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	08005de0 	.word	0x08005de0
 8001108:	08005df8 	.word	0x08005df8
 800110c:	08005dcc 	.word	0x08005dcc
 8001110:	08005e04 	.word	0x08005e04
 8001114:	08005e10 	.word	0x08005e10

08001118 <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <setEstadoPersianas+0x84>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <setEstadoPersianas+0x88>)
 8001126:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <setEstadoPersianas+0x84>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <setEstadoPersianas+0x84>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <setEstadoPersianas+0x8c>)
 800113e:	f002 f997 	bl	8003470 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <setEstadoPersianas+0x8c>)
 800114a:	f002 f991 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}else if(estado_persianas==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 800114e:	e020      	b.n	8001192 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <setEstadoPersianas+0x84>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10c      	bne.n	8001172 <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <setEstadoPersianas+0x8c>)
 8001160:	f002 f986 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <setEstadoPersianas+0x8c>)
 800116c:	f002 f980 	bl	8003470 <HAL_GPIO_WritePin>
}
 8001170:	e00f      	b.n	8001192 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <setEstadoPersianas+0x84>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d10b      	bne.n	8001192 <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <setEstadoPersianas+0x8c>)
 8001182:	f002 f975 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <setEstadoPersianas+0x8c>)
 800118e:	f002 f96f 	bl	8003470 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000f0 	.word	0x200000f0
 80011a0:	200000f4 	.word	0x200000f4
 80011a4:	40020c00 	.word	0x40020c00

080011a8 <getEstadoPersianas>:

int getEstadoPersianas(){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	return estado_persianas;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <getEstadoPersianas+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000f0 	.word	0x200000f0

080011c0 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <getEstadoAnteriorPersianas+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200000f4 	.word	0x200000f4

080011d8 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 80011dc:	f7ff ffe4 	bl	80011a8 <getEstadoPersianas>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d108      	bne.n	80011f8 <cambiarEstadoPersianas+0x20>
 80011e6:	f7ff ffeb 	bl	80011c0 <getEstadoAnteriorPersianas>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d103      	bne.n	80011f8 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ff91 	bl	8001118 <setEstadoPersianas>
 80011f6:	e02d      	b.n	8001254 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 80011f8:	f7ff ffd6 	bl	80011a8 <getEstadoPersianas>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d108      	bne.n	8001214 <cambiarEstadoPersianas+0x3c>
 8001202:	f7ff ffdd 	bl	80011c0 <getEstadoAnteriorPersianas>
 8001206:	4603      	mov	r3, r0
 8001208:	2b01      	cmp	r3, #1
 800120a:	d103      	bne.n	8001214 <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 800120c:	2002      	movs	r0, #2
 800120e:	f7ff ff83 	bl	8001118 <setEstadoPersianas>
 8001212:	e01f      	b.n	8001254 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 8001214:	f7ff ffc8 	bl	80011a8 <getEstadoPersianas>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <cambiarEstadoPersianas+0x58>
 800121e:	f7ff ffcf 	bl	80011c0 <getEstadoAnteriorPersianas>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff ff75 	bl	8001118 <setEstadoPersianas>
 800122e:	e011      	b.n	8001254 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 8001230:	f7ff ffba 	bl	80011a8 <getEstadoPersianas>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff6c 	bl	8001118 <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 8001240:	e008      	b.n	8001254 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 8001242:	f7ff ffb1 	bl	80011a8 <getEstadoPersianas>
 8001246:	4603      	mov	r3, r0
 8001248:	2b02      	cmp	r3, #2
 800124a:	d103      	bne.n	8001254 <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff ff63 	bl	8001118 <setEstadoPersianas>
}
 8001252:	e7ff      	b.n	8001254 <cambiarEstadoPersianas+0x7c>
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <setEstadoRiego+0x8c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <setEstadoRiego+0x90>)
 8001266:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <setEstadoRiego+0x8c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 800126e:	f001 fa2d 	bl	80026cc <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <setEstadoRiego+0x94>)
 8001276:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <setEstadoRiego+0x8c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	481a      	ldr	r0, [pc, #104]	; (80012f0 <setEstadoRiego+0x98>)
 8001288:	f002 f8f2 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	4817      	ldr	r0, [pc, #92]	; (80012f0 <setEstadoRiego+0x98>)
 8001294:	f002 f8ec 	bl	8003470 <HAL_GPIO_WritePin>
	}
	else if(estado_riego==2){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
}
 8001298:	e020      	b.n	80012dc <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <setEstadoRiego+0x8c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10c      	bne.n	80012bc <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <setEstadoRiego+0x98>)
 80012aa:	f002 f8e1 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b4:	480e      	ldr	r0, [pc, #56]	; (80012f0 <setEstadoRiego+0x98>)
 80012b6:	f002 f8db 	bl	8003470 <HAL_GPIO_WritePin>
}
 80012ba:	e00f      	b.n	80012dc <setEstadoRiego+0x84>
	else if(estado_riego==2){
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <setEstadoRiego+0x8c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d10b      	bne.n	80012dc <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <setEstadoRiego+0x98>)
 80012cc:	f002 f8d0 	bl	8003470 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <setEstadoRiego+0x98>)
 80012d8:	f002 f8ca 	bl	8003470 <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000050 	.word	0x20000050
 80012e8:	20000054 	.word	0x20000054
 80012ec:	20000140 	.word	0x20000140
 80012f0:	40020c00 	.word	0x40020c00

080012f4 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <cambiarEstadoRiego+0x30>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff ffa9 	bl	8001258 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 8001306:	e00a      	b.n	800131e <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <cambiarEstadoRiego+0x30>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d103      	bne.n	8001318 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff ffa1 	bl	8001258 <setEstadoRiego>
}
 8001316:	e002      	b.n	800131e <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff9d 	bl	8001258 <setEstadoRiego>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000054 	.word	0x20000054

08001328 <temporizador_riego>:

void temporizador_riego(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <temporizador_riego+0x30>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <temporizador_riego+0x14>
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <temporizador_riego+0x30>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10b      	bne.n	8001354 <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 800133c:	f001 f9c6 	bl	80026cc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <temporizador_riego+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800134c:	d902      	bls.n	8001354 <temporizador_riego+0x2c>
			setEstadoRiego(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff ff82 	bl	8001258 <setEstadoRiego>
		}
	}
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000050 	.word	0x20000050
 800135c:	20000140 	.word	0x20000140

08001360 <riego>:
void riego(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	temporizador_riego();
 8001364:	f7ff ffe0 	bl	8001328 <temporizador_riego>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <setEstadoSeguridad>:
int estado_seguridad = 0; //0 sistema apagado, 1 sistema encendiendose, 2 sistema_ activo
int alarma_seguridad = 0; //0 alarma apagada, 1 alarma encendida

uint32_t tickstart_seguridad = 0, counter_seguridad = 0;

void setEstadoSeguridad(int n) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	estado_seguridad = n;
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <setEstadoSeguridad+0x68>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
	if (estado_seguridad == 0) {
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <setEstadoSeguridad+0x68>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10e      	bne.n	80013a0 <setEstadoSeguridad+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2140      	movs	r1, #64	; 0x40
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <setEstadoSeguridad+0x6c>)
 8001388:	f002 f872 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <setEstadoSeguridad+0x6c>)
 8001394:	f002 f86c 	bl	8003470 <HAL_GPIO_WritePin>
		alarma_seguridad = 0;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <setEstadoSeguridad+0x70>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		alarma_seguridad = 0;
		tickstart_seguridad = HAL_GetTick();
	} else if (estado_seguridad == 2) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 800139e:	e015      	b.n	80013cc <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 1) {
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <setEstadoSeguridad+0x68>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d108      	bne.n	80013ba <setEstadoSeguridad+0x4e>
		alarma_seguridad = 0;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <setEstadoSeguridad+0x70>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		tickstart_seguridad = HAL_GetTick();
 80013ae:	f001 f98d 	bl	80026cc <HAL_GetTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <setEstadoSeguridad+0x74>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	e008      	b.n	80013cc <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 2) {
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <setEstadoSeguridad+0x68>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d104      	bne.n	80013cc <setEstadoSeguridad+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	4804      	ldr	r0, [pc, #16]	; (80013d8 <setEstadoSeguridad+0x6c>)
 80013c8:	f002 f852 	bl	8003470 <HAL_GPIO_WritePin>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200000fc 	.word	0x200000fc
 80013e0:	20000100 	.word	0x20000100

080013e4 <activar_sensor>:

void activar_sensor() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

	if (estado_seguridad == 1) {
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <activar_sensor+0x78>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d133      	bne.n	8001458 <activar_sensor+0x74>
		counter_seguridad = HAL_GetTick() - tickstart_seguridad;
 80013f0:	f001 f96c 	bl	80026cc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <activar_sensor+0x7c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <activar_sensor+0x80>)
 80013fe:	6013      	str	r3, [r2, #0]
		if ((counter_seguridad > 0) && (counter_seguridad < 500)) {
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <activar_sensor+0x80>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00a      	beq.n	800141e <activar_sensor+0x3a>
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <activar_sensor+0x80>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001410:	d205      	bcs.n	800141e <activar_sensor+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <activar_sensor+0x84>)
 8001418:	f002 f82a 	bl	8003470 <HAL_GPIO_WritePin>
 800141c:	e01c      	b.n	8001458 <activar_sensor+0x74>
		}else if ((counter_seguridad > 500) && (counter_seguridad < 1000)) {
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <activar_sensor+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001426:	d90a      	bls.n	800143e <activar_sensor+0x5a>
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <activar_sensor+0x80>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001430:	d205      	bcs.n	800143e <activar_sensor+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2140      	movs	r1, #64	; 0x40
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <activar_sensor+0x84>)
 8001438:	f002 f81a 	bl	8003470 <HAL_GPIO_WritePin>
 800143c:	e00c      	b.n	8001458 <activar_sensor+0x74>
		} else if (counter_seguridad > 5000) {
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <activar_sensor+0x80>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d906      	bls.n	8001458 <activar_sensor+0x74>
			counter_seguridad = 0;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <activar_sensor+0x80>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 8001450:	2002      	movs	r0, #2
 8001452:	f7ff ff8b 	bl	800136c <setEstadoSeguridad>
		}

	}
}
 8001456:	e7ff      	b.n	8001458 <activar_sensor+0x74>
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000f8 	.word	0x200000f8
 8001460:	20000100 	.word	0x20000100
 8001464:	20000104 	.word	0x20000104
 8001468:	40020000 	.word	0x40020000

0800146c <getEstadoSeguridad>:

int getEstadoSeguridad() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <getEstadoSeguridad+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200000f8 	.word	0x200000f8

08001484 <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad() {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	if (getEstadoSeguridad() == 0) {
 8001488:	f7ff fff0 	bl	800146c <getEstadoSeguridad>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff ff6a 	bl	800136c <setEstadoSeguridad>
	} else {
		setEstadoSeguridad(0);
	}
}
 8001498:	e002      	b.n	80014a0 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ff66 	bl	800136c <setEstadoSeguridad>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <intruso_detectado>:

void intruso_detectado() {
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	if (estado_seguridad == 2) {
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <intruso_detectado+0x1c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d102      	bne.n	80014b6 <intruso_detectado+0x12>
		alarma_seguridad = 1;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <intruso_detectado+0x20>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
	}
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200000f8 	.word	0x200000f8
 80014c4:	200000fc 	.word	0x200000fc

080014c8 <sonar_alarma>:

void sonar_alarma() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	if(estado_seguridad == 2 && alarma_seguridad == 1){
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <sonar_alarma+0x24>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d109      	bne.n	80014e8 <sonar_alarma+0x20>
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <sonar_alarma+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <sonar_alarma+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <sonar_alarma+0x2c>)
 80014e4:	f001 ffc4 	bl	8003470 <HAL_GPIO_WritePin>
		}
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000f8 	.word	0x200000f8
 80014f0:	200000fc 	.word	0x200000fc
 80014f4:	40020000 	.word	0x40020000

080014f8 <seguridad>:

void seguridad() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	activar_sensor();
 80014fc:	f7ff ff72 	bl	80013e4 <activar_sensor>
	sonar_alarma();
 8001500:	f7ff ffe2 	bl	80014c8 <sonar_alarma>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <setEstadoClima>:

int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0; counter_clima=0;

void setEstadoClima(int n){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8001510:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <setEstadoClima+0x7c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <setEstadoClima+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001524:	4818      	ldr	r0, [pc, #96]	; (8001588 <setEstadoClima+0x80>)
 8001526:	f001 ffa3 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <setEstadoClima+0x80>)
 8001532:	f001 ff9d 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
	}else if(estado_clima==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001536:	e020      	b.n	800157a <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <setEstadoClima+0x7c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10c      	bne.n	800155a <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001546:	4810      	ldr	r0, [pc, #64]	; (8001588 <setEstadoClima+0x80>)
 8001548:	f001 ff92 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <setEstadoClima+0x80>)
 8001554:	f001 ff8c 	bl	8003470 <HAL_GPIO_WritePin>
}
 8001558:	e00f      	b.n	800157a <setEstadoClima+0x72>
	}else if(estado_clima==2){
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <setEstadoClima+0x7c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d10b      	bne.n	800157a <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <setEstadoClima+0x80>)
 800156a:	f001 ff81 	bl	8003470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <setEstadoClima+0x80>)
 8001576:	f001 ff7b 	bl	8003470 <HAL_GPIO_WritePin>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000013c 	.word	0x2000013c
 8001588:	40020c00 	.word	0x40020c00

0800158c <cambiarEstadoClima>:

int getEstadoClima(){
	return estado_clima;
}

void cambiarEstadoClima(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	controldelclima=0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <cambiarEstadoClima+0x3c>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <cambiarEstadoClima+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff ffb2 	bl	8001508 <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 80015a4:	e00e      	b.n	80015c4 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <cambiarEstadoClima+0x40>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d103      	bne.n	80015b6 <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 80015ae:	2002      	movs	r0, #2
 80015b0:	f7ff ffaa 	bl	8001508 <setEstadoClima>
}
 80015b4:	e006      	b.n	80015c4 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <cambiarEstadoClima+0x40>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d102      	bne.n	80015c4 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ffa2 	bl	8001508 <setEstadoClima>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000114 	.word	0x20000114
 80015cc:	2000013c 	.word	0x2000013c

080015d0 <cambiarControlClima>:

void cambiarControlClima(){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <cambiarControlClima+0x24>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <cambiarControlClima+0x14>
		controldelclima=1;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <cambiarControlClima+0x24>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
	}else{
		controldelclima=0;
	}
}
 80015e2:	e002      	b.n	80015ea <cambiarControlClima+0x1a>
		controldelclima=0;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <cambiarControlClima+0x24>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000114 	.word	0x20000114

080015f8 <delay>:


void delay(uint16_t time) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <delay+0x30>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 800160a:	bf00      	nop
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <delay+0x30>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3f9      	bcc.n	800160c <delay+0x14>
		;
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000224 	.word	0x20000224

0800162c <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 fd54 	bl	8003108 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 fd36 	bl	8003108 <HAL_GPIO_Init>
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 80016a8:	2104      	movs	r1, #4
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <DHT11_Start+0x3c>)
 80016ac:	f7ff ffbe 	bl	800162c <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80016b0:	2200      	movs	r2, #0
 80016b2:	2104      	movs	r1, #4
 80016b4:	480a      	ldr	r0, [pc, #40]	; (80016e0 <DHT11_Start+0x3c>)
 80016b6:	f001 fedb 	bl	8003470 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 80016ba:	f244 6050 	movw	r0, #18000	; 0x4650
 80016be:	f7ff ff9b 	bl	80015f8 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80016c2:	2201      	movs	r2, #1
 80016c4:	2104      	movs	r1, #4
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <DHT11_Start+0x3c>)
 80016c8:	f001 fed2 	bl	8003470 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 80016cc:	2014      	movs	r0, #20
 80016ce:	f7ff ff93 	bl	80015f8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80016d2:	2104      	movs	r1, #4
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DHT11_Start+0x3c>)
 80016d6:	f7ff ffc7 	bl	8001668 <Set_Pin_Input>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000

080016e4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]
	delay(40);
 80016ee:	2028      	movs	r0, #40	; 0x28
 80016f0:	f7ff ff82 	bl	80015f8 <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 80016f4:	2104      	movs	r1, #4
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <DHT11_Check_Response+0x58>)
 80016f8:	f001 fea2 	bl	8003440 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10e      	bne.n	8001720 <DHT11_Check_Response+0x3c>
		delay(80);
 8001702:	2050      	movs	r0, #80	; 0x50
 8001704:	f7ff ff78 	bl	80015f8 <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001708:	2104      	movs	r1, #4
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <DHT11_Check_Response+0x58>)
 800170c:	f001 fe98 	bl	8003440 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <DHT11_Check_Response+0x38>
			Response = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 800171c:	23ff      	movs	r3, #255	; 0xff
 800171e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001720:	bf00      	nop
 8001722:	2104      	movs	r1, #4
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <DHT11_Check_Response+0x58>)
 8001726:	f001 fe8b 	bl	8003440 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f8      	bne.n	8001722 <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8001730:	79fb      	ldrb	r3, [r7, #7]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40020000 	.word	0x40020000

08001740 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8001746:	2300      	movs	r3, #0
 8001748:	71bb      	strb	r3, [r7, #6]
 800174a:	e037      	b.n	80017bc <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800174c:	bf00      	nop
 800174e:	2104      	movs	r1, #4
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <DHT11_Read+0x8c>)
 8001752:	f001 fe75 	bl	8003440 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f8      	beq.n	800174e <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 800175c:	2028      	movs	r0, #40	; 0x28
 800175e:	f7ff ff4b 	bl	80015f8 <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001762:	2104      	movs	r1, #4
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <DHT11_Read+0x8c>)
 8001766:	f001 fe6b 	bl	8003440 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10e      	bne.n	800178e <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2201      	movs	r2, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25a      	sxtb	r2, r3
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	4013      	ands	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	e00b      	b.n	80017a6 <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	2201      	movs	r2, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	b25a      	sxtb	r2, r3
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80017a6:	bf00      	nop
 80017a8:	2104      	movs	r1, #4
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <DHT11_Read+0x8c>)
 80017ac:	f001 fe48 	bl	8003440 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f8      	bne.n	80017a8 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	3301      	adds	r3, #1
 80017ba:	71bb      	strb	r3, [r7, #6]
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9c4      	bls.n	800174c <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020000 	.word	0x40020000

080017d0 <lectura_dht11>:

void lectura_dht11() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	DHT11_Start();
 80017d4:	f7ff ff66 	bl	80016a4 <DHT11_Start>
	Presence = DHT11_Check_Response();
 80017d8:	f7ff ff84 	bl	80016e4 <DHT11_Check_Response>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <lectura_dht11+0x8c>)
 80017e2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 80017e4:	f7ff ffac 	bl	8001740 <DHT11_Read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <lectura_dht11+0x90>)
 80017ee:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 80017f0:	f7ff ffa6 	bl	8001740 <DHT11_Read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <lectura_dht11+0x94>)
 80017fa:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 80017fc:	f7ff ffa0 	bl	8001740 <DHT11_Read>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <lectura_dht11+0x98>)
 8001806:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8001808:	f7ff ff9a 	bl	8001740 <DHT11_Read>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <lectura_dht11+0x9c>)
 8001812:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8001814:	f7ff ff94 	bl	8001740 <DHT11_Read>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <lectura_dht11+0xa0>)
 800181e:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <lectura_dht11+0x98>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <lectura_dht11+0xa4>)
 8001828:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <lectura_dht11+0x90>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <lectura_dht11+0xa8>)
 8001832:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <lectura_dht11+0xa4>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <lectura_dht11+0xac>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <lectura_dht11+0xa8>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <lectura_dht11+0xb0>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000110 	.word	0x20000110
 8001860:	20000198 	.word	0x20000198
 8001864:	20000221 	.word	0x20000221
 8001868:	20000220 	.word	0x20000220
 800186c:	20000300 	.word	0x20000300
 8001870:	200002f8 	.word	0x200002f8
 8001874:	2000019c 	.word	0x2000019c
 8001878:	2000019a 	.word	0x2000019a
 800187c:	20000108 	.word	0x20000108
 8001880:	2000010c 	.word	0x2000010c

08001884 <clima>:

void clima(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	if(controldelclima==1 && counter_clima>1000){
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <clima+0x68>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d120      	bne.n	80018d2 <clima+0x4e>
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <clima+0x6c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001898:	dd1b      	ble.n	80018d2 <clima+0x4e>
		counter_clima=0;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <clima+0x6c>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 80018a0:	f000 ff14 	bl	80026cc <HAL_GetTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <clima+0x70>)
 80018a8:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 80018aa:	f7ff ff91 	bl	80017d0 <lectura_dht11>
		if(Temperature>20){
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <clima+0x74>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	dd03      	ble.n	80018ca <clima+0x46>
			setEstadoClima(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7ff fe20 	bl	8001508 <setEstadoClima>
		if(Temperature>20){
 80018c8:	e00d      	b.n	80018e6 <clima+0x62>
		}else{
			setEstadoClima(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff fe1c 	bl	8001508 <setEstadoClima>
		if(Temperature>20){
 80018d0:	e009      	b.n	80018e6 <clima+0x62>
		}
	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
 80018d2:	f000 fefb 	bl	80026cc <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <clima+0x70>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <clima+0x6c>)
 80018e2:	601a      	str	r2, [r3, #0]
	}

}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000114 	.word	0x20000114
 80018f0:	2000011c 	.word	0x2000011c
 80018f4:	20000118 	.word	0x20000118
 80018f8:	20000108 	.word	0x20000108

080018fc <bluetooth>:
	for (int i = 0; i < 50; i++) {
		rx_buffer[0] = '\0';
	}
}
*/
void bluetooth() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, &rx_buffer, 1, 500);
 8001900:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001904:	2201      	movs	r2, #1
 8001906:	4924      	ldr	r1, [pc, #144]	; (8001998 <bluetooth+0x9c>)
 8001908:	4824      	ldr	r0, [pc, #144]	; (800199c <bluetooth+0xa0>)
 800190a:	f003 fab8 	bl	8004e7e <HAL_UART_Receive>
	switch (rx_buffer) {
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <bluetooth+0x9c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3b61      	subs	r3, #97	; 0x61
 8001914:	2b06      	cmp	r3, #6
 8001916:	d839      	bhi.n	800198c <bluetooth+0x90>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <bluetooth+0x24>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	0800193d 	.word	0x0800193d
 8001924:	08001943 	.word	0x08001943
 8001928:	08001949 	.word	0x08001949
 800192c:	0800194f 	.word	0x0800194f
 8001930:	08001955 	.word	0x08001955
 8001934:	0800195b 	.word	0x0800195b
 8001938:	08001961 	.word	0x08001961
	case 'a':
		cambiarEstadoLuces();
 800193c:	f7fe fe66 	bl	800060c <cambiarEstadoLuces>
		break;
 8001940:	e024      	b.n	800198c <bluetooth+0x90>
	case 'b':
		cambiarEstadoRiego();
 8001942:	f7ff fcd7 	bl	80012f4 <cambiarEstadoRiego>
		break;
 8001946:	e021      	b.n	800198c <bluetooth+0x90>
	case 'c':
		cambiarEstadoPersianas();
 8001948:	f7ff fc46 	bl	80011d8 <cambiarEstadoPersianas>
		break;
 800194c:	e01e      	b.n	800198c <bluetooth+0x90>
	case 'd':
		cambiarEstadoSeguridad();
 800194e:	f7ff fd99 	bl	8001484 <cambiarEstadoSeguridad>
		break;
 8001952:	e01b      	b.n	800198c <bluetooth+0x90>
	case 'e':
		cambiarEstadoClima();
 8001954:	f7ff fe1a 	bl	800158c <cambiarEstadoClima>
		break;
 8001958:	e018      	b.n	800198c <bluetooth+0x90>
	case 'f':
		cambiarControlClima();
 800195a:	f7ff fe39 	bl	80015d0 <cambiarControlClima>
		break;
 800195e:	e015      	b.n	800198c <bluetooth+0x90>
	case 'g':
		lectura_dht11();
 8001960:	f7ff ff36 	bl	80017d0 <lectura_dht11>
		//HAL_UART_Transmit(&huart6, &Temperature, 1, 500);
		HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La temperatura es de %i grados\n",(int)Temperature), 500);
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <bluetooth+0xa4>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196e:	ee17 2a90 	vmov	r2, s15
 8001972:	490c      	ldr	r1, [pc, #48]	; (80019a4 <bluetooth+0xa8>)
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <bluetooth+0xac>)
 8001976:	f003 fd8d 	bl	8005494 <siprintf>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001982:	4909      	ldr	r1, [pc, #36]	; (80019a8 <bluetooth+0xac>)
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <bluetooth+0xa0>)
 8001986:	f003 f9e8 	bl	8004d5a <HAL_UART_Transmit>
		break;
 800198a:	bf00      	nop
	}
	rx_buffer = '\0';
 800198c:	4b02      	ldr	r3, [pc, #8]	; (8001998 <bluetooth+0x9c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000019e 	.word	0x2000019e
 800199c:	200002b4 	.word	0x200002b4
 80019a0:	20000108 	.word	0x20000108
 80019a4:	08005e70 	.word	0x08005e70
 80019a8:	200001a0 	.word	0x200001a0

080019ac <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d13b      	bne.n	8001a3a <debouncer+0x8e>
		if (button_count == 0) {
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <debouncer+0x98>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <debouncer+0x36>
			counter = HAL_GetTick();
 80019ca:	f000 fe7f 	bl	80026cc <HAL_GetTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <debouncer+0x9c>)
 80019d4:	601a      	str	r2, [r3, #0]
			button_count++;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <debouncer+0x98>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <debouncer+0x98>)
 80019e0:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 80019e2:	f000 fe73 	bl	80026cc <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <debouncer+0x9c>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	2b13      	cmp	r3, #19
 80019f0:	d923      	bls.n	8001a3a <debouncer+0x8e>
			counter = HAL_GetTick();
 80019f2:	f000 fe6b 	bl	80026cc <HAL_GetTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <debouncer+0x9c>)
 80019fc:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4619      	mov	r1, r3
 8001a02:	68b8      	ldr	r0, [r7, #8]
 8001a04:	f001 fd1c 	bl	8003440 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d003      	beq.n	8001a16 <debouncer+0x6a>
				button_count = 1;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <debouncer+0x98>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <debouncer+0x76>
			} else {
				button_count++;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <debouncer+0x98>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <debouncer+0x98>)
 8001a20:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <debouncer+0x98>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <debouncer+0x8e>
				button_count = 0;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <debouncer+0x98>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
				return 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <debouncer+0x90>
			}
		}
	}
	return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000128 	.word	0x20000128
 8001a48:	2000012c 	.word	0x2000012c

08001a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d106      	bne.n	8001a6a <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a64:	2203      	movs	r2, #3
 8001a66:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8001a68:	e055      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a70:	d106      	bne.n	8001a80 <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
		boton_presionado = 11;
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a7a:	220b      	movs	r2, #11
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	e04a      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a86:	d106      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a90:	220c      	movs	r2, #12
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	e03f      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9c:	d106      	bne.n	8001aac <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001aa6:	220d      	movs	r2, #13
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	e034      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d106      	bne.n	8001ac2 <HAL_GPIO_EXTI_Callback+0x76>
		button_int = 1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001abc:	220a      	movs	r2, #10
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	e029      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b80      	cmp	r3, #128	; 0x80
 8001ac6:	d106      	bne.n	8001ad6 <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	e01f      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001adc:	d106      	bne.n	8001aec <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ae6:	2209      	movs	r2, #9
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	e014      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af2:	d106      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0xb6>
		button_int = 1;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001afc:	220e      	movs	r2, #14
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	e009      	b.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b08:	d105      	bne.n	8001b16 <HAL_GPIO_EXTI_Callback+0xca>
		button_int = 1;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001b12:	220f      	movs	r2, #15
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000120 	.word	0x20000120
 8001b28:	20000124 	.word	0x20000124

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b32:	f000 fd65 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b36:	f000 f8db 	bl	8001cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3a:	f000 fa73 	bl	8002024 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b3e:	f000 f993 	bl	8001e68 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001b42:	f000 fa45 	bl	8001fd0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001b46:	f000 f93d 	bl	8001dc4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001b4a:	f000 fa0b 	bl	8001f64 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001b4e:	f000 f9b9 	bl	8001ec4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 8001b52:	4861      	ldr	r0, [pc, #388]	; (8001cd8 <main+0x1ac>)
 8001b54:	f002 fdce 	bl	80046f4 <HAL_TIM_Base_Start>
	int menu_actual = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	603b      	str	r3, [r7, #0]

	setEstadoPersianas(0);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fad9 	bl	8001118 <setEstadoPersianas>
	setLuces(0);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7fe fd06 	bl	8000578 <setLuces>
	setEstadoClima(0);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fccb 	bl	8001508 <setEstadoClima>
	setEstadoSeguridad(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fbfa 	bl	800136c <setEstadoSeguridad>
	setEstadoRiego(2);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7ff fb6d 	bl	8001258 <setEstadoRiego>
	pantalla_principal();
 8001b7e:	f7ff fa01 	bl	8000f84 <pantalla_principal>
		 }
		 }

		 */

		switch (boton_presionado) {
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <main+0x1b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3b03      	subs	r3, #3
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	f200 809a 	bhi.w	8001cc2 <main+0x196>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <main+0x68>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001bc9 	.word	0x08001bc9
 8001b98:	08001cc3 	.word	0x08001cc3
 8001b9c:	08001cc3 	.word	0x08001cc3
 8001ba0:	08001cc3 	.word	0x08001cc3
 8001ba4:	08001c43 	.word	0x08001c43
 8001ba8:	08001cc3 	.word	0x08001cc3
 8001bac:	08001c59 	.word	0x08001c59
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001bdf 	.word	0x08001bdf
 8001bb8:	08001bf9 	.word	0x08001bf9
 8001bbc:	08001c13 	.word	0x08001c13
 8001bc0:	08001c71 	.word	0x08001c71
 8001bc4:	08001c89 	.word	0x08001c89
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4945      	ldr	r1, [pc, #276]	; (8001ce0 <main+0x1b4>)
 8001bcc:	4845      	ldr	r0, [pc, #276]	; (8001ce4 <main+0x1b8>)
 8001bce:	f7ff feed 	bl	80019ac <debouncer>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d063      	beq.n	8001ca0 <main+0x174>
				cambiarEstadoLuces();
 8001bd8:	f7fe fd18 	bl	800060c <cambiarEstadoLuces>
			}
			break;
 8001bdc:	e060      	b.n	8001ca0 <main+0x174>
		case 11:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_11)) {
 8001bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be2:	4941      	ldr	r1, [pc, #260]	; (8001ce8 <main+0x1bc>)
 8001be4:	483f      	ldr	r0, [pc, #252]	; (8001ce4 <main+0x1b8>)
 8001be6:	f7ff fee1 	bl	80019ac <debouncer>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d059      	beq.n	8001ca4 <main+0x178>
				setEstadoPersianas(0);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fa91 	bl	8001118 <setEstadoPersianas>
			}
			break;
 8001bf6:	e055      	b.n	8001ca4 <main+0x178>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 8001bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bfc:	493a      	ldr	r1, [pc, #232]	; (8001ce8 <main+0x1bc>)
 8001bfe:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <main+0x1b8>)
 8001c00:	f7ff fed4 	bl	80019ac <debouncer>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04e      	beq.n	8001ca8 <main+0x17c>
				setEstadoPersianas(0);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fa84 	bl	8001118 <setEstadoPersianas>
			}
			break;
 8001c10:	e04a      	b.n	8001ca8 <main+0x17c>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	4932      	ldr	r1, [pc, #200]	; (8001ce0 <main+0x1b4>)
 8001c18:	4832      	ldr	r0, [pc, #200]	; (8001ce4 <main+0x1b8>)
 8001c1a:	f7ff fec7 	bl	80019ac <debouncer>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d043      	beq.n	8001cac <main+0x180>
				cambiarEstadoPersianas();
 8001c24:	f7ff fad8 	bl	80011d8 <cambiarEstadoPersianas>
			}
			break;
 8001c28:	e040      	b.n	8001cac <main+0x180>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 8001c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2e:	492c      	ldr	r1, [pc, #176]	; (8001ce0 <main+0x1b4>)
 8001c30:	482c      	ldr	r0, [pc, #176]	; (8001ce4 <main+0x1b8>)
 8001c32:	f7ff febb 	bl	80019ac <debouncer>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d039      	beq.n	8001cb0 <main+0x184>
				cambiarEstadoRiego();
 8001c3c:	f7ff fb5a 	bl	80012f4 <cambiarEstadoRiego>
			}
			break;
 8001c40:	e036      	b.n	8001cb0 <main+0x184>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	4926      	ldr	r1, [pc, #152]	; (8001ce0 <main+0x1b4>)
 8001c46:	4827      	ldr	r0, [pc, #156]	; (8001ce4 <main+0x1b8>)
 8001c48:	f7ff feb0 	bl	80019ac <debouncer>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d030      	beq.n	8001cb4 <main+0x188>
				cambiarEstadoSeguridad();
 8001c52:	f7ff fc17 	bl	8001484 <cambiarEstadoSeguridad>
			}
			break;
 8001c56:	e02d      	b.n	8001cb4 <main+0x188>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 8001c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5c:	4920      	ldr	r1, [pc, #128]	; (8001ce0 <main+0x1b4>)
 8001c5e:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <main+0x1b8>)
 8001c60:	f7ff fea4 	bl	80019ac <debouncer>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d026      	beq.n	8001cb8 <main+0x18c>
				intruso_detectado();
 8001c6a:	f7ff fc1b 	bl	80014a4 <intruso_detectado>
			}
			break;
 8001c6e:	e023      	b.n	8001cb8 <main+0x18c>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 8001c70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c74:	491d      	ldr	r1, [pc, #116]	; (8001cec <main+0x1c0>)
 8001c76:	481b      	ldr	r0, [pc, #108]	; (8001ce4 <main+0x1b8>)
 8001c78:	f7ff fe98 	bl	80019ac <debouncer>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <main+0x190>
				cambiarControlClima();
 8001c82:	f7ff fca5 	bl	80015d0 <cambiarControlClima>
			}
			break;
 8001c86:	e019      	b.n	8001cbc <main+0x190>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 8001c88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c8c:	4917      	ldr	r1, [pc, #92]	; (8001cec <main+0x1c0>)
 8001c8e:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <main+0x1b8>)
 8001c90:	f7ff fe8c 	bl	80019ac <debouncer>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <main+0x194>
				cambiarEstadoClima();
 8001c9a:	f7ff fc77 	bl	800158c <cambiarEstadoClima>
			}
			break;
 8001c9e:	e00f      	b.n	8001cc0 <main+0x194>
			break;
 8001ca0:	bf00      	nop
 8001ca2:	e00e      	b.n	8001cc2 <main+0x196>
			break;
 8001ca4:	bf00      	nop
 8001ca6:	e00c      	b.n	8001cc2 <main+0x196>
			break;
 8001ca8:	bf00      	nop
 8001caa:	e00a      	b.n	8001cc2 <main+0x196>
			break;
 8001cac:	bf00      	nop
 8001cae:	e008      	b.n	8001cc2 <main+0x196>
			break;
 8001cb0:	bf00      	nop
 8001cb2:	e006      	b.n	8001cc2 <main+0x196>
			break;
 8001cb4:	bf00      	nop
 8001cb6:	e004      	b.n	8001cc2 <main+0x196>
			break;
 8001cb8:	bf00      	nop
 8001cba:	e002      	b.n	8001cc2 <main+0x196>
			break;
 8001cbc:	bf00      	nop
 8001cbe:	e000      	b.n	8001cc2 <main+0x196>
			break;
 8001cc0:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 8001cc2:	f7fe fd33 	bl	800072c <luces>
		riego();
 8001cc6:	f7ff fb4b 	bl	8001360 <riego>
		seguridad();
 8001cca:	f7ff fc15 	bl	80014f8 <seguridad>
		clima();
 8001cce:	f7ff fdd9 	bl	8001884 <clima>
		bluetooth();
 8001cd2:	f7ff fe13 	bl	80018fc <bluetooth>
		switch (boton_presionado) {
 8001cd6:	e754      	b.n	8001b82 <main+0x56>
 8001cd8:	20000224 	.word	0x20000224
 8001cdc:	20000124 	.word	0x20000124
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	20000120 	.word	0x20000120
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40020400 	.word	0x40020400

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b094      	sub	sp, #80	; 0x50
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2230      	movs	r2, #48	; 0x30
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fbc0 	bl	8005484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <SystemClock_Config+0xcc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d54:	2310      	movs	r3, #16
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d60:	2308      	movs	r3, #8
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d64:	2332      	movs	r3, #50	; 0x32
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fff9 	bl	8003d6c <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d80:	f000 fa32 	bl	80021e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fa5a 	bl	800425c <HAL_RCC_ClockConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dae:	f000 fa1b 	bl	80021e8 <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3750      	adds	r7, #80	; 0x50
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <MX_ADC1_Init+0x9c>)
 8001dda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <MX_ADC1_Init+0xa0>)
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e24:	f000 fc5e 	bl	80026e4 <HAL_ADC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 f9db 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <MX_ADC1_Init+0x98>)
 8001e44:	f000 fe30 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e4e:	f000 f9cb 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200001d4 	.word	0x200001d4
 8001e60:	40012000 	.word	0x40012000
 8001e64:	0f000001 	.word	0x0f000001

08001e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <MX_I2C1_Init+0x54>)
 8001e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_I2C1_Init+0x58>)
 8001e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_I2C1_Init+0x50>)
 8001ea6:	f001 fb15 	bl	80034d4 <HAL_I2C_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb0:	f000 f99a 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000144 	.word	0x20000144
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	000186a0 	.word	0x000186a0

08001ec4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <MX_TIM1_Init+0x9c>)
 8001ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ee8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8001eec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001ef6:	22fe      	movs	r2, #254	; 0xfe
 8001ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f0e:	f002 fba1 	bl	8004654 <HAL_TIM_Base_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f18:	f000 f966 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f2a:	f002 fc4b 	bl	80047c4 <HAL_TIM_ConfigClockSource>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f34:	f000 f958 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_TIM1_Init+0x98>)
 8001f46:	f002 fe3f 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f50:	f000 f94a 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000026c 	.word	0x2000026c
 8001f60:	40010000 	.word	0x40010000

08001f64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <MX_TIM6_Init+0x68>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f7a:	2231      	movs	r2, #49	; 0x31
 8001f7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f94:	f002 fb5e 	bl	8004654 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f9e:	f000 f923 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001fb0:	f002 fe0a 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001fba:	f000 f915 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000224 	.word	0x20000224
 8001fcc:	40001000 	.word	0x40001000

08001fd0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_USART6_UART_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART6_UART_Init+0x4c>)
 8002008:	f002 fe5a 	bl	8004cc0 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002012:	f000 f8e9 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002b4 	.word	0x200002b4
 8002020:	40011400 	.word	0x40011400

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a64      	ldr	r2, [pc, #400]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 800207c:	f043 0310 	orr.w	r3, r3, #16
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a48      	ldr	r2, [pc, #288]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <MX_GPIO_Init+0x1b0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80020e8:	483b      	ldr	r0, [pc, #236]	; (80021d8 <MX_GPIO_Init+0x1b4>)
 80020ea:	f001 f9c1 	bl	8003470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80020f4:	4839      	ldr	r0, [pc, #228]	; (80021dc <MX_GPIO_Init+0x1b8>)
 80020f6:	f001 f9bb 	bl	8003470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 80020fa:	f242 6389 	movw	r3, #9865	; 0x2689
 80020fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002100:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4831      	ldr	r0, [pc, #196]	; (80021d8 <MX_GPIO_Init+0x1b4>)
 8002112:	f000 fff9 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002116:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800211a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <MX_GPIO_Init+0x1b4>)
 8002130:	f000 ffea 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002134:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800213e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4825      	ldr	r0, [pc, #148]	; (80021e0 <MX_GPIO_Init+0x1bc>)
 800214c:	f000 ffdc 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002150:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002156:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	481f      	ldr	r0, [pc, #124]	; (80021e4 <MX_GPIO_Init+0x1c0>)
 8002168:	f000 ffce 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800216c:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002170:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4815      	ldr	r0, [pc, #84]	; (80021dc <MX_GPIO_Init+0x1b8>)
 8002186:	f000 ffbf 	bl	8003108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2006      	movs	r0, #6
 8002190:	f000 ff83 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002194:	2006      	movs	r0, #6
 8002196:	f000 ff9c 	bl	80030d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2009      	movs	r0, #9
 80021a0:	f000 ff7b 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021a4:	2009      	movs	r0, #9
 80021a6:	f000 ff94 	bl	80030d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2017      	movs	r0, #23
 80021b0:	f000 ff73 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021b4:	2017      	movs	r0, #23
 80021b6:	f000 ff8c 	bl	80030d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2028      	movs	r0, #40	; 0x28
 80021c0:	f000 ff6b 	bl	800309a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021c4:	2028      	movs	r0, #40	; 0x28
 80021c6:	f000 ff84 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 80021ca:	bf00      	nop
 80021cc:	3730      	adds	r7, #48	; 0x30
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40020400 	.word	0x40020400

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021f0:	e7fe      	b.n	80021f0 <Error_Handler+0x8>
	...

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_MspInit+0x4c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_MspInit+0x4c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_MspInit+0x4c>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002232:	2007      	movs	r0, #7
 8002234:	f000 ff26 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_ADC_MspInit+0x7c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d127      	bne.n	80022b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_ADC_MspInit+0x80>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a2:	2303      	movs	r3, #3
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_ADC_MspInit+0x84>)
 80022b2:	f000 ff29 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40012000 	.word	0x40012000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_I2C_MspInit+0x84>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12b      	bne.n	8002346 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_I2C_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_I2C_MspInit+0x88>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_I2C_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230e:	2312      	movs	r3, #18
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800231a:	2304      	movs	r3, #4
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <HAL_I2C_MspInit+0x8c>)
 8002326:	f000 feef 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_I2C_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_I2C_MspInit+0x88>)
 8002334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_I2C_MspInit+0x88>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002346:	bf00      	nop
 8002348:	3728      	adds	r7, #40	; 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40005400 	.word	0x40005400
 8002354:	40023800 	.word	0x40023800
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <HAL_TIM_Base_MspInit+0x64>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10e      	bne.n	800238c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800238a:	e012      	b.n	80023b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0x6c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10d      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_TIM_Base_MspInit+0x68>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40001000 	.word	0x40001000

080023cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_UART_MspInit+0x84>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12b      	bne.n	8002446 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_UART_MspInit+0x88>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_UART_MspInit+0x88>)
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_UART_MspInit+0x88>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_UART_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_UART_MspInit+0x88>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_UART_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002426:	23c0      	movs	r3, #192	; 0xc0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002436:	2308      	movs	r3, #8
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_UART_MspInit+0x8c>)
 8002442:	f000 fe61 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40011400 	.word	0x40011400
 8002454:	40023800 	.word	0x40023800
 8002458:	40020800 	.word	0x40020800

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 f8fc 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f000 fff5 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}

080024be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80024c2:	2008      	movs	r0, #8
 80024c4:	f000 ffee 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80024d0:	2080      	movs	r0, #128	; 0x80
 80024d2:	f000 ffe7 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80024d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024da:	f000 ffe3 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80024e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024ea:	f000 ffdb 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024f2:	f000 ffd7 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80024f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024fa:	f000 ffd3 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002502:	f000 ffcf 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002506:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800250a:	f000 ffcb 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800250e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002512:	f000 ffc7 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <_sbrk>:
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
 800254c:	f002 ff70 	bl	8005430 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20020000 	.word	0x20020000
 800257c:	00000400 	.word	0x00000400
 8002580:	20000130 	.word	0x20000130
 8002584:	20000328 	.word	0x20000328

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack     /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025d6:	f7ff ffd7 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f002 ff2f 	bl	800543c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff faa5 	bl	8001b2c <main>
  bx  lr    
 80025e2:	4770      	bx	lr
;  ldr   sp, =_estack     /* set stack pointer */
 80025e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80025f0:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 80025f4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80025f8:	20000324 	.word	0x20000324

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 fd2b 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	2000      	movs	r0, #0
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fdde 	bl	80021f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fd43 	bl	80030ee <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 fd0b 	bl	800309a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000058 	.word	0x20000058
 800269c:	20000060 	.word	0x20000060
 80026a0:	2000005c 	.word	0x2000005c

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000060 	.word	0x20000060
 80026c8:	20000310 	.word	0x20000310

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000310 	.word	0x20000310

080026e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e033      	b.n	8002762 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fd9e 	bl	8002244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800272a:	f023 0302 	bic.w	r3, r3, #2
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fad8 	bl	8002cec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
 8002752:	e001      	b.n	8002758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Start+0x1a>
 8002782:	2302      	movs	r3, #2
 8002784:	e0b2      	b.n	80028ec <HAL_ADC_Start+0x180>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d018      	beq.n	80027ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ac:	4b52      	ldr	r3, [pc, #328]	; (80028f8 <HAL_ADC_Start+0x18c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_ADC_Start+0x190>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9a      	lsrs	r2, r3, #18
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d17a      	bne.n	80028d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002806:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	d106      	bne.n	800282a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f023 0206 	bic.w	r2, r3, #6
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
 8002828:	e002      	b.n	8002830 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_ADC_Start+0x194>)
 800283a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002844:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2b00      	cmp	r3, #0
 8002850:	d12a      	bne.n	80028a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_ADC_Start+0x198>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d015      	beq.n	8002888 <HAL_ADC_Start+0x11c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <HAL_ADC_Start+0x19c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d105      	bne.n	8002872 <HAL_ADC_Start+0x106>
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_ADC_Start+0x194>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a25      	ldr	r2, [pc, #148]	; (800290c <HAL_ADC_Start+0x1a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d136      	bne.n	80028ea <HAL_ADC_Start+0x17e>
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_ADC_Start+0x194>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d130      	bne.n	80028ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d129      	bne.n	80028ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e020      	b.n	80028ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_ADC_Start+0x198>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11b      	bne.n	80028ea <HAL_ADC_Start+0x17e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d114      	bne.n	80028ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e00b      	b.n	80028ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	20000058 	.word	0x20000058
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	40012300 	.word	0x40012300
 8002904:	40012000 	.word	0x40012000
 8002908:	40012100 	.word	0x40012100
 800290c:	40012200 	.word	0x40012200

08002910 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Stop+0x16>
 8002922:	2302      	movs	r3, #2
 8002924:	e021      	b.n	800296a <HAL_ADC_Stop+0x5a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f043 0201 	orr.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d113      	bne.n	80029bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800299e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a2:	d10b      	bne.n	80029bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e063      	b.n	8002a84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029bc:	f7ff fe86 	bl	80026cc <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c2:	e021      	b.n	8002a08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d01d      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x6c>
 80029d2:	f7ff fe7b 	bl	80026cc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d212      	bcs.n	8002a08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d00b      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0204 	orr.w	r2, r3, #4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e03d      	b.n	8002a84 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d1d6      	bne.n	80029c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0212 	mvn.w	r2, #18
 8002a1e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d123      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11f      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e105      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x228>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d925      	bls.n	8002b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b1e      	subs	r3, #30
 8002aea:	2207      	movs	r2, #7
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43da      	mvns	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	400a      	ands	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68d9      	ldr	r1, [r3, #12]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4403      	add	r3, r0
 8002b12:	3b1e      	subs	r3, #30
 8002b14:	409a      	lsls	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	e022      	b.n	8002b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	2207      	movs	r2, #7
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4403      	add	r3, r0
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d824      	bhi.n	8002bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b05      	subs	r3, #5
 8002b80:	221f      	movs	r2, #31
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb6:	e04c      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d824      	bhi.n	8002c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b23      	subs	r3, #35	; 0x23
 8002bd2:	221f      	movs	r2, #31
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b23      	subs	r3, #35	; 0x23
 8002bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	e023      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b41      	subs	r3, #65	; 0x41
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	; 0x41
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_ADC_ConfigChannel+0x234>)
 8002c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_ADC_ConfigChannel+0x238>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x1cc>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_ADC_ConfigChannel+0x238>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d123      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d003      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x1e6>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b11      	cmp	r3, #17
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d111      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_ADC_ConfigChannel+0x23c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_ADC_ConfigChannel+0x240>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9a      	lsrs	r2, r3, #18
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40012300 	.word	0x40012300
 8002ce0:	40012000 	.word	0x40012000
 8002ce4:	20000058 	.word	0x20000058
 8002ce8:	431bde83 	.word	0x431bde83

08002cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf4:	4b79      	ldr	r3, [pc, #484]	; (8002edc <ADC_Init+0x1f0>)
 8002cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <ADC_Init+0x1f4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e00f      	b.n	8002dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0202 	bic.w	r2, r2, #2
 8002df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
 8002e04:	005a      	lsls	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	3b01      	subs	r3, #1
 8002e44:	035a      	lsls	r2, r3, #13
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	e007      	b.n	8002e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051a      	lsls	r2, r3, #20
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea2:	025a      	lsls	r2, r3, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	029a      	lsls	r2, r3, #10
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40012300 	.word	0x40012300
 8002ee0:	0f000001 	.word	0x0f000001

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff29 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff3e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff31 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e16b      	b.n	80033fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	f040 815a 	bne.w	80033f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d005      	beq.n	800315a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	2b02      	cmp	r3, #2
 8003158:	d130      	bne.n	80031bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d017      	beq.n	80031f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d123      	bne.n	800324c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80b4 	beq.w	80033f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b60      	ldr	r3, [pc, #384]	; (8003414 <HAL_GPIO_Init+0x30c>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a5f      	ldr	r2, [pc, #380]	; (8003414 <HAL_GPIO_Init+0x30c>)
 8003298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_GPIO_Init+0x30c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032aa:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_GPIO_Init+0x310>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_GPIO_Init+0x314>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <HAL_GPIO_Init+0x226>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a51      	ldr	r2, [pc, #324]	; (8003420 <HAL_GPIO_Init+0x318>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x222>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a50      	ldr	r2, [pc, #320]	; (8003424 <HAL_GPIO_Init+0x31c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x21e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4f      	ldr	r2, [pc, #316]	; (8003428 <HAL_GPIO_Init+0x320>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x21a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4e      	ldr	r2, [pc, #312]	; (800342c <HAL_GPIO_Init+0x324>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x216>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_GPIO_Init+0x328>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x212>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <HAL_GPIO_Init+0x32c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4b      	ldr	r2, [pc, #300]	; (8003438 <HAL_GPIO_Init+0x330>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x20a>
 800330e:	2307      	movs	r3, #7
 8003310:	e00e      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003312:	2308      	movs	r3, #8
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003316:	2306      	movs	r3, #6
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800332e:	2300      	movs	r3, #0
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003340:	4935      	ldr	r1, [pc, #212]	; (8003418 <HAL_GPIO_Init+0x310>)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_GPIO_Init+0x334>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003372:	4a32      	ldr	r2, [pc, #200]	; (800343c <HAL_GPIO_Init+0x334>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_GPIO_Init+0x334>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_GPIO_Init+0x334>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_GPIO_Init+0x334>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_GPIO_Init+0x334>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_GPIO_Init+0x334>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_GPIO_Init+0x334>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	f67f ae90 	bls.w	8003124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40013800 	.word	0x40013800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40021400 	.word	0x40021400
 8003434:	40021800 	.word	0x40021800
 8003438:	40021c00 	.word	0x40021c00
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e001      	b.n	8003462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800348c:	e003      	b.n	8003496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fac2 	bl	8001a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40013c00 	.word	0x40013c00

080034d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e12b      	b.n	800373e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fee6 	bl	80022cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003538:	f001 f864 	bl	8004604 <HAL_RCC_GetPCLK1Freq>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a81      	ldr	r2, [pc, #516]	; (8003748 <HAL_I2C_Init+0x274>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d807      	bhi.n	8003558 <HAL_I2C_Init+0x84>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a80      	ldr	r2, [pc, #512]	; (800374c <HAL_I2C_Init+0x278>)
 800354c:	4293      	cmp	r3, r2
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e006      	b.n	8003566 <HAL_I2C_Init+0x92>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a7d      	ldr	r2, [pc, #500]	; (8003750 <HAL_I2C_Init+0x27c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0e7      	b.n	800373e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a78      	ldr	r2, [pc, #480]	; (8003754 <HAL_I2C_Init+0x280>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a6a      	ldr	r2, [pc, #424]	; (8003748 <HAL_I2C_Init+0x274>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <HAL_I2C_Init+0xd4>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	e009      	b.n	80035bc <HAL_I2C_Init+0xe8>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a69      	ldr	r2, [pc, #420]	; (8003758 <HAL_I2C_Init+0x284>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	3301      	adds	r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	495c      	ldr	r1, [pc, #368]	; (8003748 <HAL_I2C_Init+0x274>)
 80035d8:	428b      	cmp	r3, r1
 80035da:	d819      	bhi.n	8003610 <HAL_I2C_Init+0x13c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e59      	subs	r1, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_I2C_Init+0x138>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e59      	subs	r1, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fbb1 f3f3 	udiv	r3, r1, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360a:	e051      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800360c:	2304      	movs	r3, #4
 800360e:	e04f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_I2C_Init+0x168>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e012      	b.n	8003662 <HAL_I2C_Init+0x18e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	0099      	lsls	r1, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Init+0x196>
 8003666:	2301      	movs	r3, #1
 8003668:	e022      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <HAL_I2C_Init+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e58      	subs	r0, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	440b      	add	r3, r1
 8003680:	fbb0 f3f3 	udiv	r3, r0, r3
 8003684:	3301      	adds	r3, #1
 8003686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Init+0x1dc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6809      	ldr	r1, [r1, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6911      	ldr	r1, [r2, #16]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	4311      	orrs	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	000186a0 	.word	0x000186a0
 800374c:	001e847f 	.word	0x001e847f
 8003750:	003d08ff 	.word	0x003d08ff
 8003754:	431bde83 	.word	0x431bde83
 8003758:	10624dd3 	.word	0x10624dd3

0800375c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
 800376c:	4613      	mov	r3, r2
 800376e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7fe ffac 	bl	80026cc <HAL_GetTick>
 8003774:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 80e0 	bne.w	8003944 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	4970      	ldr	r1, [pc, #448]	; (8003950 <HAL_I2C_Master_Transmit+0x1f4>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f964 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e0d3      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_Master_Transmit+0x50>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0cc      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d007      	beq.n	80037d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2221      	movs	r2, #33	; 0x21
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2210      	movs	r2, #16
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	893a      	ldrh	r2, [r7, #8]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_I2C_Master_Transmit+0x1f8>)
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f89c 	bl	8003958 <I2C_MasterRequestWrite>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e08d      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003840:	e066      	b.n	8003910 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9de 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06b      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11b      	bne.n	80038e4 <HAL_I2C_Master_Transmit+0x188>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	6a39      	ldr	r1, [r7, #32]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f9ce 	bl	8003c8a <I2C_WaitOnBTFFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e01a      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d194      	bne.n	8003842 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	00100002 	.word	0x00100002
 8003954:	ffff0000 	.word	0xffff0000

08003958 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d006      	beq.n	8003982 <I2C_MasterRequestWrite+0x2a>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d003      	beq.n	8003982 <I2C_MasterRequestWrite+0x2a>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003980:	d108      	bne.n	8003994 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e00b      	b.n	80039ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b12      	cmp	r3, #18
 800399a:	d107      	bne.n	80039ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f84f 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d103      	bne.n	80039dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e035      	b.n	8003a4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e8:	d108      	bne.n	80039fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ea:	897b      	ldrh	r3, [r7, #10]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f8:	611a      	str	r2, [r3, #16]
 80039fa:	e01b      	b.n	8003a34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039fc:	897b      	ldrh	r3, [r7, #10]
 80039fe:	11db      	asrs	r3, r3, #7
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0306 	and.w	r3, r3, #6
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f063 030f 	orn	r3, r3, #15
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <I2C_MasterRequestWrite+0xfc>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f875 	bl	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e010      	b.n	8003a4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a2a:	897b      	ldrh	r3, [r7, #10]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4907      	ldr	r1, [pc, #28]	; (8003a58 <I2C_MasterRequestWrite+0x100>)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f865 	bl	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	00010008 	.word	0x00010008
 8003a58:	00010002 	.word	0x00010002

08003a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6c:	e025      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d021      	beq.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe fe29 	bl	80026cc <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e023      	b.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10d      	bne.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	e00c      	b.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d0b6      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b18:	e051      	b.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d123      	bne.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e046      	b.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d021      	beq.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7fe fda7 	bl	80026cc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e020      	b.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10c      	bne.n	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e00b      	b.n	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d18d      	bne.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c14:	e02d      	b.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f878 	bl	8003d0c <I2C_IsAcknowledgeFailed>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e02d      	b.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d021      	beq.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fd4d 	bl	80026cc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d1ca      	bne.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c96:	e02d      	b.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f837 	bl	8003d0c <I2C_IsAcknowledgeFailed>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e02d      	b.n	8003d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d021      	beq.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fe fd0c 	bl	80026cc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d1ca      	bne.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d11b      	bne.n	8003d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e264      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d075      	beq.n	8003e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8a:	4ba3      	ldr	r3, [pc, #652]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d00c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d112      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da2:	4b9d      	ldr	r3, [pc, #628]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	4b99      	ldr	r3, [pc, #612]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d05b      	beq.n	8003e74 <HAL_RCC_OscConfig+0x108>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d157      	bne.n	8003e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e23f      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_OscConfig+0x74>
 8003dd2:	4b91      	ldr	r3, [pc, #580]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a90      	ldr	r2, [pc, #576]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e01d      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x98>
 8003dea:	4b8b      	ldr	r3, [pc, #556]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a8a      	ldr	r2, [pc, #552]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b88      	ldr	r3, [pc, #544]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a87      	ldr	r2, [pc, #540]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003e04:	4b84      	ldr	r3, [pc, #528]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a83      	ldr	r2, [pc, #524]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b81      	ldr	r3, [pc, #516]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fc52 	bl	80026cc <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fc4e 	bl	80026cc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e204      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0xc0>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fc3e 	bl	80026cc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fc3a 	bl	80026cc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1f0      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0xe8>
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d063      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b62      	ldr	r3, [pc, #392]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d11c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9a:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1c4      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4952      	ldr	r1, [pc, #328]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	e03a      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003edc:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_OscConfig+0x2b0>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fbf3 	bl	80026cc <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fbef 	bl	80026cc <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1a5      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4940      	ldr	r1, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	e015      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_OscConfig+0x2b0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe fbd2 	bl	80026cc <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fbce 	bl	80026cc <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e184      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d030      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <HAL_RCC_OscConfig+0x2b4>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe fbb2 	bl	80026cc <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe fbae 	bl	80026cc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e164      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x200>
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x2b4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f92:	f7fe fb9b 	bl	80026cc <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fb97 	bl	80026cc <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e14d      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a0 	beq.w	8004106 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d121      	bne.n	8004046 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a07      	ldr	r2, [pc, #28]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fe fb5d 	bl	80026cc <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e011      	b.n	800403a <HAL_RCC_OscConfig+0x2ce>
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
 8004020:	42470e80 	.word	0x42470e80
 8004024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fe fb50 	bl	80026cc <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e106      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <HAL_RCC_OscConfig+0x4e4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d106      	bne.n	800405c <HAL_RCC_OscConfig+0x2f0>
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a80      	ldr	r2, [pc, #512]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
 800405a:	e01c      	b.n	8004096 <HAL_RCC_OscConfig+0x32a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x312>
 8004064:	4b7b      	ldr	r3, [pc, #492]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a7a      	ldr	r2, [pc, #488]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
 8004070:	4b78      	ldr	r3, [pc, #480]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a77      	ldr	r2, [pc, #476]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	e00b      	b.n	8004096 <HAL_RCC_OscConfig+0x32a>
 800407e:	4b75      	ldr	r3, [pc, #468]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a74      	ldr	r2, [pc, #464]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	4b72      	ldr	r3, [pc, #456]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a71      	ldr	r2, [pc, #452]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fe fb15 	bl	80026cc <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe fb11 	bl	80026cc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0c5      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_RCC_OscConfig+0x33a>
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe faff 	bl	80026cc <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fe fafb 	bl	80026cc <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0af      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	4b5a      	ldr	r3, [pc, #360]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ee      	bne.n	80040d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fa:	4b56      	ldr	r3, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a55      	ldr	r2, [pc, #340]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 809b 	beq.w	8004246 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004110:	4b50      	ldr	r3, [pc, #320]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d05c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d141      	bne.n	80041a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe facf 	bl	80026cc <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe facb 	bl	80026cc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e081      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	3b01      	subs	r3, #1
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	4937      	ldr	r1, [pc, #220]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe faa4 	bl	80026cc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe faa0 	bl	80026cc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e056      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x41c>
 80041a6:	e04e      	b.n	8004246 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fe fa8d 	bl	80026cc <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fa89 	bl	80026cc <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e03f      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x44a>
 80041d4:	e037      	b.n	8004246 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e032      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_RCC_OscConfig+0x4e8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d028      	beq.n	8004242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d11a      	bne.n	8004242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004212:	4013      	ands	r3, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004218:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800421a:	4293      	cmp	r3, r2
 800421c:	d111      	bne.n	8004242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	3b01      	subs	r3, #1
 800422c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40007000 	.word	0x40007000
 8004254:	40023800 	.word	0x40023800
 8004258:	42470060 	.word	0x42470060

0800425c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0cc      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d90c      	bls.n	8004298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b8      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c8:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b50      	ldr	r3, [pc, #320]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	494d      	ldr	r1, [pc, #308]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d044      	beq.n	800437c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d119      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d003      	beq.n	800431a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004316:	2b03      	cmp	r3, #3
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e067      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4934      	ldr	r1, [pc, #208]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800434c:	f7fe f9be 	bl	80026cc <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fe f9ba 	bl	80026cc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e04f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d20c      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e032      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4916      	ldr	r1, [pc, #88]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043e2:	f000 f821 	bl	8004428 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490a      	ldr	r1, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x1c0>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f91e 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023c00 	.word	0x40023c00
 8004418:	40023800 	.word	0x40023800
 800441c:	08005e90 	.word	0x08005e90
 8004420:	20000058 	.word	0x20000058
 8004424:	2000005c 	.word	0x2000005c

08004428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	2300      	movs	r3, #0
 800443a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004440:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d00d      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x40>
 800444c:	2b08      	cmp	r3, #8
 800444e:	f200 80bd 	bhi.w	80045cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x34>
 8004456:	2b04      	cmp	r3, #4
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x3a>
 800445a:	e0b7      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800445e:	60bb      	str	r3, [r7, #8]
       break;
 8004460:	e0b7      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004462:	4b61      	ldr	r3, [pc, #388]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004464:	60bb      	str	r3, [r7, #8]
      break;
 8004466:	e0b4      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004468:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004472:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d04d      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	461a      	mov	r2, r3
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	ea02 0800 	and.w	r8, r2, r0
 8004496:	ea03 0901 	and.w	r9, r3, r1
 800449a:	4640      	mov	r0, r8
 800449c:	4649      	mov	r1, r9
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	014b      	lsls	r3, r1, #5
 80044a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044ac:	0142      	lsls	r2, r0, #5
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	ebb0 0008 	subs.w	r0, r0, r8
 80044b6:	eb61 0109 	sbc.w	r1, r1, r9
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	018b      	lsls	r3, r1, #6
 80044c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044c8:	0182      	lsls	r2, r0, #6
 80044ca:	1a12      	subs	r2, r2, r0
 80044cc:	eb63 0301 	sbc.w	r3, r3, r1
 80044d0:	f04f 0000 	mov.w	r0, #0
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	00d9      	lsls	r1, r3, #3
 80044da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044de:	00d0      	lsls	r0, r2, #3
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	eb12 0208 	adds.w	r2, r2, r8
 80044e8:	eb43 0309 	adc.w	r3, r3, r9
 80044ec:	f04f 0000 	mov.w	r0, #0
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	0259      	lsls	r1, r3, #9
 80044f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044fa:	0250      	lsls	r0, r2, #9
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	f7fb feb8 	bl	8000280 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4613      	mov	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e04a      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	461a      	mov	r2, r3
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	ea02 0400 	and.w	r4, r2, r0
 8004532:	ea03 0501 	and.w	r5, r3, r1
 8004536:	4620      	mov	r0, r4
 8004538:	4629      	mov	r1, r5
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	014b      	lsls	r3, r1, #5
 8004544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004548:	0142      	lsls	r2, r0, #5
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	1b00      	subs	r0, r0, r4
 8004550:	eb61 0105 	sbc.w	r1, r1, r5
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	018b      	lsls	r3, r1, #6
 800455e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004562:	0182      	lsls	r2, r0, #6
 8004564:	1a12      	subs	r2, r2, r0
 8004566:	eb63 0301 	sbc.w	r3, r3, r1
 800456a:	f04f 0000 	mov.w	r0, #0
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	00d9      	lsls	r1, r3, #3
 8004574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004578:	00d0      	lsls	r0, r2, #3
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	1912      	adds	r2, r2, r4
 8004580:	eb45 0303 	adc.w	r3, r5, r3
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	0299      	lsls	r1, r3, #10
 800458e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004592:	0290      	lsls	r0, r2, #10
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	461a      	mov	r2, r3
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	f7fb fe6c 	bl	8000280 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	3301      	adds	r3, #1
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	60bb      	str	r3, [r7, #8]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045ce:	60bb      	str	r3, [r7, #8]
      break;
 80045d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d2:	68bb      	ldr	r3, [r7, #8]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	00f42400 	.word	0x00f42400
 80045e8:	007a1200 	.word	0x007a1200

080045ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <HAL_RCC_GetHCLKFreq+0x14>)
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000058 	.word	0x20000058

08004604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004608:	f7ff fff0 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0a9b      	lsrs	r3, r3, #10
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	08005ea0 	.word	0x08005ea0

0800462c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004630:	f7ff ffdc 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0b5b      	lsrs	r3, r3, #13
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40023800 	.word	0x40023800
 8004650:	08005ea0 	.word	0x08005ea0

08004654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e041      	b.n	80046ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fd fe6e 	bl	800235c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 f95e 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e046      	b.n	800479a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <HAL_TIM_Base_Start+0xb4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d01d      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_TIM_Base_Start+0xb8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_TIM_Base_Start+0xbc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIM_Base_Start+0xc0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <HAL_TIM_Base_Start+0xc4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a19      	ldr	r2, [pc, #100]	; (80047bc <HAL_TIM_Base_Start+0xc8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_Base_Start+0x70>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_TIM_Base_Start+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d111      	bne.n	8004788 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d010      	beq.n	8004798 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004786:	e007      	b.n	8004798 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40010400 	.word	0x40010400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40001800 	.word	0x40001800

080047c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_ConfigClockSource+0x1c>
 80047dc:	2302      	movs	r3, #2
 80047de:	e0b4      	b.n	800494a <HAL_TIM_ConfigClockSource+0x186>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d03e      	beq.n	8004898 <HAL_TIM_ConfigClockSource+0xd4>
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	f200 8087 	bhi.w	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	f000 8086 	beq.w	8004936 <HAL_TIM_ConfigClockSource+0x172>
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d87f      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d01a      	beq.n	800486a <HAL_TIM_ConfigClockSource+0xa6>
 8004834:	2b70      	cmp	r3, #112	; 0x70
 8004836:	d87b      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d050      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x11a>
 800483c:	2b60      	cmp	r3, #96	; 0x60
 800483e:	d877      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d03c      	beq.n	80048be <HAL_TIM_ConfigClockSource+0xfa>
 8004844:	2b50      	cmp	r3, #80	; 0x50
 8004846:	d873      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d058      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x13a>
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d86f      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d064      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	2b30      	cmp	r3, #48	; 0x30
 8004856:	d86b      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d060      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15a>
 800485c:	2b20      	cmp	r3, #32
 800485e:	d867      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d05c      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b10      	cmp	r3, #16
 8004866:	d05a      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	e062      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6899      	ldr	r1, [r3, #8]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f000 f985 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800488c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]
      break;
 8004896:	e04f      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f000 f96e 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ba:	609a      	str	r2, [r3, #8]
      break;
 80048bc:	e03c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 f8e2 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2150      	movs	r1, #80	; 0x50
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f93b 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048dc:	e02c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 f901 	bl	8004af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2160      	movs	r1, #96	; 0x60
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f92b 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e01c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f8c2 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2140      	movs	r1, #64	; 0x40
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f91b 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800491c:	e00c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f000 f912 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800492e:	e003      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      break;
 8004934:	e000      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d027      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d023      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <TIM_Base_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 0307 	orr.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e05a      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d01d      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40001800 	.word	0x40001800

08004cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e03f      	b.n	8004d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fd fb70 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	; 0x24
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f9cb 	bl	80050a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d17c      	bne.n	8004e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_Transmit+0x2c>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e075      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit+0x3e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e06e      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dae:	f7fd fc8d 	bl	80026cc <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_Transmit+0x82>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e003      	b.n	8004de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dec:	e02a      	b.n	8004e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f8e2 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e036      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3302      	adds	r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e007      	b.n	8004e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1cf      	bne.n	8004dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2140      	movs	r1, #64	; 0x40
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f8b2 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e006      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08a      	sub	sp, #40	; 0x28
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	f040 808c 	bne.w	8004fb8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Receive+0x2e>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e084      	b.n	8004fba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Receive+0x40>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e07d      	b.n	8004fba <HAL_UART_Receive+0x13c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2222      	movs	r2, #34	; 0x22
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eda:	f7fd fbf7 	bl	80026cc <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Receive+0x8a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f18:	e043      	b.n	8004fa2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2120      	movs	r1, #32
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f84c 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e042      	b.n	8004fba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10c      	bne.n	8004f54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	3302      	adds	r3, #2
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e01f      	b.n	8004f94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5c:	d007      	beq.n	8004f6e <HAL_UART_Receive+0xf0>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_UART_Receive+0xfe>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e008      	b.n	8004f8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1b6      	bne.n	8004f1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b090      	sub	sp, #64	; 0x40
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd2:	e050      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d04c      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	f7fd fb73 	bl	80026cc <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d241      	bcs.n	8005076 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005012:	637a      	str	r2, [r7, #52]	; 0x34
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	613b      	str	r3, [r7, #16]
   return(result);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005046:	623a      	str	r2, [r7, #32]
 8005048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	61bb      	str	r3, [r7, #24]
   return(result);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d09f      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3740      	adds	r7, #64	; 0x40
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b09f      	sub	sp, #124	; 0x7c
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	ea40 0301 	orr.w	r3, r0, r1
 80050c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e4:	f021 010c 	bic.w	r1, r1, #12
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ee:	430b      	orrs	r3, r1
 80050f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	6999      	ldr	r1, [r3, #24]
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	ea40 0301 	orr.w	r3, r0, r1
 8005108:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4bc5      	ldr	r3, [pc, #788]	; (8005424 <UART_SetConfig+0x384>)
 8005110:	429a      	cmp	r2, r3
 8005112:	d004      	beq.n	800511e <UART_SetConfig+0x7e>
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4bc3      	ldr	r3, [pc, #780]	; (8005428 <UART_SetConfig+0x388>)
 800511a:	429a      	cmp	r2, r3
 800511c:	d103      	bne.n	8005126 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800511e:	f7ff fa85 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8005122:	6778      	str	r0, [r7, #116]	; 0x74
 8005124:	e002      	b.n	800512c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005126:	f7ff fa6d 	bl	8004604 <HAL_RCC_GetPCLK1Freq>
 800512a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005134:	f040 80b6 	bne.w	80052a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513a:	461c      	mov	r4, r3
 800513c:	f04f 0500 	mov.w	r5, #0
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	1891      	adds	r1, r2, r2
 8005146:	6439      	str	r1, [r7, #64]	; 0x40
 8005148:	415b      	adcs	r3, r3
 800514a:	647b      	str	r3, [r7, #68]	; 0x44
 800514c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005150:	1912      	adds	r2, r2, r4
 8005152:	eb45 0303 	adc.w	r3, r5, r3
 8005156:	f04f 0000 	mov.w	r0, #0
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	00d9      	lsls	r1, r3, #3
 8005160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005164:	00d0      	lsls	r0, r2, #3
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	1911      	adds	r1, r2, r4
 800516c:	6639      	str	r1, [r7, #96]	; 0x60
 800516e:	416b      	adcs	r3, r5
 8005170:	667b      	str	r3, [r7, #100]	; 0x64
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	1891      	adds	r1, r2, r2
 800517e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005180:	415b      	adcs	r3, r3
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005188:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800518c:	f7fb f878 	bl	8000280 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4ba5      	ldr	r3, [pc, #660]	; (800542c <UART_SetConfig+0x38c>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011e      	lsls	r6, r3, #4
 800519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a0:	461c      	mov	r4, r3
 80051a2:	f04f 0500 	mov.w	r5, #0
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	1891      	adds	r1, r2, r2
 80051ac:	6339      	str	r1, [r7, #48]	; 0x30
 80051ae:	415b      	adcs	r3, r3
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
 80051b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051b6:	1912      	adds	r2, r2, r4
 80051b8:	eb45 0303 	adc.w	r3, r5, r3
 80051bc:	f04f 0000 	mov.w	r0, #0
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	00d9      	lsls	r1, r3, #3
 80051c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ca:	00d0      	lsls	r0, r2, #3
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	1911      	adds	r1, r2, r4
 80051d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80051d4:	416b      	adcs	r3, r5
 80051d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	1891      	adds	r1, r2, r2
 80051e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e6:	415b      	adcs	r3, r3
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051f2:	f7fb f845 	bl	8000280 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4b8c      	ldr	r3, [pc, #560]	; (800542c <UART_SetConfig+0x38c>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a87      	ldr	r2, [pc, #540]	; (800542c <UART_SetConfig+0x38c>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800521c:	441e      	add	r6, r3
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	4618      	mov	r0, r3
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	1894      	adds	r4, r2, r2
 800522c:	623c      	str	r4, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	1812      	adds	r2, r2, r0
 8005238:	eb41 0303 	adc.w	r3, r1, r3
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	00dd      	lsls	r5, r3, #3
 8005246:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800524a:	00d4      	lsls	r4, r2, #3
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	1814      	adds	r4, r2, r0
 8005252:	653c      	str	r4, [r7, #80]	; 0x50
 8005254:	414b      	adcs	r3, r1
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	1891      	adds	r1, r2, r2
 8005264:	61b9      	str	r1, [r7, #24]
 8005266:	415b      	adcs	r3, r3
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005272:	f7fb f805 	bl	8000280 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b6c      	ldr	r3, [pc, #432]	; (800542c <UART_SetConfig+0x38c>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a67      	ldr	r2, [pc, #412]	; (800542c <UART_SetConfig+0x38c>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 0207 	and.w	r2, r3, #7
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4432      	add	r2, r6
 80052a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a2:	e0b9      	b.n	8005418 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a6:	461c      	mov	r4, r3
 80052a8:	f04f 0500 	mov.w	r5, #0
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	1891      	adds	r1, r2, r2
 80052b2:	6139      	str	r1, [r7, #16]
 80052b4:	415b      	adcs	r3, r3
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052bc:	1912      	adds	r2, r2, r4
 80052be:	eb45 0303 	adc.w	r3, r5, r3
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	00d9      	lsls	r1, r3, #3
 80052cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d0:	00d0      	lsls	r0, r2, #3
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	eb12 0804 	adds.w	r8, r2, r4
 80052da:	eb43 0905 	adc.w	r9, r3, r5
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052f6:	0082      	lsls	r2, r0, #2
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fa ffc0 	bl	8000280 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4b49      	ldr	r3, [pc, #292]	; (800542c <UART_SetConfig+0x38c>)
 8005306:	fba3 2302 	umull	r2, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011e      	lsls	r6, r3, #4
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	4618      	mov	r0, r3
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	1894      	adds	r4, r2, r2
 800531c:	60bc      	str	r4, [r7, #8]
 800531e:	415b      	adcs	r3, r3
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005326:	1812      	adds	r2, r2, r0
 8005328:	eb41 0303 	adc.w	r3, r1, r3
 800532c:	f04f 0400 	mov.w	r4, #0
 8005330:	f04f 0500 	mov.w	r5, #0
 8005334:	00dd      	lsls	r5, r3, #3
 8005336:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800533a:	00d4      	lsls	r4, r2, #3
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	1814      	adds	r4, r2, r0
 8005342:	64bc      	str	r4, [r7, #72]	; 0x48
 8005344:	414b      	adcs	r3, r1
 8005346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	008b      	lsls	r3, r1, #2
 800535c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005360:	0082      	lsls	r2, r0, #2
 8005362:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005366:	f7fa ff8b 	bl	8000280 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b2f      	ldr	r3, [pc, #188]	; (800542c <UART_SetConfig+0x38c>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a2a      	ldr	r2, [pc, #168]	; (800542c <UART_SetConfig+0x38c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	441e      	add	r6, r3
 8005390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005392:	4618      	mov	r0, r3
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	1894      	adds	r4, r2, r2
 800539e:	603c      	str	r4, [r7, #0]
 80053a0:	415b      	adcs	r3, r3
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a8:	1812      	adds	r2, r2, r0
 80053aa:	eb41 0303 	adc.w	r3, r1, r3
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	f04f 0500 	mov.w	r5, #0
 80053b6:	00dd      	lsls	r5, r3, #3
 80053b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053bc:	00d4      	lsls	r4, r2, #3
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	eb12 0a00 	adds.w	sl, r2, r0
 80053c6:	eb43 0b01 	adc.w	fp, r3, r1
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	008b      	lsls	r3, r1, #2
 80053de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053e2:	0082      	lsls	r2, r0, #2
 80053e4:	4650      	mov	r0, sl
 80053e6:	4659      	mov	r1, fp
 80053e8:	f7fa ff4a 	bl	8000280 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <UART_SetConfig+0x38c>)
 80053f2:	fba3 1302 	umull	r1, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2164      	movs	r1, #100	; 0x64
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	; 0x32
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <UART_SetConfig+0x38c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4432      	add	r2, r6
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	377c      	adds	r7, #124	; 0x7c
 800541c:	46bd      	mov	sp, r7
 800541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005422:	bf00      	nop
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f

08005430 <__errno>:
 8005430:	4b01      	ldr	r3, [pc, #4]	; (8005438 <__errno+0x8>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000064 	.word	0x20000064

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4d0d      	ldr	r5, [pc, #52]	; (8005474 <__libc_init_array+0x38>)
 8005440:	4c0d      	ldr	r4, [pc, #52]	; (8005478 <__libc_init_array+0x3c>)
 8005442:	1b64      	subs	r4, r4, r5
 8005444:	10a4      	asrs	r4, r4, #2
 8005446:	2600      	movs	r6, #0
 8005448:	42a6      	cmp	r6, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	4d0b      	ldr	r5, [pc, #44]	; (800547c <__libc_init_array+0x40>)
 800544e:	4c0c      	ldr	r4, [pc, #48]	; (8005480 <__libc_init_array+0x44>)
 8005450:	f000 fc4e 	bl	8005cf0 <_init>
 8005454:	1b64      	subs	r4, r4, r5
 8005456:	10a4      	asrs	r4, r4, #2
 8005458:	2600      	movs	r6, #0
 800545a:	42a6      	cmp	r6, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f855 3b04 	ldr.w	r3, [r5], #4
 8005464:	4798      	blx	r3
 8005466:	3601      	adds	r6, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	f855 3b04 	ldr.w	r3, [r5], #4
 800546e:	4798      	blx	r3
 8005470:	3601      	adds	r6, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	08005ee4 	.word	0x08005ee4
 8005478:	08005ee4 	.word	0x08005ee4
 800547c:	08005ee4 	.word	0x08005ee4
 8005480:	08005ee8 	.word	0x08005ee8

08005484 <memset>:
 8005484:	4402      	add	r2, r0
 8005486:	4603      	mov	r3, r0
 8005488:	4293      	cmp	r3, r2
 800548a:	d100      	bne.n	800548e <memset+0xa>
 800548c:	4770      	bx	lr
 800548e:	f803 1b01 	strb.w	r1, [r3], #1
 8005492:	e7f9      	b.n	8005488 <memset+0x4>

08005494 <siprintf>:
 8005494:	b40e      	push	{r1, r2, r3}
 8005496:	b500      	push	{lr}
 8005498:	b09c      	sub	sp, #112	; 0x70
 800549a:	ab1d      	add	r3, sp, #116	; 0x74
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	9006      	str	r0, [sp, #24]
 80054a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054a4:	4809      	ldr	r0, [pc, #36]	; (80054cc <siprintf+0x38>)
 80054a6:	9107      	str	r1, [sp, #28]
 80054a8:	9104      	str	r1, [sp, #16]
 80054aa:	4909      	ldr	r1, [pc, #36]	; (80054d0 <siprintf+0x3c>)
 80054ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	a902      	add	r1, sp, #8
 80054b8:	f000 f868 	bl	800558c <_svfiprintf_r>
 80054bc:	9b02      	ldr	r3, [sp, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	b01c      	add	sp, #112	; 0x70
 80054c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c8:	b003      	add	sp, #12
 80054ca:	4770      	bx	lr
 80054cc:	20000064 	.word	0x20000064
 80054d0:	ffff0208 	.word	0xffff0208

080054d4 <__ssputs_r>:
 80054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	688e      	ldr	r6, [r1, #8]
 80054da:	429e      	cmp	r6, r3
 80054dc:	4682      	mov	sl, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	4690      	mov	r8, r2
 80054e2:	461f      	mov	r7, r3
 80054e4:	d838      	bhi.n	8005558 <__ssputs_r+0x84>
 80054e6:	898a      	ldrh	r2, [r1, #12]
 80054e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054ec:	d032      	beq.n	8005554 <__ssputs_r+0x80>
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	6909      	ldr	r1, [r1, #16]
 80054f2:	eba5 0901 	sub.w	r9, r5, r1
 80054f6:	6965      	ldr	r5, [r4, #20]
 80054f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005500:	3301      	adds	r3, #1
 8005502:	444b      	add	r3, r9
 8005504:	106d      	asrs	r5, r5, #1
 8005506:	429d      	cmp	r5, r3
 8005508:	bf38      	it	cc
 800550a:	461d      	movcc	r5, r3
 800550c:	0553      	lsls	r3, r2, #21
 800550e:	d531      	bpl.n	8005574 <__ssputs_r+0xa0>
 8005510:	4629      	mov	r1, r5
 8005512:	f000 fb47 	bl	8005ba4 <_malloc_r>
 8005516:	4606      	mov	r6, r0
 8005518:	b950      	cbnz	r0, 8005530 <__ssputs_r+0x5c>
 800551a:	230c      	movs	r3, #12
 800551c:	f8ca 3000 	str.w	r3, [sl]
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	6921      	ldr	r1, [r4, #16]
 8005532:	464a      	mov	r2, r9
 8005534:	f000 fabe 	bl	8005ab4 <memcpy>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	6126      	str	r6, [r4, #16]
 8005546:	6165      	str	r5, [r4, #20]
 8005548:	444e      	add	r6, r9
 800554a:	eba5 0509 	sub.w	r5, r5, r9
 800554e:	6026      	str	r6, [r4, #0]
 8005550:	60a5      	str	r5, [r4, #8]
 8005552:	463e      	mov	r6, r7
 8005554:	42be      	cmp	r6, r7
 8005556:	d900      	bls.n	800555a <__ssputs_r+0x86>
 8005558:	463e      	mov	r6, r7
 800555a:	4632      	mov	r2, r6
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4641      	mov	r1, r8
 8005560:	f000 fab6 	bl	8005ad0 <memmove>
 8005564:	68a3      	ldr	r3, [r4, #8]
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	1b9b      	subs	r3, r3, r6
 800556a:	4432      	add	r2, r6
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	6022      	str	r2, [r4, #0]
 8005570:	2000      	movs	r0, #0
 8005572:	e7db      	b.n	800552c <__ssputs_r+0x58>
 8005574:	462a      	mov	r2, r5
 8005576:	f000 fb6f 	bl	8005c58 <_realloc_r>
 800557a:	4606      	mov	r6, r0
 800557c:	2800      	cmp	r0, #0
 800557e:	d1e1      	bne.n	8005544 <__ssputs_r+0x70>
 8005580:	6921      	ldr	r1, [r4, #16]
 8005582:	4650      	mov	r0, sl
 8005584:	f000 fabe 	bl	8005b04 <_free_r>
 8005588:	e7c7      	b.n	800551a <__ssputs_r+0x46>
	...

0800558c <_svfiprintf_r>:
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	4698      	mov	r8, r3
 8005592:	898b      	ldrh	r3, [r1, #12]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	b09d      	sub	sp, #116	; 0x74
 8005598:	4607      	mov	r7, r0
 800559a:	460d      	mov	r5, r1
 800559c:	4614      	mov	r4, r2
 800559e:	d50e      	bpl.n	80055be <_svfiprintf_r+0x32>
 80055a0:	690b      	ldr	r3, [r1, #16]
 80055a2:	b963      	cbnz	r3, 80055be <_svfiprintf_r+0x32>
 80055a4:	2140      	movs	r1, #64	; 0x40
 80055a6:	f000 fafd 	bl	8005ba4 <_malloc_r>
 80055aa:	6028      	str	r0, [r5, #0]
 80055ac:	6128      	str	r0, [r5, #16]
 80055ae:	b920      	cbnz	r0, 80055ba <_svfiprintf_r+0x2e>
 80055b0:	230c      	movs	r3, #12
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e0d1      	b.n	800575e <_svfiprintf_r+0x1d2>
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	616b      	str	r3, [r5, #20]
 80055be:	2300      	movs	r3, #0
 80055c0:	9309      	str	r3, [sp, #36]	; 0x24
 80055c2:	2320      	movs	r3, #32
 80055c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055cc:	2330      	movs	r3, #48	; 0x30
 80055ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005778 <_svfiprintf_r+0x1ec>
 80055d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d6:	f04f 0901 	mov.w	r9, #1
 80055da:	4623      	mov	r3, r4
 80055dc:	469a      	mov	sl, r3
 80055de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055e2:	b10a      	cbz	r2, 80055e8 <_svfiprintf_r+0x5c>
 80055e4:	2a25      	cmp	r2, #37	; 0x25
 80055e6:	d1f9      	bne.n	80055dc <_svfiprintf_r+0x50>
 80055e8:	ebba 0b04 	subs.w	fp, sl, r4
 80055ec:	d00b      	beq.n	8005606 <_svfiprintf_r+0x7a>
 80055ee:	465b      	mov	r3, fp
 80055f0:	4622      	mov	r2, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff ff6d 	bl	80054d4 <__ssputs_r>
 80055fa:	3001      	adds	r0, #1
 80055fc:	f000 80aa 	beq.w	8005754 <_svfiprintf_r+0x1c8>
 8005600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005602:	445a      	add	r2, fp
 8005604:	9209      	str	r2, [sp, #36]	; 0x24
 8005606:	f89a 3000 	ldrb.w	r3, [sl]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80a2 	beq.w	8005754 <_svfiprintf_r+0x1c8>
 8005610:	2300      	movs	r3, #0
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800561a:	f10a 0a01 	add.w	sl, sl, #1
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	9307      	str	r3, [sp, #28]
 8005622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005626:	931a      	str	r3, [sp, #104]	; 0x68
 8005628:	4654      	mov	r4, sl
 800562a:	2205      	movs	r2, #5
 800562c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005630:	4851      	ldr	r0, [pc, #324]	; (8005778 <_svfiprintf_r+0x1ec>)
 8005632:	f7fa fdd5 	bl	80001e0 <memchr>
 8005636:	9a04      	ldr	r2, [sp, #16]
 8005638:	b9d8      	cbnz	r0, 8005672 <_svfiprintf_r+0xe6>
 800563a:	06d0      	lsls	r0, r2, #27
 800563c:	bf44      	itt	mi
 800563e:	2320      	movmi	r3, #32
 8005640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005644:	0711      	lsls	r1, r2, #28
 8005646:	bf44      	itt	mi
 8005648:	232b      	movmi	r3, #43	; 0x2b
 800564a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564e:	f89a 3000 	ldrb.w	r3, [sl]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d015      	beq.n	8005682 <_svfiprintf_r+0xf6>
 8005656:	9a07      	ldr	r2, [sp, #28]
 8005658:	4654      	mov	r4, sl
 800565a:	2000      	movs	r0, #0
 800565c:	f04f 0c0a 	mov.w	ip, #10
 8005660:	4621      	mov	r1, r4
 8005662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005666:	3b30      	subs	r3, #48	; 0x30
 8005668:	2b09      	cmp	r3, #9
 800566a:	d94e      	bls.n	800570a <_svfiprintf_r+0x17e>
 800566c:	b1b0      	cbz	r0, 800569c <_svfiprintf_r+0x110>
 800566e:	9207      	str	r2, [sp, #28]
 8005670:	e014      	b.n	800569c <_svfiprintf_r+0x110>
 8005672:	eba0 0308 	sub.w	r3, r0, r8
 8005676:	fa09 f303 	lsl.w	r3, r9, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	46a2      	mov	sl, r4
 8005680:	e7d2      	b.n	8005628 <_svfiprintf_r+0x9c>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	1d19      	adds	r1, r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	9103      	str	r1, [sp, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	bfbb      	ittet	lt
 800568e:	425b      	neglt	r3, r3
 8005690:	f042 0202 	orrlt.w	r2, r2, #2
 8005694:	9307      	strge	r3, [sp, #28]
 8005696:	9307      	strlt	r3, [sp, #28]
 8005698:	bfb8      	it	lt
 800569a:	9204      	strlt	r2, [sp, #16]
 800569c:	7823      	ldrb	r3, [r4, #0]
 800569e:	2b2e      	cmp	r3, #46	; 0x2e
 80056a0:	d10c      	bne.n	80056bc <_svfiprintf_r+0x130>
 80056a2:	7863      	ldrb	r3, [r4, #1]
 80056a4:	2b2a      	cmp	r3, #42	; 0x2a
 80056a6:	d135      	bne.n	8005714 <_svfiprintf_r+0x188>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	9203      	str	r2, [sp, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bfb8      	it	lt
 80056b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b8:	3402      	adds	r4, #2
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005788 <_svfiprintf_r+0x1fc>
 80056c0:	7821      	ldrb	r1, [r4, #0]
 80056c2:	2203      	movs	r2, #3
 80056c4:	4650      	mov	r0, sl
 80056c6:	f7fa fd8b 	bl	80001e0 <memchr>
 80056ca:	b140      	cbz	r0, 80056de <_svfiprintf_r+0x152>
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	eba0 000a 	sub.w	r0, r0, sl
 80056d2:	fa03 f000 	lsl.w	r0, r3, r0
 80056d6:	9b04      	ldr	r3, [sp, #16]
 80056d8:	4303      	orrs	r3, r0
 80056da:	3401      	adds	r4, #1
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e2:	4826      	ldr	r0, [pc, #152]	; (800577c <_svfiprintf_r+0x1f0>)
 80056e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e8:	2206      	movs	r2, #6
 80056ea:	f7fa fd79 	bl	80001e0 <memchr>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d038      	beq.n	8005764 <_svfiprintf_r+0x1d8>
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <_svfiprintf_r+0x1f4>)
 80056f4:	bb1b      	cbnz	r3, 800573e <_svfiprintf_r+0x1b2>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	3307      	adds	r3, #7
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	3308      	adds	r3, #8
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	4433      	add	r3, r6
 8005706:	9309      	str	r3, [sp, #36]	; 0x24
 8005708:	e767      	b.n	80055da <_svfiprintf_r+0x4e>
 800570a:	fb0c 3202 	mla	r2, ip, r2, r3
 800570e:	460c      	mov	r4, r1
 8005710:	2001      	movs	r0, #1
 8005712:	e7a5      	b.n	8005660 <_svfiprintf_r+0xd4>
 8005714:	2300      	movs	r3, #0
 8005716:	3401      	adds	r4, #1
 8005718:	9305      	str	r3, [sp, #20]
 800571a:	4619      	mov	r1, r3
 800571c:	f04f 0c0a 	mov.w	ip, #10
 8005720:	4620      	mov	r0, r4
 8005722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005726:	3a30      	subs	r2, #48	; 0x30
 8005728:	2a09      	cmp	r2, #9
 800572a:	d903      	bls.n	8005734 <_svfiprintf_r+0x1a8>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0c5      	beq.n	80056bc <_svfiprintf_r+0x130>
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	e7c3      	b.n	80056bc <_svfiprintf_r+0x130>
 8005734:	fb0c 2101 	mla	r1, ip, r1, r2
 8005738:	4604      	mov	r4, r0
 800573a:	2301      	movs	r3, #1
 800573c:	e7f0      	b.n	8005720 <_svfiprintf_r+0x194>
 800573e:	ab03      	add	r3, sp, #12
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	462a      	mov	r2, r5
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <_svfiprintf_r+0x1f8>)
 8005746:	a904      	add	r1, sp, #16
 8005748:	4638      	mov	r0, r7
 800574a:	f3af 8000 	nop.w
 800574e:	1c42      	adds	r2, r0, #1
 8005750:	4606      	mov	r6, r0
 8005752:	d1d6      	bne.n	8005702 <_svfiprintf_r+0x176>
 8005754:	89ab      	ldrh	r3, [r5, #12]
 8005756:	065b      	lsls	r3, r3, #25
 8005758:	f53f af2c 	bmi.w	80055b4 <_svfiprintf_r+0x28>
 800575c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800575e:	b01d      	add	sp, #116	; 0x74
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	ab03      	add	r3, sp, #12
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	462a      	mov	r2, r5
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <_svfiprintf_r+0x1f8>)
 800576c:	a904      	add	r1, sp, #16
 800576e:	4638      	mov	r0, r7
 8005770:	f000 f87a 	bl	8005868 <_printf_i>
 8005774:	e7eb      	b.n	800574e <_svfiprintf_r+0x1c2>
 8005776:	bf00      	nop
 8005778:	08005ea8 	.word	0x08005ea8
 800577c:	08005eb2 	.word	0x08005eb2
 8005780:	00000000 	.word	0x00000000
 8005784:	080054d5 	.word	0x080054d5
 8005788:	08005eae 	.word	0x08005eae

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4616      	mov	r6, r2
 8005792:	4699      	mov	r9, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a8:	4607      	mov	r7, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b10a      	cbz	r2, 80057b2 <_printf_common+0x26>
 80057ae:	3301      	adds	r3, #1
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	0699      	lsls	r1, r3, #26
 80057b6:	bf42      	ittt	mi
 80057b8:	6833      	ldrmi	r3, [r6, #0]
 80057ba:	3302      	addmi	r3, #2
 80057bc:	6033      	strmi	r3, [r6, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	f015 0506 	ands.w	r5, r5, #6
 80057c4:	d106      	bne.n	80057d4 <_printf_common+0x48>
 80057c6:	f104 0a19 	add.w	sl, r4, #25
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dc26      	bgt.n	8005822 <_printf_common+0x96>
 80057d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d8:	1e13      	subs	r3, r2, #0
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	bf18      	it	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d42b      	bmi.n	800583c <_printf_common+0xb0>
 80057e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e8:	4649      	mov	r1, r9
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d01e      	beq.n	8005830 <_printf_common+0xa4>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	68e5      	ldr	r5, [r4, #12]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	f003 0306 	and.w	r3, r3, #6
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	bf08      	it	eq
 8005800:	1aad      	subeq	r5, r5, r2
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	bf0c      	ite	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	2500      	movne	r5, #0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfc4      	itt	gt
 8005812:	1a9b      	subgt	r3, r3, r2
 8005814:	18ed      	addgt	r5, r5, r3
 8005816:	2600      	movs	r6, #0
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xc8>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xa8>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4649      	mov	r1, r9
 8005828:	4638      	mov	r0, r7
 800582a:	47c0      	blx	r8
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xac>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c6      	b.n	80057ca <_printf_common+0x3e>
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	2030      	movs	r0, #48	; 0x30
 8005842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005846:	4422      	add	r2, r4
 8005848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800584c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005850:	3302      	adds	r3, #2
 8005852:	e7c7      	b.n	80057e4 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	47c0      	blx	r8
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa4>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x8e>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	4691      	mov	r9, r2
 8005870:	7e27      	ldrb	r7, [r4, #24]
 8005872:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005874:	2f78      	cmp	r7, #120	; 0x78
 8005876:	4680      	mov	r8, r0
 8005878:	469a      	mov	sl, r3
 800587a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	; 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d8 	beq.w	8005a3a <_printf_i+0x1d2>
 800588a:	2f58      	cmp	r7, #88	; 0x58
 800588c:	f000 80a3 	beq.w	80059d6 <_printf_i+0x16e>
 8005890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a001      	add	r0, pc, #4	; (adr r0, 80058a8 <_printf_i+0x40>)
 80058a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a21 	.word	0x08005a21
 80058d8:	08005945 	.word	0x08005945
 80058dc:	08005a03 	.word	0x08005a03
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a43 	.word	0x08005a43
 80058ec:	08005891 	.word	0x08005891
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	08005a0b 	.word	0x08005a0b
 8005900:	680b      	ldr	r3, [r1, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	600a      	str	r2, [r1, #0]
 8005908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e0a3      	b.n	8005a5c <_printf_i+0x1f4>
 8005914:	6825      	ldr	r5, [r4, #0]
 8005916:	6808      	ldr	r0, [r1, #0]
 8005918:	062e      	lsls	r6, r5, #24
 800591a:	f100 0304 	add.w	r3, r0, #4
 800591e:	d50a      	bpl.n	8005936 <_printf_i+0xce>
 8005920:	6805      	ldr	r5, [r0, #0]
 8005922:	600b      	str	r3, [r1, #0]
 8005924:	2d00      	cmp	r5, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xc8>
 8005928:	232d      	movs	r3, #45	; 0x2d
 800592a:	426d      	negs	r5, r5
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005930:	485e      	ldr	r0, [pc, #376]	; (8005aac <_printf_i+0x244>)
 8005932:	230a      	movs	r3, #10
 8005934:	e019      	b.n	800596a <_printf_i+0x102>
 8005936:	f015 0f40 	tst.w	r5, #64	; 0x40
 800593a:	6805      	ldr	r5, [r0, #0]
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	bf18      	it	ne
 8005940:	b22d      	sxthne	r5, r5
 8005942:	e7ef      	b.n	8005924 <_printf_i+0xbc>
 8005944:	680b      	ldr	r3, [r1, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	1d18      	adds	r0, r3, #4
 800594a:	6008      	str	r0, [r1, #0]
 800594c:	0628      	lsls	r0, r5, #24
 800594e:	d501      	bpl.n	8005954 <_printf_i+0xec>
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	e002      	b.n	800595a <_printf_i+0xf2>
 8005954:	0669      	lsls	r1, r5, #25
 8005956:	d5fb      	bpl.n	8005950 <_printf_i+0xe8>
 8005958:	881d      	ldrh	r5, [r3, #0]
 800595a:	4854      	ldr	r0, [pc, #336]	; (8005aac <_printf_i+0x244>)
 800595c:	2f6f      	cmp	r7, #111	; 0x6f
 800595e:	bf0c      	ite	eq
 8005960:	2308      	moveq	r3, #8
 8005962:	230a      	movne	r3, #10
 8005964:	2100      	movs	r1, #0
 8005966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800596a:	6866      	ldr	r6, [r4, #4]
 800596c:	60a6      	str	r6, [r4, #8]
 800596e:	2e00      	cmp	r6, #0
 8005970:	bfa2      	ittt	ge
 8005972:	6821      	ldrge	r1, [r4, #0]
 8005974:	f021 0104 	bicge.w	r1, r1, #4
 8005978:	6021      	strge	r1, [r4, #0]
 800597a:	b90d      	cbnz	r5, 8005980 <_printf_i+0x118>
 800597c:	2e00      	cmp	r6, #0
 800597e:	d04d      	beq.n	8005a1c <_printf_i+0x1b4>
 8005980:	4616      	mov	r6, r2
 8005982:	fbb5 f1f3 	udiv	r1, r5, r3
 8005986:	fb03 5711 	mls	r7, r3, r1, r5
 800598a:	5dc7      	ldrb	r7, [r0, r7]
 800598c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005990:	462f      	mov	r7, r5
 8005992:	42bb      	cmp	r3, r7
 8005994:	460d      	mov	r5, r1
 8005996:	d9f4      	bls.n	8005982 <_printf_i+0x11a>
 8005998:	2b08      	cmp	r3, #8
 800599a:	d10b      	bne.n	80059b4 <_printf_i+0x14c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	d508      	bpl.n	80059b4 <_printf_i+0x14c>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4299      	cmp	r1, r3
 80059a8:	bfde      	ittt	le
 80059aa:	2330      	movle	r3, #48	; 0x30
 80059ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059b4:	1b92      	subs	r2, r2, r6
 80059b6:	6122      	str	r2, [r4, #16]
 80059b8:	f8cd a000 	str.w	sl, [sp]
 80059bc:	464b      	mov	r3, r9
 80059be:	aa03      	add	r2, sp, #12
 80059c0:	4621      	mov	r1, r4
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff fee2 	bl	800578c <_printf_common>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d14c      	bne.n	8005a66 <_printf_i+0x1fe>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b004      	add	sp, #16
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	4835      	ldr	r0, [pc, #212]	; (8005aac <_printf_i+0x244>)
 80059d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	680e      	ldr	r6, [r1, #0]
 80059e0:	061f      	lsls	r7, r3, #24
 80059e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059e6:	600e      	str	r6, [r1, #0]
 80059e8:	d514      	bpl.n	8005a14 <_printf_i+0x1ac>
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	bf44      	itt	mi
 80059ee:	f043 0320 	orrmi.w	r3, r3, #32
 80059f2:	6023      	strmi	r3, [r4, #0]
 80059f4:	b91d      	cbnz	r5, 80059fe <_printf_i+0x196>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f023 0320 	bic.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	2310      	movs	r3, #16
 8005a00:	e7b0      	b.n	8005964 <_printf_i+0xfc>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f043 0320 	orr.w	r3, r3, #32
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	2378      	movs	r3, #120	; 0x78
 8005a0c:	4828      	ldr	r0, [pc, #160]	; (8005ab0 <_printf_i+0x248>)
 8005a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a12:	e7e3      	b.n	80059dc <_printf_i+0x174>
 8005a14:	065e      	lsls	r6, r3, #25
 8005a16:	bf48      	it	mi
 8005a18:	b2ad      	uxthmi	r5, r5
 8005a1a:	e7e6      	b.n	80059ea <_printf_i+0x182>
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	e7bb      	b.n	8005998 <_printf_i+0x130>
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	6826      	ldr	r6, [r4, #0]
 8005a24:	6960      	ldr	r0, [r4, #20]
 8005a26:	1d1d      	adds	r5, r3, #4
 8005a28:	600d      	str	r5, [r1, #0]
 8005a2a:	0635      	lsls	r5, r6, #24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0x1cc>
 8005a30:	6018      	str	r0, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <_printf_i+0x1d2>
 8005a34:	0671      	lsls	r1, r6, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0x1c8>
 8005a38:	8018      	strh	r0, [r3, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	4616      	mov	r6, r2
 8005a40:	e7ba      	b.n	80059b8 <_printf_i+0x150>
 8005a42:	680b      	ldr	r3, [r1, #0]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	600a      	str	r2, [r1, #0]
 8005a48:	681e      	ldr	r6, [r3, #0]
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7fa fbc6 	bl	80001e0 <memchr>
 8005a54:	b108      	cbz	r0, 8005a5a <_printf_i+0x1f2>
 8005a56:	1b80      	subs	r0, r0, r6
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a64:	e7a8      	b.n	80059b8 <_printf_i+0x150>
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	47d0      	blx	sl
 8005a70:	3001      	adds	r0, #1
 8005a72:	d0ab      	beq.n	80059cc <_printf_i+0x164>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	079b      	lsls	r3, r3, #30
 8005a78:	d413      	bmi.n	8005aa2 <_printf_i+0x23a>
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	4298      	cmp	r0, r3
 8005a80:	bfb8      	it	lt
 8005a82:	4618      	movlt	r0, r3
 8005a84:	e7a4      	b.n	80059d0 <_printf_i+0x168>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d09b      	beq.n	80059cc <_printf_i+0x164>
 8005a94:	3501      	adds	r5, #1
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	9903      	ldr	r1, [sp, #12]
 8005a9a:	1a5b      	subs	r3, r3, r1
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dcf2      	bgt.n	8005a86 <_printf_i+0x21e>
 8005aa0:	e7eb      	b.n	8005a7a <_printf_i+0x212>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	f104 0619 	add.w	r6, r4, #25
 8005aa8:	e7f5      	b.n	8005a96 <_printf_i+0x22e>
 8005aaa:	bf00      	nop
 8005aac:	08005eb9 	.word	0x08005eb9
 8005ab0:	08005eca 	.word	0x08005eca

08005ab4 <memcpy>:
 8005ab4:	440a      	add	r2, r1
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005abc:	d100      	bne.n	8005ac0 <memcpy+0xc>
 8005abe:	4770      	bx	lr
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aca:	4291      	cmp	r1, r2
 8005acc:	d1f9      	bne.n	8005ac2 <memcpy+0xe>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <memmove>:
 8005ad0:	4288      	cmp	r0, r1
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	eb01 0402 	add.w	r4, r1, r2
 8005ad8:	d902      	bls.n	8005ae0 <memmove+0x10>
 8005ada:	4284      	cmp	r4, r0
 8005adc:	4623      	mov	r3, r4
 8005ade:	d807      	bhi.n	8005af0 <memmove+0x20>
 8005ae0:	1e43      	subs	r3, r0, #1
 8005ae2:	42a1      	cmp	r1, r4
 8005ae4:	d008      	beq.n	8005af8 <memmove+0x28>
 8005ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aee:	e7f8      	b.n	8005ae2 <memmove+0x12>
 8005af0:	4402      	add	r2, r0
 8005af2:	4601      	mov	r1, r0
 8005af4:	428a      	cmp	r2, r1
 8005af6:	d100      	bne.n	8005afa <memmove+0x2a>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b02:	e7f7      	b.n	8005af4 <memmove+0x24>

08005b04 <_free_r>:
 8005b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d048      	beq.n	8005b9c <_free_r+0x98>
 8005b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0e:	9001      	str	r0, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f1a1 0404 	sub.w	r4, r1, #4
 8005b16:	bfb8      	it	lt
 8005b18:	18e4      	addlt	r4, r4, r3
 8005b1a:	f000 f8d3 	bl	8005cc4 <__malloc_lock>
 8005b1e:	4a20      	ldr	r2, [pc, #128]	; (8005ba0 <_free_r+0x9c>)
 8005b20:	9801      	ldr	r0, [sp, #4]
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	4615      	mov	r5, r2
 8005b26:	b933      	cbnz	r3, 8005b36 <_free_r+0x32>
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	6014      	str	r4, [r2, #0]
 8005b2c:	b003      	add	sp, #12
 8005b2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b32:	f000 b8cd 	b.w	8005cd0 <__malloc_unlock>
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	d90b      	bls.n	8005b52 <_free_r+0x4e>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1862      	adds	r2, r4, r1
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bf04      	itt	eq
 8005b42:	681a      	ldreq	r2, [r3, #0]
 8005b44:	685b      	ldreq	r3, [r3, #4]
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	bf04      	itt	eq
 8005b4a:	1852      	addeq	r2, r2, r1
 8005b4c:	6022      	streq	r2, [r4, #0]
 8005b4e:	602c      	str	r4, [r5, #0]
 8005b50:	e7ec      	b.n	8005b2c <_free_r+0x28>
 8005b52:	461a      	mov	r2, r3
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	b10b      	cbz	r3, 8005b5c <_free_r+0x58>
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d9fa      	bls.n	8005b52 <_free_r+0x4e>
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	1855      	adds	r5, r2, r1
 8005b60:	42a5      	cmp	r5, r4
 8005b62:	d10b      	bne.n	8005b7c <_free_r+0x78>
 8005b64:	6824      	ldr	r4, [r4, #0]
 8005b66:	4421      	add	r1, r4
 8005b68:	1854      	adds	r4, r2, r1
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	d1dd      	bne.n	8005b2c <_free_r+0x28>
 8005b70:	681c      	ldr	r4, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	6053      	str	r3, [r2, #4]
 8005b76:	4421      	add	r1, r4
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	e7d7      	b.n	8005b2c <_free_r+0x28>
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x80>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	6003      	str	r3, [r0, #0]
 8005b82:	e7d3      	b.n	8005b2c <_free_r+0x28>
 8005b84:	6825      	ldr	r5, [r4, #0]
 8005b86:	1961      	adds	r1, r4, r5
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf04      	itt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	bf04      	itt	eq
 8005b94:	1949      	addeq	r1, r1, r5
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	6054      	str	r4, [r2, #4]
 8005b9a:	e7c7      	b.n	8005b2c <_free_r+0x28>
 8005b9c:	b003      	add	sp, #12
 8005b9e:	bd30      	pop	{r4, r5, pc}
 8005ba0:	20000134 	.word	0x20000134

08005ba4 <_malloc_r>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	1ccd      	adds	r5, r1, #3
 8005ba8:	f025 0503 	bic.w	r5, r5, #3
 8005bac:	3508      	adds	r5, #8
 8005bae:	2d0c      	cmp	r5, #12
 8005bb0:	bf38      	it	cc
 8005bb2:	250c      	movcc	r5, #12
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	db01      	blt.n	8005bbe <_malloc_r+0x1a>
 8005bba:	42a9      	cmp	r1, r5
 8005bbc:	d903      	bls.n	8005bc6 <_malloc_r+0x22>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc6:	f000 f87d 	bl	8005cc4 <__malloc_lock>
 8005bca:	4921      	ldr	r1, [pc, #132]	; (8005c50 <_malloc_r+0xac>)
 8005bcc:	680a      	ldr	r2, [r1, #0]
 8005bce:	4614      	mov	r4, r2
 8005bd0:	b99c      	cbnz	r4, 8005bfa <_malloc_r+0x56>
 8005bd2:	4f20      	ldr	r7, [pc, #128]	; (8005c54 <_malloc_r+0xb0>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	b923      	cbnz	r3, 8005be2 <_malloc_r+0x3e>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f862 	bl	8005ca4 <_sbrk_r>
 8005be0:	6038      	str	r0, [r7, #0]
 8005be2:	4629      	mov	r1, r5
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f85d 	bl	8005ca4 <_sbrk_r>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d123      	bne.n	8005c36 <_malloc_r+0x92>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f000 f86c 	bl	8005cd0 <__malloc_unlock>
 8005bf8:	e7e3      	b.n	8005bc2 <_malloc_r+0x1e>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	1b5b      	subs	r3, r3, r5
 8005bfe:	d417      	bmi.n	8005c30 <_malloc_r+0x8c>
 8005c00:	2b0b      	cmp	r3, #11
 8005c02:	d903      	bls.n	8005c0c <_malloc_r+0x68>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	441c      	add	r4, r3
 8005c08:	6025      	str	r5, [r4, #0]
 8005c0a:	e004      	b.n	8005c16 <_malloc_r+0x72>
 8005c0c:	6863      	ldr	r3, [r4, #4]
 8005c0e:	42a2      	cmp	r2, r4
 8005c10:	bf0c      	ite	eq
 8005c12:	600b      	streq	r3, [r1, #0]
 8005c14:	6053      	strne	r3, [r2, #4]
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 f85a 	bl	8005cd0 <__malloc_unlock>
 8005c1c:	f104 000b 	add.w	r0, r4, #11
 8005c20:	1d23      	adds	r3, r4, #4
 8005c22:	f020 0007 	bic.w	r0, r0, #7
 8005c26:	1ac2      	subs	r2, r0, r3
 8005c28:	d0cc      	beq.n	8005bc4 <_malloc_r+0x20>
 8005c2a:	1a1b      	subs	r3, r3, r0
 8005c2c:	50a3      	str	r3, [r4, r2]
 8005c2e:	e7c9      	b.n	8005bc4 <_malloc_r+0x20>
 8005c30:	4622      	mov	r2, r4
 8005c32:	6864      	ldr	r4, [r4, #4]
 8005c34:	e7cc      	b.n	8005bd0 <_malloc_r+0x2c>
 8005c36:	1cc4      	adds	r4, r0, #3
 8005c38:	f024 0403 	bic.w	r4, r4, #3
 8005c3c:	42a0      	cmp	r0, r4
 8005c3e:	d0e3      	beq.n	8005c08 <_malloc_r+0x64>
 8005c40:	1a21      	subs	r1, r4, r0
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 f82e 	bl	8005ca4 <_sbrk_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d1dd      	bne.n	8005c08 <_malloc_r+0x64>
 8005c4c:	e7cf      	b.n	8005bee <_malloc_r+0x4a>
 8005c4e:	bf00      	nop
 8005c50:	20000134 	.word	0x20000134
 8005c54:	20000138 	.word	0x20000138

08005c58 <_realloc_r>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	460e      	mov	r6, r1
 8005c60:	b921      	cbnz	r1, 8005c6c <_realloc_r+0x14>
 8005c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c66:	4611      	mov	r1, r2
 8005c68:	f7ff bf9c 	b.w	8005ba4 <_malloc_r>
 8005c6c:	b922      	cbnz	r2, 8005c78 <_realloc_r+0x20>
 8005c6e:	f7ff ff49 	bl	8005b04 <_free_r>
 8005c72:	4625      	mov	r5, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c78:	f000 f830 	bl	8005cdc <_malloc_usable_size_r>
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	d20f      	bcs.n	8005ca0 <_realloc_r+0x48>
 8005c80:	4621      	mov	r1, r4
 8005c82:	4638      	mov	r0, r7
 8005c84:	f7ff ff8e 	bl	8005ba4 <_malloc_r>
 8005c88:	4605      	mov	r5, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d0f2      	beq.n	8005c74 <_realloc_r+0x1c>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4622      	mov	r2, r4
 8005c92:	f7ff ff0f 	bl	8005ab4 <memcpy>
 8005c96:	4631      	mov	r1, r6
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ff33 	bl	8005b04 <_free_r>
 8005c9e:	e7e9      	b.n	8005c74 <_realloc_r+0x1c>
 8005ca0:	4635      	mov	r5, r6
 8005ca2:	e7e7      	b.n	8005c74 <_realloc_r+0x1c>

08005ca4 <_sbrk_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_sbrk_r+0x1c>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fc fc34 	bl	800251c <_sbrk>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_sbrk_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_sbrk_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20000314 	.word	0x20000314

08005cc4 <__malloc_lock>:
 8005cc4:	4801      	ldr	r0, [pc, #4]	; (8005ccc <__malloc_lock+0x8>)
 8005cc6:	f000 b811 	b.w	8005cec <__retarget_lock_acquire_recursive>
 8005cca:	bf00      	nop
 8005ccc:	2000031c 	.word	0x2000031c

08005cd0 <__malloc_unlock>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	; (8005cd8 <__malloc_unlock+0x8>)
 8005cd2:	f000 b80c 	b.w	8005cee <__retarget_lock_release_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	2000031c 	.word	0x2000031c

08005cdc <_malloc_usable_size_r>:
 8005cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce0:	1f18      	subs	r0, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfbc      	itt	lt
 8005ce6:	580b      	ldrlt	r3, [r1, r0]
 8005ce8:	18c0      	addlt	r0, r0, r3
 8005cea:	4770      	bx	lr

08005cec <__retarget_lock_acquire_recursive>:
 8005cec:	4770      	bx	lr

08005cee <__retarget_lock_release_recursive>:
 8005cee:	4770      	bx	lr

08005cf0 <_init>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr

08005cfc <_fini>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	bf00      	nop
 8005d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d02:	bc08      	pop	{r3}
 8005d04:	469e      	mov	lr, r3
 8005d06:	4770      	bx	lr
