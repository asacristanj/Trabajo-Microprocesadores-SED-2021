
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800317c  0800317c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000b0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084dc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013c3  00000000  00000000  00028580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  00029948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb16  00000000  00000000  0002a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e15  00000000  00000000  0004a26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1afc  00000000  00000000  00053083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00114b7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001da8  00000000  00000000  00114bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003034 	.word	0x08003034

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08003034 	.word	0x08003034

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <rellenar_botones.8600>:
/* USER CODE BEGIN 0 */

//Interrupciones botones:
volatile int button[10];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	void rellenar_botones(int n) {
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	f8c7 c000 	str.w	ip, [r7]
		for (int i = 0; i < 10; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e00b      	b.n	80004fa <rellenar_botones.8600+0x2a>
			if (i != n)
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d004      	beq.n	80004f4 <rellenar_botones.8600+0x24>
				button[i] = 0;
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <rellenar_botones.8600+0x48>)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2100      	movs	r1, #0
 80004f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3301      	adds	r3, #1
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	ddf0      	ble.n	80004e2 <rellenar_botones.8600+0x12>
		}
		button[n] = 1;
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <rellenar_botones.8600+0x48>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2101      	movs	r1, #1
 8000506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000f0 	.word	0x200000f0

0800051c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_0) {
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d106      	bne.n	8000540 <HAL_GPIO_EXTI_Callback+0x24>
		rellenar_botones(0);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	469c      	mov	ip, r3
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff ffc9 	bl	80004d0 <rellenar_botones.8600>
	} else if (GPIO_Pin == GPIO_PIN_1) {
		rellenar_botones(1);
	}

}
 800053e:	e008      	b.n	8000552 <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == GPIO_PIN_1) {
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d105      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x36>
		rellenar_botones(1);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	469c      	mov	ip, r3
 800054c:	2001      	movs	r0, #1
 800054e:	f7ff ffbf 	bl	80004d0 <rellenar_botones.8600>
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <debouncer>:
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	4613      	mov	r3, r2
 8000568:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d13b      	bne.n	80005ea <debouncer+0x8e>
		if (button_count == 0) {
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <debouncer+0x98>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10b      	bne.n	8000592 <debouncer+0x36>
			counter = HAL_GetTick();
 800057a:	f001 f965 	bl	8001848 <HAL_GetTick>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <debouncer+0x9c>)
 8000584:	601a      	str	r2, [r3, #0]
			button_count++;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <debouncer+0x98>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <debouncer+0x98>)
 8000590:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 8000592:	f001 f959 	bl	8001848 <HAL_GetTick>
 8000596:	4603      	mov	r3, r0
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <debouncer+0x9c>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	2b13      	cmp	r3, #19
 80005a0:	d923      	bls.n	80005ea <debouncer+0x8e>
			counter = HAL_GetTick();
 80005a2:	f001 f951 	bl	8001848 <HAL_GetTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <debouncer+0x9c>)
 80005ac:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f001 fc02 	bl	8001dbc <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d003      	beq.n	80005c6 <debouncer+0x6a>
				button_count = 1;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <debouncer+0x98>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	e005      	b.n	80005d2 <debouncer+0x76>
			} else {
				button_count++;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <debouncer+0x98>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <debouncer+0x98>)
 80005d0:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <debouncer+0x98>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d107      	bne.n	80005ea <debouncer+0x8e>
				button_count = 0;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <debouncer+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
				return 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <debouncer+0x90>
			}
		}
	}
	return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000094 	.word	0x20000094
 80005f8:	20000098 	.word	0x20000098

080005fc <mostrartexto7s>:

//--------------------------------7 SEGMENTOS------------------------//
//Mostrar texto en pantalla 7 segmentos
void mostrartexto7s(const char palabra[]) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	466b      	mov	r3, sp
 8000606:	461d      	mov	r5, r3
	uint8_t longitud = strlen(palabra);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fddd 	bl	80001c8 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	74fb      	strb	r3, [r7, #19]
	uint8_t texto[longitud + 1];
 8000612:	7cfb      	ldrb	r3, [r7, #19]
 8000614:	1c5c      	adds	r4, r3, #1
 8000616:	1e63      	subs	r3, r4, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4623      	mov	r3, r4
 800061c:	4618      	mov	r0, r3
 800061e:	f04f 0100 	mov.w	r1, #0
 8000622:	f04f 0200 	mov.w	r2, #0
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	00cb      	lsls	r3, r1, #3
 800062c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000630:	00c2      	lsls	r2, r0, #3
 8000632:	4623      	mov	r3, r4
 8000634:	4618      	mov	r0, r3
 8000636:	f04f 0100 	mov.w	r1, #0
 800063a:	f04f 0200 	mov.w	r2, #0
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	00cb      	lsls	r3, r1, #3
 8000644:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000648:	00c2      	lsls	r2, r0, #3
 800064a:	4623      	mov	r3, r4
 800064c:	3307      	adds	r3, #7
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	ebad 0d03 	sub.w	sp, sp, r3
 8000656:	ab02      	add	r3, sp, #8
 8000658:	3300      	adds	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
	texto[0] = 1;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < longitud + 1; i++) {
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e00c      	b.n	8000682 <mostrartexto7s+0x86>
		texto[i] = palabra[i - 1];
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3b01      	subs	r3, #1
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	7819      	ldrb	r1, [r3, #0]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < longitud + 1; i++) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	429a      	cmp	r2, r3
 8000688:	ddee      	ble.n	8000668 <mostrartexto7s+0x6c>
	}
	HAL_I2C_Master_Transmit(&hi2c1, 0x7 << 1, texto, longitud + 1, 30);
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	7cfb      	ldrb	r3, [r7, #19]
 800068e:	b29b      	uxth	r3, r3
 8000690:	3301      	adds	r3, #1
 8000692:	b29b      	uxth	r3, r3
 8000694:	211e      	movs	r1, #30
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	210e      	movs	r1, #14
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <mostrartexto7s+0xb0>)
 800069c:	f001 fd36 	bl	800210c <HAL_I2C_Master_Transmit>
 80006a0:	46ad      	mov	sp, r5
}
 80006a2:	bf00      	nop
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000009c 	.word	0x2000009c

080006b0 <clrScr>:
	HAL_I2C_Master_Transmit(&hi2c1, 0x7 << 1, cadena_num, 5, 30);
}

//------------------CONTROL LCD ESCLAVO-----------------------//
//Limpiar pantalla LCD
void clrScr() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af02      	add	r7, sp, #8
	uint8_t op = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &op, 1, 3000);
 80006ba:	1dfa      	adds	r2, r7, #7
 80006bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	2110      	movs	r1, #16
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <clrScr+0x24>)
 80006c8:	f001 fd20 	bl	800210c <HAL_I2C_Master_Transmit>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000009c 	.word	0x2000009c

080006d8 <setColor>:
//Seleccionar Color pantalla LCD
void setColor(int red, int green, int blue) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af02      	add	r7, sp, #8
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 2, red, green, blue };
 80006e4:	2302      	movs	r3, #2
 80006e6:	753b      	strb	r3, [r7, #20]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	757b      	strb	r3, [r7, #21]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	75bb      	strb	r3, [r7, #22]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 80006fa:	f107 0214 	add.w	r2, r7, #20
 80006fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2304      	movs	r3, #4
 8000706:	2110      	movs	r1, #16
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <setColor+0x40>)
 800070a:	f001 fcff 	bl	800210c <HAL_I2C_Master_Transmit>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000009c 	.word	0x2000009c

0800071c <setBackColor>:
//Seleccionar color fondo pantalla LCD
void setBackColor(int red, int green, int blue) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af02      	add	r7, sp, #8
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	uint8_t color[4] = { 3, red, green, blue };
 8000728:	2303      	movs	r3, #3
 800072a:	753b      	strb	r3, [r7, #20]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	757b      	strb	r3, [r7, #21]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	75bb      	strb	r3, [r7, #22]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &color, 4, 3000);
 800073e:	f107 0214 	add.w	r2, r7, #20
 8000742:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2304      	movs	r3, #4
 800074a:	2110      	movs	r1, #16
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <setBackColor+0x40>)
 800074e:	f001 fcdd 	bl	800210c <HAL_I2C_Master_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000009c 	.word	0x2000009c

08000760 <drawRect>:
//Dibuja un rectángulo pantalla LCD
void drawRect(int x1, int y1, int x2, int y2) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af02      	add	r7, sp, #8
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2bff      	cmp	r3, #255	; 0xff
 8000780:	dd01      	ble.n	8000786 <drawRect+0x26>
		desb[0] = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	dd01      	ble.n	8000790 <drawRect+0x30>
		desb[1] = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	dd01      	ble.n	800079a <drawRect+0x3a>
		desb[2] = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	dd01      	ble.n	80007a4 <drawRect+0x44>
		desb[3] = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 4, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 80007a4:	2304      	movs	r3, #4
 80007a6:	753b      	strb	r3, [r7, #20]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	757b      	strb	r3, [r7, #21]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	75bb      	strb	r3, [r7, #22]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	75fb      	strb	r3, [r7, #23]
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	763b      	strb	r3, [r7, #24]
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	767b      	strb	r3, [r7, #25]
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	76bb      	strb	r3, [r7, #26]
 80007cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	76fb      	strb	r3, [r7, #27]
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 80007d8:	f107 0214 	add.w	r2, r7, #20
 80007dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2309      	movs	r3, #9
 80007e4:	2110      	movs	r1, #16
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <drawRect+0x94>)
 80007e8:	f001 fc90 	bl	800210c <HAL_I2C_Master_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3730      	adds	r7, #48	; 0x30
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000009c 	.word	0x2000009c

080007f8 <fillRect>:
//Dibuja y rellena un rectángulo pantalla  LCD
void fillRect(int x1, int y1, int x2, int y2) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
	int desb[4] = { 0, 0, 0, 0 };
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
	if (x1 > 255) {
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2bff      	cmp	r3, #255	; 0xff
 8000818:	dd01      	ble.n	800081e <fillRect+0x26>
		desb[0] = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
	}
	if (y1 > 255) {
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2bff      	cmp	r3, #255	; 0xff
 8000822:	dd01      	ble.n	8000828 <fillRect+0x30>
		desb[1] = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (x2 > 255) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2bff      	cmp	r3, #255	; 0xff
 800082c:	dd01      	ble.n	8000832 <fillRect+0x3a>
		desb[2] = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (y2 > 255) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2bff      	cmp	r3, #255	; 0xff
 8000836:	dd01      	ble.n	800083c <fillRect+0x44>
		desb[3] = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint8_t coord[9] = { 5, x1, y1, x2, y2, desb[0], desb[1], desb[2], desb[3] };
 800083c:	2305      	movs	r3, #5
 800083e:	753b      	strb	r3, [r7, #20]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	757b      	strb	r3, [r7, #21]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	75bb      	strb	r3, [r7, #22]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	763b      	strb	r3, [r7, #24]
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	767b      	strb	r3, [r7, #25]
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	b2db      	uxtb	r3, r3
 8000862:	76bb      	strb	r3, [r7, #26]
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	b2db      	uxtb	r3, r3
 8000868:	76fb      	strb	r3, [r7, #27]
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	b2db      	uxtb	r3, r3
 800086e:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &coord, 9, 3000);
 8000870:	f107 0214 	add.w	r2, r7, #20
 8000874:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2309      	movs	r3, #9
 800087c:	2110      	movs	r1, #16
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <fillRect+0x94>)
 8000880:	f001 fc44 	bl	800210c <HAL_I2C_Master_Transmit>
}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000009c 	.word	0x2000009c

08000890 <print>:
//Imprime una palabra de hasta 28 caracteres
void print(const char *t, int x, int y) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b098      	sub	sp, #96	; 0x60
 8000894:	af02      	add	r7, sp, #8
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	int desb[2] = { 0, 0 };
 800089c:	2300      	movs	r3, #0
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (x > 255) {
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	dd01      	ble.n	80008ae <print+0x1e>
		desb[0] = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	if (y > 255) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2bff      	cmp	r3, #255	; 0xff
 80008b2:	dd01      	ble.n	80008b8 <print+0x28>
		desb[1] = 1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
	uint8_t cadena[50];
	cadena[0] = 6;
 80008b8:	2306      	movs	r3, #6
 80008ba:	753b      	strb	r3, [r7, #20]
	int longitud = strlen(t);
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fc83 	bl	80001c8 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
	cadena[1] = longitud;
 80008c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	757b      	strb	r3, [r7, #21]
	cadena[2] = desb[0];
 80008cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	75bb      	strb	r3, [r7, #22]
	cadena[3] = desb[1];
 80008d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	75fb      	strb	r3, [r7, #23]
	for (int i = 4; i < longitud + 4; i++) {
 80008d8:	2304      	movs	r3, #4
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
 80008dc:	e00d      	b.n	80008fa <print+0x6a>
		cadena[i] = t[i - 4];
 80008de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008e0:	3b04      	subs	r3, #4
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	7819      	ldrb	r1, [r3, #0]
 80008e8:	f107 0214 	add.w	r2, r7, #20
 80008ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ee:	4413      	add	r3, r2
 80008f0:	460a      	mov	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < longitud + 4; i++) {
 80008f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008f6:	3301      	adds	r3, #1
 80008f8:	657b      	str	r3, [r7, #84]	; 0x54
 80008fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008fc:	3303      	adds	r3, #3
 80008fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000900:	429a      	cmp	r2, r3
 8000902:	ddec      	ble.n	80008de <print+0x4e>
	}
	cadena[longitud + 4] = x;
 8000904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000906:	3304      	adds	r3, #4
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000910:	440b      	add	r3, r1
 8000912:	f803 2c44 	strb.w	r2, [r3, #-68]
	cadena[longitud + 5] = y;
 8000916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000918:	3305      	adds	r3, #5
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000922:	440b      	add	r3, r1
 8000924:	f803 2c44 	strb.w	r2, [r3, #-68]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &cadena, longitud + 6, 3000);
 8000928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800092a:	b29b      	uxth	r3, r3
 800092c:	3306      	adds	r3, #6
 800092e:	b29b      	uxth	r3, r3
 8000930:	f107 0214 	add.w	r2, r7, #20
 8000934:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000938:	9100      	str	r1, [sp, #0]
 800093a:	2110      	movs	r1, #16
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <print+0xbc>)
 800093e:	f001 fbe5 	bl	800210c <HAL_I2C_Master_Transmit>
}
 8000942:	bf00      	nop
 8000944:	3758      	adds	r7, #88	; 0x58
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000009c 	.word	0x2000009c

08000950 <printfrase>:
//Imprime una serie de palabras de hasta 28 caracteres cada una en pantalla  LCD
void printfrase(const char *t[], int x, int y, int numpalabras) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
	int long_acumulada = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	e01b      	b.n	80009a0 <printfrase+0x50>
		print(t[i], x + long_acumulada, y);
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4413      	add	r3, r2
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4619      	mov	r1, r3
 800097c:	f7ff ff88 	bl	8000890 <print>
		long_acumulada = long_acumulada + strlen(t[i]) * 8;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc1c 	bl	80001c8 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	00da      	lsls	r2, r3, #3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4413      	add	r3, r2
 8000998:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numpalabras; i++) {
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3301      	adds	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbdf      	blt.n	8000968 <printfrase+0x18>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <setFont>:
//Elije fuente: 0 para pequeño, 1 para grande y 3 para numeros en pantalla  LCD
void setFont(int f) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]
	uint8_t font[2] = { 7, f };
 80009bc:	2307      	movs	r3, #7
 80009be:	733b      	strb	r3, [r7, #12]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x8 << 1, &font, 2, 3000);
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2302      	movs	r3, #2
 80009d2:	2110      	movs	r1, #16
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <setFont+0x30>)
 80009d6:	f001 fb99 	bl	800210c <HAL_I2C_Master_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000009c 	.word	0x2000009c

080009e8 <botones>:
int espacio_entre_botones;
int alto_entre_botones;

void botones(int distl, int distalt, int ancho, int alto, int marco, int nmarco,
		rgb color_boton, rgb color_marco, rgb color_marco_nuevo,
		rgb color_texto, int f, int c) {
 80009e8:	b490      	push	{r4, r7}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
	dist_lateral_pared = distl;
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <botones+0x130>)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6013      	str	r3, [r2, #0]
	dist_altura_boton = distalt;
 80009fc:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <botones+0x134>)
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	6013      	str	r3, [r2, #0]
	ancho_boton = ancho;
 8000a02:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <botones+0x138>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6013      	str	r3, [r2, #0]
	alto_boton = alto;
 8000a08:	4a46      	ldr	r2, [pc, #280]	; (8000b24 <botones+0x13c>)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	6013      	str	r3, [r2, #0]
	marco_boton = marco;
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <botones+0x140>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	6013      	str	r3, [r2, #0]
	nuevo_marco = nmarco;
 8000a14:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <botones+0x144>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	6013      	str	r3, [r2, #0]
	cboton = color_boton;
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <botones+0x148>)
 8000a1c:	461c      	mov	r4, r3
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarco = color_marco;
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <botones+0x14c>)
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	cmarcon = color_marco_nuevo;
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <botones+0x150>)
 8000a3c:	461c      	mov	r4, r3
 8000a3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ctexto = color_texto;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <botones+0x154>)
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filas = f;
 8000a5a:	4a39      	ldr	r2, [pc, #228]	; (8000b40 <botones+0x158>)
 8000a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5e:	6013      	str	r3, [r2, #0]
	columnas = c;
 8000a60:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <botones+0x15c>)
 8000a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a64:	6013      	str	r3, [r2, #0]
	if (columnas != 1) {
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <botones+0x15c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d013      	beq.n	8000a96 <botones+0xae>
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <botones+0x138>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a34      	ldr	r2, [pc, #208]	; (8000b44 <botones+0x15c>)
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / (columnas - 1);
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <botones+0x130>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <botones+0x15c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000a90:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <botones+0x160>)
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e011      	b.n	8000aba <botones+0xd2>
	} else {
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <botones+0x138>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <botones+0x15c>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	f5c3 72f0 	rsb	r2, r3, #480	; 0x1e0
				- dist_lateral_pared * 2) / columnas;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <botones+0x130>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <botones+0x15c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	fb92 f3f3 	sdiv	r3, r2, r3
		espacio_entre_botones = (480 - ancho_boton * columnas
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <botones+0x160>)
 8000ab8:	6013      	str	r3, [r2, #0]
	}
	if (filas != 1) {
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <botones+0x158>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d013      	beq.n	8000aea <botones+0x102>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <botones+0x13c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <botones+0x158>)
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <botones+0x134>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1ad2      	subs	r2, r2, r3
				/ (filas - 1);
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <botones+0x158>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <botones+0x164>)
 8000ae6:	6013      	str	r3, [r2, #0]
	} else {
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
				/ filas;
	}
}
 8000ae8:	e011      	b.n	8000b0e <botones+0x126>
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <botones+0x13c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <botones+0x158>)
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <botones+0x134>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1ad2      	subs	r2, r2, r3
				/ filas;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <botones+0x158>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	fb92 f3f3 	sdiv	r3, r2, r3
		alto_entre_botones = (320 - alto_boton * filas - dist_altura_boton * 2)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <botones+0x164>)
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc90      	pop	{r4, r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	20000008 	.word	0x20000008
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000010 	.word	0x20000010
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	20000018 	.word	0x20000018
 8000b34:	20000024 	.word	0x20000024
 8000b38:	20000030 	.word	0x20000030
 8000b3c:	2000003c 	.word	0x2000003c
 8000b40:	20000048 	.word	0x20000048
 8000b44:	2000004c 	.word	0x2000004c
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <crear_botonera>:

void crear_botonera() {
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
	for (int j = 0; j < filas; j++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e05d      	b.n	8000c18 <crear_botonera+0xc8>
		for (int i = 0; i < columnas; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e052      	b.n	8000c08 <crear_botonera+0xb8>
			int x = dist_lateral_pared
					+ ((espacio_entre_botones + ancho_boton) * i);
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <crear_botonera+0xdc>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <crear_botonera+0xe0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	fb02 f203 	mul.w	r2, r2, r3
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <crear_botonera+0xe4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000b76:	4413      	add	r3, r2
 8000b78:	607b      	str	r3, [r7, #4]
			int y = dist_altura_boton + ((alto_entre_botones + alto_boton) * j);
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <crear_botonera+0xe8>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <crear_botonera+0xec>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	fb02 f203 	mul.w	r2, r2, r3
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <crear_botonera+0xf0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	603b      	str	r3, [r7, #0]
			setColor(cmarco.r, cmarco.g, cmarco.b);
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <crear_botonera+0xf4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a2b      	ldr	r2, [pc, #172]	; (8000c44 <crear_botonera+0xf4>)
 8000b98:	6851      	ldr	r1, [r2, #4]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <crear_botonera+0xf4>)
 8000b9c:	6892      	ldr	r2, [r2, #8]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd9a 	bl	80006d8 <setColor>
			fillRect(x - marco_boton, y - marco_boton,
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <crear_botonera+0xf8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	1ad0      	subs	r0, r2, r3
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <crear_botonera+0xf8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	1ad1      	subs	r1, r2, r3
					x + ancho_boton + marco_boton,
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <crear_botonera+0xe0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <crear_botonera+0xf8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	18d4      	adds	r4, r2, r3
					y + alto_boton + marco_boton);
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <crear_botonera+0xec>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	441a      	add	r2, r3
			fillRect(x - marco_boton, y - marco_boton,
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <crear_botonera+0xf8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	f7ff fe11 	bl	80007f8 <fillRect>
			setColor(cboton.r, cboton.g, cboton.b);
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <crear_botonera+0xfc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <crear_botonera+0xfc>)
 8000bdc:	6851      	ldr	r1, [r2, #4]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <crear_botonera+0xfc>)
 8000be0:	6892      	ldr	r2, [r2, #8]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fd78 	bl	80006d8 <setColor>
			fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <crear_botonera+0xe0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	18d1      	adds	r1, r2, r3
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <crear_botonera+0xec>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fdfb 	bl	80007f8 <fillRect>
		for (int i = 0; i < columnas; i++) {
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <crear_botonera+0x100>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dba7      	blt.n	8000b62 <crear_botonera+0x12>
	for (int j = 0; j < filas; j++) {
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <crear_botonera+0x104>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	db9c      	blt.n	8000b5c <crear_botonera+0xc>
		}
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000118 	.word	0x20000118
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000024 	.word	0x20000024
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	20000018 	.word	0x20000018
 8000c50:	2000004c 	.word	0x2000004c
 8000c54:	20000048 	.word	0x20000048

08000c58 <resaltar_boton>:

void resaltar_boton(int b) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08d      	sub	sp, #52	; 0x34
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int j = 0; j < filas; j++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	e083      	b.n	8000d72 <resaltar_boton+0x11a>
		for (int i = 0; i < columnas; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6e:	e078      	b.n	8000d62 <resaltar_boton+0x10a>
			if (boton_resaltado == k) {
 8000c70:	4b7f      	ldr	r3, [pc, #508]	; (8000e70 <resaltar_boton+0x218>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d16d      	bne.n	8000d56 <resaltar_boton+0xfe>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000c7a:	4b7e      	ldr	r3, [pc, #504]	; (8000e74 <resaltar_boton+0x21c>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <resaltar_boton+0x220>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c86:	fb02 f203 	mul.w	r2, r2, r3
 8000c8a:	4b7c      	ldr	r3, [pc, #496]	; (8000e7c <resaltar_boton+0x224>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000c8e:	4413      	add	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <resaltar_boton+0x228>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <resaltar_boton+0x22c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9e:	fb02 f203 	mul.w	r2, r2, r3
 8000ca2:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <resaltar_boton+0x230>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
				setColor(0, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fd12 	bl	80006d8 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cb4:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <resaltar_boton+0x234>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	1ad0      	subs	r0, r2, r3
 8000cbc:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <resaltar_boton+0x234>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000cc4:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <resaltar_boton+0x220>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000ccc:	4b6f      	ldr	r3, [pc, #444]	; (8000e8c <resaltar_boton+0x234>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000cd2:	4b6c      	ldr	r3, [pc, #432]	; (8000e84 <resaltar_boton+0x22c>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000cda:	4b6c      	ldr	r3, [pc, #432]	; (8000e8c <resaltar_boton+0x234>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4622      	mov	r2, r4
 8000ce2:	f7ff fd89 	bl	80007f8 <fillRect>
				setColor(cmarco.r, cmarco.g, cmarco.b);
 8000ce6:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <resaltar_boton+0x238>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a69      	ldr	r2, [pc, #420]	; (8000e90 <resaltar_boton+0x238>)
 8000cec:	6851      	ldr	r1, [r2, #4]
 8000cee:	4a68      	ldr	r2, [pc, #416]	; (8000e90 <resaltar_boton+0x238>)
 8000cf0:	6892      	ldr	r2, [r2, #8]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcf0 	bl	80006d8 <setColor>
				fillRect(x - marco_boton, y - marco_boton,
 8000cf8:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <resaltar_boton+0x23c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	1ad0      	subs	r0, r2, r3
 8000d00:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <resaltar_boton+0x23c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + marco_boton,
 8000d08:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <resaltar_boton+0x220>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000d10:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <resaltar_boton+0x23c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	18d4      	adds	r4, r2, r3
						y + alto_boton + marco_boton);
 8000d16:	4b5b      	ldr	r3, [pc, #364]	; (8000e84 <resaltar_boton+0x22c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	441a      	add	r2, r3
				fillRect(x - marco_boton, y - marco_boton,
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <resaltar_boton+0x23c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4622      	mov	r2, r4
 8000d26:	f7ff fd67 	bl	80007f8 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000d2a:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <resaltar_boton+0x240>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a5a      	ldr	r2, [pc, #360]	; (8000e98 <resaltar_boton+0x240>)
 8000d30:	6851      	ldr	r1, [r2, #4]
 8000d32:	4a59      	ldr	r2, [pc, #356]	; (8000e98 <resaltar_boton+0x240>)
 8000d34:	6892      	ldr	r2, [r2, #8]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcce 	bl	80006d8 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <resaltar_boton+0x220>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	18d1      	adds	r1, r2, r3
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <resaltar_boton+0x22c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	6938      	ldr	r0, [r7, #16]
 8000d52:	f7ff fd51 	bl	80007f8 <fillRect>
			}
			k++;
 8000d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d58:	3301      	adds	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3301      	adds	r3, #1
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
 8000d62:	4b4e      	ldr	r3, [pc, #312]	; (8000e9c <resaltar_boton+0x244>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	db81      	blt.n	8000c70 <resaltar_boton+0x18>
	for (int j = 0; j < filas; j++) {
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	3301      	adds	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d72:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <resaltar_boton+0x248>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f6ff af76 	blt.w	8000c6a <resaltar_boton+0x12>
		}
	}
	k = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	boton_resaltado = b;
 8000d82:	4a3b      	ldr	r2, [pc, #236]	; (8000e70 <resaltar_boton+0x218>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6013      	str	r3, [r2, #0]
	for (int j = 0; j < filas; j++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	e065      	b.n	8000e5a <resaltar_boton+0x202>
		for (int i = 0; i < columnas; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e05a      	b.n	8000e4a <resaltar_boton+0x1f2>
			if (boton_resaltado == k) {
 8000d94:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <resaltar_boton+0x218>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d14f      	bne.n	8000e3e <resaltar_boton+0x1e6>
				int x = dist_lateral_pared
						+ (espacio_entre_botones + ancho_boton) * i;
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <resaltar_boton+0x21c>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <resaltar_boton+0x220>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	fb02 f203 	mul.w	r2, r2, r3
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <resaltar_boton+0x224>)
 8000db0:	681b      	ldr	r3, [r3, #0]
				int x = dist_lateral_pared
 8000db2:	4413      	add	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
				int y = dist_altura_boton
						+ (alto_entre_botones + alto_boton) * j;
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <resaltar_boton+0x228>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <resaltar_boton+0x22c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	6a3a      	ldr	r2, [r7, #32]
 8000dc2:	fb02 f203 	mul.w	r2, r2, r3
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <resaltar_boton+0x230>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
				int y = dist_altura_boton
 8000dca:	4413      	add	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
				setColor(cmarcon.r, cmarcon.g, cmarcon.b);
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <resaltar_boton+0x24c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <resaltar_boton+0x24c>)
 8000dd4:	6851      	ldr	r1, [r2, #4]
 8000dd6:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <resaltar_boton+0x24c>)
 8000dd8:	6892      	ldr	r2, [r2, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc7c 	bl	80006d8 <setColor>
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <resaltar_boton+0x234>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	1ad0      	subs	r0, r2, r3
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <resaltar_boton+0x234>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	1ad1      	subs	r1, r2, r3
						x + ancho_boton + nuevo_marco,
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <resaltar_boton+0x220>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <resaltar_boton+0x234>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	18d4      	adds	r4, r2, r3
						y + alto_boton + nuevo_marco);
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <resaltar_boton+0x22c>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	441a      	add	r2, r3
				fillRect(x - nuevo_marco, y - nuevo_marco,
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <resaltar_boton+0x234>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	f7ff fcf3 	bl	80007f8 <fillRect>
				setColor(cboton.r, cboton.g, cboton.b);
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <resaltar_boton+0x240>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <resaltar_boton+0x240>)
 8000e18:	6851      	ldr	r1, [r2, #4]
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <resaltar_boton+0x240>)
 8000e1c:	6892      	ldr	r2, [r2, #8]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fc5a 	bl	80006d8 <setColor>
				fillRect(x, y, x + ancho_boton, y + alto_boton);
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <resaltar_boton+0x220>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	18d1      	adds	r1, r2, r3
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <resaltar_boton+0x22c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	460a      	mov	r2, r1
 8000e36:	6979      	ldr	r1, [r7, #20]
 8000e38:	69b8      	ldr	r0, [r7, #24]
 8000e3a:	f7ff fcdd 	bl	80007f8 <fillRect>
			}
			k++;
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	3301      	adds	r3, #1
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < columnas; i++) {
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3301      	adds	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <resaltar_boton+0x244>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	db9f      	blt.n	8000d94 <resaltar_boton+0x13c>
	for (int j = 0; j < filas; j++) {
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	3301      	adds	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <resaltar_boton+0x248>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	db94      	blt.n	8000d8e <resaltar_boton+0x136>
		}
	}
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3734      	adds	r7, #52	; 0x34
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000090 	.word	0x20000090
 8000e74:	20000118 	.word	0x20000118
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	2000011c 	.word	0x2000011c
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000014 	.word	0x20000014
 8000e90:	20000024 	.word	0x20000024
 8000e94:	20000010 	.word	0x20000010
 8000e98:	20000018 	.word	0x20000018
 8000e9c:	2000004c 	.word	0x2000004c
 8000ea0:	20000048 	.word	0x20000048
 8000ea4:	20000030 	.word	0x20000030

08000ea8 <rellenar_botones>:

void rellenar_botones(const char *t[]) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	int k = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	657b      	str	r3, [r7, #84]	; 0x54
	int alto_letra = 16;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ancho_letra = 16;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
	setColor(ctexto.r, ctexto.g, ctexto.b);
 8000ebc:	4b99      	ldr	r3, [pc, #612]	; (8001124 <rellenar_botones+0x27c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a98      	ldr	r2, [pc, #608]	; (8001124 <rellenar_botones+0x27c>)
 8000ec2:	6851      	ldr	r1, [r2, #4]
 8000ec4:	4a97      	ldr	r2, [pc, #604]	; (8001124 <rellenar_botones+0x27c>)
 8000ec6:	6892      	ldr	r2, [r2, #8]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc05 	bl	80006d8 <setColor>
	setBackColor(cboton.r, cboton.g, cboton.b);
 8000ece:	4b96      	ldr	r3, [pc, #600]	; (8001128 <rellenar_botones+0x280>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a95      	ldr	r2, [pc, #596]	; (8001128 <rellenar_botones+0x280>)
 8000ed4:	6851      	ldr	r1, [r2, #4]
 8000ed6:	4a94      	ldr	r2, [pc, #592]	; (8001128 <rellenar_botones+0x280>)
 8000ed8:	6892      	ldr	r2, [r2, #8]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc1e 	bl	800071c <setBackColor>
	for (int j = 0; j < filas; j++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8000ee4:	e112      	b.n	800110c <rellenar_botones+0x264>
		for (int i = 0; i < columnas; i++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eea:	e106      	b.n	80010fa <rellenar_botones+0x252>
			int x = dist_lateral_pared
					+ (espacio_entre_botones + ancho_boton) * i;
 8000eec:	4b8f      	ldr	r3, [pc, #572]	; (800112c <rellenar_botones+0x284>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <rellenar_botones+0x288>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ef8:	fb02 f203 	mul.w	r2, r2, r3
 8000efc:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <rellenar_botones+0x28c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
			int x = dist_lateral_pared
 8000f00:	4413      	add	r3, r2
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
			int y = dist_altura_boton + (alto_entre_botones + alto_boton) * j;
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <rellenar_botones+0x290>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b8c      	ldr	r3, [pc, #560]	; (800113c <rellenar_botones+0x294>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f10:	fb02 f203 	mul.w	r2, r2, r3
 8000f14:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <rellenar_botones+0x298>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30

			if (ancho_boton >= (ancho_letra * strlen(t[k - 1]))) {
 8000f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f22:	3b01      	subs	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f94b 	bl	80001c8 <strlen>
 8000f32:	4602      	mov	r2, r0
 8000f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f36:	fb03 f302 	mul.w	r3, r3, r2
 8000f3a:	4a7d      	ldr	r2, [pc, #500]	; (8001130 <rellenar_botones+0x288>)
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d82d      	bhi.n	8000f9e <rellenar_botones+0xf6>
				print(t[k - 1],
 8000f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681c      	ldr	r4, [r3, #0]
						x + (ancho_boton - strlen(t[k - 1]) * ancho_letra) / 2,
 8000f52:	4b77      	ldr	r3, [pc, #476]	; (8001130 <rellenar_botones+0x288>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461d      	mov	r5, r3
 8000f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f92d 	bl	80001c8 <strlen>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f72:	fb03 f302 	mul.w	r3, r3, r2
 8000f76:	1aeb      	subs	r3, r5, r3
 8000f78:	085a      	lsrs	r2, r3, #1
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	4413      	add	r3, r2
				print(t[k - 1],
 8000f7e:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra) / 2);
 8000f80:	4b6e      	ldr	r3, [pc, #440]	; (800113c <rellenar_botones+0x294>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	0fda      	lsrs	r2, r3, #31
 8000f8a:	4413      	add	r3, r2
 8000f8c:	105b      	asrs	r3, r3, #1
 8000f8e:	461a      	mov	r2, r3
				print(t[k - 1],
 8000f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f92:	4413      	add	r3, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fc7a 	bl	8000890 <print>
 8000f9c:	e0a7      	b.n	80010ee <rellenar_botones+0x246>
			} else {
				char t1[20], t2[20];
				for (int i = 0; i < 20; i++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fa2:	e00e      	b.n	8000fc2 <rellenar_botones+0x11a>
					t1[i] = 0;
 8000fa4:	f107 021c 	add.w	r2, r7, #28
 8000fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
					t2[i] = 0;
 8000fb0:	f107 0208 	add.w	r2, r7, #8
 8000fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 20; i++) {
 8000fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fc4:	2b13      	cmp	r3, #19
 8000fc6:	dded      	ble.n	8000fa4 <rellenar_botones+0xfc>
				}
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
 8000fcc:	e013      	b.n	8000ff6 <rellenar_botones+0x14e>
					t1[g] = t[k - 1][g];
 8000fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe0:	4413      	add	r3, r2
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	f107 021c 	add.w	r2, r7, #28
 8000fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
				for (int g = 0; g < (ancho_boton / ancho_letra); g++) {
 8000ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <rellenar_botones+0x288>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001002:	429a      	cmp	r2, r3
 8001004:	dbe3      	blt.n	8000fce <rellenar_botones+0x126>
				}
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <rellenar_botones+0x288>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800100c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
 8001012:	e019      	b.n	8001048 <rellenar_botones+0x1a0>
						g++) {
					t2[g - (ancho_boton / ancho_letra)] = t[k - 1][g];
 8001014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800101a:	3b01      	subs	r3, #1
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001026:	441a      	add	r2, r3
 8001028:	4b41      	ldr	r3, [pc, #260]	; (8001130 <rellenar_botones+0x288>)
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102e:	fb91 f3f3 	sdiv	r3, r1, r3
 8001032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001034:	1acb      	subs	r3, r1, r3
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800103c:	440b      	add	r3, r1
 800103e:	f803 2c50 	strb.w	r2, [r3, #-80]
						g++) {
 8001042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001044:	3301      	adds	r3, #1
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
				for (int g = (ancho_boton / ancho_letra); g <= strlen(t[k - 1]);
 8001048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800104a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800104e:	3b01      	subs	r3, #1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f8b5 	bl	80001c8 <strlen>
 800105e:	4602      	mov	r2, r0
 8001060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001062:	429a      	cmp	r2, r3
 8001064:	d2d6      	bcs.n	8001014 <rellenar_botones+0x16c>
				}
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <rellenar_botones+0x288>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461c      	mov	r4, r3
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8a9 	bl	80001c8 <strlen>
 8001076:	4602      	mov	r2, r0
 8001078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107a:	fb03 f302 	mul.w	r3, r3, r2
 800107e:	1ae3      	subs	r3, r4, r3
 8001080:	085a      	lsrs	r2, r3, #1
 8001082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001084:	4413      	add	r3, r2
 8001086:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2);
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <rellenar_botones+0x294>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	0fda      	lsrs	r2, r3, #31
 8001094:	4413      	add	r3, r2
 8001096:	105b      	asrs	r3, r3, #1
 8001098:	461a      	mov	r2, r3
				print(t1, x + (ancho_boton - strlen(t1) * ancho_letra) / 2,
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	441a      	add	r2, r3
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fbf4 	bl	8000890 <print>
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <rellenar_botones+0x288>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	461c      	mov	r4, r3
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f888 	bl	80001c8 <strlen>
 80010b8:	4602      	mov	r2, r0
 80010ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010bc:	fb03 f302 	mul.w	r3, r3, r2
 80010c0:	1ae3      	subs	r3, r4, r3
 80010c2:	085a      	lsrs	r2, r3, #1
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	4413      	add	r3, r2
 80010c8:	4619      	mov	r1, r3
						y + (alto_boton - alto_letra * 2) / 2 + alto_letra);
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <rellenar_botones+0x294>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	0fda      	lsrs	r2, r3, #31
 80010d6:	4413      	add	r3, r2
 80010d8:	105b      	asrs	r3, r3, #1
 80010da:	461a      	mov	r2, r3
 80010dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010de:	441a      	add	r2, r3
				print(t2, x + (ancho_boton - strlen(t2) * ancho_letra) / 2,
 80010e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e2:	441a      	add	r2, r3
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fbd1 	bl	8000890 <print>
			}

			k++;
 80010ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f0:	3301      	adds	r3, #1
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < columnas; i++) {
 80010f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f6:	3301      	adds	r3, #1
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <rellenar_botones+0x29c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001100:	429a      	cmp	r2, r3
 8001102:	f6ff aef3 	blt.w	8000eec <rellenar_botones+0x44>
	for (int j = 0; j < filas; j++) {
 8001106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001108:	3301      	adds	r3, #1
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <rellenar_botones+0x2a0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001112:	429a      	cmp	r2, r3
 8001114:	f6ff aee7 	blt.w	8000ee6 <rellenar_botones+0x3e>
		}
	}
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	bf00      	nop
 8001124:	2000003c 	.word	0x2000003c
 8001128:	20000018 	.word	0x20000018
 800112c:	20000118 	.word	0x20000118
 8001130:	20000008 	.word	0x20000008
 8001134:	20000000 	.word	0x20000000
 8001138:	2000011c 	.word	0x2000011c
 800113c:	2000000c 	.word	0x2000000c
 8001140:	20000004 	.word	0x20000004
 8001144:	2000004c 	.word	0x2000004c
 8001148:	20000048 	.word	0x20000048

0800114c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b0a5      	sub	sp, #148	; 0x94
 8001150:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001152:	f000 fb13 	bl	800177c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001156:	f000 f91d 	bl	8001394 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800115a:	f000 f9b3 	bl	80014c4 <MX_GPIO_Init>
	MX_I2C1_Init();
 800115e:	f000 f983 	bl	8001468 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	int opcion = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	64fb      	str	r3, [r7, #76]	; 0x4c
	rgb boton = { 0, 0, 255 };
 8001166:	2300      	movs	r3, #0
 8001168:	643b      	str	r3, [r7, #64]	; 0x40
 800116a:	2300      	movs	r3, #0
 800116c:	647b      	str	r3, [r7, #68]	; 0x44
 800116e:	23ff      	movs	r3, #255	; 0xff
 8001170:	64bb      	str	r3, [r7, #72]	; 0x48
	rgb marco = { 255, 255, 255 };
 8001172:	4a79      	ldr	r2, [pc, #484]	; (8001358 <main+0x20c>)
 8001174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001178:	ca07      	ldmia	r2, {r0, r1, r2}
 800117a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	rgb nmarco = { 255, 0, 0 };
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
	rgb texto = { 255, 255, 255 };
 800118a:	4a73      	ldr	r2, [pc, #460]	; (8001358 <main+0x20c>)
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	ca07      	ldmia	r2, {r0, r1, r2}
 8001192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clrScr();
 8001196:	f7ff fa8b 	bl	80006b0 <clrScr>
	setColor(255, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	20ff      	movs	r0, #255	; 0xff
 80011a0:	f7ff fa9a 	bl	80006d8 <setColor>
	fillRect(1, 1, 478, 40);
 80011a4:	2328      	movs	r3, #40	; 0x28
 80011a6:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80011aa:	2101      	movs	r1, #1
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fb23 	bl	80007f8 <fillRect>
	setColor(64, 64, 64);
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	2040      	movs	r0, #64	; 0x40
 80011b8:	f7ff fa8e 	bl	80006d8 <setColor>
	fillRect(1, 318, 478, 280);
 80011bc:	f44f 738c 	mov.w	r3, #280	; 0x118
 80011c0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80011c4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fb15 	bl	80007f8 <fillRect>
	setColor(255, 255, 255);
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	21ff      	movs	r1, #255	; 0xff
 80011d2:	20ff      	movs	r0, #255	; 0xff
 80011d4:	f7ff fa80 	bl	80006d8 <setColor>
	setBackColor(255, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	20ff      	movs	r0, #255	; 0xff
 80011de:	f7ff fa9d 	bl	800071c <setBackColor>
	setFont(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fbe6 	bl	80009b4 <setFont>
	print("* CASA DOMOTICA *", 50, 12);
 80011e8:	220c      	movs	r2, #12
 80011ea:	2132      	movs	r1, #50	; 0x32
 80011ec:	485b      	ldr	r0, [pc, #364]	; (800135c <main+0x210>)
 80011ee:	f7ff fb4f 	bl	8000890 <print>
	setBackColor(64, 64, 64);
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	2040      	movs	r0, #64	; 0x40
 80011f8:	f7ff fa90 	bl	800071c <setBackColor>
	setColor(255, 255, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	21ff      	movs	r1, #255	; 0xff
 8001200:	20ff      	movs	r0, #255	; 0xff
 8001202:	f7ff fa69 	bl	80006d8 <setColor>
	setFont(0);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fbd4 	bl	80009b4 <setFont>
	const char *t[3] = { "Sistemas", " Electronicos", " Digitales" };
 800120c:	4a54      	ldr	r2, [pc, #336]	; (8001360 <main+0x214>)
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	ca07      	ldmia	r2, {r0, r1, r2}
 8001214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printfrase(t, 20, 281, 3);
 8001218:	f107 0010 	add.w	r0, r7, #16
 800121c:	2303      	movs	r3, #3
 800121e:	f240 1219 	movw	r2, #281	; 0x119
 8001222:	2114      	movs	r1, #20
 8001224:	f7ff fb94 	bl	8000950 <printfrase>
	const char *t2[3] = { "Raul Herranz,", " Alejandro Sacristan",
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <main+0x218>)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	ca07      	ldmia	r2, {r0, r1, r2}
 800122e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			", Carlos Murillo" };
	printfrase(t2, 20, 300, 3);
 8001232:	1d38      	adds	r0, r7, #4
 8001234:	2303      	movs	r3, #3
 8001236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800123a:	2114      	movs	r1, #20
 800123c:	f7ff fb88 	bl	8000950 <printfrase>
	setColor(0, 0, 255);
 8001240:	22ff      	movs	r2, #255	; 0xff
 8001242:	2100      	movs	r1, #0
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fa47 	bl	80006d8 <setColor>
	drawRect(0, 0, 479, 319);
 800124a:	f240 133f 	movw	r3, #319	; 0x13f
 800124e:	f240 12df 	movw	r2, #479	; 0x1df
 8001252:	2100      	movs	r1, #0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fa83 	bl	8000760 <drawRect>
	botones(30, 70, 100, 70, 2, 5, boton, marco, nmarco, texto, 2, 3);
 800125a:	2303      	movs	r3, #3
 800125c:	930f      	str	r3, [sp, #60]	; 0x3c
 800125e:	2302      	movs	r3, #2
 8001260:	930e      	str	r3, [sp, #56]	; 0x38
 8001262:	ac0b      	add	r4, sp, #44	; 0x2c
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001270:	ac08      	add	r4, sp, #32
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800127a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800127e:	ac05      	add	r4, sp, #20
 8001280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001284:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800128c:	ac02      	add	r4, sp, #8
 800128e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800129a:	2305      	movs	r3, #5
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2302      	movs	r3, #2
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2346      	movs	r3, #70	; 0x46
 80012a4:	2264      	movs	r2, #100	; 0x64
 80012a6:	2146      	movs	r1, #70	; 0x46
 80012a8:	201e      	movs	r0, #30
 80012aa:	f7ff fb9d 	bl	80009e8 <botones>
	crear_botonera();
 80012ae:	f7ff fc4f 	bl	8000b50 <crear_botonera>
	setFont(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fb7e 	bl	80009b4 <setFont>
	rellenar_botones(t_menu);
 80012b8:	482b      	ldr	r0, [pc, #172]	; (8001368 <main+0x21c>)
 80012ba:	f7ff fdf5 	bl	8000ea8 <rellenar_botones>
	mostrartexto7s("   ");
 80012be:	482b      	ldr	r0, [pc, #172]	; (800136c <main+0x220>)
 80012c0:	f7ff f99c 	bl	80005fc <mostrartexto7s>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (debouncer(&button[0], GPIOA, GPIO_PIN_0)) {
 80012c4:	2201      	movs	r2, #1
 80012c6:	492a      	ldr	r1, [pc, #168]	; (8001370 <main+0x224>)
 80012c8:	482a      	ldr	r0, [pc, #168]	; (8001374 <main+0x228>)
 80012ca:	f7ff f947 	bl	800055c <debouncer>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f7      	beq.n	80012c4 <main+0x178>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80012d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d8:	4827      	ldr	r0, [pc, #156]	; (8001378 <main+0x22c>)
 80012da:	f000 fda0 	bl	8001e1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80012de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e2:	4825      	ldr	r0, [pc, #148]	; (8001378 <main+0x22c>)
 80012e4:	f000 fd9b 	bl	8001e1e <HAL_GPIO_TogglePin>
			opcion++;
 80012e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ea:	3301      	adds	r3, #1
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
			resaltar_boton(opcion);
 80012ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80012f0:	f7ff fcb2 	bl	8000c58 <resaltar_boton>
			setFont(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fb5d 	bl	80009b4 <setFont>
			rellenar_botones(t_menu);
 80012fa:	481b      	ldr	r0, [pc, #108]	; (8001368 <main+0x21c>)
 80012fc:	f7ff fdd4 	bl	8000ea8 <rellenar_botones>
			if (opcion == 1) {
 8001300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001302:	2b01      	cmp	r3, #1
 8001304:	d103      	bne.n	800130e <main+0x1c2>
				mostrartexto7s("luces");
 8001306:	481d      	ldr	r0, [pc, #116]	; (800137c <main+0x230>)
 8001308:	f7ff f978 	bl	80005fc <mostrartexto7s>
 800130c:	e7da      	b.n	80012c4 <main+0x178>
			}else if(opcion == 2) {
 800130e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001310:	2b02      	cmp	r3, #2
 8001312:	d103      	bne.n	800131c <main+0x1d0>
				mostrartexto7s("persianas");
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <main+0x234>)
 8001316:	f7ff f971 	bl	80005fc <mostrartexto7s>
 800131a:	e7d3      	b.n	80012c4 <main+0x178>
			}else if(opcion == 3) {
 800131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131e:	2b03      	cmp	r3, #3
 8001320:	d103      	bne.n	800132a <main+0x1de>
				mostrartexto7s("riego");
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <main+0x238>)
 8001324:	f7ff f96a 	bl	80005fc <mostrartexto7s>
 8001328:	e7cc      	b.n	80012c4 <main+0x178>
			}else if(opcion == 4) {
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	2b04      	cmp	r3, #4
 800132e:	d103      	bne.n	8001338 <main+0x1ec>
				mostrartexto7s("clima");
 8001330:	4815      	ldr	r0, [pc, #84]	; (8001388 <main+0x23c>)
 8001332:	f7ff f963 	bl	80005fc <mostrartexto7s>
 8001336:	e7c5      	b.n	80012c4 <main+0x178>
			}else if(opcion == 5) {
 8001338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133a:	2b05      	cmp	r3, #5
 800133c:	d103      	bne.n	8001346 <main+0x1fa>
				mostrartexto7s("audio");
 800133e:	4813      	ldr	r0, [pc, #76]	; (800138c <main+0x240>)
 8001340:	f7ff f95c 	bl	80005fc <mostrartexto7s>
 8001344:	e7be      	b.n	80012c4 <main+0x178>
			}else if (opcion == 6) {
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	2b06      	cmp	r3, #6
 800134a:	d1bb      	bne.n	80012c4 <main+0x178>
				mostrartexto7s("seguridad");
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <main+0x244>)
 800134e:	f7ff f955 	bl	80005fc <mostrartexto7s>
				opcion = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (debouncer(&button[0], GPIOA, GPIO_PIN_0)) {
 8001356:	e7b5      	b.n	80012c4 <main+0x178>
 8001358:	08003138 	.word	0x08003138
 800135c:	080030e8 	.word	0x080030e8
 8001360:	08003144 	.word	0x08003144
 8001364:	08003150 	.word	0x08003150
 8001368:	20000050 	.word	0x20000050
 800136c:	080030fc 	.word	0x080030fc
 8001370:	40020000 	.word	0x40020000
 8001374:	200000f0 	.word	0x200000f0
 8001378:	40020c00 	.word	0x40020c00
 800137c:	08003100 	.word	0x08003100
 8001380:	08003108 	.word	0x08003108
 8001384:	08003114 	.word	0x08003114
 8001388:	0800311c 	.word	0x0800311c
 800138c:	08003124 	.word	0x08003124
 8001390:	0800312c 	.word	0x0800312c

08001394 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fe3e 	bl	8003024 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <SystemClock_Config+0xcc>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <SystemClock_Config+0xcc>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <SystemClock_Config+0xcc>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <SystemClock_Config+0xd0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <SystemClock_Config+0xd0>)
 80013de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <SystemClock_Config+0xd0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001404:	2308      	movs	r3, #8
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800140c:	2304      	movs	r3, #4
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001410:	2307      	movs	r3, #7
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f97f 	bl	800271c <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x94>
		Error_Handler();
 8001424:	f000 f8c0 	bl	80015a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001434:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001438:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800143a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fbe0 	bl	8002c0c <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xc2>
		Error_Handler();
 8001452:	f000 f8a9 	bl	80015a8 <Error_Handler>
	}
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	; 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C1_Init+0x50>)
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <MX_I2C1_Init+0x54>)
 8001470:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x58>)
 8001476:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_I2C1_Init+0x50>)
 80014a6:	f000 fced 	bl	8001e84 <HAL_I2C_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80014b0:	f000 f87a 	bl	80015a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000009c 	.word	0x2000009c
 80014bc:	40005400 	.word	0x40005400
 80014c0:	000186a0 	.word	0x000186a0

080014c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <MX_GPIO_Init+0xd8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a2e      	ldr	r2, [pc, #184]	; (800159c <MX_GPIO_Init+0xd8>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <MX_GPIO_Init+0xd8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_GPIO_Init+0xd8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <MX_GPIO_Init+0xd8>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_GPIO_Init+0xd8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_GPIO_Init+0xd8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <MX_GPIO_Init+0xd8>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_GPIO_Init+0xd8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001534:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MX_GPIO_Init+0xdc>)
 8001536:	f000 fc59 	bl	8001dec <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800153a:	2303      	movs	r3, #3
 800153c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001542:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_GPIO_Init+0xe0>)
 8001550:	f000 fa98 	bl	8001a84 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001554:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001558:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <MX_GPIO_Init+0xdc>)
 800156e:	f000 fa89 	bl	8001a84 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2006      	movs	r0, #6
 8001578:	f000 fa4d 	bl	8001a16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800157c:	2006      	movs	r0, #6
 800157e:	f000 fa66 	bl	8001a4e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2007      	movs	r0, #7
 8001588:	f000 fa45 	bl	8001a16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800158c:	2007      	movs	r0, #7
 800158e:	f000 fa5e 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40020000 	.word	0x40020000

080015a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015f2:	2007      	movs	r0, #7
 80015f4:	f000 fa04 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_I2C_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001652:	2304      	movs	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <HAL_I2C_MspInit+0x8c>)
 800165e:	f000 fa11 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_I2C_MspInit+0x88>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_I2C_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f89e 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f000 fbb1 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016fa:	2002      	movs	r0, #2
 80016fc:	f000 fbaa 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
 8001732:	2300      	movs	r3, #0
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:
 8001736:	58d4      	ldr	r4, [r2, r3]
 8001738:	50c4      	str	r4, [r0, r3]
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:
 800173c:	18c4      	adds	r4, r0, r3
 800173e:	428c      	cmp	r4, r1
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
 8001746:	2300      	movs	r3, #0
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:
 800174e:	42a2      	cmp	r2, r4
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
 8001756:	f001 fc41 	bl	8002fdc <__libc_init_array>
 800175a:	f7ff fcf7 	bl	800114c <main>
 800175e:	4770      	bx	lr
 8001760:	20020000 	.word	0x20020000
 8001764:	20000000 	.word	0x20000000
 8001768:	20000074 	.word	0x20000074
 800176c:	08003184 	.word	0x08003184
 8001770:	20000074 	.word	0x20000074
 8001774:	20000124 	.word	0x20000124

08001778 <ADC_IRQHandler>:
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f92b 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff ff00 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f943 	bl	8001a6a <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f90b 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000068 	.word	0x20000068
 8001818:	20000070 	.word	0x20000070
 800181c:	2000006c 	.word	0x2000006c

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000070 	.word	0x20000070
 8001844:	20000120 	.word	0x20000120

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000120 	.word	0x20000120

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e16b      	b.n	8001d78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 815a 	bne.w	8001d72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80b4 	beq.w	8001d72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a5b      	ldr	r2, [pc, #364]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x314>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02b      	beq.n	8001caa <HAL_GPIO_Init+0x226>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_GPIO_Init+0x31c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x21e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4f      	ldr	r2, [pc, #316]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x21a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x216>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <HAL_GPIO_Init+0x328>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <HAL_GPIO_Init+0x32c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_GPIO_Init+0x330>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x20a>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00e      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c8e:	2308      	movs	r3, #8
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c92:	2306      	movs	r3, #6
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x228>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae90 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb52 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e12b      	b.n	80020ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fbaa 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee8:	f001 f864 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a81      	ldr	r2, [pc, #516]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d807      	bhi.n	8001f08 <HAL_I2C_Init+0x84>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a80      	ldr	r2, [pc, #512]	; (80020fc <HAL_I2C_Init+0x278>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	bf94      	ite	ls
 8001f00:	2301      	movls	r3, #1
 8001f02:	2300      	movhi	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e006      	b.n	8001f16 <HAL_I2C_Init+0x92>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a7d      	ldr	r2, [pc, #500]	; (8002100 <HAL_I2C_Init+0x27c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0e7      	b.n	80020ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a78      	ldr	r2, [pc, #480]	; (8002104 <HAL_I2C_Init+0x280>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a6a      	ldr	r2, [pc, #424]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d802      	bhi.n	8001f58 <HAL_I2C_Init+0xd4>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3301      	adds	r3, #1
 8001f56:	e009      	b.n	8001f6c <HAL_I2C_Init+0xe8>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a69      	ldr	r2, [pc, #420]	; (8002108 <HAL_I2C_Init+0x284>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	495c      	ldr	r1, [pc, #368]	; (80020f8 <HAL_I2C_Init+0x274>)
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d819      	bhi.n	8001fc0 <HAL_I2C_Init+0x13c>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e59      	subs	r1, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_I2C_Init+0x138>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	e051      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e04f      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d111      	bne.n	8001fec <HAL_I2C_Init+0x168>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e012      	b.n	8002012 <HAL_I2C_Init+0x18e>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	0099      	lsls	r1, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Init+0x196>
 8002016:	2301      	movs	r3, #1
 8002018:	e022      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <HAL_I2C_Init+0x1bc>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e58      	subs	r0, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	440b      	add	r3, r1
 8002030:	fbb0 f3f3 	udiv	r3, r0, r3
 8002034:	3301      	adds	r3, #1
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203e:	e00f      	b.n	8002060 <HAL_I2C_Init+0x1dc>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	0099      	lsls	r1, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	6809      	ldr	r1, [r1, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6911      	ldr	r1, [r2, #16]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68d2      	ldr	r2, [r2, #12]
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	000186a0 	.word	0x000186a0
 80020fc:	001e847f 	.word	0x001e847f
 8002100:	003d08ff 	.word	0x003d08ff
 8002104:	431bde83 	.word	0x431bde83
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	461a      	mov	r2, r3
 8002118:	460b      	mov	r3, r1
 800211a:	817b      	strh	r3, [r7, #10]
 800211c:	4613      	mov	r3, r2
 800211e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fb92 	bl	8001848 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	f040 80e0 	bne.w	80022f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2319      	movs	r3, #25
 800213a:	2201      	movs	r2, #1
 800213c:	4970      	ldr	r1, [pc, #448]	; (8002300 <HAL_I2C_Master_Transmit+0x1f4>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f964 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	e0d3      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2C_Master_Transmit+0x50>
 8002158:	2302      	movs	r3, #2
 800215a:	e0cc      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d007      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2221      	movs	r2, #33	; 0x21
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2210      	movs	r2, #16
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_I2C_Master_Transmit+0x1f8>)
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c4:	8979      	ldrh	r1, [r7, #10]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f89c 	bl	8002308 <I2C_MasterRequestWrite>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e08d      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021f0:	e066      	b.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f9de 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d11b      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x188>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d017      	beq.n	8002294 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	6a39      	ldr	r1, [r7, #32]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f9ce 	bl	800263a <I2C_WaitOnBTFFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e01a      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d194      	bne.n	80021f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000

08002308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d006      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002330:	d108      	bne.n	8002344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	2b12      	cmp	r3, #18
 800234a:	d107      	bne.n	800235c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f84f 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002382:	d103      	bne.n	800238c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e035      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e01b      	b.n	80023e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030f 	orn	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <I2C_MasterRequestWrite+0xfc>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f875 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e010      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <I2C_MasterRequestWrite+0x100>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f865 	bl	80024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	00010008 	.word	0x00010008
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241c:	e025      	b.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d021      	beq.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff fa0f 	bl	8001848 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d116      	bne.n	800246a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e023      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10d      	bne.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	e00c      	b.n	80024aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d0b6      	beq.n	800241e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c8:	e051      	b.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d123      	bne.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e046      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d021      	beq.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7ff f98d 	bl	8001848 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e020      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d10c      	bne.n	8002592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e00b      	b.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	43da      	mvns	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4013      	ands	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d18d      	bne.n	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c4:	e02d      	b.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f878 	bl	80026bc <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02d      	b.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d021      	beq.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f933 	bl	8001848 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d116      	bne.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e007      	b.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d1ca      	bne.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002646:	e02d      	b.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f837 	bl	80026bc <I2C_IsAcknowledgeFailed>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e02d      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d021      	beq.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff f8f2 	bl	8001848 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d1ca      	bne.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d11b      	bne.n	800270c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e264      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d075      	beq.n	8002826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273a:	4ba3      	ldr	r3, [pc, #652]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b04      	cmp	r3, #4
 8002744:	d00c      	beq.n	8002760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002746:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274e:	2b08      	cmp	r3, #8
 8002750:	d112      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b99      	ldr	r3, [pc, #612]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05b      	beq.n	8002824 <HAL_RCC_OscConfig+0x108>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d157      	bne.n	8002824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e23f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x74>
 8002782:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a90      	ldr	r2, [pc, #576]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xb0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x98>
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a8a      	ldr	r2, [pc, #552]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a87      	ldr	r2, [pc, #540]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xb0>
 80027b4:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a83      	ldr	r2, [pc, #524]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a80      	ldr	r2, [pc, #512]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff f838 	bl	8001848 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7ff f834 	bl	8001848 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e204      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xc0>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7ff f824 	bl	8001848 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7ff f820 	bl	8001848 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1f0      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0xe8>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x152>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1c4      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4952      	ldr	r1, [pc, #328]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCC_OscConfig+0x2b0>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe ffd9 	bl	8001848 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe ffd5 	bl	8001848 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1a5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4940      	ldr	r1, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_OscConfig+0x2b0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe ffb8 	bl	8001848 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe ffb4 	bl	8001848 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e184      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d030      	beq.n	8002968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCC_OscConfig+0x2b4>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe ff98 	bl	8001848 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe ff94 	bl	8001848 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e164      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x200>
 800293a:	e015      	b.n	8002968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x2b4>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe ff81 	bl	8001848 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe ff7d 	bl	8001848 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e14d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe ff43 	bl	8001848 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e011      	b.n	80029ea <HAL_RCC_OscConfig+0x2ce>
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	42470000 	.word	0x42470000
 80029d0:	42470e80 	.word	0x42470e80
 80029d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fe ff36 	bl	8001848 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e106      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x4e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	e01c      	b.n	8002a46 <HAL_RCC_OscConfig+0x32a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x312>
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCC_OscConfig+0x32a>
 8002a2e:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a74      	ldr	r2, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d015      	beq.n	8002a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fefb 	bl	8001848 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fef7 	bl	8001848 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0c5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ee      	beq.n	8002a56 <HAL_RCC_OscConfig+0x33a>
 8002a78:	e014      	b.n	8002aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fee5 	bl	8001848 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fee1 	bl	8001848 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0af      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b56      	ldr	r3, [pc, #344]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 809b 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d05c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d141      	bne.n	8002b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe feb5 	bl	8001848 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe feb1 	bl	8001848 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e081      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	4937      	ldr	r1, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe8a 	bl	8001848 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fe86 	bl	8001848 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e056      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x41c>
 8002b56:	e04e      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fe73 	bl	8001848 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fe fe6f 	bl	8001848 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002b84:	e037      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e032      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d121      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d11a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40007000 	.word	0x40007000
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470060 	.word	0x42470060

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cc      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d90c      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a58      	ldr	r2, [pc, #352]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d044      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e067      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4934      	ldr	r1, [pc, #208]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fda4 	bl	8001848 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7fe fda0 	bl	8001848 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e04f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d20c      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f821 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fd04 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	0800315c 	.word	0x0800315c
 8002dd0:	20000068 	.word	0x20000068
 8002dd4:	2000006c 	.word	0x2000006c

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	2300      	movs	r3, #0
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df0:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d00d      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x40>
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	f200 80bd 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x34>
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e0a:	e0b7      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e0e:	60bb      	str	r3, [r7, #8]
       break;
 8002e10:	e0b7      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e12:	4b61      	ldr	r3, [pc, #388]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e14:	60bb      	str	r3, [r7, #8]
      break;
 8002e16:	e0b4      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e18:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04d      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	461a      	mov	r2, r3
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	ea02 0800 	and.w	r8, r2, r0
 8002e46:	ea03 0901 	and.w	r9, r3, r1
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	014b      	lsls	r3, r1, #5
 8002e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e5c:	0142      	lsls	r2, r0, #5
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	ebb0 0008 	subs.w	r0, r0, r8
 8002e66:	eb61 0109 	sbc.w	r1, r1, r9
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e78:	0182      	lsls	r2, r0, #6
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e80:	f04f 0000 	mov.w	r0, #0
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	00d9      	lsls	r1, r3, #3
 8002e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8e:	00d0      	lsls	r0, r2, #3
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	eb12 0208 	adds.w	r2, r2, r8
 8002e98:	eb43 0309 	adc.w	r3, r3, r9
 8002e9c:	f04f 0000 	mov.w	r0, #0
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	0259      	lsls	r1, r3, #9
 8002ea6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eaa:	0250      	lsls	r0, r2, #9
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	f7fd f98c 	bl	80001d8 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e04a      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	ea02 0400 	and.w	r4, r2, r0
 8002ee2:	ea03 0501 	and.w	r5, r3, r1
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	014b      	lsls	r3, r1, #5
 8002ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ef8:	0142      	lsls	r2, r0, #5
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	1b00      	subs	r0, r0, r4
 8002f00:	eb61 0105 	sbc.w	r1, r1, r5
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	018b      	lsls	r3, r1, #6
 8002f0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f12:	0182      	lsls	r2, r0, #6
 8002f14:	1a12      	subs	r2, r2, r0
 8002f16:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1a:	f04f 0000 	mov.w	r0, #0
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	00d9      	lsls	r1, r3, #3
 8002f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f28:	00d0      	lsls	r0, r2, #3
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	1912      	adds	r2, r2, r4
 8002f30:	eb45 0303 	adc.w	r3, r5, r3
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	0299      	lsls	r1, r3, #10
 8002f3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f42:	0290      	lsls	r0, r2, #10
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	f7fd f940 	bl	80001d8 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	60bb      	str	r3, [r7, #8]
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f7e:	60bb      	str	r3, [r7, #8]
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	68bb      	ldr	r3, [r7, #8]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000068 	.word	0x20000068

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	0800316c 	.word	0x0800316c

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	4d0d      	ldr	r5, [pc, #52]	; (8003014 <__libc_init_array+0x38>)
 8002fe0:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	4d0b      	ldr	r5, [pc, #44]	; (800301c <__libc_init_array+0x40>)
 8002fee:	4c0c      	ldr	r4, [pc, #48]	; (8003020 <__libc_init_array+0x44>)
 8002ff0:	f000 f820 	bl	8003034 <_init>
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	f855 3b04 	ldr.w	r3, [r5], #4
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	f855 3b04 	ldr.w	r3, [r5], #4
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	0800317c 	.word	0x0800317c
 8003018:	0800317c 	.word	0x0800317c
 800301c:	0800317c 	.word	0x0800317c
 8003020:	08003180 	.word	0x08003180

08003024 <memset>:
 8003024:	4402      	add	r2, r0
 8003026:	4603      	mov	r3, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
