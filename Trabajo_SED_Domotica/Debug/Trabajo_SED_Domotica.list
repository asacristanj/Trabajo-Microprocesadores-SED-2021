
Trabajo_SED_Domotica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b4  080062b4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062bc  080062bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080062c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000260  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c9a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002306  00000000  00000000  00033d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001140  00000000  00000000  00037218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d10  00000000  00000000  00038358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014562  00000000  00000000  0005b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab83  00000000  00000000  0006f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a14d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  0014a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc0 	.word	0x08005cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005cc0 	.word	0x08005cc0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <setLuces>:
int estado_luces=0;//0 off 1 on 2 auto
int8_t adcval[10];
uint32_t counter_luces=0, tickstart_luces=0;
int umbral_luces=80;

void setLuces(int n){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	if(n==0){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d110      	bne.n	80005b8 <setLuces+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <setLuces+0x88>)
 800059e:	f002 fe47 	bl	8003230 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2110      	movs	r1, #16
 80005a6:	481b      	ldr	r0, [pc, #108]	; (8000614 <setLuces+0x8c>)
 80005a8:	f002 fe42 	bl	8003230 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	4818      	ldr	r0, [pc, #96]	; (8000614 <setLuces+0x8c>)
 80005b2:	f002 fe3d 	bl	8003230 <HAL_GPIO_WritePin>
 80005b6:	e023      	b.n	8000600 <setLuces+0x78>
	}else if(n==1){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d110      	bne.n	80005e0 <setLuces+0x58>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	4812      	ldr	r0, [pc, #72]	; (8000610 <setLuces+0x88>)
 80005c6:	f002 fe33 	bl	8003230 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2110      	movs	r1, #16
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <setLuces+0x8c>)
 80005d0:	f002 fe2e 	bl	8003230 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <setLuces+0x8c>)
 80005da:	f002 fe29 	bl	8003230 <HAL_GPIO_WritePin>
 80005de:	e00f      	b.n	8000600 <setLuces+0x78>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <setLuces+0x88>)
 80005e8:	f002 fe22 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <setLuces+0x8c>)
 80005f2:	f002 fe1d 	bl	8003230 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <setLuces+0x8c>)
 80005fc:	f002 fe18 	bl	8003230 <HAL_GPIO_WritePin>
	}
	estado_luces=n;
 8000600:	4a05      	ldr	r2, [pc, #20]	; (8000618 <setLuces+0x90>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40020000 	.word	0x40020000
 8000618:	2000009c 	.word	0x2000009c

0800061c <getEstadoLuces>:

int getEstadoLuces(){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	return estado_luces;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <getEstadoLuces+0x14>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2000009c 	.word	0x2000009c

08000634 <cambiarEstadoLuces>:

void cambiarEstadoLuces(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
		if(estado_luces==0){
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <cambiarEstadoLuces+0x38>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <cambiarEstadoLuces+0x14>
			setLuces(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ffa1 	bl	8000588 <setLuces>
			setLuces(2);
		}else if(estado_luces==2){
			setLuces(0);
		}

}
 8000646:	e00e      	b.n	8000666 <cambiarEstadoLuces+0x32>
		}else if(estado_luces==1){
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <cambiarEstadoLuces+0x38>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d103      	bne.n	8000658 <cambiarEstadoLuces+0x24>
			setLuces(2);
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff ff99 	bl	8000588 <setLuces>
}
 8000656:	e006      	b.n	8000666 <cambiarEstadoLuces+0x32>
		}else if(estado_luces==2){
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <cambiarEstadoLuces+0x38>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d102      	bne.n	8000666 <cambiarEstadoLuces+0x32>
			setLuces(0);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff ff91 	bl	8000588 <setLuces>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000009c 	.word	0x2000009c

08000670 <medirLDR>:

void setUmbralLuces(int u){
	umbral_luces=u;
}

void medirLDR(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	if(estado_luces==2 && counter_luces>300){
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <medirLDR+0xcc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d151      	bne.n	8000722 <medirLDR+0xb2>
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <medirLDR+0xd0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000686:	d94c      	bls.n	8000722 <medirLDR+0xb2>
		counter_luces=0;
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <medirLDR+0xd0>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		int media=0;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
		tickstart_luces=HAL_GetTick();
 8000692:	f001 fe69 	bl	8002368 <HAL_GetTick>
 8000696:	4603      	mov	r3, r0
 8000698:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <medirLDR+0xd4>)
 800069a:	6013      	str	r3, [r2, #0]
		int i=0;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
		for(i=0;i<10;i++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	e01f      	b.n	80006e6 <medirLDR+0x76>
			HAL_ADC_Start(&hadc1);
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <medirLDR+0xd8>)
 80006a8:	f001 feae 	bl	8002408 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80006ac:	2164      	movs	r1, #100	; 0x64
 80006ae:	4826      	ldr	r0, [pc, #152]	; (8000748 <medirLDR+0xd8>)
 80006b0:	f001 ffaf 	bl	8002612 <HAL_ADC_PollForConversion>
			adcval[i]=HAL_ADC_GetValue(&hadc1);
 80006b4:	4824      	ldr	r0, [pc, #144]	; (8000748 <medirLDR+0xd8>)
 80006b6:	f002 f837 	bl	8002728 <HAL_ADC_GetValue>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b259      	sxtb	r1, r3
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <medirLDR+0xdc>)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	460a      	mov	r2, r1
 80006c6:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <medirLDR+0xd8>)
 80006ca:	f001 ff6f 	bl	80025ac <HAL_ADC_Stop>
			media+=adcval[i];
 80006ce:	4a1f      	ldr	r2, [pc, #124]	; (800074c <medirLDR+0xdc>)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	f993 3000 	ldrsb.w	r3, [r3]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
		for(i=0;i<10;i++){
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	dddc      	ble.n	80006a6 <medirLDR+0x36>
		}
		media=media/10;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <medirLDR+0xe0>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	1092      	asrs	r2, r2, #2
 80006f6:	17db      	asrs	r3, r3, #31
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	607b      	str	r3, [r7, #4]
			if(media>umbral_luces){
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <medirLDR+0xe4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	429a      	cmp	r2, r3
 8000704:	dd06      	ble.n	8000714 <medirLDR+0xa4>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <medirLDR+0xe8>)
 800070e:	f002 fd8f 	bl	8003230 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000712:	e00f      	b.n	8000734 <medirLDR+0xc4>
			}else{
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <medirLDR+0xe8>)
 800071c:	f002 fd88 	bl	8003230 <HAL_GPIO_WritePin>
	if(estado_luces==2 && counter_luces>300){
 8000720:	e008      	b.n	8000734 <medirLDR+0xc4>
			}
	}else{
		counter_luces=HAL_GetTick()-tickstart_luces;
 8000722:	f001 fe21 	bl	8002368 <HAL_GetTick>
 8000726:	4602      	mov	r2, r0
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <medirLDR+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <medirLDR+0xd0>)
 8000730:	6013      	str	r3, [r2, #0]
	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000009c 	.word	0x2000009c
 8000740:	200000a0 	.word	0x200000a0
 8000744:	200000a4 	.word	0x200000a4
 8000748:	2000018c 	.word	0x2000018c
 800074c:	200002bc 	.word	0x200002bc
 8000750:	66666667 	.word	0x66666667
 8000754:	20000000 	.word	0x20000000
 8000758:	40020c00 	.word	0x40020c00

0800075c <luces>:

void luces(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	medirLDR();
 8000760:	f7ff ff86 	bl	8000670 <medirLDR>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <setEstadoPersianas>:
#include "main.h"

int estado_persianas=0; //0 parado 1 subiendo 2 bajando
int estado_anterior_persianas=0;

void setEstadoPersianas(int n){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	estado_anterior_persianas=estado_persianas;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <setEstadoPersianas+0x84>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <setEstadoPersianas+0x88>)
 8000776:	6013      	str	r3, [r2, #0]
	estado_persianas=n;
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <setEstadoPersianas+0x84>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
	if(estado_persianas==0){
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <setEstadoPersianas+0x84>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10c      	bne.n	80007a0 <setEstadoPersianas+0x38>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <setEstadoPersianas+0x8c>)
 800078e:	f002 fd4f 	bl	8003230 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4816      	ldr	r0, [pc, #88]	; (80007f4 <setEstadoPersianas+0x8c>)
 800079a:	f002 fd49 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}else if(estado_persianas==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
}
 800079e:	e020      	b.n	80007e2 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==1){
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <setEstadoPersianas+0x84>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d10c      	bne.n	80007c2 <setEstadoPersianas+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <setEstadoPersianas+0x8c>)
 80007b0:	f002 fd3e 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <setEstadoPersianas+0x8c>)
 80007bc:	f002 fd38 	bl	8003230 <HAL_GPIO_WritePin>
}
 80007c0:	e00f      	b.n	80007e2 <setEstadoPersianas+0x7a>
	}else if(estado_persianas==2){
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <setEstadoPersianas+0x84>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d10b      	bne.n	80007e2 <setEstadoPersianas+0x7a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <setEstadoPersianas+0x8c>)
 80007d2:	f002 fd2d 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <setEstadoPersianas+0x8c>)
 80007de:	f002 fd27 	bl	8003230 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a8 	.word	0x200000a8
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <getEstadoPersianas>:

int getEstadoPersianas(){
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	return estado_persianas;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <getEstadoPersianas+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200000a8 	.word	0x200000a8

08000810 <getEstadoAnteriorPersianas>:

int getEstadoAnteriorPersianas(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	return estado_anterior_persianas;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <getEstadoAnteriorPersianas+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200000ac 	.word	0x200000ac

08000828 <cambiarEstadoPersianas>:

void cambiarEstadoPersianas(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==2){
 800082c:	f7ff ffe4 	bl	80007f8 <getEstadoPersianas>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d108      	bne.n	8000848 <cambiarEstadoPersianas+0x20>
 8000836:	f7ff ffeb 	bl	8000810 <getEstadoAnteriorPersianas>
 800083a:	4603      	mov	r3, r0
 800083c:	2b02      	cmp	r3, #2
 800083e:	d103      	bne.n	8000848 <cambiarEstadoPersianas+0x20>
		setEstadoPersianas(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff91 	bl	8000768 <setEstadoPersianas>
 8000846:	e02d      	b.n	80008a4 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==1){
 8000848:	f7ff ffd6 	bl	80007f8 <getEstadoPersianas>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d108      	bne.n	8000864 <cambiarEstadoPersianas+0x3c>
 8000852:	f7ff ffdd 	bl	8000810 <getEstadoAnteriorPersianas>
 8000856:	4603      	mov	r3, r0
 8000858:	2b01      	cmp	r3, #1
 800085a:	d103      	bne.n	8000864 <cambiarEstadoPersianas+0x3c>
		setEstadoPersianas(2);
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff ff83 	bl	8000768 <setEstadoPersianas>
 8000862:	e01f      	b.n	80008a4 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==0 && getEstadoAnteriorPersianas()==0){
 8000864:	f7ff ffc8 	bl	80007f8 <getEstadoPersianas>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d108      	bne.n	8000880 <cambiarEstadoPersianas+0x58>
 800086e:	f7ff ffcf 	bl	8000810 <getEstadoAnteriorPersianas>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d103      	bne.n	8000880 <cambiarEstadoPersianas+0x58>
		setEstadoPersianas(2);
 8000878:	2002      	movs	r0, #2
 800087a:	f7ff ff75 	bl	8000768 <setEstadoPersianas>
 800087e:	e011      	b.n	80008a4 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==1){
 8000880:	f7ff ffba 	bl	80007f8 <getEstadoPersianas>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d103      	bne.n	8000892 <cambiarEstadoPersianas+0x6a>
		setEstadoPersianas(0);
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ff6c 	bl	8000768 <setEstadoPersianas>
	}else if(getEstadoPersianas()==2){
		setEstadoPersianas(0);
	}
}
 8000890:	e008      	b.n	80008a4 <cambiarEstadoPersianas+0x7c>
	}else if(getEstadoPersianas()==2){
 8000892:	f7ff ffb1 	bl	80007f8 <getEstadoPersianas>
 8000896:	4603      	mov	r3, r0
 8000898:	2b02      	cmp	r3, #2
 800089a:	d103      	bne.n	80008a4 <cambiarEstadoPersianas+0x7c>
		setEstadoPersianas(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ff63 	bl	8000768 <setEstadoPersianas>
}
 80008a2:	e7ff      	b.n	80008a4 <cambiarEstadoPersianas+0x7c>
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <setEstadoRiego>:

int estado_riego=2; //0 abrir electrovalvula, 1 cerrar electrovalvula, 2 parar electrovalvula
int estado_anterior_riego=2;
uint32_t tickstart_riego;

void setEstadoRiego(int n){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	estado_anterior_riego=estado_riego;
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <setEstadoRiego+0x8c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a20      	ldr	r2, [pc, #128]	; (8000938 <setEstadoRiego+0x90>)
 80008b6:	6013      	str	r3, [r2, #0]
	estado_riego=n;
 80008b8:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <setEstadoRiego+0x8c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
	tickstart_riego=HAL_GetTick();
 80008be:	f001 fd53 	bl	8002368 <HAL_GetTick>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <setEstadoRiego+0x94>)
 80008c6:	6013      	str	r3, [r2, #0]
	if(estado_riego==0){
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <setEstadoRiego+0x8c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10c      	bne.n	80008ea <setEstadoRiego+0x42>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	481a      	ldr	r0, [pc, #104]	; (8000940 <setEstadoRiego+0x98>)
 80008d8:	f002 fcaa 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <setEstadoRiego+0x98>)
 80008e4:	f002 fca4 	bl	8003230 <HAL_GPIO_WritePin>
	}
	else if(estado_riego==2){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
}
 80008e8:	e020      	b.n	800092c <setEstadoRiego+0x84>
	}else if(estado_riego==1){
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <setEstadoRiego+0x8c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10c      	bne.n	800090c <setEstadoRiego+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <setEstadoRiego+0x98>)
 80008fa:	f002 fc99 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <setEstadoRiego+0x98>)
 8000906:	f002 fc93 	bl	8003230 <HAL_GPIO_WritePin>
}
 800090a:	e00f      	b.n	800092c <setEstadoRiego+0x84>
	else if(estado_riego==2){
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <setEstadoRiego+0x8c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d10b      	bne.n	800092c <setEstadoRiego+0x84>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <setEstadoRiego+0x98>)
 800091c:	f002 fc88 	bl	8003230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <setEstadoRiego+0x98>)
 8000928:	f002 fc82 	bl	8003230 <HAL_GPIO_WritePin>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000004 	.word	0x20000004
 8000938:	20000008 	.word	0x20000008
 800093c:	200000f8 	.word	0x200000f8
 8000940:	40020c00 	.word	0x40020c00

08000944 <cambiarEstadoRiego>:

void cambiarEstadoRiego(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	if(estado_anterior_riego==0){
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <cambiarEstadoRiego+0x30>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <cambiarEstadoRiego+0x14>
		setEstadoRiego(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff ffa9 	bl	80008a8 <setEstadoRiego>
	}else if(estado_anterior_riego==1){
		setEstadoRiego(0);
	}else{
		setEstadoRiego(0);
	}
}
 8000956:	e00a      	b.n	800096e <cambiarEstadoRiego+0x2a>
	}else if(estado_anterior_riego==1){
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <cambiarEstadoRiego+0x30>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d103      	bne.n	8000968 <cambiarEstadoRiego+0x24>
		setEstadoRiego(0);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff ffa1 	bl	80008a8 <setEstadoRiego>
}
 8000966:	e002      	b.n	800096e <cambiarEstadoRiego+0x2a>
		setEstadoRiego(0);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff ff9d 	bl	80008a8 <setEstadoRiego>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <getEstadoAnteriorRiego>:
int getEstadoAnteriorRiego(){
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	return estado_anterior_riego;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <getEstadoAnteriorRiego+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <temporizador_riego>:
void temporizador_riego(){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	if(estado_riego==0 || estado_riego==1){
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <temporizador_riego+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <temporizador_riego+0x14>
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <temporizador_riego+0x30>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10b      	bne.n	80009bc <temporizador_riego+0x2c>
		if(HAL_GetTick()-tickstart_riego>1000){
 80009a4:	f001 fce0 	bl	8002368 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <temporizador_riego+0x34>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b4:	d902      	bls.n	80009bc <temporizador_riego+0x2c>
			setEstadoRiego(2);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ff76 	bl	80008a8 <setEstadoRiego>
		}
	}
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000004 	.word	0x20000004
 80009c4:	200000f8 	.word	0x200000f8

080009c8 <riego>:
void riego(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	temporizador_riego();
 80009cc:	f7ff ffe0 	bl	8000990 <temporizador_riego>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <setEstadoSeguridad>:
int estado_seguridad = 0; //0 sistema apagado, 1 sistema encendiendose, 2 sistema_ activo
int alarma_seguridad = 0; //0 alarma apagada, 1 alarma encendida

uint32_t tickstart_seguridad = 0, counter_seguridad = 0;

void setEstadoSeguridad(int n) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	estado_seguridad = n;
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <setEstadoSeguridad+0x68>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
	if (estado_seguridad == 0) {
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <setEstadoSeguridad+0x68>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10e      	bne.n	8000a08 <setEstadoSeguridad+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <setEstadoSeguridad+0x6c>)
 80009f0:	f002 fc1e 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <setEstadoSeguridad+0x6c>)
 80009fc:	f002 fc18 	bl	8003230 <HAL_GPIO_WritePin>
		alarma_seguridad = 0;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <setEstadoSeguridad+0x70>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
		alarma_seguridad = 0;
		tickstart_seguridad = HAL_GetTick();
	} else if (estado_seguridad == 2) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	}
}
 8000a06:	e015      	b.n	8000a34 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 1) {
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <setEstadoSeguridad+0x68>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d108      	bne.n	8000a22 <setEstadoSeguridad+0x4e>
		alarma_seguridad = 0;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <setEstadoSeguridad+0x70>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		tickstart_seguridad = HAL_GetTick();
 8000a16:	f001 fca7 	bl	8002368 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <setEstadoSeguridad+0x74>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	e008      	b.n	8000a34 <setEstadoSeguridad+0x60>
	} else if (estado_seguridad == 2) {
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <setEstadoSeguridad+0x68>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d104      	bne.n	8000a34 <setEstadoSeguridad+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <setEstadoSeguridad+0x6c>)
 8000a30:	f002 fbfe 	bl	8003230 <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	40020000 	.word	0x40020000
 8000a44:	200000b4 	.word	0x200000b4
 8000a48:	200000b8 	.word	0x200000b8

08000a4c <activar_sensor>:

void activar_sensor() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

	if (estado_seguridad == 1) {
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <activar_sensor+0x78>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d133      	bne.n	8000ac0 <activar_sensor+0x74>
		counter_seguridad = HAL_GetTick() - tickstart_seguridad;
 8000a58:	f001 fc86 	bl	8002368 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <activar_sensor+0x7c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <activar_sensor+0x80>)
 8000a66:	6013      	str	r3, [r2, #0]
		if ((counter_seguridad > 0) && (counter_seguridad < 500)) {
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <activar_sensor+0x80>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00a      	beq.n	8000a86 <activar_sensor+0x3a>
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <activar_sensor+0x80>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a78:	d205      	bcs.n	8000a86 <activar_sensor+0x3a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <activar_sensor+0x84>)
 8000a80:	f002 fbd6 	bl	8003230 <HAL_GPIO_WritePin>
 8000a84:	e01c      	b.n	8000ac0 <activar_sensor+0x74>
		}else if ((counter_seguridad > 500) && (counter_seguridad < 1000)) {
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <activar_sensor+0x80>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a8e:	d90a      	bls.n	8000aa6 <activar_sensor+0x5a>
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <activar_sensor+0x80>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a98:	d205      	bcs.n	8000aa6 <activar_sensor+0x5a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <activar_sensor+0x84>)
 8000aa0:	f002 fbc6 	bl	8003230 <HAL_GPIO_WritePin>
 8000aa4:	e00c      	b.n	8000ac0 <activar_sensor+0x74>
		} else if (counter_seguridad > 5000) {
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <activar_sensor+0x80>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d906      	bls.n	8000ac0 <activar_sensor+0x74>
			counter_seguridad = 0;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <activar_sensor+0x80>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
			setEstadoSeguridad(2);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff ff8b 	bl	80009d4 <setEstadoSeguridad>
		}

	}
}
 8000abe:	e7ff      	b.n	8000ac0 <activar_sensor+0x74>
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000b0 	.word	0x200000b0
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	200000bc 	.word	0x200000bc
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <getEstadoSeguridad>:

int getEstadoSeguridad() {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	return estado_seguridad;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <getEstadoSeguridad+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000b0 	.word	0x200000b0

08000aec <cambiarEstadoSeguridad>:

void cambiarEstadoSeguridad() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	if (getEstadoSeguridad() == 0) {
 8000af0:	f7ff fff0 	bl	8000ad4 <getEstadoSeguridad>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d103      	bne.n	8000b02 <cambiarEstadoSeguridad+0x16>
		setEstadoSeguridad(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff ff6a 	bl	80009d4 <setEstadoSeguridad>
	} else {
		setEstadoSeguridad(0);
	}
}
 8000b00:	e002      	b.n	8000b08 <cambiarEstadoSeguridad+0x1c>
		setEstadoSeguridad(0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff66 	bl	80009d4 <setEstadoSeguridad>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <intruso_detectado>:

void intruso_detectado() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	if (estado_seguridad == 2) {
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <intruso_detectado+0x1c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d102      	bne.n	8000b1e <intruso_detectado+0x12>
		alarma_seguridad = 1;
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <intruso_detectado+0x20>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
	}
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	200000b0 	.word	0x200000b0
 8000b2c:	200000b4 	.word	0x200000b4

08000b30 <sonar_alarma>:

void sonar_alarma() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

	if(estado_seguridad == 2 && alarma_seguridad == 1){
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <sonar_alarma+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d109      	bne.n	8000b50 <sonar_alarma+0x20>
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <sonar_alarma+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <sonar_alarma+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <sonar_alarma+0x2c>)
 8000b4c:	f002 fb70 	bl	8003230 <HAL_GPIO_WritePin>
		}
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000b0 	.word	0x200000b0
 8000b58:	200000b4 	.word	0x200000b4
 8000b5c:	40020000 	.word	0x40020000

08000b60 <seguridad>:

void seguridad() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	activar_sensor();
 8000b64:	f7ff ff72 	bl	8000a4c <activar_sensor>
	sonar_alarma();
 8000b68:	f7ff ffe2 	bl	8000b30 <sonar_alarma>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <setEstadoClima>:
int temperatura_objetivo=20;
int estado_clima; //0 todo apagado, 1 calef encendida y aire apagado, 2 calef apagada y aire encendido
int controldelclima=0; //0 manual, 1 auto
uint32_t tickstart_clima=0; counter_clima=0;

void setEstadoClima(int n){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	estado_clima=n;
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <setEstadoClima+0x7c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
	if(estado_clima==0){
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <setEstadoClima+0x7c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10c      	bne.n	8000ba0 <setEstadoClima+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <setEstadoClima+0x80>)
 8000b8e:	f002 fb4f 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b98:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <setEstadoClima+0x80>)
 8000b9a:	f002 fb49 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
	}else if(estado_clima==2){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8000b9e:	e020      	b.n	8000be2 <setEstadoClima+0x72>
	}else if(estado_clima==1){
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <setEstadoClima+0x7c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d10c      	bne.n	8000bc2 <setEstadoClima+0x52>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <setEstadoClima+0x80>)
 8000bb0:	f002 fb3e 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <setEstadoClima+0x80>)
 8000bbc:	f002 fb38 	bl	8003230 <HAL_GPIO_WritePin>
}
 8000bc0:	e00f      	b.n	8000be2 <setEstadoClima+0x72>
	}else if(estado_clima==2){
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <setEstadoClima+0x7c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d10b      	bne.n	8000be2 <setEstadoClima+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <setEstadoClima+0x80>)
 8000bd2:	f002 fb2d 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <setEstadoClima+0x80>)
 8000bde:	f002 fb27 	bl	8003230 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f4 	.word	0x200000f4
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <getEstadoClima>:

int getEstadoClima(){
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	return estado_clima;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <getEstadoClima+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200000f4 	.word	0x200000f4

08000c0c <cambiarEstadoClima>:

void cambiarEstadoClima(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	controldelclima=0;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <cambiarEstadoClima+0x3c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]

	if(estado_clima==0){
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <cambiarEstadoClima+0x40>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <cambiarEstadoClima+0x1a>
		setEstadoClima(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff ffa6 	bl	8000b70 <setEstadoClima>
	}else if(estado_clima==1){
		setEstadoClima(2);
	}else if(estado_clima==2){
		setEstadoClima(0);
	}
}
 8000c24:	e00e      	b.n	8000c44 <cambiarEstadoClima+0x38>
	}else if(estado_clima==1){
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <cambiarEstadoClima+0x40>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d103      	bne.n	8000c36 <cambiarEstadoClima+0x2a>
		setEstadoClima(2);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff ff9e 	bl	8000b70 <setEstadoClima>
}
 8000c34:	e006      	b.n	8000c44 <cambiarEstadoClima+0x38>
	}else if(estado_clima==2){
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <cambiarEstadoClima+0x40>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d102      	bne.n	8000c44 <cambiarEstadoClima+0x38>
		setEstadoClima(0);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ff96 	bl	8000b70 <setEstadoClima>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000cc 	.word	0x200000cc
 8000c4c:	200000f4 	.word	0x200000f4

08000c50 <setControlClima>:

void setControlClima(int c){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	controldelclima=c;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <setControlClima+0x24>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
	if(c==0){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <setControlClima+0x1a>
		setEstadoClima(0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff83 	bl	8000b70 <setEstadoClima>
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000cc 	.word	0x200000cc

08000c78 <getControlClima>:

int getControlClima(){
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	return controldelclima;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <getControlClima+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000cc 	.word	0x200000cc

08000c90 <cambiarControlClima>:

void cambiarControlClima(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	if(controldelclima==0){
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <cambiarControlClima+0x24>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <cambiarControlClima+0x14>
		controldelclima=1;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <cambiarControlClima+0x24>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
	}else{
		controldelclima=0;
		setEstadoClima(0);
	}
}
 8000ca2:	e005      	b.n	8000cb0 <cambiarControlClima+0x20>
		controldelclima=0;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <cambiarControlClima+0x24>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
		setEstadoClima(0);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff60 	bl	8000b70 <setEstadoClima>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000cc 	.word	0x200000cc

08000cb8 <delay>:

int getTemperaturaObjetivo(){
	return temperatura_objetivo;
}

void delay(uint16_t time) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <delay+0x30>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6)) < time)
 8000cca:	bf00      	nop
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <delay+0x30>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3f9      	bcc.n	8000ccc <delay+0x14>
		;
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200001dc 	.word	0x200001dc

08000cec <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 f8d4 	bl	8002ec8 <HAL_GPIO_Init>
}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f002 f8b6 	bl	8002ec8 <HAL_GPIO_Init>
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_2

void DHT11_Start(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000d68:	2104      	movs	r1, #4
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <DHT11_Start+0x3c>)
 8000d6c:	f7ff ffbe 	bl	8000cec <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000d70:	2200      	movs	r2, #0
 8000d72:	2104      	movs	r1, #4
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <DHT11_Start+0x3c>)
 8000d76:	f002 fa5b 	bl	8003230 <HAL_GPIO_WritePin>
	delay(18000);   // wait for 18ms
 8000d7a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000d7e:	f7ff ff9b 	bl	8000cb8 <delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000d82:	2201      	movs	r2, #1
 8000d84:	2104      	movs	r1, #4
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <DHT11_Start+0x3c>)
 8000d88:	f002 fa52 	bl	8003230 <HAL_GPIO_WritePin>
	delay(20);   // wait for 20us
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f7ff ff93 	bl	8000cb8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000d92:	2104      	movs	r1, #4
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DHT11_Start+0x3c>)
 8000d96:	f7ff ffc7 	bl	8000d28 <Set_Pin_Input>
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000

08000da4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71fb      	strb	r3, [r7, #7]
	delay(40);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f7ff ff82 	bl	8000cb8 <delay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000db4:	2104      	movs	r1, #4
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <DHT11_Check_Response+0x58>)
 8000db8:	f002 fa22 	bl	8003200 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10e      	bne.n	8000de0 <DHT11_Check_Response+0x3c>
		delay(80);
 8000dc2:	2050      	movs	r0, #80	; 0x50
 8000dc4:	f7ff ff78 	bl	8000cb8 <delay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000dc8:	2104      	movs	r1, #4
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <DHT11_Check_Response+0x58>)
 8000dcc:	f002 fa18 	bl	8003200 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <DHT11_Check_Response+0x38>
			Response = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	e001      	b.n	8000de0 <DHT11_Check_Response+0x3c>
		else
			Response = -1; // 255
 8000ddc:	23ff      	movs	r3, #255	; 0xff
 8000dde:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000de0:	bf00      	nop
 8000de2:	2104      	movs	r1, #4
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <DHT11_Check_Response+0x58>)
 8000de6:	f002 fa0b 	bl	8003200 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f8      	bne.n	8000de2 <DHT11_Check_Response+0x3e>
		;   // wait for the pin to go low

	return Response;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020000 	.word	0x40020000

08000e00 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	e037      	b.n	8000e7c <DHT11_Read+0x7c>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e0c:	bf00      	nop
 8000e0e:	2104      	movs	r1, #4
 8000e10:	481e      	ldr	r0, [pc, #120]	; (8000e8c <DHT11_Read+0x8c>)
 8000e12:	f002 f9f5 	bl	8003200 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f8      	beq.n	8000e0e <DHT11_Read+0xe>
			;   // wait for the pin to go high
		delay(40);   // wait for 40 us
 8000e1c:	2028      	movs	r0, #40	; 0x28
 8000e1e:	f7ff ff4b 	bl	8000cb8 <delay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000e22:	2104      	movs	r1, #4
 8000e24:	4819      	ldr	r0, [pc, #100]	; (8000e8c <DHT11_Read+0x8c>)
 8000e26:	f002 f9eb 	bl	8003200 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10e      	bne.n	8000e4e <DHT11_Read+0x4e>
		{
			i &= ~(1 << (7 - j));   // write 0
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4013      	ands	r3, r2
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e00b      	b.n	8000e66 <DHT11_Read+0x66>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	f1c3 0307 	rsb	r3, r3, #7
 8000e54:	2201      	movs	r2, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000e66:	bf00      	nop
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <DHT11_Read+0x8c>)
 8000e6c:	f002 f9c8 	bl	8003200 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f8      	bne.n	8000e68 <DHT11_Read+0x68>
	for (j = 0; j < 8; j++) {
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	71bb      	strb	r3, [r7, #6]
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d9c4      	bls.n	8000e0c <DHT11_Read+0xc>
			;  // wait for the pin to go low
	}
	return i;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000

08000e90 <lectura_dht11>:

void lectura_dht11() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	DHT11_Start();
 8000e94:	f7ff ff66 	bl	8000d64 <DHT11_Start>
	Presence = DHT11_Check_Response();
 8000e98:	f7ff ff84 	bl	8000da4 <DHT11_Check_Response>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <lectura_dht11+0x8c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 8000ea4:	f7ff ffac 	bl	8000e00 <DHT11_Read>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <lectura_dht11+0x90>)
 8000eae:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8000eb0:	f7ff ffa6 	bl	8000e00 <DHT11_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <lectura_dht11+0x94>)
 8000eba:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8000ebc:	f7ff ffa0 	bl	8000e00 <DHT11_Read>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <lectura_dht11+0x98>)
 8000ec6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 8000ec8:	f7ff ff9a 	bl	8000e00 <DHT11_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <lectura_dht11+0x9c>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000ed4:	f7ff ff94 	bl	8000e00 <DHT11_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <lectura_dht11+0xa0>)
 8000ede:	801a      	strh	r2, [r3, #0]
	TEMP = Temp_byte1;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <lectura_dht11+0x98>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <lectura_dht11+0xa4>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	RH = Rh_byte1;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <lectura_dht11+0x90>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <lectura_dht11+0xa8>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <lectura_dht11+0xa4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <lectura_dht11+0xac>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
	Humidity = (float) RH;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <lectura_dht11+0xa8>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <lectura_dht11+0xb0>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000c8 	.word	0x200000c8
 8000f20:	20000150 	.word	0x20000150
 8000f24:	200001d9 	.word	0x200001d9
 8000f28:	200001d8 	.word	0x200001d8
 8000f2c:	200002b8 	.word	0x200002b8
 8000f30:	200002b0 	.word	0x200002b0
 8000f34:	20000154 	.word	0x20000154
 8000f38:	20000152 	.word	0x20000152
 8000f3c:	200000c0 	.word	0x200000c0
 8000f40:	200000c4 	.word	0x200000c4

08000f44 <clima>:

void clima(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if(controldelclima==1 && counter_clima>1000){
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <clima+0x70>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d124      	bne.n	8000f9a <clima+0x56>
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <clima+0x74>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f58:	dd1f      	ble.n	8000f9a <clima+0x56>
		counter_clima=0;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <clima+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
		tickstart_clima=HAL_GetTick();
 8000f60:	f001 fa02 	bl	8002368 <HAL_GetTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <clima+0x78>)
 8000f68:	6013      	str	r3, [r2, #0]
		lectura_dht11();
 8000f6a:	f7ff ff91 	bl	8000e90 <lectura_dht11>
		if(Temperature>temperatura_objetivo){
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <clima+0x7c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <clima+0x80>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	d503      	bpl.n	8000f92 <clima+0x4e>
			setEstadoClima(2);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff fdf0 	bl	8000b70 <setEstadoClima>
		if(Temperature>temperatura_objetivo){
 8000f90:	e00d      	b.n	8000fae <clima+0x6a>
		}else{
			setEstadoClima(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fdec 	bl	8000b70 <setEstadoClima>
		if(Temperature>temperatura_objetivo){
 8000f98:	e009      	b.n	8000fae <clima+0x6a>
		}
	}else{
		counter_clima=HAL_GetTick()-tickstart_clima;
 8000f9a:	f001 f9e5 	bl	8002368 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <clima+0x78>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <clima+0x74>)
 8000faa:	601a      	str	r2, [r3, #0]
	}

}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000cc 	.word	0x200000cc
 8000fb8:	200000d4 	.word	0x200000d4
 8000fbc:	200000d0 	.word	0x200000d0
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	200000c0 	.word	0x200000c0

08000fc8 <bluetooth>:
 for (int i = 0; i < 50; i++) {
 rx_buffer[0] = '\0';
 }
 }
 */
void bluetooth(char recibido[]) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if (strcmp(recibido, "a") == 0) {
 8000fd0:	49b0      	ldr	r1, [pc, #704]	; (8001294 <bluetooth+0x2cc>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff f8fc 	bl	80001d0 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d121      	bne.n	8001022 <bluetooth+0x5a>
		if (getEstadoLuces() == 1)
 8000fde:	f7ff fb1d 	bl	800061c <getEstadoLuces>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d10c      	bne.n	8001002 <bluetooth+0x3a>
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
					sprintf(tx_buffer, "Las luces ya estaban activadas\n"),
 8000fe8:	49ab      	ldr	r1, [pc, #684]	; (8001298 <bluetooth+0x2d0>)
 8000fea:	48ac      	ldr	r0, [pc, #688]	; (800129c <bluetooth+0x2d4>)
 8000fec:	f004 fa3a 	bl	8005464 <siprintf>
 8000ff0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ff8:	49a8      	ldr	r1, [pc, #672]	; (800129c <bluetooth+0x2d4>)
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <bluetooth+0x2d8>)
 8000ffc:	f003 fa85 	bl	800450a <HAL_UART_Transmit>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
			setEstadoSeguridad(0);
		}

	}
}
 8001000:	e2d1      	b.n	80015a6 <bluetooth+0x5de>
			setLuces(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fac0 	bl	8000588 <setLuces>
					sprintf(tx_buffer, "Luces activadas\n"), 500);
 8001008:	49a6      	ldr	r1, [pc, #664]	; (80012a4 <bluetooth+0x2dc>)
 800100a:	48a4      	ldr	r0, [pc, #656]	; (800129c <bluetooth+0x2d4>)
 800100c:	f004 fa2a 	bl	8005464 <siprintf>
 8001010:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001012:	b29a      	uxth	r2, r3
 8001014:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001018:	49a0      	ldr	r1, [pc, #640]	; (800129c <bluetooth+0x2d4>)
 800101a:	48a1      	ldr	r0, [pc, #644]	; (80012a0 <bluetooth+0x2d8>)
 800101c:	f003 fa75 	bl	800450a <HAL_UART_Transmit>
}
 8001020:	e2c1      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "b") == 0) {
 8001022:	49a1      	ldr	r1, [pc, #644]	; (80012a8 <bluetooth+0x2e0>)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8d3 	bl	80001d0 <strcmp>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d121      	bne.n	8001074 <bluetooth+0xac>
		if (getEstadoLuces() == 0)
 8001030:	f7ff faf4 	bl	800061c <getEstadoLuces>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <bluetooth+0x8c>
					sprintf(tx_buffer, "Luces ya estaban desactivadas\n"), 500);
 800103a:	499c      	ldr	r1, [pc, #624]	; (80012ac <bluetooth+0x2e4>)
 800103c:	4897      	ldr	r0, [pc, #604]	; (800129c <bluetooth+0x2d4>)
 800103e:	f004 fa11 	bl	8005464 <siprintf>
 8001042:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001044:	b29a      	uxth	r2, r3
 8001046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800104a:	4994      	ldr	r1, [pc, #592]	; (800129c <bluetooth+0x2d4>)
 800104c:	4894      	ldr	r0, [pc, #592]	; (80012a0 <bluetooth+0x2d8>)
 800104e:	f003 fa5c 	bl	800450a <HAL_UART_Transmit>
}
 8001052:	e2a8      	b.n	80015a6 <bluetooth+0x5de>
			setLuces(0);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fa97 	bl	8000588 <setLuces>
					sprintf(tx_buffer, "Luces desactivadas\n"), 500);
 800105a:	4995      	ldr	r1, [pc, #596]	; (80012b0 <bluetooth+0x2e8>)
 800105c:	488f      	ldr	r0, [pc, #572]	; (800129c <bluetooth+0x2d4>)
 800105e:	f004 fa01 	bl	8005464 <siprintf>
 8001062:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001064:	b29a      	uxth	r2, r3
 8001066:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800106a:	498c      	ldr	r1, [pc, #560]	; (800129c <bluetooth+0x2d4>)
 800106c:	488c      	ldr	r0, [pc, #560]	; (80012a0 <bluetooth+0x2d8>)
 800106e:	f003 fa4c 	bl	800450a <HAL_UART_Transmit>
}
 8001072:	e298      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "c") == 0) {
 8001074:	498f      	ldr	r1, [pc, #572]	; (80012b4 <bluetooth+0x2ec>)
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff f8aa 	bl	80001d0 <strcmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d121      	bne.n	80010c6 <bluetooth+0xfe>
		if (getEstadoLuces() == 2)
 8001082:	f7ff facb 	bl	800061c <getEstadoLuces>
 8001086:	4603      	mov	r3, r0
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10c      	bne.n	80010a6 <bluetooth+0xde>
					sprintf(tx_buffer, "Luces ya estaban en modo automatico\n"),
 800108c:	498a      	ldr	r1, [pc, #552]	; (80012b8 <bluetooth+0x2f0>)
 800108e:	4883      	ldr	r0, [pc, #524]	; (800129c <bluetooth+0x2d4>)
 8001090:	f004 f9e8 	bl	8005464 <siprintf>
 8001094:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001096:	b29a      	uxth	r2, r3
 8001098:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800109c:	497f      	ldr	r1, [pc, #508]	; (800129c <bluetooth+0x2d4>)
 800109e:	4880      	ldr	r0, [pc, #512]	; (80012a0 <bluetooth+0x2d8>)
 80010a0:	f003 fa33 	bl	800450a <HAL_UART_Transmit>
}
 80010a4:	e27f      	b.n	80015a6 <bluetooth+0x5de>
			setLuces(2);
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff fa6e 	bl	8000588 <setLuces>
					sprintf(tx_buffer, "Luces en modo automatico\n"), 500);
 80010ac:	4983      	ldr	r1, [pc, #524]	; (80012bc <bluetooth+0x2f4>)
 80010ae:	487b      	ldr	r0, [pc, #492]	; (800129c <bluetooth+0x2d4>)
 80010b0:	f004 f9d8 	bl	8005464 <siprintf>
 80010b4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010bc:	4977      	ldr	r1, [pc, #476]	; (800129c <bluetooth+0x2d4>)
 80010be:	4878      	ldr	r0, [pc, #480]	; (80012a0 <bluetooth+0x2d8>)
 80010c0:	f003 fa23 	bl	800450a <HAL_UART_Transmit>
}
 80010c4:	e26f      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "d") == 0) {
 80010c6:	497e      	ldr	r1, [pc, #504]	; (80012c0 <bluetooth+0x2f8>)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f881 	bl	80001d0 <strcmp>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d121      	bne.n	8001118 <bluetooth+0x150>
		if (getEstadoAnteriorRiego() == 0)
 80010d4:	f7ff fc50 	bl	8000978 <getEstadoAnteriorRiego>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <bluetooth+0x130>
					sprintf(tx_buffer, "Ya estabas regando\n"), 500);
 80010de:	4979      	ldr	r1, [pc, #484]	; (80012c4 <bluetooth+0x2fc>)
 80010e0:	486e      	ldr	r0, [pc, #440]	; (800129c <bluetooth+0x2d4>)
 80010e2:	f004 f9bf 	bl	8005464 <siprintf>
 80010e6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ee:	496b      	ldr	r1, [pc, #428]	; (800129c <bluetooth+0x2d4>)
 80010f0:	486b      	ldr	r0, [pc, #428]	; (80012a0 <bluetooth+0x2d8>)
 80010f2:	f003 fa0a 	bl	800450a <HAL_UART_Transmit>
}
 80010f6:	e256      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Abriendo electrovalvula...\n"), 500);
 80010f8:	4973      	ldr	r1, [pc, #460]	; (80012c8 <bluetooth+0x300>)
 80010fa:	4868      	ldr	r0, [pc, #416]	; (800129c <bluetooth+0x2d4>)
 80010fc:	f004 f9b2 	bl	8005464 <siprintf>
 8001100:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001102:	b29a      	uxth	r2, r3
 8001104:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001108:	4964      	ldr	r1, [pc, #400]	; (800129c <bluetooth+0x2d4>)
 800110a:	4865      	ldr	r0, [pc, #404]	; (80012a0 <bluetooth+0x2d8>)
 800110c:	f003 f9fd 	bl	800450a <HAL_UART_Transmit>
			setEstadoRiego(0);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fbc9 	bl	80008a8 <setEstadoRiego>
}
 8001116:	e246      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "e") == 0) {
 8001118:	496c      	ldr	r1, [pc, #432]	; (80012cc <bluetooth+0x304>)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d121      	bne.n	800116a <bluetooth+0x1a2>
		if (getEstadoAnteriorRiego() == 1)
 8001126:	f7ff fc27 	bl	8000978 <getEstadoAnteriorRiego>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10c      	bne.n	800114a <bluetooth+0x182>
					sprintf(tx_buffer, "La electrovalvula ya estaba cerrada\n"),
 8001130:	4967      	ldr	r1, [pc, #412]	; (80012d0 <bluetooth+0x308>)
 8001132:	485a      	ldr	r0, [pc, #360]	; (800129c <bluetooth+0x2d4>)
 8001134:	f004 f996 	bl	8005464 <siprintf>
 8001138:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800113a:	b29a      	uxth	r2, r3
 800113c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001140:	4956      	ldr	r1, [pc, #344]	; (800129c <bluetooth+0x2d4>)
 8001142:	4857      	ldr	r0, [pc, #348]	; (80012a0 <bluetooth+0x2d8>)
 8001144:	f003 f9e1 	bl	800450a <HAL_UART_Transmit>
}
 8001148:	e22d      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Cerrando electrovalvula...\n"), 500);
 800114a:	4962      	ldr	r1, [pc, #392]	; (80012d4 <bluetooth+0x30c>)
 800114c:	4853      	ldr	r0, [pc, #332]	; (800129c <bluetooth+0x2d4>)
 800114e:	f004 f989 	bl	8005464 <siprintf>
 8001152:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001154:	b29a      	uxth	r2, r3
 8001156:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800115a:	4950      	ldr	r1, [pc, #320]	; (800129c <bluetooth+0x2d4>)
 800115c:	4850      	ldr	r0, [pc, #320]	; (80012a0 <bluetooth+0x2d8>)
 800115e:	f003 f9d4 	bl	800450a <HAL_UART_Transmit>
			setEstadoRiego(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff fba0 	bl	80008a8 <setEstadoRiego>
}
 8001168:	e21d      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "f") == 0) {
 800116a:	495b      	ldr	r1, [pc, #364]	; (80012d8 <bluetooth+0x310>)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f82f 	bl	80001d0 <strcmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d121      	bne.n	80011bc <bluetooth+0x1f4>
		if (getEstadoPersianas() == 1)
 8001178:	f7ff fb3e 	bl	80007f8 <getEstadoPersianas>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10c      	bne.n	800119c <bluetooth+0x1d4>
					sprintf(tx_buffer, "Ya se esta subiendo la persiana\n"),
 8001182:	4956      	ldr	r1, [pc, #344]	; (80012dc <bluetooth+0x314>)
 8001184:	4845      	ldr	r0, [pc, #276]	; (800129c <bluetooth+0x2d4>)
 8001186:	f004 f96d 	bl	8005464 <siprintf>
 800118a:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800118c:	b29a      	uxth	r2, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	4942      	ldr	r1, [pc, #264]	; (800129c <bluetooth+0x2d4>)
 8001194:	4842      	ldr	r0, [pc, #264]	; (80012a0 <bluetooth+0x2d8>)
 8001196:	f003 f9b8 	bl	800450a <HAL_UART_Transmit>
}
 800119a:	e204      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Subiendo persiana...\n"), 500);
 800119c:	4950      	ldr	r1, [pc, #320]	; (80012e0 <bluetooth+0x318>)
 800119e:	483f      	ldr	r0, [pc, #252]	; (800129c <bluetooth+0x2d4>)
 80011a0:	f004 f960 	bl	8005464 <siprintf>
 80011a4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ac:	493b      	ldr	r1, [pc, #236]	; (800129c <bluetooth+0x2d4>)
 80011ae:	483c      	ldr	r0, [pc, #240]	; (80012a0 <bluetooth+0x2d8>)
 80011b0:	f003 f9ab 	bl	800450a <HAL_UART_Transmit>
			setEstadoPersianas(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fad7 	bl	8000768 <setEstadoPersianas>
}
 80011ba:	e1f4      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "g") == 0) {
 80011bc:	4949      	ldr	r1, [pc, #292]	; (80012e4 <bluetooth+0x31c>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff f806 	bl	80001d0 <strcmp>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d121      	bne.n	800120e <bluetooth+0x246>
		if (getEstadoPersianas() == 2)
 80011ca:	f7ff fb15 	bl	80007f8 <getEstadoPersianas>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10c      	bne.n	80011ee <bluetooth+0x226>
					sprintf(tx_buffer, "Ya se esta bajando la persiana\n"),
 80011d4:	4944      	ldr	r1, [pc, #272]	; (80012e8 <bluetooth+0x320>)
 80011d6:	4831      	ldr	r0, [pc, #196]	; (800129c <bluetooth+0x2d4>)
 80011d8:	f004 f944 	bl	8005464 <siprintf>
 80011dc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e4:	492d      	ldr	r1, [pc, #180]	; (800129c <bluetooth+0x2d4>)
 80011e6:	482e      	ldr	r0, [pc, #184]	; (80012a0 <bluetooth+0x2d8>)
 80011e8:	f003 f98f 	bl	800450a <HAL_UART_Transmit>
}
 80011ec:	e1db      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Bajando persiana...\n"), 500);
 80011ee:	493f      	ldr	r1, [pc, #252]	; (80012ec <bluetooth+0x324>)
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <bluetooth+0x2d4>)
 80011f2:	f004 f937 	bl	8005464 <siprintf>
 80011f6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011fe:	4927      	ldr	r1, [pc, #156]	; (800129c <bluetooth+0x2d4>)
 8001200:	4827      	ldr	r0, [pc, #156]	; (80012a0 <bluetooth+0x2d8>)
 8001202:	f003 f982 	bl	800450a <HAL_UART_Transmit>
			setEstadoPersianas(2);
 8001206:	2002      	movs	r0, #2
 8001208:	f7ff faae 	bl	8000768 <setEstadoPersianas>
}
 800120c:	e1cb      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "h") == 0) {
 800120e:	4938      	ldr	r1, [pc, #224]	; (80012f0 <bluetooth+0x328>)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7fe ffdd 	bl	80001d0 <strcmp>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d121      	bne.n	8001260 <bluetooth+0x298>
		if (getEstadoPersianas() == 0)
 800121c:	f7ff faec 	bl	80007f8 <getEstadoPersianas>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <bluetooth+0x278>
					sprintf(tx_buffer, "La persiana ya estaba parada\n"), 500);
 8001226:	4933      	ldr	r1, [pc, #204]	; (80012f4 <bluetooth+0x32c>)
 8001228:	481c      	ldr	r0, [pc, #112]	; (800129c <bluetooth+0x2d4>)
 800122a:	f004 f91b 	bl	8005464 <siprintf>
 800122e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001230:	b29a      	uxth	r2, r3
 8001232:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001236:	4919      	ldr	r1, [pc, #100]	; (800129c <bluetooth+0x2d4>)
 8001238:	4819      	ldr	r0, [pc, #100]	; (80012a0 <bluetooth+0x2d8>)
 800123a:	f003 f966 	bl	800450a <HAL_UART_Transmit>
}
 800123e:	e1b2      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Parando persiana...\n"), 500);
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <bluetooth+0x330>)
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <bluetooth+0x2d4>)
 8001244:	f004 f90e 	bl	8005464 <siprintf>
 8001248:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800124a:	b29a      	uxth	r2, r3
 800124c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001250:	4912      	ldr	r1, [pc, #72]	; (800129c <bluetooth+0x2d4>)
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <bluetooth+0x2d8>)
 8001254:	f003 f959 	bl	800450a <HAL_UART_Transmit>
			setEstadoPersianas(0);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fa85 	bl	8000768 <setEstadoPersianas>
}
 800125e:	e1a2      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "i") == 0) {
 8001260:	4926      	ldr	r1, [pc, #152]	; (80012fc <bluetooth+0x334>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7fe ffb4 	bl	80001d0 <strcmp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d15a      	bne.n	8001324 <bluetooth+0x35c>
		if(getEstadoClima()==1){
 800126e:	f7ff fcc1 	bl	8000bf4 <getEstadoClima>
 8001272:	4603      	mov	r3, r0
 8001274:	2b01      	cmp	r3, #1
 8001276:	d145      	bne.n	8001304 <bluetooth+0x33c>
							sprintf(tx_buffer, "La calefaccion ya estaba encendida\n"), 500);
 8001278:	4921      	ldr	r1, [pc, #132]	; (8001300 <bluetooth+0x338>)
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <bluetooth+0x2d4>)
 800127c:	f004 f8f2 	bl	8005464 <siprintf>
 8001280:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <bluetooth+0x2d4>)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <bluetooth+0x2d8>)
 800128c:	f003 f93d 	bl	800450a <HAL_UART_Transmit>
}
 8001290:	e189      	b.n	80015a6 <bluetooth+0x5de>
 8001292:	bf00      	nop
 8001294:	08005e40 	.word	0x08005e40
 8001298:	08005e44 	.word	0x08005e44
 800129c:	20000158 	.word	0x20000158
 80012a0:	2000026c 	.word	0x2000026c
 80012a4:	08005e64 	.word	0x08005e64
 80012a8:	08005e78 	.word	0x08005e78
 80012ac:	08005e7c 	.word	0x08005e7c
 80012b0:	08005e9c 	.word	0x08005e9c
 80012b4:	08005eb0 	.word	0x08005eb0
 80012b8:	08005eb4 	.word	0x08005eb4
 80012bc:	08005edc 	.word	0x08005edc
 80012c0:	08005ef8 	.word	0x08005ef8
 80012c4:	08005efc 	.word	0x08005efc
 80012c8:	08005f10 	.word	0x08005f10
 80012cc:	08005f2c 	.word	0x08005f2c
 80012d0:	08005f30 	.word	0x08005f30
 80012d4:	08005f58 	.word	0x08005f58
 80012d8:	08005f74 	.word	0x08005f74
 80012dc:	08005f78 	.word	0x08005f78
 80012e0:	08005f9c 	.word	0x08005f9c
 80012e4:	08005fb4 	.word	0x08005fb4
 80012e8:	08005fb8 	.word	0x08005fb8
 80012ec:	08005fd8 	.word	0x08005fd8
 80012f0:	08005ff0 	.word	0x08005ff0
 80012f4:	08005ff4 	.word	0x08005ff4
 80012f8:	08006014 	.word	0x08006014
 80012fc:	0800602c 	.word	0x0800602c
 8001300:	08006030 	.word	0x08006030
			setEstadoClima(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fc33 	bl	8000b70 <setEstadoClima>
					sprintf(tx_buffer, "Encendiendo calefaccion...\n"), 500);
 800130a:	49a9      	ldr	r1, [pc, #676]	; (80015b0 <bluetooth+0x5e8>)
 800130c:	48a9      	ldr	r0, [pc, #676]	; (80015b4 <bluetooth+0x5ec>)
 800130e:	f004 f8a9 	bl	8005464 <siprintf>
 8001312:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001314:	b29a      	uxth	r2, r3
 8001316:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800131a:	49a6      	ldr	r1, [pc, #664]	; (80015b4 <bluetooth+0x5ec>)
 800131c:	48a6      	ldr	r0, [pc, #664]	; (80015b8 <bluetooth+0x5f0>)
 800131e:	f003 f8f4 	bl	800450a <HAL_UART_Transmit>
}
 8001322:	e140      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "j") == 0) {
 8001324:	49a5      	ldr	r1, [pc, #660]	; (80015bc <bluetooth+0x5f4>)
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7fe ff52 	bl	80001d0 <strcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d121      	bne.n	8001376 <bluetooth+0x3ae>
		if(getEstadoClima()==2){
 8001332:	f7ff fc5f 	bl	8000bf4 <getEstadoClima>
 8001336:	4603      	mov	r3, r0
 8001338:	2b02      	cmp	r3, #2
 800133a:	d10c      	bne.n	8001356 <bluetooth+0x38e>
									sprintf(tx_buffer, "El ventilador ya estaba encendido\n"), 500);
 800133c:	49a0      	ldr	r1, [pc, #640]	; (80015c0 <bluetooth+0x5f8>)
 800133e:	489d      	ldr	r0, [pc, #628]	; (80015b4 <bluetooth+0x5ec>)
 8001340:	f004 f890 	bl	8005464 <siprintf>
 8001344:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001346:	b29a      	uxth	r2, r3
 8001348:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800134c:	4999      	ldr	r1, [pc, #612]	; (80015b4 <bluetooth+0x5ec>)
 800134e:	489a      	ldr	r0, [pc, #616]	; (80015b8 <bluetooth+0x5f0>)
 8001350:	f003 f8db 	bl	800450a <HAL_UART_Transmit>
}
 8001354:	e127      	b.n	80015a6 <bluetooth+0x5de>
					setEstadoClima(2);
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fc0a 	bl	8000b70 <setEstadoClima>
							sprintf(tx_buffer, "Encendiendo ventilador...\n"), 500);
 800135c:	4999      	ldr	r1, [pc, #612]	; (80015c4 <bluetooth+0x5fc>)
 800135e:	4895      	ldr	r0, [pc, #596]	; (80015b4 <bluetooth+0x5ec>)
 8001360:	f004 f880 	bl	8005464 <siprintf>
 8001364:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001366:	b29a      	uxth	r2, r3
 8001368:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800136c:	4991      	ldr	r1, [pc, #580]	; (80015b4 <bluetooth+0x5ec>)
 800136e:	4892      	ldr	r0, [pc, #584]	; (80015b8 <bluetooth+0x5f0>)
 8001370:	f003 f8cb 	bl	800450a <HAL_UART_Transmit>
}
 8001374:	e117      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "k") == 0) {
 8001376:	4994      	ldr	r1, [pc, #592]	; (80015c8 <bluetooth+0x600>)
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7fe ff29 	bl	80001d0 <strcmp>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d133      	bne.n	80013ec <bluetooth+0x424>
		if (getEstadoClima() == 1)
 8001384:	f7ff fc36 	bl	8000bf4 <getEstadoClima>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10c      	bne.n	80013a8 <bluetooth+0x3e0>
					sprintf(tx_buffer, "Apagando calefaccion\n"), 500);
 800138e:	498f      	ldr	r1, [pc, #572]	; (80015cc <bluetooth+0x604>)
 8001390:	4888      	ldr	r0, [pc, #544]	; (80015b4 <bluetooth+0x5ec>)
 8001392:	f004 f867 	bl	8005464 <siprintf>
 8001396:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001398:	b29a      	uxth	r2, r3
 800139a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800139e:	4985      	ldr	r1, [pc, #532]	; (80015b4 <bluetooth+0x5ec>)
 80013a0:	4885      	ldr	r0, [pc, #532]	; (80015b8 <bluetooth+0x5f0>)
 80013a2:	f003 f8b2 	bl	800450a <HAL_UART_Transmit>
 80013a6:	e01d      	b.n	80013e4 <bluetooth+0x41c>
		else if (getEstadoClima() == 2)
 80013a8:	f7ff fc24 	bl	8000bf4 <getEstadoClima>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d10c      	bne.n	80013cc <bluetooth+0x404>
					sprintf(tx_buffer, "Apagando ventilador\n"), 500);
 80013b2:	4987      	ldr	r1, [pc, #540]	; (80015d0 <bluetooth+0x608>)
 80013b4:	487f      	ldr	r0, [pc, #508]	; (80015b4 <bluetooth+0x5ec>)
 80013b6:	f004 f855 	bl	8005464 <siprintf>
 80013ba:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013c2:	497c      	ldr	r1, [pc, #496]	; (80015b4 <bluetooth+0x5ec>)
 80013c4:	487c      	ldr	r0, [pc, #496]	; (80015b8 <bluetooth+0x5f0>)
 80013c6:	f003 f8a0 	bl	800450a <HAL_UART_Transmit>
 80013ca:	e00b      	b.n	80013e4 <bluetooth+0x41c>
					sprintf(tx_buffer,
 80013cc:	4981      	ldr	r1, [pc, #516]	; (80015d4 <bluetooth+0x60c>)
 80013ce:	4879      	ldr	r0, [pc, #484]	; (80015b4 <bluetooth+0x5ec>)
 80013d0:	f004 f848 	bl	8005464 <siprintf>
 80013d4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013dc:	4975      	ldr	r1, [pc, #468]	; (80015b4 <bluetooth+0x5ec>)
 80013de:	4876      	ldr	r0, [pc, #472]	; (80015b8 <bluetooth+0x5f0>)
 80013e0:	f003 f893 	bl	800450a <HAL_UART_Transmit>
		setEstadoClima(0);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fbc3 	bl	8000b70 <setEstadoClima>
}
 80013ea:	e0dc      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "l") == 0) {
 80013ec:	497a      	ldr	r1, [pc, #488]	; (80015d8 <bluetooth+0x610>)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7fe feee 	bl	80001d0 <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d121      	bne.n	800143e <bluetooth+0x476>
		if (getControlClima() == 1)
 80013fa:	f7ff fc3d 	bl	8000c78 <getControlClima>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10c      	bne.n	800141e <bluetooth+0x456>
					sprintf(tx_buffer, "Termostato ya estaba activado\n"), 500);
 8001404:	4975      	ldr	r1, [pc, #468]	; (80015dc <bluetooth+0x614>)
 8001406:	486b      	ldr	r0, [pc, #428]	; (80015b4 <bluetooth+0x5ec>)
 8001408:	f004 f82c 	bl	8005464 <siprintf>
 800140c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800140e:	b29a      	uxth	r2, r3
 8001410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001414:	4967      	ldr	r1, [pc, #412]	; (80015b4 <bluetooth+0x5ec>)
 8001416:	4868      	ldr	r0, [pc, #416]	; (80015b8 <bluetooth+0x5f0>)
 8001418:	f003 f877 	bl	800450a <HAL_UART_Transmit>
}
 800141c:	e0c3      	b.n	80015a6 <bluetooth+0x5de>
			setControlClima(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fc16 	bl	8000c50 <setControlClima>
					sprintf(tx_buffer, "Termostato activado\n"), 500);
 8001424:	496e      	ldr	r1, [pc, #440]	; (80015e0 <bluetooth+0x618>)
 8001426:	4863      	ldr	r0, [pc, #396]	; (80015b4 <bluetooth+0x5ec>)
 8001428:	f004 f81c 	bl	8005464 <siprintf>
 800142c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 800142e:	b29a      	uxth	r2, r3
 8001430:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001434:	495f      	ldr	r1, [pc, #380]	; (80015b4 <bluetooth+0x5ec>)
 8001436:	4860      	ldr	r0, [pc, #384]	; (80015b8 <bluetooth+0x5f0>)
 8001438:	f003 f867 	bl	800450a <HAL_UART_Transmit>
}
 800143c:	e0b3      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "m") == 0) {
 800143e:	4969      	ldr	r1, [pc, #420]	; (80015e4 <bluetooth+0x61c>)
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7fe fec5 	bl	80001d0 <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d121      	bne.n	8001490 <bluetooth+0x4c8>
		if (getControlClima() == 0)
 800144c:	f7ff fc14 	bl	8000c78 <getControlClima>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <bluetooth+0x4a8>
					sprintf(tx_buffer, "Termostato ya estaba desactivado\n"),
 8001456:	4964      	ldr	r1, [pc, #400]	; (80015e8 <bluetooth+0x620>)
 8001458:	4856      	ldr	r0, [pc, #344]	; (80015b4 <bluetooth+0x5ec>)
 800145a:	f004 f803 	bl	8005464 <siprintf>
 800145e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001460:	b29a      	uxth	r2, r3
 8001462:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001466:	4953      	ldr	r1, [pc, #332]	; (80015b4 <bluetooth+0x5ec>)
 8001468:	4853      	ldr	r0, [pc, #332]	; (80015b8 <bluetooth+0x5f0>)
 800146a:	f003 f84e 	bl	800450a <HAL_UART_Transmit>
}
 800146e:	e09a      	b.n	80015a6 <bluetooth+0x5de>
			setControlClima(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fbed 	bl	8000c50 <setControlClima>
					sprintf(tx_buffer, "Termostato desactivado\n"), 500);
 8001476:	495d      	ldr	r1, [pc, #372]	; (80015ec <bluetooth+0x624>)
 8001478:	484e      	ldr	r0, [pc, #312]	; (80015b4 <bluetooth+0x5ec>)
 800147a:	f003 fff3 	bl	8005464 <siprintf>
 800147e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001480:	b29a      	uxth	r2, r3
 8001482:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001486:	494b      	ldr	r1, [pc, #300]	; (80015b4 <bluetooth+0x5ec>)
 8001488:	484b      	ldr	r0, [pc, #300]	; (80015b8 <bluetooth+0x5f0>)
 800148a:	f003 f83e 	bl	800450a <HAL_UART_Transmit>
}
 800148e:	e08a      	b.n	80015a6 <bluetooth+0x5de>
	}else if(strcmp(recibido,"n")==0){
 8001490:	4957      	ldr	r1, [pc, #348]	; (80015f0 <bluetooth+0x628>)
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7fe fe9c 	bl	80001d0 <strcmp>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <bluetooth+0x502>
	lectura_dht11();
 800149e:	f7ff fcf7 	bl	8000e90 <lectura_dht11>
	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La temperatura es de %i ºC\n", (int) Temperature), 500);
 80014a2:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <bluetooth+0x62c>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ac:	ee17 2a90 	vmov	r2, s15
 80014b0:	4951      	ldr	r1, [pc, #324]	; (80015f8 <bluetooth+0x630>)
 80014b2:	4840      	ldr	r0, [pc, #256]	; (80015b4 <bluetooth+0x5ec>)
 80014b4:	f003 ffd6 	bl	8005464 <siprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014c0:	493c      	ldr	r1, [pc, #240]	; (80015b4 <bluetooth+0x5ec>)
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <bluetooth+0x5f0>)
 80014c4:	f003 f821 	bl	800450a <HAL_UART_Transmit>
}
 80014c8:	e06d      	b.n	80015a6 <bluetooth+0x5de>
	 }else if(strcmp(recibido,"o")==0){
 80014ca:	494c      	ldr	r1, [pc, #304]	; (80015fc <bluetooth+0x634>)
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7fe fe7f 	bl	80001d0 <strcmp>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d115      	bne.n	8001504 <bluetooth+0x53c>
		 lectura_dht11();
 80014d8:	f7ff fcda 	bl	8000e90 <lectura_dht11>
		 	 HAL_UART_Transmit(&huart6, (uint8_t *)tx_buffer, sprintf(tx_buffer, "La humedad relativa es del %i %%\n",(int) Humidity), 500);
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <bluetooth+0x638>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	4946      	ldr	r1, [pc, #280]	; (8001604 <bluetooth+0x63c>)
 80014ec:	4831      	ldr	r0, [pc, #196]	; (80015b4 <bluetooth+0x5ec>)
 80014ee:	f003 ffb9 	bl	8005464 <siprintf>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014fa:	492e      	ldr	r1, [pc, #184]	; (80015b4 <bluetooth+0x5ec>)
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <bluetooth+0x5f0>)
 80014fe:	f003 f804 	bl	800450a <HAL_UART_Transmit>
}
 8001502:	e050      	b.n	80015a6 <bluetooth+0x5de>
		 }else if (strcmp(recibido, "p") == 0) {
 8001504:	4940      	ldr	r1, [pc, #256]	; (8001608 <bluetooth+0x640>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe fe62 	bl	80001d0 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d121      	bne.n	8001556 <bluetooth+0x58e>
		if (getEstadoSeguridad() == 2)
 8001512:	f7ff fadf 	bl	8000ad4 <getEstadoSeguridad>
 8001516:	4603      	mov	r3, r0
 8001518:	2b02      	cmp	r3, #2
 800151a:	d10c      	bne.n	8001536 <bluetooth+0x56e>
					sprintf(tx_buffer,
 800151c:	493b      	ldr	r1, [pc, #236]	; (800160c <bluetooth+0x644>)
 800151e:	4825      	ldr	r0, [pc, #148]	; (80015b4 <bluetooth+0x5ec>)
 8001520:	f003 ffa0 	bl	8005464 <siprintf>
 8001524:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001526:	b29a      	uxth	r2, r3
 8001528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800152c:	4921      	ldr	r1, [pc, #132]	; (80015b4 <bluetooth+0x5ec>)
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <bluetooth+0x5f0>)
 8001530:	f002 ffeb 	bl	800450a <HAL_UART_Transmit>
 8001534:	e00b      	b.n	800154e <bluetooth+0x586>
					sprintf(tx_buffer, "Encendiendo alarma...\n"), 500);
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <bluetooth+0x648>)
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <bluetooth+0x5ec>)
 800153a:	f003 ff93 	bl	8005464 <siprintf>
 800153e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001540:	b29a      	uxth	r2, r3
 8001542:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001546:	491b      	ldr	r1, [pc, #108]	; (80015b4 <bluetooth+0x5ec>)
 8001548:	481b      	ldr	r0, [pc, #108]	; (80015b8 <bluetooth+0x5f0>)
 800154a:	f002 ffde 	bl	800450a <HAL_UART_Transmit>
		setEstadoSeguridad(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff fa40 	bl	80009d4 <setEstadoSeguridad>
}
 8001554:	e027      	b.n	80015a6 <bluetooth+0x5de>
	} else if (strcmp(recibido, "q") == 0) {
 8001556:	492f      	ldr	r1, [pc, #188]	; (8001614 <bluetooth+0x64c>)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7fe fe39 	bl	80001d0 <strcmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d120      	bne.n	80015a6 <bluetooth+0x5de>
		if (getEstadoSeguridad() == 0)
 8001564:	f7ff fab6 	bl	8000ad4 <getEstadoSeguridad>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <bluetooth+0x5c0>
					sprintf(tx_buffer, "La alarma ya estaba apagada\n"), 500);
 800156e:	492a      	ldr	r1, [pc, #168]	; (8001618 <bluetooth+0x650>)
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <bluetooth+0x5ec>)
 8001572:	f003 ff77 	bl	8005464 <siprintf>
 8001576:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001578:	b29a      	uxth	r2, r3
 800157a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <bluetooth+0x5ec>)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <bluetooth+0x5f0>)
 8001582:	f002 ffc2 	bl	800450a <HAL_UART_Transmit>
}
 8001586:	e00e      	b.n	80015a6 <bluetooth+0x5de>
					sprintf(tx_buffer, "Apagando alarma...\n"), 500);
 8001588:	4924      	ldr	r1, [pc, #144]	; (800161c <bluetooth+0x654>)
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <bluetooth+0x5ec>)
 800158c:	f003 ff6a 	bl	8005464 <siprintf>
 8001590:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer,
 8001592:	b29a      	uxth	r2, r3
 8001594:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001598:	4906      	ldr	r1, [pc, #24]	; (80015b4 <bluetooth+0x5ec>)
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <bluetooth+0x5f0>)
 800159c:	f002 ffb5 	bl	800450a <HAL_UART_Transmit>
			setEstadoSeguridad(0);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fa17 	bl	80009d4 <setEstadoSeguridad>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08006054 	.word	0x08006054
 80015b4:	20000158 	.word	0x20000158
 80015b8:	2000026c 	.word	0x2000026c
 80015bc:	08006070 	.word	0x08006070
 80015c0:	08006074 	.word	0x08006074
 80015c4:	08006098 	.word	0x08006098
 80015c8:	080060b4 	.word	0x080060b4
 80015cc:	080060b8 	.word	0x080060b8
 80015d0:	080060d0 	.word	0x080060d0
 80015d4:	080060e8 	.word	0x080060e8
 80015d8:	08006118 	.word	0x08006118
 80015dc:	0800611c 	.word	0x0800611c
 80015e0:	0800613c 	.word	0x0800613c
 80015e4:	08006154 	.word	0x08006154
 80015e8:	08006158 	.word	0x08006158
 80015ec:	0800617c 	.word	0x0800617c
 80015f0:	08006194 	.word	0x08006194
 80015f4:	200000c0 	.word	0x200000c0
 80015f8:	08006198 	.word	0x08006198
 80015fc:	080061b8 	.word	0x080061b8
 8001600:	200000c4 	.word	0x200000c4
 8001604:	080061bc 	.word	0x080061bc
 8001608:	080061e0 	.word	0x080061e0
 800160c:	080061e4 	.word	0x080061e4
 8001610:	08006218 	.word	0x08006218
 8001614:	08006230 	.word	0x08006230
 8001618:	08006234 	.word	0x08006234
 800161c:	08006254 	.word	0x08006254

08001620 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char readBuf[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	4905      	ldr	r1, [pc, #20]	; (8001640 <HAL_UART_RxCpltCallback+0x20>)
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_RxCpltCallback+0x24>)
 800162e:	f002 fffe 	bl	800462e <HAL_UART_Receive_IT>
 bluetooth(readBuf);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <HAL_UART_RxCpltCallback+0x20>)
 8001634:	f7ff fcc8 	bl	8000fc8 <bluetooth>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200002c8 	.word	0x200002c8
 8001644:	2000026c 	.word	0x2000026c

08001648 <debouncer>:
//Interrupciones botones:
volatile int button_int = 0;
int boton_presionado = 0;
//Antirrebotes botones:
int debouncer(volatile int *button_int, GPIO_TypeDef *GPIO_port,
		uint16_t GPIO_number) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count = 0;
	static int counter = 0;

	if (*button_int == 1) {
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d13b      	bne.n	80016d6 <debouncer+0x8e>
		if (button_count == 0) {
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <debouncer+0x98>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10b      	bne.n	800167e <debouncer+0x36>
			counter = HAL_GetTick();
 8001666:	f000 fe7f 	bl	8002368 <HAL_GetTick>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <debouncer+0x9c>)
 8001670:	601a      	str	r2, [r3, #0]
			button_count++;
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <debouncer+0x98>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <debouncer+0x98>)
 800167c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - counter >= 20) {
 800167e:	f000 fe73 	bl	8002368 <HAL_GetTick>
 8001682:	4603      	mov	r3, r0
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <debouncer+0x9c>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	2b13      	cmp	r3, #19
 800168c:	d923      	bls.n	80016d6 <debouncer+0x8e>
			counter = HAL_GetTick();
 800168e:	f000 fe6b 	bl	8002368 <HAL_GetTick>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <debouncer+0x9c>)
 8001698:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number) != 1) {
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4619      	mov	r1, r3
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f001 fdae 	bl	8003200 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d003      	beq.n	80016b2 <debouncer+0x6a>
				button_count = 1;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <debouncer+0x98>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e005      	b.n	80016be <debouncer+0x76>
			} else {
				button_count++;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <debouncer+0x98>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <debouncer+0x98>)
 80016bc:	701a      	strb	r2, [r3, #0]
			}
			if (button_count == 4) { //Periodo antirebotes
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <debouncer+0x98>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d107      	bne.n	80016d6 <debouncer+0x8e>
				button_count = 0;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <debouncer+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
				*button_int = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
				return 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <debouncer+0x90>
			}
		}
	}
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000e0 	.word	0x200000e0
 80016e4:	200000e4 	.word	0x200000e4

080016e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d106      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x1e>
		button_int = 1;
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
		boton_presionado = 3;
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001700:	2203      	movs	r2, #3
 8001702:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_15) {
		button_int = 1;
		boton_presionado = 15;
	}

}
 8001704:	e04a      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170c:	d106      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0x34>
		button_int = 1;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
		boton_presionado = 12;
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
}
 800171a:	e03f      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d106      	bne.n	8001732 <HAL_GPIO_EXTI_Callback+0x4a>
		button_int = 1;
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
		boton_presionado = 13;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 800172c:	220d      	movs	r2, #13
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	e034      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d106      	bne.n	8001748 <HAL_GPIO_EXTI_Callback+0x60>
		button_int = 1;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
		boton_presionado = 10;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001742:	220a      	movs	r2, #10
 8001744:	601a      	str	r2, [r3, #0]
}
 8001746:	e029      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	2b80      	cmp	r3, #128	; 0x80
 800174c:	d106      	bne.n	800175c <HAL_GPIO_EXTI_Callback+0x74>
		button_int = 1;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
		boton_presionado = 7;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001756:	2207      	movs	r2, #7
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	e01f      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001762:	d106      	bne.n	8001772 <HAL_GPIO_EXTI_Callback+0x8a>
		button_int = 1;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
		boton_presionado = 9;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 800176c:	2209      	movs	r2, #9
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	e014      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001778:	d106      	bne.n	8001788 <HAL_GPIO_EXTI_Callback+0xa0>
		button_int = 1;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
		boton_presionado = 14;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001782:	220e      	movs	r2, #14
 8001784:	601a      	str	r2, [r3, #0]
}
 8001786:	e009      	b.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800178e:	d105      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0xb4>
		button_int = 1;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
		boton_presionado = 15;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_GPIO_EXTI_Callback+0xc4>)
 8001798:	220f      	movs	r2, #15
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	200000d8 	.word	0x200000d8
 80017ac:	200000dc 	.word	0x200000dc

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f000 fd71 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f8d5 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 fa6d 	bl	8001c9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80017c2:	f000 f98d 	bl	8001ae0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80017c6:	f000 fa3f 	bl	8001c48 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80017ca:	f000 f937 	bl	8001a3c <MX_ADC1_Init>
  MX_TIM6_Init();
 80017ce:	f000 fa05 	bl	8001bdc <MX_TIM6_Init>
  MX_TIM1_Init();
 80017d2:	f000 f9b3 	bl	8001b3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim6);
 80017d6:	485c      	ldr	r0, [pc, #368]	; (8001948 <main+0x198>)
 80017d8:	f002 fb64 	bl	8003ea4 <HAL_TIM_Base_Start>
	int menu_actual = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
	int retorno = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]

	setEstadoPersianas(0);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7fe ffbf 	bl	8000768 <setEstadoPersianas>
	setLuces(0);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7fe fecc 	bl	8000588 <setLuces>
	setEstadoClima(0);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff f9bd 	bl	8000b70 <setEstadoClima>
	setEstadoSeguridad(0);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff f8ec 	bl	80009d4 <setEstadoSeguridad>
	setEstadoRiego(2);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff f853 	bl	80008a8 <setEstadoRiego>
	lectura_dht11();
 8001802:	f7ff fb45 	bl	8000e90 <lectura_dht11>
	//pantalla_principal();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	4950      	ldr	r1, [pc, #320]	; (800194c <main+0x19c>)
 800180a:	4851      	ldr	r0, [pc, #324]	; (8001950 <main+0x1a0>)
 800180c:	f002 ff0f 	bl	800462e <HAL_UART_Receive_IT>
		 retorno--;
		 }
		 }

		 */
		switch (boton_presionado) {
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <main+0x1a4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3b03      	subs	r3, #3
 8001816:	2b0c      	cmp	r3, #12
 8001818:	f200 808c 	bhi.w	8001934 <main+0x184>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <main+0x74>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001859 	.word	0x08001859
 8001828:	08001935 	.word	0x08001935
 800182c:	08001935 	.word	0x08001935
 8001830:	08001935 	.word	0x08001935
 8001834:	080018b9 	.word	0x080018b9
 8001838:	08001935 	.word	0x08001935
 800183c:	080018cf 	.word	0x080018cf
 8001840:	080018a1 	.word	0x080018a1
 8001844:	08001935 	.word	0x08001935
 8001848:	0800186f 	.word	0x0800186f
 800184c:	08001889 	.word	0x08001889
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018ff 	.word	0x080018ff
		case 3:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_3)) {
 8001858:	2208      	movs	r2, #8
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <main+0x1a8>)
 800185c:	483f      	ldr	r0, [pc, #252]	; (800195c <main+0x1ac>)
 800185e:	f7ff fef3 	bl	8001648 <debouncer>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d056      	beq.n	8001916 <main+0x166>
				cambiarEstadoLuces();
 8001868:	f7fe fee4 	bl	8000634 <cambiarEstadoLuces>
			}
			break;
 800186c:	e053      	b.n	8001916 <main+0x166>
		case 12:
			if (debouncer(&button_int, GPIOE, GPIO_PIN_12)) {
 800186e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001872:	493b      	ldr	r1, [pc, #236]	; (8001960 <main+0x1b0>)
 8001874:	4839      	ldr	r0, [pc, #228]	; (800195c <main+0x1ac>)
 8001876:	f7ff fee7 	bl	8001648 <debouncer>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d04c      	beq.n	800191a <main+0x16a>
				setEstadoPersianas(0);
 8001880:	2000      	movs	r0, #0
 8001882:	f7fe ff71 	bl	8000768 <setEstadoPersianas>
			}
			break;
 8001886:	e048      	b.n	800191a <main+0x16a>
		case 13:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_13)) {
 8001888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188c:	4932      	ldr	r1, [pc, #200]	; (8001958 <main+0x1a8>)
 800188e:	4833      	ldr	r0, [pc, #204]	; (800195c <main+0x1ac>)
 8001890:	f7ff feda 	bl	8001648 <debouncer>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d041      	beq.n	800191e <main+0x16e>
				cambiarEstadoPersianas();
 800189a:	f7fe ffc5 	bl	8000828 <cambiarEstadoPersianas>
			}
			break;
 800189e:	e03e      	b.n	800191e <main+0x16e>
		case 10:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_10)) {
 80018a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a4:	492c      	ldr	r1, [pc, #176]	; (8001958 <main+0x1a8>)
 80018a6:	482d      	ldr	r0, [pc, #180]	; (800195c <main+0x1ac>)
 80018a8:	f7ff fece 	bl	8001648 <debouncer>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d037      	beq.n	8001922 <main+0x172>
				cambiarEstadoRiego();
 80018b2:	f7ff f847 	bl	8000944 <cambiarEstadoRiego>
			}
			break;
 80018b6:	e034      	b.n	8001922 <main+0x172>
		case 7:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_7)) {
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <main+0x1a8>)
 80018bc:	4827      	ldr	r0, [pc, #156]	; (800195c <main+0x1ac>)
 80018be:	f7ff fec3 	bl	8001648 <debouncer>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02e      	beq.n	8001926 <main+0x176>
				cambiarEstadoSeguridad();
 80018c8:	f7ff f910 	bl	8000aec <cambiarEstadoSeguridad>
			}
			break;
 80018cc:	e02b      	b.n	8001926 <main+0x176>
		case 9:
			if (debouncer(&button_int, GPIOA, GPIO_PIN_9)) {
 80018ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d2:	4921      	ldr	r1, [pc, #132]	; (8001958 <main+0x1a8>)
 80018d4:	4821      	ldr	r0, [pc, #132]	; (800195c <main+0x1ac>)
 80018d6:	f7ff feb7 	bl	8001648 <debouncer>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d024      	beq.n	800192a <main+0x17a>
				intruso_detectado();
 80018e0:	f7ff f914 	bl	8000b0c <intruso_detectado>
			}
			break;
 80018e4:	e021      	b.n	800192a <main+0x17a>
		case 14:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_14)) {
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	491e      	ldr	r1, [pc, #120]	; (8001964 <main+0x1b4>)
 80018ec:	481b      	ldr	r0, [pc, #108]	; (800195c <main+0x1ac>)
 80018ee:	f7ff feab 	bl	8001648 <debouncer>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01a      	beq.n	800192e <main+0x17e>
				cambiarControlClima();
 80018f8:	f7ff f9ca 	bl	8000c90 <cambiarControlClima>
			}
			break;
 80018fc:	e017      	b.n	800192e <main+0x17e>
		case 15:
			if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
 80018fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001902:	4918      	ldr	r1, [pc, #96]	; (8001964 <main+0x1b4>)
 8001904:	4815      	ldr	r0, [pc, #84]	; (800195c <main+0x1ac>)
 8001906:	f7ff fe9f 	bl	8001648 <debouncer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <main+0x182>
				cambiarEstadoClima();
 8001910:	f7ff f97c 	bl	8000c0c <cambiarEstadoClima>
			}
			break;
 8001914:	e00d      	b.n	8001932 <main+0x182>
			break;
 8001916:	bf00      	nop
 8001918:	e00c      	b.n	8001934 <main+0x184>
			break;
 800191a:	bf00      	nop
 800191c:	e00a      	b.n	8001934 <main+0x184>
			break;
 800191e:	bf00      	nop
 8001920:	e008      	b.n	8001934 <main+0x184>
			break;
 8001922:	bf00      	nop
 8001924:	e006      	b.n	8001934 <main+0x184>
			break;
 8001926:	bf00      	nop
 8001928:	e004      	b.n	8001934 <main+0x184>
			break;
 800192a:	bf00      	nop
 800192c:	e002      	b.n	8001934 <main+0x184>
			break;
 800192e:	bf00      	nop
 8001930:	e000      	b.n	8001934 <main+0x184>
			break;
 8001932:	bf00      	nop
		 cambiaEstadoClima();
		 } else if (debouncer(&button_int, GPIOB, GPIO_PIN_15)) {
		 cambiaControlClima();
		 }*/

		luces();
 8001934:	f7fe ff12 	bl	800075c <luces>
		riego();
 8001938:	f7ff f846 	bl	80009c8 <riego>
		seguridad();
 800193c:	f7ff f910 	bl	8000b60 <seguridad>
		clima();
 8001940:	f7ff fb00 	bl	8000f44 <clima>
		switch (boton_presionado) {
 8001944:	e764      	b.n	8001810 <main+0x60>
 8001946:	bf00      	nop
 8001948:	200001dc 	.word	0x200001dc
 800194c:	200002c8 	.word	0x200002c8
 8001950:	2000026c 	.word	0x2000026c
 8001954:	200000dc 	.word	0x200000dc
 8001958:	40020000 	.word	0x40020000
 800195c:	200000d8 	.word	0x200000d8
 8001960:	40021000 	.word	0x40021000
 8001964:	40020400 	.word	0x40020400

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fd6c 	bl	8005454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <SystemClock_Config+0xcc>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <SystemClock_Config+0xcc>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <SystemClock_Config+0xcc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <SystemClock_Config+0xd0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <SystemClock_Config+0xd0>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <SystemClock_Config+0xd0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019cc:	2310      	movs	r3, #16
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d8:	2308      	movs	r3, #8
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80019dc:	2332      	movs	r3, #50	; 0x32
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e4:	2307      	movs	r3, #7
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 fd95 	bl	800351c <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f8:	f000 fa32 	bl	8001e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	230f      	movs	r3, #15
 80019fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fff6 	bl	8003a0c <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a26:	f000 fa1b 	bl	8001e60 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x9c>)
 8001a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <MX_ADC1_Init+0xa0>)
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a9c:	f000 fc70 	bl	8002380 <HAL_ADC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 f9db 	bl	8001e60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001abc:	f000 fe42 	bl	8002744 <HAL_ADC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 f9cb 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000018c 	.word	0x2000018c
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	0f000001 	.word	0x0f000001

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <MX_I2C1_Init+0x54>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_I2C1_Init+0x58>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_I2C1_Init+0x50>)
 8001b1e:	f001 fbb9 	bl	8003294 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 f99a 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200000fc 	.word	0x200000fc
 8001b34:	40005400 	.word	0x40005400
 8001b38:	000186a0 	.word	0x000186a0

08001b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <MX_TIM1_Init+0x9c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 768-1;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b60:	f240 22ff 	movw	r2, #767	; 0x2ff
 8001b64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b6e:	22fe      	movs	r2, #254	; 0xfe
 8001b70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001b86:	f002 f93d 	bl	8003e04 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b90:	f000 f966 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001ba2:	f002 f9e7 	bl	8003f74 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bac:	f000 f958 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_TIM1_Init+0x98>)
 8001bbe:	f002 fbdb 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bc8:	f000 f94a 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000224 	.word	0x20000224
 8001bd8:	40010000 	.word	0x40010000

08001bdc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bec:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <MX_TIM6_Init+0x68>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bf2:	2231      	movs	r2, #49	; 0x31
 8001bf4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c0c:	f002 f8fa 	bl	8003e04 <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c16:	f000 f923 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c28:	f002 fba6 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c32:	f000 f915 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200001dc 	.word	0x200001dc
 8001c44:	40001000 	.word	0x40001000

08001c48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_USART6_UART_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART6_UART_Init+0x4c>)
 8001c80:	f002 fbf6 	bl	8004470 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f000 f8e9 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000026c 	.word	0x2000026c
 8001c98:	40011400 	.word	0x40011400

08001c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a64      	ldr	r2, [pc, #400]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a5d      	ldr	r2, [pc, #372]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a48      	ldr	r2, [pc, #288]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <MX_GPIO_Init+0x1b0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8001d60:	483b      	ldr	r0, [pc, #236]	; (8001e50 <MX_GPIO_Init+0x1b4>)
 8001d62:	f001 fa65 	bl	8003230 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8001d6c:	4839      	ldr	r0, [pc, #228]	; (8001e54 <MX_GPIO_Init+0x1b8>)
 8001d6e:	f001 fa5f 	bl	8003230 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 PA7 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9
 8001d72:	f242 6389 	movw	r3, #9865	; 0x2689
 8001d76:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4831      	ldr	r0, [pc, #196]	; (8001e50 <MX_GPIO_Init+0x1b4>)
 8001d8a:	f001 f89d 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001d8e:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001d92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	482a      	ldr	r0, [pc, #168]	; (8001e50 <MX_GPIO_Init+0x1b4>)
 8001da8:	f001 f88e 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4825      	ldr	r0, [pc, #148]	; (8001e58 <MX_GPIO_Init+0x1bc>)
 8001dc4:	f001 f880 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001dc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481f      	ldr	r0, [pc, #124]	; (8001e5c <MX_GPIO_Init+0x1c0>)
 8001de0:	f001 f872 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001de4:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001de8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <MX_GPIO_Init+0x1b8>)
 8001dfe:	f001 f863 	bl	8002ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2006      	movs	r0, #6
 8001e08:	f000 ff95 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e0c:	2006      	movs	r0, #6
 8001e0e:	f000 ffae 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2009      	movs	r0, #9
 8001e18:	f000 ff8d 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e1c:	2009      	movs	r0, #9
 8001e1e:	f000 ffa6 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2017      	movs	r0, #23
 8001e28:	f000 ff85 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e2c:	2017      	movs	r0, #23
 8001e2e:	f000 ff9e 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2028      	movs	r0, #40	; 0x28
 8001e38:	f000 ff7d 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e3c:	2028      	movs	r0, #40	; 0x28
 8001e3e:	f000 ff96 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	; 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40020400 	.word	0x40020400

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eaa:	2007      	movs	r0, #7
 8001eac:	f000 ff38 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_ADC_MspInit+0x7c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d127      	bne.n	8001f2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f16:	2302      	movs	r3, #2
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_ADC_MspInit+0x84>)
 8001f2a:	f000 ffcd 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3728      	adds	r7, #40	; 0x28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_I2C_MspInit+0x84>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12b      	bne.n	8001fbe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f82:	23c0      	movs	r3, #192	; 0xc0
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f86:	2312      	movs	r3, #18
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f92:	2304      	movs	r3, #4
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <HAL_I2C_MspInit+0x8c>)
 8001f9e:	f000 ff93 	bl	8002ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_I2C_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40005400 	.word	0x40005400
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_TIM_Base_MspInit+0x64>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002002:	e012      	b.n	800202a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_TIM_Base_MspInit+0x6c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10d      	bne.n	800202a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_TIM_Base_MspInit+0x68>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40023800 	.word	0x40023800
 8002040:	40001000 	.word	0x40001000

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_UART_MspInit+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d133      	bne.n	80020ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_UART_MspInit+0x98>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x98>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020ae:	2308      	movs	r3, #8
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_UART_MspInit+0x9c>)
 80020ba:	f000 ff05 	bl	8002ec8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2047      	movs	r0, #71	; 0x47
 80020c4:	f000 fe37 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020c8:	2047      	movs	r0, #71	; 0x47
 80020ca:	f000 fe50 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011400 	.word	0x40011400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020800 	.word	0x40020800

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f906 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800213c:	2001      	movs	r0, #1
 800213e:	f001 f891 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}

08002146 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800214a:	2008      	movs	r0, #8
 800214c:	f001 f88a 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	f001 f883 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800215e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002162:	f001 f87f 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800216e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002172:	f001 f877 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002176:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800217a:	f001 f873 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800217e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002182:	f001 f86f 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002186:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800218a:	f001 f86b 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800218e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002192:	f001 f867 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002196:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800219a:	f001 f863 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <USART6_IRQHandler+0x10>)
 80021aa:	f002 fa71 	bl	8004690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000026c 	.word	0x2000026c

080021b8 <_sbrk>:
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
 80021e8:	f003 f90a 	bl	8005400 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20020000 	.word	0x20020000
 8002218:	00000400 	.word	0x00000400
 800221c:	200000e8 	.word	0x200000e8
 8002220:	200002e0 	.word	0x200002e0

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack     /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002264:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002272:	f7ff ffd7 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 f8c9 	bl	800540c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7ff fa99 	bl	80017b0 <main>
  bx  lr    
 800227e:	4770      	bx	lr
;  ldr   sp, =_estack     /* set stack pointer */
 8002280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800228c:	080062c4 	.word	0x080062c4
  ldr r2, =_sbss
 8002290:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002294:	200002e0 	.word	0x200002e0

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 fd2b 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fdcc 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fd43 	bl	8002d8a <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 fd0b 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000010 	.word	0x20000010
 8002338:	20000018 	.word	0x20000018
 800233c:	20000014 	.word	0x20000014

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000018 	.word	0x20000018
 8002364:	200002cc 	.word	0x200002cc

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200002cc 	.word	0x200002cc

08002380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e033      	b.n	80023fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fd8c 	bl	8001ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c6:	f023 0302 	bic.w	r3, r3, #2
 80023ca:	f043 0202 	orr.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fad8 	bl	8002988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
 80023ee:	e001      	b.n	80023f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Start+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e0b2      	b.n	8002588 <HAL_ADC_Start+0x180>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d018      	beq.n	800246a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002448:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_ADC_Start+0x18c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_ADC_Start+0x190>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9a      	lsrs	r2, r3, #18
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d17a      	bne.n	800256e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d106      	bne.n	80024c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f023 0206 	bic.w	r2, r3, #6
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_ADC_Start+0x194>)
 80024d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12a      	bne.n	8002544 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_ADC_Start+0x198>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d015      	beq.n	8002524 <HAL_ADC_Start+0x11c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <HAL_ADC_Start+0x19c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d105      	bne.n	800250e <HAL_ADC_Start+0x106>
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_ADC_Start+0x194>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_ADC_Start+0x1a0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d136      	bne.n	8002586 <HAL_ADC_Start+0x17e>
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_ADC_Start+0x194>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d130      	bne.n	8002586 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d129      	bne.n	8002586 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e020      	b.n	8002586 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_ADC_Start+0x198>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11b      	bne.n	8002586 <HAL_ADC_Start+0x17e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d114      	bne.n	8002586 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e00b      	b.n	8002586 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	20000010 	.word	0x20000010
 8002598:	431bde83 	.word	0x431bde83
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000
 80025a4:	40012100 	.word	0x40012100
 80025a8:	40012200 	.word	0x40012200

080025ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Stop+0x16>
 80025be:	2302      	movs	r3, #2
 80025c0:	e021      	b.n	8002606 <HAL_ADC_Stop+0x5a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d113      	bne.n	8002658 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e063      	b.n	8002720 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002658:	f7ff fe86 	bl	8002368 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800265e:	e021      	b.n	80026a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d01d      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ADC_PollForConversion+0x6c>
 800266e:	f7ff fe7b 	bl	8002368 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d212      	bcs.n	80026a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d00b      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d1d6      	bne.n	8002660 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0212 	mvn.w	r2, #18
 80026ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d123      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11f      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d111      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e105      	b.n	800296c <HAL_ADC_ConfigChannel+0x228>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d925      	bls.n	80027bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	2207      	movs	r2, #7
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4403      	add	r3, r0
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	409a      	lsls	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e022      	b.n	8002802 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	2207      	movs	r2, #7
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d824      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b05      	subs	r3, #5
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b05      	subs	r3, #5
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
 8002852:	e04c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b23      	subs	r3, #35	; 0x23
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b23      	subs	r3, #35	; 0x23
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
 80028a4:	e023      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b41      	subs	r3, #65	; 0x41
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	400a      	ands	r2, r1
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b41      	subs	r3, #65	; 0x41
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_ADC_ConfigChannel+0x234>)
 80028f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_ADC_ConfigChannel+0x238>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b12      	cmp	r3, #18
 8002902:	d105      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_ADC_ConfigChannel+0x238>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d123      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d003      	beq.n	800292a <HAL_ADC_ConfigChannel+0x1e6>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b11      	cmp	r3, #17
 8002928:	d11b      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b10      	cmp	r3, #16
 800293c:	d111      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_ADC_ConfigChannel+0x23c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_ADC_ConfigChannel+0x240>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	0c9a      	lsrs	r2, r3, #18
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002954:	e002      	b.n	800295c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	40012000 	.word	0x40012000
 8002980:	20000010 	.word	0x20000010
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002990:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <ADC_Init+0x1f0>)
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <ADC_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0202 	bic.w	r2, r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	005a      	lsls	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	035a      	lsls	r2, r3, #13
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e007      	b.n	8002afc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051a      	lsls	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3e:	025a      	lsls	r2, r3, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	029a      	lsls	r2, r3, #10
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	0f000001 	.word	0x0f000001

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	; (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	; (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fada 	bl	8002368 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d008      	beq.n	8002dd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e052      	b.n	8002e7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0216 	bic.w	r2, r2, #22
 8002de2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <HAL_DMA_Abort+0x62>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0208 	bic.w	r2, r2, #8
 8002e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e24:	e013      	b.n	8002e4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e26:	f7ff fa9f 	bl	8002368 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d90c      	bls.n	8002e4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e015      	b.n	8002e7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e4      	bne.n	8002e26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d004      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e00c      	b.n	8002eba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2205      	movs	r2, #5
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e16b      	b.n	80031bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f040 815a 	bne.w	80031b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d017      	beq.n	8002fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80b4 	beq.w	80031b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a5f      	ldr	r2, [pc, #380]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_GPIO_Init+0x310>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_GPIO_Init+0x314>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02b      	beq.n	80030ee <HAL_GPIO_Init+0x226>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <HAL_GPIO_Init+0x318>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x222>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_GPIO_Init+0x31c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x21e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	; (80031e8 <HAL_GPIO_Init+0x320>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x21a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	; (80031ec <HAL_GPIO_Init+0x324>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x216>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <HAL_GPIO_Init+0x328>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x212>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	; (80031f4 <HAL_GPIO_Init+0x32c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	; (80031f8 <HAL_GPIO_Init+0x330>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x20a>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00e      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e00c      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00a      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030da:	2305      	movs	r3, #5
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030de:	2304      	movs	r3, #4
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x310>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003132:	4a32      	ldr	r2, [pc, #200]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003138:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_GPIO_Init+0x334>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_GPIO_Init+0x334>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_GPIO_Init+0x334>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_GPIO_Init+0x334>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f ae90 	bls.w	8002ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e001      	b.n	8003222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fa30 	bl	80016e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe fe42 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f000 fd5c 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	; (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e264      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d075      	beq.n	8003626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353a:	4ba3      	ldr	r3, [pc, #652]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d00c      	beq.n	8003560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4ba0      	ldr	r3, [pc, #640]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d112      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b9d      	ldr	r3, [pc, #628]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355e:	d10b      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	4b99      	ldr	r3, [pc, #612]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05b      	beq.n	8003624 <HAL_RCC_OscConfig+0x108>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d157      	bne.n	8003624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e23f      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x74>
 8003582:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a90      	ldr	r2, [pc, #576]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e01d      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x98>
 800359a:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a8a      	ldr	r2, [pc, #552]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a87      	ldr	r2, [pc, #540]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 80035b4:	4b84      	ldr	r3, [pc, #528]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a83      	ldr	r2, [pc, #524]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b81      	ldr	r3, [pc, #516]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a80      	ldr	r2, [pc, #512]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fec8 	bl	8002368 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe fec4 	bl	8002368 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e204      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0xc0>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe feb4 	bl	8002368 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fe feb0 	bl	8002368 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1f0      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0xe8>
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b62      	ldr	r3, [pc, #392]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	2b08      	cmp	r3, #8
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b5c      	ldr	r3, [pc, #368]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1c4      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4952      	ldr	r1, [pc, #328]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_RCC_OscConfig+0x2b0>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe fe69 	bl	8002368 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe fe65 	bl	8002368 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1a5      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4940      	ldr	r1, [pc, #256]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_OscConfig+0x2b0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fe48 	bl	8002368 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fe fe44 	bl	8002368 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e184      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d030      	beq.n	8003768 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_RCC_OscConfig+0x2b4>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe fe28 	bl	8002368 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe fe24 	bl	8002368 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e164      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x200>
 800373a:	e015      	b.n	8003768 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_OscConfig+0x2b4>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fe fe11 	bl	8002368 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fe fe0d 	bl	8002368 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e14d      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a0 	beq.w	80038b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x2b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d121      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCC_OscConfig+0x2b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_RCC_OscConfig+0x2b8>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fe fdd3 	bl	8002368 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e011      	b.n	80037ea <HAL_RCC_OscConfig+0x2ce>
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470000 	.word	0x42470000
 80037d0:	42470e80 	.word	0x42470e80
 80037d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fe fdc6 	bl	8002368 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e106      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_RCC_OscConfig+0x4e4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <HAL_RCC_OscConfig+0x2f0>
 80037fe:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	e01c      	b.n	8003846 <HAL_RCC_OscConfig+0x32a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b05      	cmp	r3, #5
 8003812:	d10c      	bne.n	800382e <HAL_RCC_OscConfig+0x312>
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a7a      	ldr	r2, [pc, #488]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	4b78      	ldr	r3, [pc, #480]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e00b      	b.n	8003846 <HAL_RCC_OscConfig+0x32a>
 800382e:	4b75      	ldr	r3, [pc, #468]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d015      	beq.n	800387a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe fd8b 	bl	8002368 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fe fd87 	bl	8002368 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0c5      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ee      	beq.n	8003856 <HAL_RCC_OscConfig+0x33a>
 8003878:	e014      	b.n	80038a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fe fd75 	bl	8002368 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe fd71 	bl	8002368 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e0af      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	4b5a      	ldr	r3, [pc, #360]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ee      	bne.n	8003882 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	4b56      	ldr	r3, [pc, #344]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a55      	ldr	r2, [pc, #340]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 809b 	beq.w	80039f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c0:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d05c      	beq.n	8003986 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d141      	bne.n	8003958 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x4ec>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fd45 	bl	8002368 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fd41 	bl	8002368 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e081      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f4:	4b43      	ldr	r3, [pc, #268]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	019b      	lsls	r3, r3, #6
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392a:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <HAL_RCC_OscConfig+0x4ec>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fd1a 	bl	8002368 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7fe fd16 	bl	8002368 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e056      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x41c>
 8003956:	e04e      	b.n	80039f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fe fd03 	bl	8002368 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe fcff 	bl	8002368 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e03f      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x44a>
 8003984:	e037      	b.n	80039f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e032      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003992:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <HAL_RCC_OscConfig+0x4e8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d028      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d121      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d11a      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c2:	4013      	ands	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d111      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40007000 	.word	0x40007000
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470060 	.word	0x42470060

08003a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cc      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d90c      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0b8      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a60:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a58      	ldr	r2, [pc, #352]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a78:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a52      	ldr	r2, [pc, #328]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	494d      	ldr	r1, [pc, #308]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d044      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d119      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e067      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fe fc34 	bl	8002368 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe fc30 	bl	8002368 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d20c      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e032      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4916      	ldr	r1, [pc, #88]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b92:	f000 f821 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	490a      	ldr	r1, [pc, #40]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a09      	ldr	r2, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fb94 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08006268 	.word	0x08006268
 8003bd0:	20000010 	.word	0x20000010
 8003bd4:	20000014 	.word	0x20000014

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	2300      	movs	r3, #0
 8003bea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d00d      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x40>
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	f200 80bd 	bhi.w	8003d7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x34>
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0a:	e0b7      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c0e:	60bb      	str	r3, [r7, #8]
       break;
 8003c10:	e0b7      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c12:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c14:	60bb      	str	r3, [r7, #8]
      break;
 8003c16:	e0b4      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c18:	4b5d      	ldr	r3, [pc, #372]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c22:	4b5b      	ldr	r3, [pc, #364]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d04d      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2e:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	461a      	mov	r2, r3
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	ea02 0800 	and.w	r8, r2, r0
 8003c46:	ea03 0901 	and.w	r9, r3, r1
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	014b      	lsls	r3, r1, #5
 8003c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c5c:	0142      	lsls	r2, r0, #5
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	ebb0 0008 	subs.w	r0, r0, r8
 8003c66:	eb61 0109 	sbc.w	r1, r1, r9
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c78:	0182      	lsls	r2, r0, #6
 8003c7a:	1a12      	subs	r2, r2, r0
 8003c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	00d9      	lsls	r1, r3, #3
 8003c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c8e:	00d0      	lsls	r0, r2, #3
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	eb12 0208 	adds.w	r2, r2, r8
 8003c98:	eb43 0309 	adc.w	r3, r3, r9
 8003c9c:	f04f 0000 	mov.w	r0, #0
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	0259      	lsls	r1, r3, #9
 8003ca6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003caa:	0250      	lsls	r0, r2, #9
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	f7fc fae8 	bl	8000290 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e04a      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	ea02 0400 	and.w	r4, r2, r0
 8003ce2:	ea03 0501 	and.w	r5, r3, r1
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	014b      	lsls	r3, r1, #5
 8003cf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cf8:	0142      	lsls	r2, r0, #5
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	1b00      	subs	r0, r0, r4
 8003d00:	eb61 0105 	sbc.w	r1, r1, r5
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	018b      	lsls	r3, r1, #6
 8003d0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d12:	0182      	lsls	r2, r0, #6
 8003d14:	1a12      	subs	r2, r2, r0
 8003d16:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	00d9      	lsls	r1, r3, #3
 8003d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d28:	00d0      	lsls	r0, r2, #3
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	1912      	adds	r2, r2, r4
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	0299      	lsls	r1, r3, #10
 8003d3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d42:	0290      	lsls	r0, r2, #10
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	f7fc fa9c 	bl	8000290 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	60bb      	str	r3, [r7, #8]
      break;
 8003d7a:	e002      	b.n	8003d82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d7e:	60bb      	str	r3, [r7, #8]
      break;
 8003d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d82:	68bb      	ldr	r3, [r7, #8]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000010 	.word	0x20000010

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a9b      	lsrs	r3, r3, #10
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	08006278 	.word	0x08006278

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de0:	f7ff ffdc 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0b5b      	lsrs	r3, r3, #13
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	08006278 	.word	0x08006278

08003e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fe f8d2 	bl	8001fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 f95e 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e046      	b.n	8003f4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <HAL_TIM_Base_Start+0xb4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d022      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d01d      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_TIM_Base_Start+0xb8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <HAL_TIM_Base_Start+0xbc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_TIM_Base_Start+0xc0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <HAL_TIM_Base_Start+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_TIM_Base_Start+0xc8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_Base_Start+0x70>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_TIM_Base_Start+0xcc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d111      	bne.n	8003f38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d010      	beq.n	8003f48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	e007      	b.n	8003f48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40001800 	.word	0x40001800

08003f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e0b4      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x186>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc8:	d03e      	beq.n	8004048 <HAL_TIM_ConfigClockSource+0xd4>
 8003fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fce:	f200 8087 	bhi.w	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	f000 8086 	beq.w	80040e6 <HAL_TIM_ConfigClockSource+0x172>
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d87f      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d01a      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xa6>
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d87b      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d050      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x11a>
 8003fec:	2b60      	cmp	r3, #96	; 0x60
 8003fee:	d877      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b50      	cmp	r3, #80	; 0x50
 8003ff2:	d03c      	beq.n	800406e <HAL_TIM_ConfigClockSource+0xfa>
 8003ff4:	2b50      	cmp	r3, #80	; 0x50
 8003ff6:	d873      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d058      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x13a>
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d86f      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d064      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d86b      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d060      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d867      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05c      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d05a      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	e062      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6899      	ldr	r1, [r3, #8]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f000 f985 	bl	8004338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800403c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	609a      	str	r2, [r3, #8]
      break;
 8004046:	e04f      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6899      	ldr	r1, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f000 f96e 	bl	8004338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406a:	609a      	str	r2, [r3, #8]
      break;
 800406c:	e03c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	f000 f8e2 	bl	8004244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2150      	movs	r1, #80	; 0x50
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f93b 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 800408c:	e02c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	461a      	mov	r2, r3
 800409c:	f000 f901 	bl	80042a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2160      	movs	r1, #96	; 0x60
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f92b 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 80040ac:	e01c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 f8c2 	bl	8004244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2140      	movs	r1, #64	; 0x40
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f91b 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 80040cc:	e00c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f000 f912 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 80040de:	e003      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e000      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	; (8004218 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <TIM_Base_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <TIM_Base_SetConfig+0x120>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <TIM_Base_SetConfig+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d027      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <TIM_Base_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d023      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <TIM_Base_SetConfig+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a29      	ldr	r2, [pc, #164]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d017      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_Base_SetConfig+0x128>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_Base_SetConfig+0x12c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_Base_SetConfig+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <TIM_Base_SetConfig+0x134>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a24      	ldr	r2, [pc, #144]	; (800423c <TIM_Base_SetConfig+0x138>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_Base_SetConfig+0x13c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <TIM_Base_SetConfig+0x114>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <TIM_Base_SetConfig+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40010400 	.word	0x40010400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40001800 	.word	0x40001800
 800423c:	40001c00 	.word	0x40001c00
 8004240:	40002000 	.word	0x40002000

08004244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 030a 	bic.w	r3, r3, #10
 8004280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0210 	bic.w	r2, r3, #16
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	f043 0307 	orr.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	431a      	orrs	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e05a      	b.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d01d      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10c      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40010400 	.word	0x40010400
 8004468:	40014000 	.word	0x40014000
 800446c:	40001800 	.word	0x40001800

08004470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e03f      	b.n	8004502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd fdd4 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	; 0x24
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fddb 	bl	8005070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b08a      	sub	sp, #40	; 0x28
 800450e:	af02      	add	r7, sp, #8
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d17c      	bne.n	8004624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Transmit+0x2c>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e075      	b.n	8004626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_UART_Transmit+0x3e>
 8004544:	2302      	movs	r3, #2
 8004546:	e06e      	b.n	8004626 <HAL_UART_Transmit+0x11c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2221      	movs	r2, #33	; 0x21
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455e:	f7fd ff03 	bl	8002368 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d108      	bne.n	800458c <HAL_UART_Transmit+0x82>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e003      	b.n	8004594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800459c:	e02a      	b.n	80045f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fb1f 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e036      	b.n	8004626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3302      	adds	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e007      	b.n	80045e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1cf      	bne.n	800459e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	2140      	movs	r1, #64	; 0x40
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 faef 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b20      	cmp	r3, #32
 8004646:	d11d      	bne.n	8004684 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Receive_IT+0x26>
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e016      	b.n	8004686 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_UART_Receive_IT+0x38>
 8004662:	2302      	movs	r3, #2
 8004664:	e00f      	b.n	8004686 <HAL_UART_Receive_IT+0x58>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	461a      	mov	r2, r3
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fb24 	bl	8004cc8 <UART_Start_Receive_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	e000      	b.n	8004686 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0ba      	sub	sp, #232	; 0xe8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_UART_IRQHandler+0x66>
 80046e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fc03 	bl	8004efa <UART_Receive_IT>
      return;
 80046f4:	e256      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80de 	beq.w	80048bc <HAL_UART_IRQHandler+0x22c>
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80d1 	beq.w	80048bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_UART_IRQHandler+0xae>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
 800474a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_UART_IRQHandler+0xf6>
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f043 0204 	orr.w	r2, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d011      	beq.n	80047b6 <HAL_UART_IRQHandler+0x126>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d105      	bne.n	80047aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800479e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 81ed 	beq.w	8004b9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_UART_IRQHandler+0x14e>
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb8e 	bl	8004efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <HAL_UART_IRQHandler+0x17a>
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d04f      	beq.n	80048aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa96 	bl	8004d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d141      	bne.n	80048a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800484a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800484e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1d9      	bne.n	800481e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4a7d      	ldr	r2, [pc, #500]	; (8004a6c <HAL_UART_IRQHandler+0x3dc>)
 8004878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe faff 	bl	8002e82 <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004894:	4610      	mov	r0, r2
 8004896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	e00e      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f990 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	e00a      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f98c 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e006      	b.n	80048b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f988 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048b6:	e170      	b.n	8004b9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	bf00      	nop
    return;
 80048ba:	e16e      	b.n	8004b9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 814a 	bne.w	8004b5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8143 	beq.w	8004b5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 813c 	beq.w	8004b5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	f040 80b4 	bne.w	8004a70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8140 	beq.w	8004b9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004926:	429a      	cmp	r2, r3
 8004928:	f080 8139 	bcs.w	8004b9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493e:	f000 8088 	beq.w	8004a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800496e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800497a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d9      	bne.n	8004942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800499e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e1      	bne.n	800498e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a34:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e3      	bne.n	8004a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe f9a8 	bl	8002da2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8b6 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a68:	e099      	b.n	8004b9e <HAL_UART_IRQHandler+0x50e>
 8004a6a:	bf00      	nop
 8004a6c:	08004e03 	.word	0x08004e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 808b 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8086 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aba:	647a      	str	r2, [r7, #68]	; 0x44
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e3      	bne.n	8004a96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004af2:	633a      	str	r2, [r7, #48]	; 0x30
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e3      	bne.n	8004ace <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e3      	bne.n	8004b14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f83e 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b58:	e023      	b.n	8004ba2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_UART_IRQHandler+0x4ea>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f959 	bl	8004e2a <UART_Transmit_IT>
    return;
 8004b78:	e014      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00e      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x514>
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f999 	bl	8004eca <UART_EndTransmit_IT>
    return;
 8004b98:	e004      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
    return;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ba2:	bf00      	nop
  }
}
 8004ba4:	37e8      	adds	r7, #232	; 0xe8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b090      	sub	sp, #64	; 0x40
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfc:	e050      	b.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d04c      	beq.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0c:	f7fd fbac 	bl	8002368 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d241      	bcs.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3c:	637a      	str	r2, [r7, #52]	; 0x34
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c70:	623a      	str	r2, [r7, #32]
 8004c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e00f      	b.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d09f      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3740      	adds	r7, #64	; 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2222      	movs	r2, #34	; 0x22
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0220 	orr.w	r2, r2, #32
 8004d2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b095      	sub	sp, #84	; 0x54
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d64:	643a      	str	r2, [r7, #64]	; 0x40
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d119      	bne.n	8004de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f023 0310 	bic.w	r3, r3, #16
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd4:	61ba      	str	r2, [r7, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004df6:	bf00      	nop
 8004df8:	3754      	adds	r7, #84	; 0x54
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff fecf 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b21      	cmp	r3, #33	; 0x21
 8004e3c:	d13e      	bne.n	8004ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d114      	bne.n	8004e72 <UART_Transmit_IT+0x48>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d110      	bne.n	8004e72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]
 8004e70:	e008      	b.n	8004e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	1c59      	adds	r1, r3, #1
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6211      	str	r1, [r2, #32]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4619      	mov	r1, r3
 8004e92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10f      	bne.n	8004eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe5e 	bl	8004bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08c      	sub	sp, #48	; 0x30
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b22      	cmp	r3, #34	; 0x22
 8004f0c:	f040 80ab 	bne.w	8005066 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f18:	d117      	bne.n	8004f4a <UART_Receive_IT+0x50>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d113      	bne.n	8004f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	1c9a      	adds	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
 8004f48:	e026      	b.n	8004f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5c:	d007      	beq.n	8004f6e <UART_Receive_IT+0x74>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <UART_Receive_IT+0x82>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e008      	b.n	8004f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d15a      	bne.n	8005062 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0220 	bic.w	r2, r2, #32
 8004fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d135      	bne.n	8005058 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f023 0310 	bic.w	r3, r3, #16
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	623a      	str	r2, [r7, #32]
 8005014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d10a      	bne.n	800504a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fdbf 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
 8005056:	e002      	b.n	800505e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc fae1 	bl	8001620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e002      	b.n	8005068 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3730      	adds	r7, #48	; 0x30
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b09f      	sub	sp, #124	; 0x7c
 8005076:	af00      	add	r7, sp, #0
 8005078:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	68d9      	ldr	r1, [r3, #12]
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	431a      	orrs	r2, r3
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b4:	f021 010c 	bic.w	r1, r1, #12
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	6999      	ldr	r1, [r3, #24]
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	ea40 0301 	orr.w	r3, r0, r1
 80050d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4bc5      	ldr	r3, [pc, #788]	; (80053f4 <UART_SetConfig+0x384>)
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d004      	beq.n	80050ee <UART_SetConfig+0x7e>
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4bc3      	ldr	r3, [pc, #780]	; (80053f8 <UART_SetConfig+0x388>)
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d103      	bne.n	80050f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ee:	f7fe fe75 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 80050f2:	6778      	str	r0, [r7, #116]	; 0x74
 80050f4:	e002      	b.n	80050fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f6:	f7fe fe5d 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 80050fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	f040 80b6 	bne.w	8005274 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510a:	461c      	mov	r4, r3
 800510c:	f04f 0500 	mov.w	r5, #0
 8005110:	4622      	mov	r2, r4
 8005112:	462b      	mov	r3, r5
 8005114:	1891      	adds	r1, r2, r2
 8005116:	6439      	str	r1, [r7, #64]	; 0x40
 8005118:	415b      	adcs	r3, r3
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005120:	1912      	adds	r2, r2, r4
 8005122:	eb45 0303 	adc.w	r3, r5, r3
 8005126:	f04f 0000 	mov.w	r0, #0
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	00d9      	lsls	r1, r3, #3
 8005130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005134:	00d0      	lsls	r0, r2, #3
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	1911      	adds	r1, r2, r4
 800513c:	6639      	str	r1, [r7, #96]	; 0x60
 800513e:	416b      	adcs	r3, r5
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	1891      	adds	r1, r2, r2
 800514e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005150:	415b      	adcs	r3, r3
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005158:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800515c:	f7fb f898 	bl	8000290 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <UART_SetConfig+0x38c>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011e      	lsls	r6, r3, #4
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	461c      	mov	r4, r3
 8005172:	f04f 0500 	mov.w	r5, #0
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	1891      	adds	r1, r2, r2
 800517c:	6339      	str	r1, [r7, #48]	; 0x30
 800517e:	415b      	adcs	r3, r3
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005186:	1912      	adds	r2, r2, r4
 8005188:	eb45 0303 	adc.w	r3, r5, r3
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	00d9      	lsls	r1, r3, #3
 8005196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519a:	00d0      	lsls	r0, r2, #3
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	1911      	adds	r1, r2, r4
 80051a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80051a4:	416b      	adcs	r3, r5
 80051a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	1891      	adds	r1, r2, r2
 80051b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80051b6:	415b      	adcs	r3, r3
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051c2:	f7fb f865 	bl	8000290 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b8c      	ldr	r3, [pc, #560]	; (80053fc <UART_SetConfig+0x38c>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a87      	ldr	r2, [pc, #540]	; (80053fc <UART_SetConfig+0x38c>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ec:	441e      	add	r6, r3
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	4618      	mov	r0, r3
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	1894      	adds	r4, r2, r2
 80051fc:	623c      	str	r4, [r7, #32]
 80051fe:	415b      	adcs	r3, r3
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005206:	1812      	adds	r2, r2, r0
 8005208:	eb41 0303 	adc.w	r3, r1, r3
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	f04f 0500 	mov.w	r5, #0
 8005214:	00dd      	lsls	r5, r3, #3
 8005216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800521a:	00d4      	lsls	r4, r2, #3
 800521c:	4622      	mov	r2, r4
 800521e:	462b      	mov	r3, r5
 8005220:	1814      	adds	r4, r2, r0
 8005222:	653c      	str	r4, [r7, #80]	; 0x50
 8005224:	414b      	adcs	r3, r1
 8005226:	657b      	str	r3, [r7, #84]	; 0x54
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	461a      	mov	r2, r3
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	1891      	adds	r1, r2, r2
 8005234:	61b9      	str	r1, [r7, #24]
 8005236:	415b      	adcs	r3, r3
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800523e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005242:	f7fb f825 	bl	8000290 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4b6c      	ldr	r3, [pc, #432]	; (80053fc <UART_SetConfig+0x38c>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a67      	ldr	r2, [pc, #412]	; (80053fc <UART_SetConfig+0x38c>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 0207 	and.w	r2, r3, #7
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4432      	add	r2, r6
 8005270:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005272:	e0b9      	b.n	80053e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005276:	461c      	mov	r4, r3
 8005278:	f04f 0500 	mov.w	r5, #0
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	1891      	adds	r1, r2, r2
 8005282:	6139      	str	r1, [r7, #16]
 8005284:	415b      	adcs	r3, r3
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800528c:	1912      	adds	r2, r2, r4
 800528e:	eb45 0303 	adc.w	r3, r5, r3
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	00d9      	lsls	r1, r3, #3
 800529c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a0:	00d0      	lsls	r0, r2, #3
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	eb12 0804 	adds.w	r8, r2, r4
 80052aa:	eb43 0905 	adc.w	r9, r3, r5
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f04f 0100 	mov.w	r1, #0
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	008b      	lsls	r3, r1, #2
 80052c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052c6:	0082      	lsls	r2, r0, #2
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fa ffe0 	bl	8000290 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b49      	ldr	r3, [pc, #292]	; (80053fc <UART_SetConfig+0x38c>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011e      	lsls	r6, r3, #4
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	4618      	mov	r0, r3
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	1894      	adds	r4, r2, r2
 80052ec:	60bc      	str	r4, [r7, #8]
 80052ee:	415b      	adcs	r3, r3
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f6:	1812      	adds	r2, r2, r0
 80052f8:	eb41 0303 	adc.w	r3, r1, r3
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	f04f 0500 	mov.w	r5, #0
 8005304:	00dd      	lsls	r5, r3, #3
 8005306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800530a:	00d4      	lsls	r4, r2, #3
 800530c:	4622      	mov	r2, r4
 800530e:	462b      	mov	r3, r5
 8005310:	1814      	adds	r4, r2, r0
 8005312:	64bc      	str	r4, [r7, #72]	; 0x48
 8005314:	414b      	adcs	r3, r1
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	008b      	lsls	r3, r1, #2
 800532c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005330:	0082      	lsls	r2, r0, #2
 8005332:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005336:	f7fa ffab 	bl	8000290 <__aeabi_uldivmod>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <UART_SetConfig+0x38c>)
 8005340:	fba3 1302 	umull	r1, r3, r3, r2
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	2164      	movs	r1, #100	; 0x64
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	3332      	adds	r3, #50	; 0x32
 8005352:	4a2a      	ldr	r2, [pc, #168]	; (80053fc <UART_SetConfig+0x38c>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535e:	441e      	add	r6, r3
 8005360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005362:	4618      	mov	r0, r3
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	1894      	adds	r4, r2, r2
 800536e:	603c      	str	r4, [r7, #0]
 8005370:	415b      	adcs	r3, r3
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005378:	1812      	adds	r2, r2, r0
 800537a:	eb41 0303 	adc.w	r3, r1, r3
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	f04f 0500 	mov.w	r5, #0
 8005386:	00dd      	lsls	r5, r3, #3
 8005388:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800538c:	00d4      	lsls	r4, r2, #3
 800538e:	4622      	mov	r2, r4
 8005390:	462b      	mov	r3, r5
 8005392:	eb12 0a00 	adds.w	sl, r2, r0
 8005396:	eb43 0b01 	adc.w	fp, r3, r1
 800539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b2:	0082      	lsls	r2, r0, #2
 80053b4:	4650      	mov	r0, sl
 80053b6:	4659      	mov	r1, fp
 80053b8:	f7fa ff6a 	bl	8000290 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <UART_SetConfig+0x38c>)
 80053c2:	fba3 1302 	umull	r1, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2164      	movs	r1, #100	; 0x64
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	3332      	adds	r3, #50	; 0x32
 80053d4:	4a09      	ldr	r2, [pc, #36]	; (80053fc <UART_SetConfig+0x38c>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4432      	add	r2, r6
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	bf00      	nop
 80053ea:	377c      	adds	r7, #124	; 0x7c
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	40011000 	.word	0x40011000
 80053f8:	40011400 	.word	0x40011400
 80053fc:	51eb851f 	.word	0x51eb851f

08005400 <__errno>:
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <__errno+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	2000001c 	.word	0x2000001c

0800540c <__libc_init_array>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4d0d      	ldr	r5, [pc, #52]	; (8005444 <__libc_init_array+0x38>)
 8005410:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <__libc_init_array+0x3c>)
 8005412:	1b64      	subs	r4, r4, r5
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	2600      	movs	r6, #0
 8005418:	42a6      	cmp	r6, r4
 800541a:	d109      	bne.n	8005430 <__libc_init_array+0x24>
 800541c:	4d0b      	ldr	r5, [pc, #44]	; (800544c <__libc_init_array+0x40>)
 800541e:	4c0c      	ldr	r4, [pc, #48]	; (8005450 <__libc_init_array+0x44>)
 8005420:	f000 fc4e 	bl	8005cc0 <_init>
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	2600      	movs	r6, #0
 800542a:	42a6      	cmp	r6, r4
 800542c:	d105      	bne.n	800543a <__libc_init_array+0x2e>
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	f855 3b04 	ldr.w	r3, [r5], #4
 8005434:	4798      	blx	r3
 8005436:	3601      	adds	r6, #1
 8005438:	e7ee      	b.n	8005418 <__libc_init_array+0xc>
 800543a:	f855 3b04 	ldr.w	r3, [r5], #4
 800543e:	4798      	blx	r3
 8005440:	3601      	adds	r6, #1
 8005442:	e7f2      	b.n	800542a <__libc_init_array+0x1e>
 8005444:	080062bc 	.word	0x080062bc
 8005448:	080062bc 	.word	0x080062bc
 800544c:	080062bc 	.word	0x080062bc
 8005450:	080062c0 	.word	0x080062c0

08005454 <memset>:
 8005454:	4402      	add	r2, r0
 8005456:	4603      	mov	r3, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	d100      	bne.n	800545e <memset+0xa>
 800545c:	4770      	bx	lr
 800545e:	f803 1b01 	strb.w	r1, [r3], #1
 8005462:	e7f9      	b.n	8005458 <memset+0x4>

08005464 <siprintf>:
 8005464:	b40e      	push	{r1, r2, r3}
 8005466:	b500      	push	{lr}
 8005468:	b09c      	sub	sp, #112	; 0x70
 800546a:	ab1d      	add	r3, sp, #116	; 0x74
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	9006      	str	r0, [sp, #24]
 8005470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005474:	4809      	ldr	r0, [pc, #36]	; (800549c <siprintf+0x38>)
 8005476:	9107      	str	r1, [sp, #28]
 8005478:	9104      	str	r1, [sp, #16]
 800547a:	4909      	ldr	r1, [pc, #36]	; (80054a0 <siprintf+0x3c>)
 800547c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005480:	9105      	str	r1, [sp, #20]
 8005482:	6800      	ldr	r0, [r0, #0]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	a902      	add	r1, sp, #8
 8005488:	f000 f868 	bl	800555c <_svfiprintf_r>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	b01c      	add	sp, #112	; 0x70
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
 8005498:	b003      	add	sp, #12
 800549a:	4770      	bx	lr
 800549c:	2000001c 	.word	0x2000001c
 80054a0:	ffff0208 	.word	0xffff0208

080054a4 <__ssputs_r>:
 80054a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a8:	688e      	ldr	r6, [r1, #8]
 80054aa:	429e      	cmp	r6, r3
 80054ac:	4682      	mov	sl, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4690      	mov	r8, r2
 80054b2:	461f      	mov	r7, r3
 80054b4:	d838      	bhi.n	8005528 <__ssputs_r+0x84>
 80054b6:	898a      	ldrh	r2, [r1, #12]
 80054b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054bc:	d032      	beq.n	8005524 <__ssputs_r+0x80>
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	6909      	ldr	r1, [r1, #16]
 80054c2:	eba5 0901 	sub.w	r9, r5, r1
 80054c6:	6965      	ldr	r5, [r4, #20]
 80054c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d0:	3301      	adds	r3, #1
 80054d2:	444b      	add	r3, r9
 80054d4:	106d      	asrs	r5, r5, #1
 80054d6:	429d      	cmp	r5, r3
 80054d8:	bf38      	it	cc
 80054da:	461d      	movcc	r5, r3
 80054dc:	0553      	lsls	r3, r2, #21
 80054de:	d531      	bpl.n	8005544 <__ssputs_r+0xa0>
 80054e0:	4629      	mov	r1, r5
 80054e2:	f000 fb47 	bl	8005b74 <_malloc_r>
 80054e6:	4606      	mov	r6, r0
 80054e8:	b950      	cbnz	r0, 8005500 <__ssputs_r+0x5c>
 80054ea:	230c      	movs	r3, #12
 80054ec:	f8ca 3000 	str.w	r3, [sl]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	6921      	ldr	r1, [r4, #16]
 8005502:	464a      	mov	r2, r9
 8005504:	f000 fabe 	bl	8005a84 <memcpy>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	6126      	str	r6, [r4, #16]
 8005516:	6165      	str	r5, [r4, #20]
 8005518:	444e      	add	r6, r9
 800551a:	eba5 0509 	sub.w	r5, r5, r9
 800551e:	6026      	str	r6, [r4, #0]
 8005520:	60a5      	str	r5, [r4, #8]
 8005522:	463e      	mov	r6, r7
 8005524:	42be      	cmp	r6, r7
 8005526:	d900      	bls.n	800552a <__ssputs_r+0x86>
 8005528:	463e      	mov	r6, r7
 800552a:	4632      	mov	r2, r6
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	4641      	mov	r1, r8
 8005530:	f000 fab6 	bl	8005aa0 <memmove>
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	1b9b      	subs	r3, r3, r6
 800553a:	4432      	add	r2, r6
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	e7db      	b.n	80054fc <__ssputs_r+0x58>
 8005544:	462a      	mov	r2, r5
 8005546:	f000 fb6f 	bl	8005c28 <_realloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e1      	bne.n	8005514 <__ssputs_r+0x70>
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	4650      	mov	r0, sl
 8005554:	f000 fabe 	bl	8005ad4 <_free_r>
 8005558:	e7c7      	b.n	80054ea <__ssputs_r+0x46>
	...

0800555c <_svfiprintf_r>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	4698      	mov	r8, r3
 8005562:	898b      	ldrh	r3, [r1, #12]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	b09d      	sub	sp, #116	; 0x74
 8005568:	4607      	mov	r7, r0
 800556a:	460d      	mov	r5, r1
 800556c:	4614      	mov	r4, r2
 800556e:	d50e      	bpl.n	800558e <_svfiprintf_r+0x32>
 8005570:	690b      	ldr	r3, [r1, #16]
 8005572:	b963      	cbnz	r3, 800558e <_svfiprintf_r+0x32>
 8005574:	2140      	movs	r1, #64	; 0x40
 8005576:	f000 fafd 	bl	8005b74 <_malloc_r>
 800557a:	6028      	str	r0, [r5, #0]
 800557c:	6128      	str	r0, [r5, #16]
 800557e:	b920      	cbnz	r0, 800558a <_svfiprintf_r+0x2e>
 8005580:	230c      	movs	r3, #12
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e0d1      	b.n	800572e <_svfiprintf_r+0x1d2>
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	616b      	str	r3, [r5, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	2320      	movs	r3, #32
 8005594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005598:	f8cd 800c 	str.w	r8, [sp, #12]
 800559c:	2330      	movs	r3, #48	; 0x30
 800559e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005748 <_svfiprintf_r+0x1ec>
 80055a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a6:	f04f 0901 	mov.w	r9, #1
 80055aa:	4623      	mov	r3, r4
 80055ac:	469a      	mov	sl, r3
 80055ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b2:	b10a      	cbz	r2, 80055b8 <_svfiprintf_r+0x5c>
 80055b4:	2a25      	cmp	r2, #37	; 0x25
 80055b6:	d1f9      	bne.n	80055ac <_svfiprintf_r+0x50>
 80055b8:	ebba 0b04 	subs.w	fp, sl, r4
 80055bc:	d00b      	beq.n	80055d6 <_svfiprintf_r+0x7a>
 80055be:	465b      	mov	r3, fp
 80055c0:	4622      	mov	r2, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ff6d 	bl	80054a4 <__ssputs_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	f000 80aa 	beq.w	8005724 <_svfiprintf_r+0x1c8>
 80055d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d2:	445a      	add	r2, fp
 80055d4:	9209      	str	r2, [sp, #36]	; 0x24
 80055d6:	f89a 3000 	ldrb.w	r3, [sl]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a2 	beq.w	8005724 <_svfiprintf_r+0x1c8>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ea:	f10a 0a01 	add.w	sl, sl, #1
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f6:	931a      	str	r3, [sp, #104]	; 0x68
 80055f8:	4654      	mov	r4, sl
 80055fa:	2205      	movs	r2, #5
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	4851      	ldr	r0, [pc, #324]	; (8005748 <_svfiprintf_r+0x1ec>)
 8005602:	f7fa fdf5 	bl	80001f0 <memchr>
 8005606:	9a04      	ldr	r2, [sp, #16]
 8005608:	b9d8      	cbnz	r0, 8005642 <_svfiprintf_r+0xe6>
 800560a:	06d0      	lsls	r0, r2, #27
 800560c:	bf44      	itt	mi
 800560e:	2320      	movmi	r3, #32
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005614:	0711      	lsls	r1, r2, #28
 8005616:	bf44      	itt	mi
 8005618:	232b      	movmi	r3, #43	; 0x2b
 800561a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800561e:	f89a 3000 	ldrb.w	r3, [sl]
 8005622:	2b2a      	cmp	r3, #42	; 0x2a
 8005624:	d015      	beq.n	8005652 <_svfiprintf_r+0xf6>
 8005626:	9a07      	ldr	r2, [sp, #28]
 8005628:	4654      	mov	r4, sl
 800562a:	2000      	movs	r0, #0
 800562c:	f04f 0c0a 	mov.w	ip, #10
 8005630:	4621      	mov	r1, r4
 8005632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005636:	3b30      	subs	r3, #48	; 0x30
 8005638:	2b09      	cmp	r3, #9
 800563a:	d94e      	bls.n	80056da <_svfiprintf_r+0x17e>
 800563c:	b1b0      	cbz	r0, 800566c <_svfiprintf_r+0x110>
 800563e:	9207      	str	r2, [sp, #28]
 8005640:	e014      	b.n	800566c <_svfiprintf_r+0x110>
 8005642:	eba0 0308 	sub.w	r3, r0, r8
 8005646:	fa09 f303 	lsl.w	r3, r9, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	46a2      	mov	sl, r4
 8005650:	e7d2      	b.n	80055f8 <_svfiprintf_r+0x9c>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9103      	str	r1, [sp, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbb      	ittet	lt
 800565e:	425b      	neglt	r3, r3
 8005660:	f042 0202 	orrlt.w	r2, r2, #2
 8005664:	9307      	strge	r3, [sp, #28]
 8005666:	9307      	strlt	r3, [sp, #28]
 8005668:	bfb8      	it	lt
 800566a:	9204      	strlt	r2, [sp, #16]
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	2b2e      	cmp	r3, #46	; 0x2e
 8005670:	d10c      	bne.n	800568c <_svfiprintf_r+0x130>
 8005672:	7863      	ldrb	r3, [r4, #1]
 8005674:	2b2a      	cmp	r3, #42	; 0x2a
 8005676:	d135      	bne.n	80056e4 <_svfiprintf_r+0x188>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9203      	str	r2, [sp, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	bfb8      	it	lt
 8005684:	f04f 33ff 	movlt.w	r3, #4294967295
 8005688:	3402      	adds	r4, #2
 800568a:	9305      	str	r3, [sp, #20]
 800568c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005758 <_svfiprintf_r+0x1fc>
 8005690:	7821      	ldrb	r1, [r4, #0]
 8005692:	2203      	movs	r2, #3
 8005694:	4650      	mov	r0, sl
 8005696:	f7fa fdab 	bl	80001f0 <memchr>
 800569a:	b140      	cbz	r0, 80056ae <_svfiprintf_r+0x152>
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	eba0 000a 	sub.w	r0, r0, sl
 80056a2:	fa03 f000 	lsl.w	r0, r3, r0
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	4303      	orrs	r3, r0
 80056aa:	3401      	adds	r4, #1
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4826      	ldr	r0, [pc, #152]	; (800574c <_svfiprintf_r+0x1f0>)
 80056b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056b8:	2206      	movs	r2, #6
 80056ba:	f7fa fd99 	bl	80001f0 <memchr>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d038      	beq.n	8005734 <_svfiprintf_r+0x1d8>
 80056c2:	4b23      	ldr	r3, [pc, #140]	; (8005750 <_svfiprintf_r+0x1f4>)
 80056c4:	bb1b      	cbnz	r3, 800570e <_svfiprintf_r+0x1b2>
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	3307      	adds	r3, #7
 80056ca:	f023 0307 	bic.w	r3, r3, #7
 80056ce:	3308      	adds	r3, #8
 80056d0:	9303      	str	r3, [sp, #12]
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	4433      	add	r3, r6
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	e767      	b.n	80055aa <_svfiprintf_r+0x4e>
 80056da:	fb0c 3202 	mla	r2, ip, r2, r3
 80056de:	460c      	mov	r4, r1
 80056e0:	2001      	movs	r0, #1
 80056e2:	e7a5      	b.n	8005630 <_svfiprintf_r+0xd4>
 80056e4:	2300      	movs	r3, #0
 80056e6:	3401      	adds	r4, #1
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	4619      	mov	r1, r3
 80056ec:	f04f 0c0a 	mov.w	ip, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f6:	3a30      	subs	r2, #48	; 0x30
 80056f8:	2a09      	cmp	r2, #9
 80056fa:	d903      	bls.n	8005704 <_svfiprintf_r+0x1a8>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0c5      	beq.n	800568c <_svfiprintf_r+0x130>
 8005700:	9105      	str	r1, [sp, #20]
 8005702:	e7c3      	b.n	800568c <_svfiprintf_r+0x130>
 8005704:	fb0c 2101 	mla	r1, ip, r1, r2
 8005708:	4604      	mov	r4, r0
 800570a:	2301      	movs	r3, #1
 800570c:	e7f0      	b.n	80056f0 <_svfiprintf_r+0x194>
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <_svfiprintf_r+0x1f8>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4638      	mov	r0, r7
 800571a:	f3af 8000 	nop.w
 800571e:	1c42      	adds	r2, r0, #1
 8005720:	4606      	mov	r6, r0
 8005722:	d1d6      	bne.n	80056d2 <_svfiprintf_r+0x176>
 8005724:	89ab      	ldrh	r3, [r5, #12]
 8005726:	065b      	lsls	r3, r3, #25
 8005728:	f53f af2c 	bmi.w	8005584 <_svfiprintf_r+0x28>
 800572c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572e:	b01d      	add	sp, #116	; 0x74
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	ab03      	add	r3, sp, #12
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	462a      	mov	r2, r5
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <_svfiprintf_r+0x1f8>)
 800573c:	a904      	add	r1, sp, #16
 800573e:	4638      	mov	r0, r7
 8005740:	f000 f87a 	bl	8005838 <_printf_i>
 8005744:	e7eb      	b.n	800571e <_svfiprintf_r+0x1c2>
 8005746:	bf00      	nop
 8005748:	08006280 	.word	0x08006280
 800574c:	0800628a 	.word	0x0800628a
 8005750:	00000000 	.word	0x00000000
 8005754:	080054a5 	.word	0x080054a5
 8005758:	08006286 	.word	0x08006286

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4699      	mov	r9, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a8:	1e13      	subs	r3, r2, #0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	68e5      	ldr	r5, [r4, #12]
 80057c6:	6832      	ldr	r2, [r6, #0]
 80057c8:	f003 0306 	and.w	r3, r3, #6
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	bf08      	it	eq
 80057d0:	1aad      	subeq	r5, r5, r2
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	; 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	4691      	mov	r9, r2
 8005840:	7e27      	ldrb	r7, [r4, #24]
 8005842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005844:	2f78      	cmp	r7, #120	; 0x78
 8005846:	4680      	mov	r8, r0
 8005848:	469a      	mov	sl, r3
 800584a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d8 	beq.w	8005a0a <_printf_i+0x1d2>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80a3 	beq.w	80059a6 <_printf_i+0x16e>
 8005860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a001      	add	r0, pc, #4	; (adr r0, 8005878 <_printf_i+0x40>)
 8005874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059f1 	.word	0x080059f1
 80058a8:	08005915 	.word	0x08005915
 80058ac:	080059d3 	.word	0x080059d3
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a13 	.word	0x08005a13
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059db 	.word	0x080059db
 80058d0:	680b      	ldr	r3, [r1, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	600a      	str	r2, [r1, #0]
 80058d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a3      	b.n	8005a2c <_printf_i+0x1f4>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	6808      	ldr	r0, [r1, #0]
 80058e8:	062e      	lsls	r6, r5, #24
 80058ea:	f100 0304 	add.w	r3, r0, #4
 80058ee:	d50a      	bpl.n	8005906 <_printf_i+0xce>
 80058f0:	6805      	ldr	r5, [r0, #0]
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xc8>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	426d      	negs	r5, r5
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	485e      	ldr	r0, [pc, #376]	; (8005a7c <_printf_i+0x244>)
 8005902:	230a      	movs	r3, #10
 8005904:	e019      	b.n	800593a <_printf_i+0x102>
 8005906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800590a:	6805      	ldr	r5, [r0, #0]
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	b22d      	sxthne	r5, r5
 8005912:	e7ef      	b.n	80058f4 <_printf_i+0xbc>
 8005914:	680b      	ldr	r3, [r1, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	1d18      	adds	r0, r3, #4
 800591a:	6008      	str	r0, [r1, #0]
 800591c:	0628      	lsls	r0, r5, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xec>
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xf2>
 8005924:	0669      	lsls	r1, r5, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe8>
 8005928:	881d      	ldrh	r5, [r3, #0]
 800592a:	4854      	ldr	r0, [pc, #336]	; (8005a7c <_printf_i+0x244>)
 800592c:	2f6f      	cmp	r7, #111	; 0x6f
 800592e:	bf0c      	ite	eq
 8005930:	2308      	moveq	r3, #8
 8005932:	230a      	movne	r3, #10
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6866      	ldr	r6, [r4, #4]
 800593c:	60a6      	str	r6, [r4, #8]
 800593e:	2e00      	cmp	r6, #0
 8005940:	bfa2      	ittt	ge
 8005942:	6821      	ldrge	r1, [r4, #0]
 8005944:	f021 0104 	bicge.w	r1, r1, #4
 8005948:	6021      	strge	r1, [r4, #0]
 800594a:	b90d      	cbnz	r5, 8005950 <_printf_i+0x118>
 800594c:	2e00      	cmp	r6, #0
 800594e:	d04d      	beq.n	80059ec <_printf_i+0x1b4>
 8005950:	4616      	mov	r6, r2
 8005952:	fbb5 f1f3 	udiv	r1, r5, r3
 8005956:	fb03 5711 	mls	r7, r3, r1, r5
 800595a:	5dc7      	ldrb	r7, [r0, r7]
 800595c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005960:	462f      	mov	r7, r5
 8005962:	42bb      	cmp	r3, r7
 8005964:	460d      	mov	r5, r1
 8005966:	d9f4      	bls.n	8005952 <_printf_i+0x11a>
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10b      	bne.n	8005984 <_printf_i+0x14c>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	07df      	lsls	r7, r3, #31
 8005970:	d508      	bpl.n	8005984 <_printf_i+0x14c>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4299      	cmp	r1, r3
 8005978:	bfde      	ittt	le
 800597a:	2330      	movle	r3, #48	; 0x30
 800597c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005984:	1b92      	subs	r2, r2, r6
 8005986:	6122      	str	r2, [r4, #16]
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	464b      	mov	r3, r9
 800598e:	aa03      	add	r2, sp, #12
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fee2 	bl	800575c <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	d14c      	bne.n	8005a36 <_printf_i+0x1fe>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	4835      	ldr	r0, [pc, #212]	; (8005a7c <_printf_i+0x244>)
 80059a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	061f      	lsls	r7, r3, #24
 80059b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059b6:	600e      	str	r6, [r1, #0]
 80059b8:	d514      	bpl.n	80059e4 <_printf_i+0x1ac>
 80059ba:	07d9      	lsls	r1, r3, #31
 80059bc:	bf44      	itt	mi
 80059be:	f043 0320 	orrmi.w	r3, r3, #32
 80059c2:	6023      	strmi	r3, [r4, #0]
 80059c4:	b91d      	cbnz	r5, 80059ce <_printf_i+0x196>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f023 0320 	bic.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	2310      	movs	r3, #16
 80059d0:	e7b0      	b.n	8005934 <_printf_i+0xfc>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	2378      	movs	r3, #120	; 0x78
 80059dc:	4828      	ldr	r0, [pc, #160]	; (8005a80 <_printf_i+0x248>)
 80059de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e2:	e7e3      	b.n	80059ac <_printf_i+0x174>
 80059e4:	065e      	lsls	r6, r3, #25
 80059e6:	bf48      	it	mi
 80059e8:	b2ad      	uxthmi	r5, r5
 80059ea:	e7e6      	b.n	80059ba <_printf_i+0x182>
 80059ec:	4616      	mov	r6, r2
 80059ee:	e7bb      	b.n	8005968 <_printf_i+0x130>
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	6826      	ldr	r6, [r4, #0]
 80059f4:	6960      	ldr	r0, [r4, #20]
 80059f6:	1d1d      	adds	r5, r3, #4
 80059f8:	600d      	str	r5, [r1, #0]
 80059fa:	0635      	lsls	r5, r6, #24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	d501      	bpl.n	8005a04 <_printf_i+0x1cc>
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <_printf_i+0x1d2>
 8005a04:	0671      	lsls	r1, r6, #25
 8005a06:	d5fb      	bpl.n	8005a00 <_printf_i+0x1c8>
 8005a08:	8018      	strh	r0, [r3, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	4616      	mov	r6, r2
 8005a10:	e7ba      	b.n	8005988 <_printf_i+0x150>
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	600a      	str	r2, [r1, #0]
 8005a18:	681e      	ldr	r6, [r3, #0]
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7fa fbe6 	bl	80001f0 <memchr>
 8005a24:	b108      	cbz	r0, 8005a2a <_printf_i+0x1f2>
 8005a26:	1b80      	subs	r0, r0, r6
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	e7a8      	b.n	8005988 <_printf_i+0x150>
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0ab      	beq.n	800599c <_printf_i+0x164>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	d413      	bmi.n	8005a72 <_printf_i+0x23a>
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	bfb8      	it	lt
 8005a52:	4618      	movlt	r0, r3
 8005a54:	e7a4      	b.n	80059a0 <_printf_i+0x168>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	47d0      	blx	sl
 8005a60:	3001      	adds	r0, #1
 8005a62:	d09b      	beq.n	800599c <_printf_i+0x164>
 8005a64:	3501      	adds	r5, #1
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	9903      	ldr	r1, [sp, #12]
 8005a6a:	1a5b      	subs	r3, r3, r1
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dcf2      	bgt.n	8005a56 <_printf_i+0x21e>
 8005a70:	e7eb      	b.n	8005a4a <_printf_i+0x212>
 8005a72:	2500      	movs	r5, #0
 8005a74:	f104 0619 	add.w	r6, r4, #25
 8005a78:	e7f5      	b.n	8005a66 <_printf_i+0x22e>
 8005a7a:	bf00      	nop
 8005a7c:	08006291 	.word	0x08006291
 8005a80:	080062a2 	.word	0x080062a2

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <_free_r>:
 8005ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d048      	beq.n	8005b6c <_free_r+0x98>
 8005ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ade:	9001      	str	r0, [sp, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ae6:	bfb8      	it	lt
 8005ae8:	18e4      	addlt	r4, r4, r3
 8005aea:	f000 f8d3 	bl	8005c94 <__malloc_lock>
 8005aee:	4a20      	ldr	r2, [pc, #128]	; (8005b70 <_free_r+0x9c>)
 8005af0:	9801      	ldr	r0, [sp, #4]
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	4615      	mov	r5, r2
 8005af6:	b933      	cbnz	r3, 8005b06 <_free_r+0x32>
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	6014      	str	r4, [r2, #0]
 8005afc:	b003      	add	sp, #12
 8005afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b02:	f000 b8cd 	b.w	8005ca0 <__malloc_unlock>
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	d90b      	bls.n	8005b22 <_free_r+0x4e>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	1862      	adds	r2, r4, r1
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	bf04      	itt	eq
 8005b12:	681a      	ldreq	r2, [r3, #0]
 8005b14:	685b      	ldreq	r3, [r3, #4]
 8005b16:	6063      	str	r3, [r4, #4]
 8005b18:	bf04      	itt	eq
 8005b1a:	1852      	addeq	r2, r2, r1
 8005b1c:	6022      	streq	r2, [r4, #0]
 8005b1e:	602c      	str	r4, [r5, #0]
 8005b20:	e7ec      	b.n	8005afc <_free_r+0x28>
 8005b22:	461a      	mov	r2, r3
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b10b      	cbz	r3, 8005b2c <_free_r+0x58>
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d9fa      	bls.n	8005b22 <_free_r+0x4e>
 8005b2c:	6811      	ldr	r1, [r2, #0]
 8005b2e:	1855      	adds	r5, r2, r1
 8005b30:	42a5      	cmp	r5, r4
 8005b32:	d10b      	bne.n	8005b4c <_free_r+0x78>
 8005b34:	6824      	ldr	r4, [r4, #0]
 8005b36:	4421      	add	r1, r4
 8005b38:	1854      	adds	r4, r2, r1
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	d1dd      	bne.n	8005afc <_free_r+0x28>
 8005b40:	681c      	ldr	r4, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	6053      	str	r3, [r2, #4]
 8005b46:	4421      	add	r1, r4
 8005b48:	6011      	str	r1, [r2, #0]
 8005b4a:	e7d7      	b.n	8005afc <_free_r+0x28>
 8005b4c:	d902      	bls.n	8005b54 <_free_r+0x80>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	6003      	str	r3, [r0, #0]
 8005b52:	e7d3      	b.n	8005afc <_free_r+0x28>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf04      	itt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	6063      	str	r3, [r4, #4]
 8005b62:	bf04      	itt	eq
 8005b64:	1949      	addeq	r1, r1, r5
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	6054      	str	r4, [r2, #4]
 8005b6a:	e7c7      	b.n	8005afc <_free_r+0x28>
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bd30      	pop	{r4, r5, pc}
 8005b70:	200000ec 	.word	0x200000ec

08005b74 <_malloc_r>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	1ccd      	adds	r5, r1, #3
 8005b78:	f025 0503 	bic.w	r5, r5, #3
 8005b7c:	3508      	adds	r5, #8
 8005b7e:	2d0c      	cmp	r5, #12
 8005b80:	bf38      	it	cc
 8005b82:	250c      	movcc	r5, #12
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	4606      	mov	r6, r0
 8005b88:	db01      	blt.n	8005b8e <_malloc_r+0x1a>
 8005b8a:	42a9      	cmp	r1, r5
 8005b8c:	d903      	bls.n	8005b96 <_malloc_r+0x22>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	2000      	movs	r0, #0
 8005b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b96:	f000 f87d 	bl	8005c94 <__malloc_lock>
 8005b9a:	4921      	ldr	r1, [pc, #132]	; (8005c20 <_malloc_r+0xac>)
 8005b9c:	680a      	ldr	r2, [r1, #0]
 8005b9e:	4614      	mov	r4, r2
 8005ba0:	b99c      	cbnz	r4, 8005bca <_malloc_r+0x56>
 8005ba2:	4f20      	ldr	r7, [pc, #128]	; (8005c24 <_malloc_r+0xb0>)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	b923      	cbnz	r3, 8005bb2 <_malloc_r+0x3e>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 f862 	bl	8005c74 <_sbrk_r>
 8005bb0:	6038      	str	r0, [r7, #0]
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f85d 	bl	8005c74 <_sbrk_r>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	d123      	bne.n	8005c06 <_malloc_r+0x92>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 f86c 	bl	8005ca0 <__malloc_unlock>
 8005bc8:	e7e3      	b.n	8005b92 <_malloc_r+0x1e>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	1b5b      	subs	r3, r3, r5
 8005bce:	d417      	bmi.n	8005c00 <_malloc_r+0x8c>
 8005bd0:	2b0b      	cmp	r3, #11
 8005bd2:	d903      	bls.n	8005bdc <_malloc_r+0x68>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	441c      	add	r4, r3
 8005bd8:	6025      	str	r5, [r4, #0]
 8005bda:	e004      	b.n	8005be6 <_malloc_r+0x72>
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	42a2      	cmp	r2, r4
 8005be0:	bf0c      	ite	eq
 8005be2:	600b      	streq	r3, [r1, #0]
 8005be4:	6053      	strne	r3, [r2, #4]
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f85a 	bl	8005ca0 <__malloc_unlock>
 8005bec:	f104 000b 	add.w	r0, r4, #11
 8005bf0:	1d23      	adds	r3, r4, #4
 8005bf2:	f020 0007 	bic.w	r0, r0, #7
 8005bf6:	1ac2      	subs	r2, r0, r3
 8005bf8:	d0cc      	beq.n	8005b94 <_malloc_r+0x20>
 8005bfa:	1a1b      	subs	r3, r3, r0
 8005bfc:	50a3      	str	r3, [r4, r2]
 8005bfe:	e7c9      	b.n	8005b94 <_malloc_r+0x20>
 8005c00:	4622      	mov	r2, r4
 8005c02:	6864      	ldr	r4, [r4, #4]
 8005c04:	e7cc      	b.n	8005ba0 <_malloc_r+0x2c>
 8005c06:	1cc4      	adds	r4, r0, #3
 8005c08:	f024 0403 	bic.w	r4, r4, #3
 8005c0c:	42a0      	cmp	r0, r4
 8005c0e:	d0e3      	beq.n	8005bd8 <_malloc_r+0x64>
 8005c10:	1a21      	subs	r1, r4, r0
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 f82e 	bl	8005c74 <_sbrk_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d1dd      	bne.n	8005bd8 <_malloc_r+0x64>
 8005c1c:	e7cf      	b.n	8005bbe <_malloc_r+0x4a>
 8005c1e:	bf00      	nop
 8005c20:	200000ec 	.word	0x200000ec
 8005c24:	200000f0 	.word	0x200000f0

08005c28 <_realloc_r>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	460e      	mov	r6, r1
 8005c30:	b921      	cbnz	r1, 8005c3c <_realloc_r+0x14>
 8005c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c36:	4611      	mov	r1, r2
 8005c38:	f7ff bf9c 	b.w	8005b74 <_malloc_r>
 8005c3c:	b922      	cbnz	r2, 8005c48 <_realloc_r+0x20>
 8005c3e:	f7ff ff49 	bl	8005ad4 <_free_r>
 8005c42:	4625      	mov	r5, r4
 8005c44:	4628      	mov	r0, r5
 8005c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c48:	f000 f830 	bl	8005cac <_malloc_usable_size_r>
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d20f      	bcs.n	8005c70 <_realloc_r+0x48>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7ff ff8e 	bl	8005b74 <_malloc_r>
 8005c58:	4605      	mov	r5, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d0f2      	beq.n	8005c44 <_realloc_r+0x1c>
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4622      	mov	r2, r4
 8005c62:	f7ff ff0f 	bl	8005a84 <memcpy>
 8005c66:	4631      	mov	r1, r6
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ff33 	bl	8005ad4 <_free_r>
 8005c6e:	e7e9      	b.n	8005c44 <_realloc_r+0x1c>
 8005c70:	4635      	mov	r5, r6
 8005c72:	e7e7      	b.n	8005c44 <_realloc_r+0x1c>

08005c74 <_sbrk_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d06      	ldr	r5, [pc, #24]	; (8005c90 <_sbrk_r+0x1c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fc fa9a 	bl	80021b8 <_sbrk>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_sbrk_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_sbrk_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200002d0 	.word	0x200002d0

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__malloc_lock+0x8>)
 8005c96:	f000 b811 	b.w	8005cbc <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200002d8 	.word	0x200002d8

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f000 b80c 	b.w	8005cbe <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200002d8 	.word	0x200002d8

08005cac <_malloc_usable_size_r>:
 8005cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb0:	1f18      	subs	r0, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfbc      	itt	lt
 8005cb6:	580b      	ldrlt	r3, [r1, r0]
 8005cb8:	18c0      	addlt	r0, r0, r3
 8005cba:	4770      	bx	lr

08005cbc <__retarget_lock_acquire_recursive>:
 8005cbc:	4770      	bx	lr

08005cbe <__retarget_lock_release_recursive>:
 8005cbe:	4770      	bx	lr

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
